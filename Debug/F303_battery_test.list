
F303_battery_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f498  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc4  0800f638  0800f638  0001f638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105fc  080105fc  000301f4  2**0
                  CONTENTS
  4 .ARM          00000000  080105fc  080105fc  000301f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080105fc  080105fc  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105fc  080105fc  000205fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010600  08010600  00020600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08010604  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
 10 .bss          00002d7c  200001f4  200001f4  000301f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002f70  20002f70  000301f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017392  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003451  00000000  00000000  000475b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  0004aa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001160  00000000  00000000  0004bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023535  00000000  00000000  0004ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a728  00000000  00000000  0007035d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7c78  00000000  00000000  0008aa85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001526fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ebc  00000000  00000000  00152750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f620 	.word	0x0800f620

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800f620 	.word	0x0800f620

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <GMG12864_Send_command>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void GMG12864_Send_command(uint8_t Command) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Command - 8 бит данных.
	DC_set();
 8000c02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c0a:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, &Command, 1, HAL_MAX_DELAY);
 8000c0c:	1df9      	adds	r1, r7, #7
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	2201      	movs	r2, #1
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <GMG12864_Send_command+0x40>)
 8000c16:	f006 fd80 	bl	800771a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000c1a:	bf00      	nop
 8000c1c:	4806      	ldr	r0, [pc, #24]	; (8000c38 <GMG12864_Send_command+0x40>)
 8000c1e:	f007 f8fd 	bl	8007e1c <HAL_SPI_GetState>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d1f9      	bne.n	8000c1c <GMG12864_Send_command+0x24>
	DC_reset();
 8000c28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	619a      	str	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000738 	.word	0x20000738

08000c3c <GMG12864_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных.
static void GMG12864_Send_data(uint8_t Dat) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &Dat, 1, HAL_MAX_DELAY);
 8000c46:	1df9      	adds	r1, r7, #7
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <GMG12864_Send_data+0x30>)
 8000c50:	f006 fd63 	bl	800771a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000c54:	bf00      	nop
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <GMG12864_Send_data+0x30>)
 8000c58:	f007 f8e0 	bl	8007e1c <HAL_SPI_GetState>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d1f9      	bne.n	8000c56 <GMG12864_Send_data+0x1a>
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000738 	.word	0x20000738

08000c70 <GMG12864_Init>:
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
}
/*------------------------Функция очистки буфера кадра-------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void GMG12864_Init(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	cs_set();
 8000c74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c7c:	619a      	str	r2, [r3, #24]
	RST_set();
 8000c7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c86:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f002 fe65 	bl	8003958 <HAL_Delay>
	RST_reset();
 8000c8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c92:	2202      	movs	r2, #2
 8000c94:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 8000c96:	200a      	movs	r0, #10
 8000c98:	f002 fe5e 	bl	8003958 <HAL_Delay>
	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея
	GMG12864_Send_command(0xA2);
 8000c9c:	20a2      	movs	r0, #162	; 0xa2
 8000c9e:	f7ff ffab 	bl	8000bf8 <GMG12864_Send_command>
	HAL_Delay(1);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f002 fe58 	bl	8003958 <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	GMG12864_Send_command(0xA0); //ADC selection(SEG0->SEG128)
 8000ca8:	20a0      	movs	r0, #160	; 0xa0
 8000caa:	f7ff ffa5 	bl	8000bf8 <GMG12864_Send_command>
	GMG12864_Send_command(0xC8); //SHL selection(COM0->COM64)
 8000cae:	20c8      	movs	r0, #200	; 0xc8
 8000cb0:	f7ff ffa2 	bl	8000bf8 <GMG12864_Send_command>
	HAL_Delay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f002 fe4f 	bl	8003958 <HAL_Delay>
	// делитель внутреннего резистора установлен на 7 (от 0..7)
	GMG12864_Send_command(0x20 | 0x7);    //Regulator Resistor Selection
 8000cba:	2027      	movs	r0, #39	; 0x27
 8000cbc:	f7ff ff9c 	bl	8000bf8 <GMG12864_Send_command>
	HAL_Delay(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f002 fe49 	bl	8003958 <HAL_Delay>
	// управление питанием, все внутренние блоки включены	(от 0..7)
	GMG12864_Send_command(0x28 | 0x7);
 8000cc6:	202f      	movs	r0, #47	; 0x2f
 8000cc8:	f7ff ff96 	bl	8000bf8 <GMG12864_Send_command>
	HAL_Delay(1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f002 fe43 	bl	8003958 <HAL_Delay>
	// войти в режим динамического контраста
	GMG12864_Send_command(0x81);    //Electronic Volume
 8000cd2:	2081      	movs	r0, #129	; 0x81
 8000cd4:	f7ff ff90 	bl	8000bf8 <GMG12864_Send_command>
	GMG12864_Send_command(18);	// Настройка контраста. Отрегулируйте на своем дисплее. У меня на 15-19 норм. Максимум 63.
 8000cd8:	2012      	movs	r0, #18
 8000cda:	f7ff ff8d 	bl	8000bf8 <GMG12864_Send_command>
	HAL_Delay(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f002 fe3a 	bl	8003958 <HAL_Delay>
	GMG12864_Send_command(0x40);
 8000ce4:	2040      	movs	r0, #64	; 0x40
 8000ce6:	f7ff ff87 	bl	8000bf8 <GMG12864_Send_command>
	HAL_Delay(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f002 fe34 	bl	8003958 <HAL_Delay>
	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	GMG12864_Send_command(0xAF);    		//Display on
 8000cf0:	20af      	movs	r0, #175	; 0xaf
 8000cf2:	f7ff ff81 	bl	8000bf8 <GMG12864_Send_command>
	// Инвертирование экрана
	GMG12864_Send_command(0xA6); //0xA6 - nomal, 0xA7 - revers
 8000cf6:	20a6      	movs	r0, #166	; 0xa6
 8000cf8:	f7ff ff7e 	bl	8000bf8 <GMG12864_Send_command>
	HAL_Delay(1);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f002 fe2b 	bl	8003958 <HAL_Delay>
	cs_reset();
 8000d02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d06:	2201      	movs	r2, #1
 8000d08:	619a      	str	r2, [r3, #24]
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <GMG12864_Draw_pixel>:
	}
}
/*------------------------Функция вывода изображения с указаием его размера-------------------------*/

/*------------------------Функция рисования пикселя-------------------------*/
void GMG12864_Draw_pixel(int16_t x, int16_t y, uint8_t color) {
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	80fb      	strh	r3, [r7, #6]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	80bb      	strh	r3, [r7, #4]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	70fb      	strb	r3, [r7, #3]

	if (x >= GMG12864_width || x < 0 || y >= GMG12864_height || y < 0) {
 8000d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d26:	4a30      	ldr	r2, [pc, #192]	; (8000de8 <GMG12864_Draw_pixel+0xd8>)
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	da55      	bge.n	8000dda <GMG12864_Draw_pixel+0xca>
 8000d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db51      	blt.n	8000dda <GMG12864_Draw_pixel+0xca>
 8000d36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d3a:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <GMG12864_Draw_pixel+0xdc>)
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	da4b      	bge.n	8000dda <GMG12864_Draw_pixel+0xca>
 8000d42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db47      	blt.n	8000dda <GMG12864_Draw_pixel+0xca>
		return;
	} else {
		uint16_t array_pos = x + ((y / 8) * GMG12864_width);
 8000d4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da00      	bge.n	8000d54 <GMG12864_Draw_pixel+0x44>
 8000d52:	3307      	adds	r3, #7
 8000d54:	10db      	asrs	r3, r3, #3
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <GMG12864_Draw_pixel+0xd8>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	fb12 f303 	smulbb	r3, r2, r3
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	4413      	add	r3, r2
 8000d6a:	81fb      	strh	r3, [r7, #14]

		if (color) {
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d018      	beq.n	8000da4 <GMG12864_Draw_pixel+0x94>
			Frame_buffer[array_pos] |= 1 << (y % 8);
 8000d72:	89fb      	ldrh	r3, [r7, #14]
 8000d74:	4a1e      	ldr	r2, [pc, #120]	; (8000df0 <GMG12864_Draw_pixel+0xe0>)
 8000d76:	5cd3      	ldrb	r3, [r2, r3]
 8000d78:	b25a      	sxtb	r2, r3
 8000d7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d7e:	4259      	negs	r1, r3
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	f001 0107 	and.w	r1, r1, #7
 8000d88:	bf58      	it	pl
 8000d8a:	424b      	negpl	r3, r1
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	4619      	mov	r1, r3
 8000d90:	2301      	movs	r3, #1
 8000d92:	408b      	lsls	r3, r1
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b25a      	sxtb	r2, r3
 8000d9a:	89fb      	ldrh	r3, [r7, #14]
 8000d9c:	b2d1      	uxtb	r1, r2
 8000d9e:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <GMG12864_Draw_pixel+0xe0>)
 8000da0:	54d1      	strb	r1, [r2, r3]
 8000da2:	e01b      	b.n	8000ddc <GMG12864_Draw_pixel+0xcc>
		} else {
			Frame_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 8000da4:	89fb      	ldrh	r3, [r7, #14]
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <GMG12864_Draw_pixel+0xe0>)
 8000da8:	5cd3      	ldrb	r3, [r2, r3]
 8000daa:	b25a      	sxtb	r2, r3
 8000dac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000db0:	4259      	negs	r1, r3
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	f001 0107 	and.w	r1, r1, #7
 8000dba:	bf58      	it	pl
 8000dbc:	424b      	negpl	r3, r1
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	4013      	ands	r3, r2
 8000dce:	b25a      	sxtb	r2, r3
 8000dd0:	89fb      	ldrh	r3, [r7, #14]
 8000dd2:	b2d1      	uxtb	r1, r2
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <GMG12864_Draw_pixel+0xe0>)
 8000dd6:	54d1      	strb	r1, [r2, r3]
 8000dd8:	e000      	b.n	8000ddc <GMG12864_Draw_pixel+0xcc>
		return;
 8000dda:	bf00      	nop
		}
	}

}
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000001 	.word	0x20000001
 8000df0:	20000290 	.word	0x20000290

08000df4 <GMG12864_Update>:
/*------------------------Функция рисования пикселя-------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void GMG12864_Update(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
	cs_set();
 8000dfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e02:	619a      	str	r2, [r3, #24]
	for (uint8_t y = 0; y < 8; y++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	e027      	b.n	8000e5a <GMG12864_Update+0x66>
		ST7565_SetX(0);
 8000e0a:	2010      	movs	r0, #16
 8000e0c:	f7ff fef4 	bl	8000bf8 <GMG12864_Send_command>
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff fef1 	bl	8000bf8 <GMG12864_Send_command>
		ST7565_SetY((int16_t )y);
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fee5 	bl	8000bf8 <GMG12864_Send_command>
		for (uint8_t x = 0; x < 128; x++) {
 8000e2e:	2300      	movs	r3, #0
 8000e30:	71bb      	strb	r3, [r7, #6]
 8000e32:	e00b      	b.n	8000e4c <GMG12864_Update+0x58>
			GMG12864_Send_data(Frame_buffer[x + 128 * y]);
 8000e34:	79ba      	ldrb	r2, [r7, #6]
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	01db      	lsls	r3, r3, #7
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <GMG12864_Update+0x7c>)
 8000e3e:	5cd3      	ldrb	r3, [r2, r3]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fefb 	bl	8000c3c <GMG12864_Send_data>
		for (uint8_t x = 0; x < 128; x++) {
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	71bb      	strb	r3, [r7, #6]
 8000e4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	daef      	bge.n	8000e34 <GMG12864_Update+0x40>
	for (uint8_t y = 0; y < 8; y++) {
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	3301      	adds	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b07      	cmp	r3, #7
 8000e5e:	d9d4      	bls.n	8000e0a <GMG12864_Update+0x16>
		}
	}
	cs_reset();
 8000e60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e64:	2201      	movs	r2, #1
 8000e66:	619a      	str	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000290 	.word	0x20000290

08000e74 <GMG12864_Print_symbol_5x7>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_5x7(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	4611      	mov	r1, r2
 8000e80:	461a      	mov	r2, r3
 8000e82:	4623      	mov	r3, r4
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	4603      	mov	r3, r0
 8000e88:	71bb      	strb	r3, [r7, #6]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	80bb      	strh	r3, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 5; //конечное положение по x с учетом межсимвольного интервала
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	3305      	adds	r3, #5
 8000e9a:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000e9c:	7b3b      	ldrb	r3, [r7, #12]
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	e086      	b.n	8000fb0 <GMG12864_Print_symbol_5x7+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	7afb      	ldrb	r3, [r7, #11]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d127      	bne.n	8000efa <GMG12864_Print_symbol_5x7+0x86>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73bb      	strb	r3, [r7, #14]
 8000eae:	e020      	b.n	8000ef2 <GMG12864_Print_symbol_5x7+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00d      	beq.n	8000ed2 <GMG12864_Print_symbol_5x7+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	b218      	sxth	r0, r3
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff ff20 	bl	8000d10 <GMG12864_Draw_pixel>
 8000ed0:	e00c      	b.n	8000eec <GMG12864_Print_symbol_5x7+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	b218      	sxth	r0, r3
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	4413      	add	r3, r2
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff ff12 	bl	8000d10 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000eec:	7bbb      	ldrb	r3, [r7, #14]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	73bb      	strb	r3, [r7, #14]
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	2b06      	cmp	r3, #6
 8000ef6:	d9db      	bls.n	8000eb0 <GMG12864_Print_symbol_5x7+0x3c>
 8000ef8:	e057      	b.n	8000faa <GMG12864_Print_symbol_5x7+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000efa:	2300      	movs	r3, #0
 8000efc:	737b      	strb	r3, [r7, #13]
 8000efe:	e051      	b.n	8000fa4 <GMG12864_Print_symbol_5x7+0x130>
				if (Font_5x7[(symbol * 5) + x - x_start] & (1 << i)) {
 8000f00:	88ba      	ldrh	r2, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	441a      	add	r2, r3
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	441a      	add	r2, r3
 8000f0c:	7b3b      	ldrb	r3, [r7, #12]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	4a2c      	ldr	r2, [pc, #176]	; (8000fc4 <GMG12864_Print_symbol_5x7+0x150>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	461a      	mov	r2, r3
 8000f16:	7b7b      	ldrb	r3, [r7, #13]
 8000f18:	fa42 f303 	asr.w	r3, r2, r3
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d01e      	beq.n	8000f62 <GMG12864_Print_symbol_5x7+0xee>
					if (inversion) {
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00d      	beq.n	8000f46 <GMG12864_Print_symbol_5x7+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	b218      	sxth	r0, r3
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	7b7b      	ldrb	r3, [r7, #13]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	4413      	add	r3, r2
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fee6 	bl	8000d10 <GMG12864_Draw_pixel>
 8000f44:	e02b      	b.n	8000f9e <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	b218      	sxth	r0, r3
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	7b7b      	ldrb	r3, [r7, #13]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f7ff fed8 	bl	8000d10 <GMG12864_Draw_pixel>
 8000f60:	e01d      	b.n	8000f9e <GMG12864_Print_symbol_5x7+0x12a>
					}
				} else {
					if (inversion) {
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00d      	beq.n	8000f84 <GMG12864_Print_symbol_5x7+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	b218      	sxth	r0, r3
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fec7 	bl	8000d10 <GMG12864_Draw_pixel>
 8000f82:	e00c      	b.n	8000f9e <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	b218      	sxth	r0, r3
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	7b7b      	ldrb	r3, [r7, #13]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4413      	add	r3, r2
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff feb9 	bl	8000d10 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000f9e:	7b7b      	ldrb	r3, [r7, #13]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	737b      	strb	r3, [r7, #13]
 8000fa4:	7b7b      	ldrb	r3, [r7, #13]
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d9aa      	bls.n	8000f00 <GMG12864_Print_symbol_5x7+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	3301      	adds	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f67f af74 	bls.w	8000ea2 <GMG12864_Print_symbol_5x7+0x2e>
					}
				}
			}
		}
	}
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd90      	pop	{r4, r7, pc}
 8000fc4:	0800f970 	.word	0x0800f970

08000fc8 <GMG12864_Print_symbol_3x5>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_3x5(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71bb      	strb	r3, [r7, #6]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	80bb      	strh	r3, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 3; //конечное положение по x с учетом межсимвольного интервала
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	3303      	adds	r3, #3
 8000fee:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000ff0:	7b3b      	ldrb	r3, [r7, #12]
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	e086      	b.n	8001104 <GMG12864_Print_symbol_3x5+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	7afb      	ldrb	r3, [r7, #11]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d127      	bne.n	800104e <GMG12864_Print_symbol_3x5+0x86>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000ffe:	2300      	movs	r3, #0
 8001000:	73bb      	strb	r3, [r7, #14]
 8001002:	e020      	b.n	8001046 <GMG12864_Print_symbol_3x5+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00d      	beq.n	8001026 <GMG12864_Print_symbol_3x5+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	b218      	sxth	r0, r3
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	b29a      	uxth	r2, r3
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4413      	add	r3, r2
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21b      	sxth	r3, r3
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fe76 	bl	8000d10 <GMG12864_Draw_pixel>
 8001024:	e00c      	b.n	8001040 <GMG12864_Print_symbol_3x5+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	b218      	sxth	r0, r3
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	b29a      	uxth	r2, r3
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	b29b      	uxth	r3, r3
 8001032:	4413      	add	r3, r2
 8001034:	b29b      	uxth	r3, r3
 8001036:	b21b      	sxth	r3, r3
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fe68 	bl	8000d10 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	3301      	adds	r3, #1
 8001044:	73bb      	strb	r3, [r7, #14]
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d9db      	bls.n	8001004 <GMG12864_Print_symbol_3x5+0x3c>
 800104c:	e057      	b.n	80010fe <GMG12864_Print_symbol_3x5+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 800104e:	2300      	movs	r3, #0
 8001050:	737b      	strb	r3, [r7, #13]
 8001052:	e051      	b.n	80010f8 <GMG12864_Print_symbol_3x5+0x130>
				if (Font_3x5[(symbol * 3) + x - x_start] & (1 << i)) {
 8001054:	88ba      	ldrh	r2, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	441a      	add	r2, r3
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	441a      	add	r2, r3
 8001060:	7b3b      	ldrb	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	4a2c      	ldr	r2, [pc, #176]	; (8001118 <GMG12864_Print_symbol_3x5+0x150>)
 8001066:	5cd3      	ldrb	r3, [r2, r3]
 8001068:	461a      	mov	r2, r3
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	fa42 f303 	asr.w	r3, r2, r3
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d01e      	beq.n	80010b6 <GMG12864_Print_symbol_3x5+0xee>
					if (inversion) {
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00d      	beq.n	800109a <GMG12864_Print_symbol_3x5+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	b218      	sxth	r0, r3
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	b29a      	uxth	r2, r3
 8001086:	7b7b      	ldrb	r3, [r7, #13]
 8001088:	b29b      	uxth	r3, r3
 800108a:	4413      	add	r3, r2
 800108c:	b29b      	uxth	r3, r3
 800108e:	b21b      	sxth	r3, r3
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fe3c 	bl	8000d10 <GMG12864_Draw_pixel>
 8001098:	e02b      	b.n	80010f2 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	b218      	sxth	r0, r3
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	7b7b      	ldrb	r3, [r7, #13]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4413      	add	r3, r2
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fe2e 	bl	8000d10 <GMG12864_Draw_pixel>
 80010b4:	e01d      	b.n	80010f2 <GMG12864_Print_symbol_3x5+0x12a>
					}
				} else {
					if (inversion) {
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00d      	beq.n	80010d8 <GMG12864_Print_symbol_3x5+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	b218      	sxth	r0, r3
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	2201      	movs	r2, #1
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fe1d 	bl	8000d10 <GMG12864_Draw_pixel>
 80010d6:	e00c      	b.n	80010f2 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	b218      	sxth	r0, r3
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	b29a      	uxth	r2, r3
 80010e0:	7b7b      	ldrb	r3, [r7, #13]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	2200      	movs	r2, #0
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fe0f 	bl	8000d10 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 80010f2:	7b7b      	ldrb	r3, [r7, #13]
 80010f4:	3301      	adds	r3, #1
 80010f6:	737b      	strb	r3, [r7, #13]
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d9aa      	bls.n	8001054 <GMG12864_Print_symbol_3x5+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	3301      	adds	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	429a      	cmp	r2, r3
 800110a:	f67f af74 	bls.w	8000ff6 <GMG12864_Print_symbol_3x5+0x2e>
					}
				}
			}
		}
	}
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}
 8001118:	0800f788 	.word	0x0800f788

0800111c <GMG12864_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/
void GMG12864_Decode_UTF8(uint8_t x, uint8_t y, uint8_t font, bool inversion, char *tx_buffer) {
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	4604      	mov	r4, r0
 8001124:	4608      	mov	r0, r1
 8001126:	4611      	mov	r1, r2
 8001128:	461a      	mov	r2, r3
 800112a:	4623      	mov	r3, r4
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	4603      	mov	r3, r0
 8001130:	71bb      	strb	r3, [r7, #6]
 8001132:	460b      	mov	r3, r1
 8001134:	717b      	strb	r3, [r7, #5]
 8001136:	4613      	mov	r3, r2
 8001138:	713b      	strb	r3, [r7, #4]
/// Функция декодирования UTF-8 в набор символов и последующее занесение в буфер кадра
/// \param x - координата по х. От 0 до 127
/// \param y - координата по y. от 0 до 7
/// \param font - шрифт. 0 - 3x5, 1 - 5x7
	uint16_t symbol = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	e17e      	b.n	8001446 <GMG12864_Decode_UTF8+0x32a>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2bbf      	cmp	r3, #191	; 0xbf
 8001152:	d841      	bhi.n	80011d8 <GMG12864_Decode_UTF8+0xbc>
			if (flag_block) {
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <GMG12864_Decode_UTF8+0x44>
				flag_block = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
 800115e:	e16f      	b.n	8001440 <GMG12864_Decode_UTF8+0x324>
			} else {
				symbol = tx_buffer[i];
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	81fb      	strh	r3, [r7, #14]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800116a:	797b      	ldrb	r3, [r7, #5]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d117      	bne.n	80011a0 <GMG12864_Decode_UTF8+0x84>
					if (inversion) {
 8001170:	793b      	ldrb	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d008      	beq.n	8001188 <GMG12864_Decode_UTF8+0x6c>
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	3b20      	subs	r3, #32
 800117a:	b29a      	uxth	r2, r3
 800117c:	79b9      	ldrb	r1, [r7, #6]
 800117e:	79f8      	ldrb	r0, [r7, #7]
 8001180:	2301      	movs	r3, #1
 8001182:	f7ff ff21 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
 8001186:	e007      	b.n	8001198 <GMG12864_Decode_UTF8+0x7c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	3b20      	subs	r3, #32
 800118c:	b29a      	uxth	r2, r3
 800118e:	79b9      	ldrb	r1, [r7, #6]
 8001190:	79f8      	ldrb	r0, [r7, #7]
 8001192:	2300      	movs	r3, #0
 8001194:	f7ff ff18 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	3304      	adds	r3, #4
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e14f      	b.n	8001440 <GMG12864_Decode_UTF8+0x324>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80011a0:	797b      	ldrb	r3, [r7, #5]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	f040 814c 	bne.w	8001440 <GMG12864_Decode_UTF8+0x324>
					if (inversion) {
 80011a8:	793b      	ldrb	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d008      	beq.n	80011c0 <GMG12864_Decode_UTF8+0xa4>
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 80011ae:	89fb      	ldrh	r3, [r7, #14]
 80011b0:	3b20      	subs	r3, #32
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	79b9      	ldrb	r1, [r7, #6]
 80011b6:	79f8      	ldrb	r0, [r7, #7]
 80011b8:	2301      	movs	r3, #1
 80011ba:	f7ff fe5b 	bl	8000e74 <GMG12864_Print_symbol_5x7>
 80011be:	e007      	b.n	80011d0 <GMG12864_Decode_UTF8+0xb4>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	3b20      	subs	r3, #32
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	79b9      	ldrb	r1, [r7, #6]
 80011c8:	79f8      	ldrb	r0, [r7, #7]
 80011ca:	2300      	movs	r3, #0
 80011cc:	f7ff fe52 	bl	8000e74 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	3306      	adds	r3, #6
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	e133      	b.n	8001440 <GMG12864_Decode_UTF8+0x324>
				}
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	3301      	adds	r3, #1
 80011e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011ea:	440b      	add	r3, r1
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	f24d 127f 	movw	r2, #53631	; 0xd17f
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d843      	bhi.n	8001288 <GMG12864_Decode_UTF8+0x16c>
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	f24d 0281 	movw	r2, #53377	; 0xd081
 8001206:	4293      	cmp	r3, r2
 8001208:	d93e      	bls.n	8001288 <GMG12864_Decode_UTF8+0x16c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800120a:	797b      	ldrb	r3, [r7, #5]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d11b      	bne.n	8001248 <GMG12864_Decode_UTF8+0x12c>
					if (inversion) {
 8001210:	793b      	ldrb	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00a      	beq.n	800122c <GMG12864_Decode_UTF8+0x110>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8001216:	89fb      	ldrh	r3, [r7, #14]
 8001218:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800121c:	330f      	adds	r3, #15
 800121e:	b29a      	uxth	r2, r3
 8001220:	79b9      	ldrb	r1, [r7, #6]
 8001222:	79f8      	ldrb	r0, [r7, #7]
 8001224:	2301      	movs	r3, #1
 8001226:	f7ff fecf 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
 800122a:	e009      	b.n	8001240 <GMG12864_Decode_UTF8+0x124>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001232:	330f      	adds	r3, #15
 8001234:	b29a      	uxth	r2, r3
 8001236:	79b9      	ldrb	r1, [r7, #6]
 8001238:	79f8      	ldrb	r0, [r7, #7]
 800123a:	2300      	movs	r3, #0
 800123c:	f7ff fec4 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	3304      	adds	r3, #4
 8001244:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001246:	e0f8      	b.n	800143a <GMG12864_Decode_UTF8+0x31e>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8001248:	797b      	ldrb	r3, [r7, #5]
 800124a:	2b01      	cmp	r3, #1
 800124c:	f040 80f5 	bne.w	800143a <GMG12864_Decode_UTF8+0x31e>
					if (inversion) {
 8001250:	793b      	ldrb	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00a      	beq.n	800126c <GMG12864_Decode_UTF8+0x150>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8001256:	89fb      	ldrh	r3, [r7, #14]
 8001258:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800125c:	330f      	adds	r3, #15
 800125e:	b29a      	uxth	r2, r3
 8001260:	79b9      	ldrb	r1, [r7, #6]
 8001262:	79f8      	ldrb	r0, [r7, #7]
 8001264:	2301      	movs	r3, #1
 8001266:	f7ff fe05 	bl	8000e74 <GMG12864_Print_symbol_5x7>
 800126a:	e009      	b.n	8001280 <GMG12864_Decode_UTF8+0x164>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001272:	330f      	adds	r3, #15
 8001274:	b29a      	uxth	r2, r3
 8001276:	79b9      	ldrb	r1, [r7, #6]
 8001278:	79f8      	ldrb	r0, [r7, #7]
 800127a:	2300      	movs	r3, #0
 800127c:	f7ff fdfa 	bl	8000e74 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	3306      	adds	r3, #6
 8001284:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001286:	e0d8      	b.n	800143a <GMG12864_Decode_UTF8+0x31e>
				}
			} else if (symbol == 0xD081) {
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	f24d 0281 	movw	r2, #53377	; 0xd081
 800128e:	4293      	cmp	r3, r2
 8001290:	d12e      	bne.n	80012f0 <GMG12864_Decode_UTF8+0x1d4>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001292:	797b      	ldrb	r3, [r7, #5]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d113      	bne.n	80012c0 <GMG12864_Decode_UTF8+0x1a4>
					if (inversion) {
 8001298:	793b      	ldrb	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <GMG12864_Decode_UTF8+0x190>
						GMG12864_Print_symbol_3x5(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 800129e:	79b9      	ldrb	r1, [r7, #6]
 80012a0:	79f8      	ldrb	r0, [r7, #7]
 80012a2:	2301      	movs	r3, #1
 80012a4:	229f      	movs	r2, #159	; 0x9f
 80012a6:	f7ff fe8f 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
 80012aa:	e005      	b.n	80012b8 <GMG12864_Decode_UTF8+0x19c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 80012ac:	79b9      	ldrb	r1, [r7, #6]
 80012ae:	79f8      	ldrb	r0, [r7, #7]
 80012b0:	2300      	movs	r3, #0
 80012b2:	229f      	movs	r2, #159	; 0x9f
 80012b4:	f7ff fe88 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	3304      	adds	r3, #4
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	e0bd      	b.n	800143c <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	f040 80ba 	bne.w	800143c <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 80012c8:	793b      	ldrb	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <GMG12864_Decode_UTF8+0x1c0>
						GMG12864_Print_symbol_5x7(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 80012ce:	79b9      	ldrb	r1, [r7, #6]
 80012d0:	79f8      	ldrb	r0, [r7, #7]
 80012d2:	2301      	movs	r3, #1
 80012d4:	229f      	movs	r2, #159	; 0x9f
 80012d6:	f7ff fdcd 	bl	8000e74 <GMG12864_Print_symbol_5x7>
 80012da:	e005      	b.n	80012e8 <GMG12864_Decode_UTF8+0x1cc>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 80012dc:	79b9      	ldrb	r1, [r7, #6]
 80012de:	79f8      	ldrb	r0, [r7, #7]
 80012e0:	2300      	movs	r3, #0
 80012e2:	229f      	movs	r2, #159	; 0x9f
 80012e4:	f7ff fdc6 	bl	8000e74 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	3306      	adds	r3, #6
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	e0a5      	b.n	800143c <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xD191) {
 80012f0:	89fb      	ldrh	r3, [r7, #14]
 80012f2:	f24d 1291 	movw	r2, #53649	; 0xd191
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12e      	bne.n	8001358 <GMG12864_Decode_UTF8+0x23c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80012fa:	797b      	ldrb	r3, [r7, #5]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d113      	bne.n	8001328 <GMG12864_Decode_UTF8+0x20c>
					if (inversion) {
 8001300:	793b      	ldrb	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <GMG12864_Decode_UTF8+0x1f8>
						GMG12864_Print_symbol_3x5(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8001306:	79b9      	ldrb	r1, [r7, #6]
 8001308:	79f8      	ldrb	r0, [r7, #7]
 800130a:	2301      	movs	r3, #1
 800130c:	22a0      	movs	r2, #160	; 0xa0
 800130e:	f7ff fe5b 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
 8001312:	e005      	b.n	8001320 <GMG12864_Decode_UTF8+0x204>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001314:	79b9      	ldrb	r1, [r7, #6]
 8001316:	79f8      	ldrb	r0, [r7, #7]
 8001318:	2300      	movs	r3, #0
 800131a:	22a0      	movs	r2, #160	; 0xa0
 800131c:	f7ff fe54 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3304      	adds	r3, #4
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	e089      	b.n	800143c <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	2b01      	cmp	r3, #1
 800132c:	f040 8086 	bne.w	800143c <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8001330:	793b      	ldrb	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <GMG12864_Decode_UTF8+0x228>
						GMG12864_Print_symbol_5x7(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8001336:	79b9      	ldrb	r1, [r7, #6]
 8001338:	79f8      	ldrb	r0, [r7, #7]
 800133a:	2301      	movs	r3, #1
 800133c:	22a0      	movs	r2, #160	; 0xa0
 800133e:	f7ff fd99 	bl	8000e74 <GMG12864_Print_symbol_5x7>
 8001342:	e005      	b.n	8001350 <GMG12864_Decode_UTF8+0x234>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001344:	79b9      	ldrb	r1, [r7, #6]
 8001346:	79f8      	ldrb	r0, [r7, #7]
 8001348:	2300      	movs	r3, #0
 800134a:	22a0      	movs	r2, #160	; 0xa0
 800134c:	f7ff fd92 	bl	8000e74 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	3306      	adds	r3, #6
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	e071      	b.n	800143c <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xC2B0) {
 8001358:	89fb      	ldrh	r3, [r7, #14]
 800135a:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 800135e:	4293      	cmp	r3, r2
 8001360:	d12d      	bne.n	80013be <GMG12864_Decode_UTF8+0x2a2>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001362:	797b      	ldrb	r3, [r7, #5]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d113      	bne.n	8001390 <GMG12864_Decode_UTF8+0x274>
					if (inversion) {
 8001368:	793b      	ldrb	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <GMG12864_Decode_UTF8+0x260>
						GMG12864_Print_symbol_3x5(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 800136e:	79b9      	ldrb	r1, [r7, #6]
 8001370:	79f8      	ldrb	r0, [r7, #7]
 8001372:	2301      	movs	r3, #1
 8001374:	22a1      	movs	r2, #161	; 0xa1
 8001376:	f7ff fe27 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
 800137a:	e005      	b.n	8001388 <GMG12864_Decode_UTF8+0x26c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 800137c:	79b9      	ldrb	r1, [r7, #6]
 800137e:	79f8      	ldrb	r0, [r7, #7]
 8001380:	2300      	movs	r3, #0
 8001382:	22a1      	movs	r2, #161	; 0xa1
 8001384:	f7ff fe20 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	3304      	adds	r3, #4
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	e055      	b.n	800143c <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8001390:	797b      	ldrb	r3, [r7, #5]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d152      	bne.n	800143c <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8001396:	793b      	ldrb	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <GMG12864_Decode_UTF8+0x28e>
						GMG12864_Print_symbol_5x7(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 800139c:	79b9      	ldrb	r1, [r7, #6]
 800139e:	79f8      	ldrb	r0, [r7, #7]
 80013a0:	2301      	movs	r3, #1
 80013a2:	22a1      	movs	r2, #161	; 0xa1
 80013a4:	f7ff fd66 	bl	8000e74 <GMG12864_Print_symbol_5x7>
 80013a8:	e005      	b.n	80013b6 <GMG12864_Decode_UTF8+0x29a>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 80013aa:	79b9      	ldrb	r1, [r7, #6]
 80013ac:	79f8      	ldrb	r0, [r7, #7]
 80013ae:	2300      	movs	r3, #0
 80013b0:	22a1      	movs	r2, #161	; 0xa1
 80013b2:	f7ff fd5f 	bl	8000e74 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	3306      	adds	r3, #6
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	e03e      	b.n	800143c <GMG12864_Decode_UTF8+0x320>
				}
			}

			else {
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d11b      	bne.n	80013fc <GMG12864_Decode_UTF8+0x2e0>
					if (inversion) {
 80013c4:	793b      	ldrb	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00a      	beq.n	80013e0 <GMG12864_Decode_UTF8+0x2c4>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80013d0:	330f      	adds	r3, #15
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	79b9      	ldrb	r1, [r7, #6]
 80013d6:	79f8      	ldrb	r0, [r7, #7]
 80013d8:	2301      	movs	r3, #1
 80013da:	f7ff fdf5 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
 80013de:	e009      	b.n	80013f4 <GMG12864_Decode_UTF8+0x2d8>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 80013e0:	89fb      	ldrh	r3, [r7, #14]
 80013e2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80013e6:	330f      	adds	r3, #15
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	79b9      	ldrb	r1, [r7, #6]
 80013ec:	79f8      	ldrb	r0, [r7, #7]
 80013ee:	2300      	movs	r3, #0
 80013f0:	f7ff fdea 	bl	8000fc8 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	3304      	adds	r3, #4
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	e01f      	b.n	800143c <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80013fc:	797b      	ldrb	r3, [r7, #5]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d11c      	bne.n	800143c <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8001402:	793b      	ldrb	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00a      	beq.n	800141e <GMG12864_Decode_UTF8+0x302>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 8001408:	89fb      	ldrh	r3, [r7, #14]
 800140a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800140e:	330f      	adds	r3, #15
 8001410:	b29a      	uxth	r2, r3
 8001412:	79b9      	ldrb	r1, [r7, #6]
 8001414:	79f8      	ldrb	r0, [r7, #7]
 8001416:	2301      	movs	r3, #1
 8001418:	f7ff fd2c 	bl	8000e74 <GMG12864_Print_symbol_5x7>
 800141c:	e009      	b.n	8001432 <GMG12864_Decode_UTF8+0x316>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001424:	330f      	adds	r3, #15
 8001426:	b29a      	uxth	r2, r3
 8001428:	79b9      	ldrb	r1, [r7, #6]
 800142a:	79f8      	ldrb	r0, [r7, #7]
 800142c:	2300      	movs	r3, #0
 800142e:	f7ff fd21 	bl	8000e74 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	3306      	adds	r3, #6
 8001436:	71fb      	strb	r3, [r7, #7]
 8001438:	e000      	b.n	800143c <GMG12864_Decode_UTF8+0x320>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800143a:	bf00      	nop
				}
			}
			flag_block = 1;
 800143c:	2301      	movs	r3, #1
 800143e:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	3301      	adds	r3, #1
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001448:	f7fe feca 	bl	80001e0 <strlen>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	f63f ae79 	bhi.w	8001148 <GMG12864_Decode_UTF8+0x2c>
		}
	}
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}

08001460 <Read16>:
uint16_t ina219_calibrationValue;
float ina219_currentDivider_mA;
float ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af04      	add	r7, sp, #16
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	b29a      	uxth	r2, r3
 8001474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2302      	movs	r3, #2
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	f003 f92e 	bl	80046e8 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 800148c:	7b3b      	ldrb	r3, [r7, #12]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	b21b      	sxth	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b21b      	sxth	r3, r3
 800149a:	b29b      	uxth	r3, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
 80014b0:	4613      	mov	r3, r2
 80014b2:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80014b4:	883b      	ldrh	r3, [r7, #0]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80014be:	883b      	ldrh	r3, [r7, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	2302      	movs	r3, #2
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2301      	movs	r3, #1
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	f002 ffee 	bl	80044c0 <HAL_I2C_Mem_Write>
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 80014f4:	2102      	movs	r1, #2
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffb2 	bl	8001460 <Read16>
 80014fc:	4603      	mov	r3, r0
 80014fe:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001500:	89fb      	ldrh	r3, [r7, #14]
 8001502:	08db      	lsrs	r3, r3, #3
 8001504:	b29b      	uxth	r3, r3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	b29b      	uxth	r3, r3

}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 800151a:	2104      	movs	r1, #4
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff9f 	bl	8001460 <Read16>
 8001522:	4603      	mov	r3, r0
 8001524:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ffe8 	bl	8001512 <INA219_ReadCurrent_raw>
 8001542:	4603      	mov	r3, r0
 8001544:	81fb      	strh	r3, [r7, #14]

	return (result * ina219_currentDivider_mA * 1000 );
 8001546:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <INA219_ReadCurrent+0x44>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800157c <INA219_ReadCurrent+0x48>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001568:	ee17 3a90 	vmov	r3, s15
 800156c:	b21b      	sxth	r3, r3
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000694 	.word	0x20000694
 800157c:	447a0000 	.word	0x447a0000

08001580 <INA219_ReadShuntVoltage>:

uint16_t INA219_ReadShuntVoltage(INA219_t *ina219)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001588:	2101      	movs	r1, #1
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff68 	bl	8001460 <Read16>
 8001590:	4603      	mov	r3, r0
 8001592:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01);
 8001594:	89fb      	ldrh	r3, [r7, #14]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffcc 	bl	8000534 <__aeabi_i2d>
 800159c:	a308      	add	r3, pc, #32	; (adr r3, 80015c0 <INA219_ReadShuntVoltage+0x40>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7ff f831 	bl	8000608 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff fb03 	bl	8000bb8 <__aeabi_d2uiz>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b29b      	uxth	r3, r3
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	47ae147b 	.word	0x47ae147b
 80015c4:	3f847ae1 	.word	0x3f847ae1

080015c8 <INA219_Read_Power>:

uint16_t INA219_Read_Power(INA219_t *ina219)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_POWER);
 80015d0:	2103      	movs	r1, #3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff44 	bl	8001460 <Read16>
 80015d8:	4603      	mov	r3, r0
 80015da:	81fb      	strh	r3, [r7, #14]

	return (result * ina219_powerMultiplier_mW * 1000);
 80015dc:	89fb      	ldrh	r3, [r7, #14]
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <INA219_Read_Power+0x44>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001610 <INA219_Read_Power+0x48>
 80015f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fc:	ee17 3a90 	vmov	r3, s15
 8001600:	b29b      	uxth	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000698 	.word	0x20000698
 8001610:	447a0000 	.word	0x447a0000

08001614 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 800161c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001620:	2100      	movs	r1, #0
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff3e 	bl	80014a4 <Write16>
	HAL_Delay(1);
 8001628:	2001      	movs	r0, #1
 800162a:	f002 f995 	bl	8003958 <HAL_Delay>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	461a      	mov	r2, r3
 8001646:	2105      	movs	r1, #5
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff2b 	bl	80014a4 <Write16>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	461a      	mov	r2, r3
 8001666:	2100      	movs	r1, #0
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff1b 	bl	80014a4 <Write16>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001680:	f643 139f 	movw	r3, #14751	; 0x399f
 8001684:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <INA219_setCalibration_32V_2A+0x40>)
 8001688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800168c:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 0.0001; // Current LSB = 100uA per bit (1000/100 = 10)
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <INA219_setCalibration_32V_2A+0x44>)
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <INA219_setCalibration_32V_2A+0x48>)
 8001692:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0.002; // Power LSB = 1mW per bit (2/1)
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <INA219_setCalibration_32V_2A+0x4c>)
 8001696:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <INA219_setCalibration_32V_2A+0x50>)
 8001698:	601a      	str	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <INA219_setCalibration_32V_2A+0x40>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ffc8 	bl	8001636 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	4619      	mov	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffd3 	bl	8001656 <INA219_setConfig>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000690 	.word	0x20000690
 80016bc:	20000694 	.word	0x20000694
 80016c0:	38d1b717 	.word	0x38d1b717
 80016c4:	20000698 	.word	0x20000698
 80016c8:	3b03126f 	.word	0x3b03126f

080016cc <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	4613      	mov	r3, r2
 80016d8:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	79fa      	ldrb	r2, [r7, #7]
 80016e4:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <INA219_Init+0x60>)
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <INA219_Init+0x64>)
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	b299      	uxth	r1, r3
 80016fe:	2302      	movs	r3, #2
 8001700:	2203      	movs	r2, #3
 8001702:	68b8      	ldr	r0, [r7, #8]
 8001704:	f003 f90a 	bl	800491c <HAL_I2C_IsDeviceReady>
 8001708:	4603      	mov	r3, r0
 800170a:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d107      	bne.n	8001722 <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f7ff ff7e 	bl	8001614 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff ffad 	bl	8001678 <INA219_setCalibration_32V_2A>

		return 1;
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <INA219_Init+0x58>
	}

	else
	{
		return 0;
 8001722:	2300      	movs	r3, #0
	}
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000694 	.word	0x20000694
 8001730:	20000698 	.word	0x20000698

08001734 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_6

/* SPI Chip Select */
static void SELECT(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001740:	f002 fc14 	bl	8003f6c <HAL_GPIO_WritePin>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	2140      	movs	r1, #64	; 0x40
 8001750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001754:	f002 fc0a 	bl	8003f6c <HAL_GPIO_WritePin>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8001766:	bf00      	nop
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <SPI_TxByte+0x30>)
 800176a:	f006 fb57 	bl	8007e1c <HAL_SPI_GetState>
 800176e:	4603      	mov	r3, r0
 8001770:	2b01      	cmp	r3, #1
 8001772:	d1f9      	bne.n	8001768 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8001774:	1df9      	adds	r1, r7, #7
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	2201      	movs	r2, #1
 800177c:	4803      	ldr	r0, [pc, #12]	; (800178c <SPI_TxByte+0x30>)
 800177e:	f005 ffcc 	bl	800771a <HAL_SPI_Transmit>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000079c 	.word	0x2000079c

08001790 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001796:	23ff      	movs	r3, #255	; 0xff
 8001798:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 800179e:	bf00      	nop
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <SPI_RxByte+0x38>)
 80017a2:	f006 fb3b 	bl	8007e1c <HAL_SPI_GetState>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d1f9      	bne.n	80017a0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80017ac:	1dba      	adds	r2, r7, #6
 80017ae:	1df9      	adds	r1, r7, #7
 80017b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <SPI_RxByte+0x38>)
 80017ba:	f006 f91c 	bl	80079f6 <HAL_SPI_TransmitReceive>

  return data;
 80017be:	79bb      	ldrb	r3, [r7, #6]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000079c 	.word	0x2000079c

080017cc <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80017d4:	f7ff ffdc 	bl	8001790 <SPI_RxByte>
 80017d8:	4603      	mov	r3, r0
 80017da:	461a      	mov	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	701a      	strb	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <SD_ReadyWait+0x34>)
 80017f0:	2232      	movs	r2, #50	; 0x32
 80017f2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80017f4:	f7ff ffcc 	bl	8001790 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80017f8:	f7ff ffca 	bl	8001790 <SPI_RxByte>
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2bff      	cmp	r3, #255	; 0xff
 8001804:	d004      	beq.n	8001810 <SD_ReadyWait+0x28>
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <SD_ReadyWait+0x34>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f3      	bne.n	80017f8 <SD_ReadyWait+0x10>

  return res;
 8001810:	79fb      	ldrb	r3, [r7, #7]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20002d22 	.word	0x20002d22

08001820 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001826:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800182a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800182c:	f7ff ff8c 	bl	8001748 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	e005      	b.n	8001842 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001836:	20ff      	movs	r0, #255	; 0xff
 8001838:	f7ff ff90 	bl	800175c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	3301      	adds	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	2b09      	cmp	r3, #9
 8001846:	ddf6      	ble.n	8001836 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001848:	f7ff ff74 	bl	8001734 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800184c:	2340      	movs	r3, #64	; 0x40
 800184e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001860:	2395      	movs	r3, #149	; 0x95
 8001862:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e009      	b.n	800187e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800186a:	1d3a      	adds	r2, r7, #4
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff72 	bl	800175c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b05      	cmp	r3, #5
 8001882:	ddf2      	ble.n	800186a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001884:	e002      	b.n	800188c <SD_PowerOn+0x6c>
  {
    Count--;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3b01      	subs	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800188c:	f7ff ff80 	bl	8001790 <SPI_RxByte>
 8001890:	4603      	mov	r3, r0
 8001892:	2b01      	cmp	r3, #1
 8001894:	d002      	beq.n	800189c <SD_PowerOn+0x7c>
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f4      	bne.n	8001886 <SD_PowerOn+0x66>
  }

  DESELECT();
 800189c:	f7ff ff54 	bl	8001748 <DESELECT>
  SPI_TxByte(0XFF);
 80018a0:	20ff      	movs	r0, #255	; 0xff
 80018a2:	f7ff ff5b 	bl	800175c <SPI_TxByte>

  PowerFlag = 1;
 80018a6:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <SD_PowerOn+0x94>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
}
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	2000069d 	.word	0x2000069d

080018b8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <SD_PowerOff+0x14>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	2000069d 	.word	0x2000069d

080018d0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <SD_CheckPower+0x14>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	2000069d 	.word	0x2000069d

080018e8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <SD_RxDataBlock+0x68>)
 80018f4:	220a      	movs	r2, #10
 80018f6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80018f8:	f7ff ff4a 	bl	8001790 <SPI_RxByte>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2bff      	cmp	r3, #255	; 0xff
 8001904:	d104      	bne.n	8001910 <SD_RxDataBlock+0x28>
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <SD_RxDataBlock+0x68>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f3      	bne.n	80018f8 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2bfe      	cmp	r3, #254	; 0xfe
 8001914:	d001      	beq.n	800191a <SD_RxDataBlock+0x32>
    return FALSE;
 8001916:	2300      	movs	r3, #0
 8001918:	e016      	b.n	8001948 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff53 	bl	80017cc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff4d 	bl	80017cc <SPI_RxBytePtr>
  } while(btr -= 2);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	3b02      	subs	r3, #2
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ed      	bne.n	800191a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800193e:	f7ff ff27 	bl	8001790 <SPI_RxByte>
  SPI_RxByte();
 8001942:	f7ff ff25 	bl	8001790 <SPI_RxByte>

  return TRUE;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20002d21 	.word	0x20002d21

08001954 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001964:	f7ff ff40 	bl	80017e8 <SD_ReadyWait>
 8001968:	4603      	mov	r3, r0
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d001      	beq.n	8001972 <SD_TxDataBlock+0x1e>
    return FALSE;
 800196e:	2300      	movs	r3, #0
 8001970:	e040      	b.n	80019f4 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fef1 	bl	800175c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	2bfd      	cmp	r3, #253	; 0xfd
 800197e:	d031      	beq.n	80019e4 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fee5 	bl	800175c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fede 	bl	800175c <SPI_TxByte>
    } while (--wc);
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	73bb      	strb	r3, [r7, #14]
 80019a6:	7bbb      	ldrb	r3, [r7, #14]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1eb      	bne.n	8001984 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80019ac:	f7ff fef0 	bl	8001790 <SPI_RxByte>
    SPI_RxByte();
 80019b0:	f7ff feee 	bl	8001790 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80019b4:	e00b      	b.n	80019ce <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80019b6:	f7ff feeb 	bl	8001790 <SPI_RxByte>
 80019ba:	4603      	mov	r3, r0
 80019bc:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d006      	beq.n	80019d6 <SD_TxDataBlock+0x82>
        break;

      i++;
 80019c8:	7b7b      	ldrb	r3, [r7, #13]
 80019ca:	3301      	adds	r3, #1
 80019cc:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80019ce:	7b7b      	ldrb	r3, [r7, #13]
 80019d0:	2b40      	cmp	r3, #64	; 0x40
 80019d2:	d9f0      	bls.n	80019b6 <SD_TxDataBlock+0x62>
 80019d4:	e000      	b.n	80019d8 <SD_TxDataBlock+0x84>
        break;
 80019d6:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80019d8:	bf00      	nop
 80019da:	f7ff fed9 	bl	8001790 <SPI_RxByte>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0fa      	beq.n	80019da <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d101      	bne.n	80019f2 <SD_TxDataBlock+0x9e>
    return TRUE;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001a08:	f7ff feee 	bl	80017e8 <SD_ReadyWait>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2bff      	cmp	r3, #255	; 0xff
 8001a10:	d001      	beq.n	8001a16 <SD_SendCmd+0x1a>
    return 0xFF;
 8001a12:	23ff      	movs	r3, #255	; 0xff
 8001a14:	e040      	b.n	8001a98 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fe9f 	bl	800175c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	0e1b      	lsrs	r3, r3, #24
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fe99 	bl	800175c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fe93 	bl	800175c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fe8d 	bl	800175c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fe88 	bl	800175c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b40      	cmp	r3, #64	; 0x40
 8001a54:	d101      	bne.n	8001a5a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001a56:	2395      	movs	r3, #149	; 0x95
 8001a58:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b48      	cmp	r3, #72	; 0x48
 8001a5e:	d101      	bne.n	8001a64 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001a60:	2387      	movs	r3, #135	; 0x87
 8001a62:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fe78 	bl	800175c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b4c      	cmp	r3, #76	; 0x4c
 8001a70:	d101      	bne.n	8001a76 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001a72:	f7ff fe8d 	bl	8001790 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001a76:	230a      	movs	r3, #10
 8001a78:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001a7a:	f7ff fe89 	bl	8001790 <SPI_RxByte>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001a82:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da05      	bge.n	8001a96 <SD_SendCmd+0x9a>
 8001a8a:	7bbb      	ldrb	r3, [r7, #14]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	73bb      	strb	r3, [r7, #14]
 8001a90:	7bbb      	ldrb	r3, [r7, #14]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f1      	bne.n	8001a7a <SD_SendCmd+0x7e>

  return res;
 8001a96:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0d5      	b.n	8001c60 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001ab4:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <SD_disk_initialize+0x1c8>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <SD_disk_initialize+0x2a>
    return Stat;
 8001ac2:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <SD_disk_initialize+0x1c8>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	e0ca      	b.n	8001c60 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001aca:	f7ff fea9 	bl	8001820 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001ace:	f7ff fe31 	bl	8001734 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2040      	movs	r0, #64	; 0x40
 8001ada:	f7ff ff8f 	bl	80019fc <SD_SendCmd>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	f040 80a5 	bne.w	8001c30 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001ae6:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <SD_disk_initialize+0x1cc>)
 8001ae8:	2264      	movs	r2, #100	; 0x64
 8001aea:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001aec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001af0:	2048      	movs	r0, #72	; 0x48
 8001af2:	f7ff ff83 	bl	80019fc <SD_SendCmd>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d158      	bne.n	8001bae <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e00c      	b.n	8001b1c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001b02:	7bfc      	ldrb	r4, [r7, #15]
 8001b04:	f7ff fe44 	bl	8001790 <SPI_RxByte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f104 0310 	add.w	r3, r4, #16
 8001b10:	443b      	add	r3, r7
 8001b12:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d9ef      	bls.n	8001b02 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b22:	7abb      	ldrb	r3, [r7, #10]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	f040 8083 	bne.w	8001c30 <SD_disk_initialize+0x190>
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	2baa      	cmp	r3, #170	; 0xaa
 8001b2e:	d17f      	bne.n	8001c30 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001b30:	2100      	movs	r1, #0
 8001b32:	2077      	movs	r0, #119	; 0x77
 8001b34:	f7ff ff62 	bl	80019fc <SD_SendCmd>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d807      	bhi.n	8001b4e <SD_disk_initialize+0xae>
 8001b3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b42:	2069      	movs	r0, #105	; 0x69
 8001b44:	f7ff ff5a 	bl	80019fc <SD_SendCmd>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <SD_disk_initialize+0x1cc>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1eb      	bne.n	8001b30 <SD_disk_initialize+0x90>
 8001b58:	e000      	b.n	8001b5c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001b5a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b5c:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <SD_disk_initialize+0x1cc>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d064      	beq.n	8001c30 <SD_disk_initialize+0x190>
 8001b66:	2100      	movs	r1, #0
 8001b68:	207a      	movs	r0, #122	; 0x7a
 8001b6a:	f7ff ff47 	bl	80019fc <SD_SendCmd>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d15d      	bne.n	8001c30 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e00c      	b.n	8001b94 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001b7a:	7bfc      	ldrb	r4, [r7, #15]
 8001b7c:	f7ff fe08 	bl	8001790 <SPI_RxByte>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	f104 0310 	add.w	r3, r4, #16
 8001b88:	443b      	add	r3, r7
 8001b8a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	3301      	adds	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d9ef      	bls.n	8001b7a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001b9a:	7a3b      	ldrb	r3, [r7, #8]
 8001b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SD_disk_initialize+0x108>
 8001ba4:	2306      	movs	r3, #6
 8001ba6:	e000      	b.n	8001baa <SD_disk_initialize+0x10a>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	73bb      	strb	r3, [r7, #14]
 8001bac:	e040      	b.n	8001c30 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2077      	movs	r0, #119	; 0x77
 8001bb2:	f7ff ff23 	bl	80019fc <SD_SendCmd>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d808      	bhi.n	8001bce <SD_disk_initialize+0x12e>
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2069      	movs	r0, #105	; 0x69
 8001bc0:	f7ff ff1c 	bl	80019fc <SD_SendCmd>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d801      	bhi.n	8001bce <SD_disk_initialize+0x12e>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e000      	b.n	8001bd0 <SD_disk_initialize+0x130>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001bd2:	7bbb      	ldrb	r3, [r7, #14]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d10e      	bne.n	8001bf6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2077      	movs	r0, #119	; 0x77
 8001bdc:	f7ff ff0e 	bl	80019fc <SD_SendCmd>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d80e      	bhi.n	8001c04 <SD_disk_initialize+0x164>
 8001be6:	2100      	movs	r1, #0
 8001be8:	2069      	movs	r0, #105	; 0x69
 8001bea:	f7ff ff07 	bl	80019fc <SD_SendCmd>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001bf4:	e00d      	b.n	8001c12 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2041      	movs	r0, #65	; 0x41
 8001bfa:	f7ff feff 	bl	80019fc <SD_SendCmd>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <SD_disk_initialize+0x1cc>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1e1      	bne.n	8001bd2 <SD_disk_initialize+0x132>
 8001c0e:	e000      	b.n	8001c12 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001c10:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <SD_disk_initialize+0x1cc>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <SD_disk_initialize+0x18c>
 8001c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c20:	2050      	movs	r0, #80	; 0x50
 8001c22:	f7ff feeb 	bl	80019fc <SD_SendCmd>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001c30:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <SD_disk_initialize+0x1d0>)
 8001c32:	7bbb      	ldrb	r3, [r7, #14]
 8001c34:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001c36:	f7ff fd87 	bl	8001748 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001c3a:	f7ff fda9 	bl	8001790 <SPI_RxByte>

  if (type)
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <SD_disk_initialize+0x1c8>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <SD_disk_initialize+0x1c8>)
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	e001      	b.n	8001c5a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001c56:	f7ff fe2f 	bl	80018b8 <SD_PowerOff>
  }

  return Stat;
 8001c5a:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <SD_disk_initialize+0x1c8>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}
 8001c68:	20000002 	.word	0x20000002
 8001c6c:	20002d21 	.word	0x20002d21
 8001c70:	2000069c 	.word	0x2000069c

08001c74 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e002      	b.n	8001c8e <SD_disk_status+0x1a>

  return Stat;
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <SD_disk_status+0x28>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000002 	.word	0x20000002

08001ca0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	4603      	mov	r3, r0
 8001cae:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <SD_disk_read+0x1c>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <SD_disk_read+0x20>
    return RES_PARERR;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	e051      	b.n	8001d64 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <SD_disk_read+0xcc>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e048      	b.n	8001d64 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <SD_disk_read+0xd0>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	025b      	lsls	r3, r3, #9
 8001ce2:	607b      	str	r3, [r7, #4]

  SELECT();
 8001ce4:	f7ff fd26 	bl	8001734 <SELECT>

  if (count == 1)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d111      	bne.n	8001d12 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	2051      	movs	r0, #81	; 0x51
 8001cf2:	f7ff fe83 	bl	80019fc <SD_SendCmd>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d129      	bne.n	8001d50 <SD_disk_read+0xb0>
 8001cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d00:	68b8      	ldr	r0, [r7, #8]
 8001d02:	f7ff fdf1 	bl	80018e8 <SD_RxDataBlock>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d021      	beq.n	8001d50 <SD_disk_read+0xb0>
      count = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	e01e      	b.n	8001d50 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	2052      	movs	r0, #82	; 0x52
 8001d16:	f7ff fe71 	bl	80019fc <SD_SendCmd>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d117      	bne.n	8001d50 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d24:	68b8      	ldr	r0, [r7, #8]
 8001d26:	f7ff fddf 	bl	80018e8 <SD_RxDataBlock>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d36:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ed      	bne.n	8001d20 <SD_disk_read+0x80>
 8001d44:	e000      	b.n	8001d48 <SD_disk_read+0xa8>
          break;
 8001d46:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001d48:	2100      	movs	r1, #0
 8001d4a:	204c      	movs	r0, #76	; 0x4c
 8001d4c:	f7ff fe56 	bl	80019fc <SD_SendCmd>
    }
  }

  DESELECT();
 8001d50:	f7ff fcfa 	bl	8001748 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001d54:	f7ff fd1c 	bl	8001790 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bf14      	ite	ne
 8001d5e:	2301      	movne	r3, #1
 8001d60:	2300      	moveq	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000002 	.word	0x20000002
 8001d70:	2000069c 	.word	0x2000069c

08001d74 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4603      	mov	r3, r0
 8001d82:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <SD_disk_write+0x1c>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <SD_disk_write+0x20>
    return RES_PARERR;
 8001d90:	2304      	movs	r3, #4
 8001d92:	e06b      	b.n	8001e6c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001d94:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <SD_disk_write+0x100>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e062      	b.n	8001e6c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001da6:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <SD_disk_write+0x100>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001db4:	2302      	movs	r3, #2
 8001db6:	e059      	b.n	8001e6c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001db8:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <SD_disk_write+0x104>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	025b      	lsls	r3, r3, #9
 8001dc8:	607b      	str	r3, [r7, #4]

  SELECT();
 8001dca:	f7ff fcb3 	bl	8001734 <SELECT>

  if (count == 1)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d110      	bne.n	8001df6 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	2058      	movs	r0, #88	; 0x58
 8001dd8:	f7ff fe10 	bl	80019fc <SD_SendCmd>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d13a      	bne.n	8001e58 <SD_disk_write+0xe4>
 8001de2:	21fe      	movs	r1, #254	; 0xfe
 8001de4:	68b8      	ldr	r0, [r7, #8]
 8001de6:	f7ff fdb5 	bl	8001954 <SD_TxDataBlock>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d033      	beq.n	8001e58 <SD_disk_write+0xe4>
      count = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	e030      	b.n	8001e58 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <SD_disk_write+0x104>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001e02:	2100      	movs	r1, #0
 8001e04:	2077      	movs	r0, #119	; 0x77
 8001e06:	f7ff fdf9 	bl	80019fc <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e0a:	6839      	ldr	r1, [r7, #0]
 8001e0c:	2057      	movs	r0, #87	; 0x57
 8001e0e:	f7ff fdf5 	bl	80019fc <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	2059      	movs	r0, #89	; 0x59
 8001e16:	f7ff fdf1 	bl	80019fc <SD_SendCmd>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11b      	bne.n	8001e58 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001e20:	21fc      	movs	r1, #252	; 0xfc
 8001e22:	68b8      	ldr	r0, [r7, #8]
 8001e24:	f7ff fd96 	bl	8001954 <SD_TxDataBlock>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e34:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ee      	bne.n	8001e20 <SD_disk_write+0xac>
 8001e42:	e000      	b.n	8001e46 <SD_disk_write+0xd2>
          break;
 8001e44:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001e46:	21fd      	movs	r1, #253	; 0xfd
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff fd83 	bl	8001954 <SD_TxDataBlock>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <SD_disk_write+0xe4>
      {
        count = 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001e58:	f7ff fc76 	bl	8001748 <DESELECT>
  SPI_RxByte();
 8001e5c:	f7ff fc98 	bl	8001790 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000002 	.word	0x20000002
 8001e78:	2000069c 	.word	0x2000069c

08001e7c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b08b      	sub	sp, #44	; 0x2c
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	603a      	str	r2, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001e96:	2304      	movs	r3, #4
 8001e98:	e11b      	b.n	80020d2 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001ea0:	79bb      	ldrb	r3, [r7, #6]
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d129      	bne.n	8001efa <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d017      	beq.n	8001ede <SD_disk_ioctl+0x62>
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	dc1f      	bgt.n	8001ef2 <SD_disk_ioctl+0x76>
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <SD_disk_ioctl+0x40>
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d00b      	beq.n	8001ed2 <SD_disk_ioctl+0x56>
 8001eba:	e01a      	b.n	8001ef2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001ebc:	f7ff fd08 	bl	80018d0 <SD_CheckPower>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001ec6:	f7ff fcf7 	bl	80018b8 <SD_PowerOff>
      res = RES_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ed0:	e0fd      	b.n	80020ce <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001ed2:	f7ff fca5 	bl	8001820 <SD_PowerOn>
      res = RES_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001edc:	e0f7      	b.n	80020ce <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	1c5c      	adds	r4, r3, #1
 8001ee2:	f7ff fcf5 	bl	80018d0 <SD_CheckPower>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ef0:	e0ed      	b.n	80020ce <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ef8:	e0e9      	b.n	80020ce <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001efa:	4b78      	ldr	r3, [pc, #480]	; (80020dc <SD_disk_ioctl+0x260>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0e2      	b.n	80020d2 <SD_disk_ioctl+0x256>

    SELECT();
 8001f0c:	f7ff fc12 	bl	8001734 <SELECT>

    switch (ctrl)
 8001f10:	79bb      	ldrb	r3, [r7, #6]
 8001f12:	2b0d      	cmp	r3, #13
 8001f14:	f200 80cc 	bhi.w	80020b0 <SD_disk_ioctl+0x234>
 8001f18:	a201      	add	r2, pc, #4	; (adr r2, 8001f20 <SD_disk_ioctl+0xa4>)
 8001f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1e:	bf00      	nop
 8001f20:	0800201b 	.word	0x0800201b
 8001f24:	08001f59 	.word	0x08001f59
 8001f28:	0800200b 	.word	0x0800200b
 8001f2c:	080020b1 	.word	0x080020b1
 8001f30:	080020b1 	.word	0x080020b1
 8001f34:	080020b1 	.word	0x080020b1
 8001f38:	080020b1 	.word	0x080020b1
 8001f3c:	080020b1 	.word	0x080020b1
 8001f40:	080020b1 	.word	0x080020b1
 8001f44:	080020b1 	.word	0x080020b1
 8001f48:	080020b1 	.word	0x080020b1
 8001f4c:	0800202d 	.word	0x0800202d
 8001f50:	08002051 	.word	0x08002051
 8001f54:	08002075 	.word	0x08002075
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2049      	movs	r0, #73	; 0x49
 8001f5c:	f7ff fd4e 	bl	80019fc <SD_SendCmd>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 80a8 	bne.w	80020b8 <SD_disk_ioctl+0x23c>
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fcba 	bl	80018e8 <SD_RxDataBlock>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 809e 	beq.w	80020b8 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001f7c:	7b3b      	ldrb	r3, [r7, #12]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d10e      	bne.n	8001fa4 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f86:	7d7b      	ldrb	r3, [r7, #21]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	7d3b      	ldrb	r3, [r7, #20]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001f9a:	8bfb      	ldrh	r3, [r7, #30]
 8001f9c:	029a      	lsls	r2, r3, #10
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e02e      	b.n	8002002 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001fa4:	7c7b      	ldrb	r3, [r7, #17]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	7dbb      	ldrb	r3, [r7, #22]
 8001fae:	09db      	lsrs	r3, r3, #7
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	7d7b      	ldrb	r3, [r7, #21]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f003 0306 	and.w	r3, r3, #6
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001fcc:	7d3b      	ldrb	r3, [r7, #20]
 8001fce:	099b      	lsrs	r3, r3, #6
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	7cbb      	ldrb	r3, [r7, #18]
 8001fe2:	029b      	lsls	r3, r3, #10
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ff4:	8bfa      	ldrh	r2, [r7, #30]
 8001ff6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ffa:	3b09      	subs	r3, #9
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8002008:	e056      	b.n	80020b8 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002010:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002018:	e055      	b.n	80020c6 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800201a:	f7ff fbe5 	bl	80017e8 <SD_ReadyWait>
 800201e:	4603      	mov	r3, r0
 8002020:	2bff      	cmp	r3, #255	; 0xff
 8002022:	d14b      	bne.n	80020bc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800202a:	e047      	b.n	80020bc <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800202c:	2100      	movs	r1, #0
 800202e:	2049      	movs	r0, #73	; 0x49
 8002030:	f7ff fce4 	bl	80019fc <SD_SendCmd>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d142      	bne.n	80020c0 <SD_disk_ioctl+0x244>
 800203a:	2110      	movs	r1, #16
 800203c:	6a38      	ldr	r0, [r7, #32]
 800203e:	f7ff fc53 	bl	80018e8 <SD_RxDataBlock>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d03b      	beq.n	80020c0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800204e:	e037      	b.n	80020c0 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002050:	2100      	movs	r1, #0
 8002052:	204a      	movs	r0, #74	; 0x4a
 8002054:	f7ff fcd2 	bl	80019fc <SD_SendCmd>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d132      	bne.n	80020c4 <SD_disk_ioctl+0x248>
 800205e:	2110      	movs	r1, #16
 8002060:	6a38      	ldr	r0, [r7, #32]
 8002062:	f7ff fc41 	bl	80018e8 <SD_RxDataBlock>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d02b      	beq.n	80020c4 <SD_disk_ioctl+0x248>
        res = RES_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002072:	e027      	b.n	80020c4 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002074:	2100      	movs	r1, #0
 8002076:	207a      	movs	r0, #122	; 0x7a
 8002078:	f7ff fcc0 	bl	80019fc <SD_SendCmd>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d116      	bne.n	80020b0 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8002082:	2300      	movs	r3, #0
 8002084:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002088:	e00b      	b.n	80020a2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800208a:	6a3c      	ldr	r4, [r7, #32]
 800208c:	1c63      	adds	r3, r4, #1
 800208e:	623b      	str	r3, [r7, #32]
 8002090:	f7ff fb7e 	bl	8001790 <SPI_RxByte>
 8002094:	4603      	mov	r3, r0
 8002096:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800209c:	3301      	adds	r3, #1
 800209e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d9ef      	bls.n	800208a <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80020b0:	2304      	movs	r3, #4
 80020b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020b6:	e006      	b.n	80020c6 <SD_disk_ioctl+0x24a>
      break;
 80020b8:	bf00      	nop
 80020ba:	e004      	b.n	80020c6 <SD_disk_ioctl+0x24a>
      break;
 80020bc:	bf00      	nop
 80020be:	e002      	b.n	80020c6 <SD_disk_ioctl+0x24a>
      break;
 80020c0:	bf00      	nop
 80020c2:	e000      	b.n	80020c6 <SD_disk_ioctl+0x24a>
      break;
 80020c4:	bf00      	nop
    }

    DESELECT();
 80020c6:	f7ff fb3f 	bl	8001748 <DESELECT>
    SPI_RxByte();
 80020ca:	f7ff fb61 	bl	8001790 <SPI_RxByte>
  }

  return res;
 80020ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	372c      	adds	r7, #44	; 0x2c
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd90      	pop	{r4, r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000002 	.word	0x20000002

080020e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e4:	f001 fbd2 	bl	800388c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e8:	f000 f884 	bl	80021f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ec:	f000 fa14 	bl	8002518 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020f0:	f000 f9e2 	bl	80024b8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80020f4:	f000 f964 	bl	80023c0 <MX_SPI1_Init>
  MX_I2C1_Init();
 80020f8:	f000 f8e2 	bl	80022c0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80020fc:	f000 f99e 	bl	800243c <MX_SPI2_Init>
  MX_FATFS_Init();
 8002100:	f006 fbd2 	bl	80088a8 <MX_FATFS_Init>
  MX_I2C2_Init();
 8002104:	f000 f91c 	bl	8002340 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  GMG12864_Init();
 8002108:	f7fe fdb2 	bl	8000c70 <GMG12864_Init>
  INA219_Init(&ina219, &hi2c1, INA219_ADDRESS);
 800210c:	2240      	movs	r2, #64	; 0x40
 800210e:	492e      	ldr	r1, [pc, #184]	; (80021c8 <main+0xe8>)
 8002110:	482e      	ldr	r0, [pc, #184]	; (80021cc <main+0xec>)
 8002112:	f7ff fadb 	bl	80016cc <INA219_Init>
  t_ina219 = HAL_GetTick();
 8002116:	f001 fc13 	bl	8003940 <HAL_GetTick>
 800211a:	4603      	mov	r3, r0
 800211c:	4a2c      	ldr	r2, [pc, #176]	; (80021d0 <main+0xf0>)
 800211e:	6013      	str	r3, [r2, #0]
  t_gmg12864 = HAL_GetTick();
 8002120:	f001 fc0e 	bl	8003940 <HAL_GetTick>
 8002124:	4603      	mov	r3, r0
 8002126:	4a2b      	ldr	r2, [pc, #172]	; (80021d4 <main+0xf4>)
 8002128:	6013      	str	r3, [r2, #0]
  t_sd_card = HAL_GetTick();
 800212a:	f001 fc09 	bl	8003940 <HAL_GetTick>
 800212e:	4603      	mov	r3, r0
 8002130:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <main+0xf8>)
 8002132:	6013      	str	r3, [r2, #0]
  t_ds3231 = HAL_GetTick();
 8002134:	f001 fc04 	bl	8003940 <HAL_GetTick>
 8002138:	4603      	mov	r3, r0
 800213a:	4a28      	ldr	r2, [pc, #160]	; (80021dc <main+0xfc>)
 800213c:	6013      	str	r3, [r2, #0]
  max_ds3231_set_hours(19);
 800213e:	2013      	movs	r0, #19
 8002140:	f001 f806 	bl	8003150 <max_ds3231_set_hours>
  max_ds3231_set_minutes(58);
 8002144:	203a      	movs	r0, #58	; 0x3a
 8002146:	f000 ffa5 	bl	8003094 <max_ds3231_set_minutes>
  max_ds3231_set_seconds(0);
 800214a:	2000      	movs	r0, #0
 800214c:	f000 ff44 	bl	8002fd8 <max_ds3231_set_seconds>
  max_ds3231_set_day(1);
 8002150:	2001      	movs	r0, #1
 8002152:	f001 f85b 	bl	800320c <max_ds3231_set_day>
  HAL_Delay(500);
 8002156:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800215a:	f001 fbfd 	bl	8003958 <HAL_Delay>
  if((fresult = f_mount(&fs, "", 0)) != FR_OK){
 800215e:	2200      	movs	r2, #0
 8002160:	491f      	ldr	r1, [pc, #124]	; (80021e0 <main+0x100>)
 8002162:	4820      	ldr	r0, [pc, #128]	; (80021e4 <main+0x104>)
 8002164:	f009 f884 	bl	800b270 <f_mount>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <main+0x108>)
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <main+0x108>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <main+0xc0>
	  sprintf(buffer_sd_card, "Card is not detected!!");
 8002178:	491c      	ldr	r1, [pc, #112]	; (80021ec <main+0x10c>)
 800217a:	481d      	ldr	r0, [pc, #116]	; (80021f0 <main+0x110>)
 800217c:	f00a ffd6 	bl	800d12c <siprintf>
	  SET_BIT(GPIOA->BSRR, GPIO_BSRR_BS_5);
 8002180:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800218a:	f043 0320 	orr.w	r3, r3, #32
 800218e:	6193      	str	r3, [r2, #24]
	  GMG12864_third_line_level_1(0, 0);
 8002190:	2100      	movs	r1, #0
 8002192:	2000      	movs	r0, #0
 8002194:	f000 fc74 	bl	8002a80 <GMG12864_third_line_level_1>
	  HAL_Delay(2000);
 8002198:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800219c:	f001 fbdc 	bl	8003958 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_state_of_relays();
 80021a0:	f000 fbc0 	bl	8002924 <read_state_of_relays>
	  get_param_from_ina219();
 80021a4:	f000 fb32 	bl	800280c <get_param_from_ina219>
	  ds3231_get_time_and_temp();
 80021a8:	f000 fdee 	bl	8002d88 <ds3231_get_time_and_temp>
	  automatik_mode();
 80021ac:	f000 fab0 	bl	8002710 <automatik_mode>
	  manual_mode_func();
 80021b0:	f000 fa40 	bl	8002634 <manual_mode_func>
	  mode_change_func();
 80021b4:	f000 fb90 	bl	80028d8 <mode_change_func>
	  print_gmg12864_level_1();
 80021b8:	f000 fbe4 	bl	8002984 <print_gmg12864_level_1>
	  sd_card_write();
 80021bc:	f000 fcf0 	bl	8002ba0 <sd_card_write>
	  manual_init_sd_card();
 80021c0:	f000 fd98 	bl	8002cf4 <manual_init_sd_card>
	  read_state_of_relays();
 80021c4:	e7ec      	b.n	80021a0 <main+0xc0>
 80021c6:	bf00      	nop
 80021c8:	200006a0 	.word	0x200006a0
 80021cc:	20002ce8 	.word	0x20002ce8
 80021d0:	20002cf8 	.word	0x20002cf8
 80021d4:	20002cfc 	.word	0x20002cfc
 80021d8:	20002d00 	.word	0x20002d00
 80021dc:	20002d0c 	.word	0x20002d0c
 80021e0:	0800f638 	.word	0x0800f638
 80021e4:	20000884 	.word	0x20000884
 80021e8:	200028e0 	.word	0x200028e0
 80021ec:	0800f63c 	.word	0x0800f63c
 80021f0:	200028e4 	.word	0x200028e4

080021f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b0a6      	sub	sp, #152	; 0x98
 80021f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021fe:	2228      	movs	r2, #40	; 0x28
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f00a fb20 	bl	800c848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002208:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2258      	movs	r2, #88	; 0x58
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f00a fb12 	bl	800c848 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002224:	2303      	movs	r3, #3
 8002226:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800222e:	2301      	movs	r3, #1
 8002230:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002232:	2310      	movs	r3, #16
 8002234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002238:	2302      	movs	r3, #2
 800223a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800223e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800224a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002254:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fd0b 	bl	8005c74 <HAL_RCC_OscConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002264:	f000 fda8 	bl	8002db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002268:	230f      	movs	r3, #15
 800226a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800226c:	2302      	movs	r3, #2
 800226e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002270:	2300      	movs	r3, #0
 8002272:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002278:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800227a:	2300      	movs	r3, #0
 800227c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800227e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002282:	2102      	movs	r1, #2
 8002284:	4618      	mov	r0, r3
 8002286:	f004 fd49 	bl	8006d1c <HAL_RCC_ClockConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002290:	f000 fd92 	bl	8002db8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002294:	2362      	movs	r3, #98	; 0x62
 8002296:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800229c:	2300      	movs	r3, #0
 800229e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 ff6e 	bl	8007188 <HAL_RCCEx_PeriphCLKConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022b2:	f000 fd81 	bl	8002db8 <Error_Handler>
  }
}
 80022b6:	bf00      	nop
 80022b8:	3798      	adds	r7, #152	; 0x98
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <MX_I2C1_Init+0x74>)
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <MX_I2C1_Init+0x78>)
 80022c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <MX_I2C1_Init+0x74>)
 80022cc:	4a1b      	ldr	r2, [pc, #108]	; (800233c <MX_I2C1_Init+0x7c>)
 80022ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <MX_I2C1_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <MX_I2C1_Init+0x74>)
 80022d8:	2201      	movs	r2, #1
 80022da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <MX_I2C1_Init+0x74>)
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_I2C1_Init+0x74>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <MX_I2C1_Init+0x74>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_I2C1_Init+0x74>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_I2C1_Init+0x74>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022fa:	480e      	ldr	r0, [pc, #56]	; (8002334 <MX_I2C1_Init+0x74>)
 80022fc:	f001 fe66 	bl	8003fcc <HAL_I2C_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002306:	f000 fd57 	bl	8002db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800230a:	2100      	movs	r1, #0
 800230c:	4809      	ldr	r0, [pc, #36]	; (8002334 <MX_I2C1_Init+0x74>)
 800230e:	f003 fc19 	bl	8005b44 <HAL_I2CEx_ConfigAnalogFilter>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002318:	f000 fd4e 	bl	8002db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800231c:	2100      	movs	r1, #0
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_I2C1_Init+0x74>)
 8002320:	f003 fc5b 	bl	8005bda <HAL_I2CEx_ConfigDigitalFilter>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800232a:	f000 fd45 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200006a0 	.word	0x200006a0
 8002338:	40005400 	.word	0x40005400
 800233c:	2000090e 	.word	0x2000090e

08002340 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <MX_I2C2_Init+0x74>)
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <MX_I2C2_Init+0x78>)
 8002348:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <MX_I2C2_Init+0x74>)
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <MX_I2C2_Init+0x7c>)
 800234e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002350:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <MX_I2C2_Init+0x74>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <MX_I2C2_Init+0x74>)
 8002358:	2201      	movs	r2, #1
 800235a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <MX_I2C2_Init+0x74>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <MX_I2C2_Init+0x74>)
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <MX_I2C2_Init+0x74>)
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_I2C2_Init+0x74>)
 8002370:	2200      	movs	r2, #0
 8002372:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <MX_I2C2_Init+0x74>)
 8002376:	2200      	movs	r2, #0
 8002378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800237a:	480e      	ldr	r0, [pc, #56]	; (80023b4 <MX_I2C2_Init+0x74>)
 800237c:	f001 fe26 	bl	8003fcc <HAL_I2C_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002386:	f000 fd17 	bl	8002db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800238a:	2100      	movs	r1, #0
 800238c:	4809      	ldr	r0, [pc, #36]	; (80023b4 <MX_I2C2_Init+0x74>)
 800238e:	f003 fbd9 	bl	8005b44 <HAL_I2CEx_ConfigAnalogFilter>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002398:	f000 fd0e 	bl	8002db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800239c:	2100      	movs	r1, #0
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <MX_I2C2_Init+0x74>)
 80023a0:	f003 fc1b 	bl	8005bda <HAL_I2CEx_ConfigDigitalFilter>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80023aa:	f000 fd05 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200006ec 	.word	0x200006ec
 80023b8:	40005800 	.word	0x40005800
 80023bc:	2000090e 	.word	0x2000090e

080023c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <MX_SPI1_Init+0x74>)
 80023c6:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <MX_SPI1_Init+0x78>)
 80023c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <MX_SPI1_Init+0x74>)
 80023cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023d2:	4b18      	ldr	r3, [pc, #96]	; (8002434 <MX_SPI1_Init+0x74>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <MX_SPI1_Init+0x74>)
 80023da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <MX_SPI1_Init+0x74>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <MX_SPI1_Init+0x74>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <MX_SPI1_Init+0x74>)
 80023ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <MX_SPI1_Init+0x74>)
 80023f6:	2210      	movs	r2, #16
 80023f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <MX_SPI1_Init+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <MX_SPI1_Init+0x74>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <MX_SPI1_Init+0x74>)
 8002408:	2200      	movs	r2, #0
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800240c:	4b09      	ldr	r3, [pc, #36]	; (8002434 <MX_SPI1_Init+0x74>)
 800240e:	2207      	movs	r2, #7
 8002410:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <MX_SPI1_Init+0x74>)
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <MX_SPI1_Init+0x74>)
 800241a:	2208      	movs	r2, #8
 800241c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800241e:	4805      	ldr	r0, [pc, #20]	; (8002434 <MX_SPI1_Init+0x74>)
 8002420:	f005 f8d0 	bl	80075c4 <HAL_SPI_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800242a:	f000 fcc5 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000738 	.word	0x20000738
 8002438:	40013000 	.word	0x40013000

0800243c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <MX_SPI2_Init+0x74>)
 8002442:	4a1c      	ldr	r2, [pc, #112]	; (80024b4 <MX_SPI2_Init+0x78>)
 8002444:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002446:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_SPI2_Init+0x74>)
 8002448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800244c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800244e:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <MX_SPI2_Init+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <MX_SPI2_Init+0x74>)
 8002456:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800245a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_SPI2_Init+0x74>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <MX_SPI2_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_SPI2_Init+0x74>)
 800246a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_SPI2_Init+0x74>)
 8002472:	2208      	movs	r2, #8
 8002474:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_SPI2_Init+0x74>)
 8002478:	2200      	movs	r2, #0
 800247a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_SPI2_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <MX_SPI2_Init+0x74>)
 8002484:	2200      	movs	r2, #0
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_SPI2_Init+0x74>)
 800248a:	2207      	movs	r2, #7
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <MX_SPI2_Init+0x74>)
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_SPI2_Init+0x74>)
 8002496:	2208      	movs	r2, #8
 8002498:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <MX_SPI2_Init+0x74>)
 800249c:	f005 f892 	bl	80075c4 <HAL_SPI_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80024a6:	f000 fc87 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000079c 	.word	0x2000079c
 80024b4:	40003800 	.word	0x40003800

080024b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <MX_USART2_UART_Init+0x58>)
 80024be:	4a15      	ldr	r2, [pc, #84]	; (8002514 <MX_USART2_UART_Init+0x5c>)
 80024c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <MX_USART2_UART_Init+0x58>)
 80024c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80024c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <MX_USART2_UART_Init+0x58>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <MX_USART2_UART_Init+0x58>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <MX_USART2_UART_Init+0x58>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <MX_USART2_UART_Init+0x58>)
 80024de:	220c      	movs	r2, #12
 80024e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <MX_USART2_UART_Init+0x58>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <MX_USART2_UART_Init+0x58>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <MX_USART2_UART_Init+0x58>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <MX_USART2_UART_Init+0x58>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024fa:	4805      	ldr	r0, [pc, #20]	; (8002510 <MX_USART2_UART_Init+0x58>)
 80024fc:	f005 fe00 	bl	8008100 <HAL_UART_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002506:	f000 fc57 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000800 	.word	0x20000800
 8002514:	40004400 	.word	0x40004400

08002518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252e:	4b3f      	ldr	r3, [pc, #252]	; (800262c <MX_GPIO_Init+0x114>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	4a3e      	ldr	r2, [pc, #248]	; (800262c <MX_GPIO_Init+0x114>)
 8002534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002538:	6153      	str	r3, [r2, #20]
 800253a:	4b3c      	ldr	r3, [pc, #240]	; (800262c <MX_GPIO_Init+0x114>)
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002546:	4b39      	ldr	r3, [pc, #228]	; (800262c <MX_GPIO_Init+0x114>)
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	4a38      	ldr	r2, [pc, #224]	; (800262c <MX_GPIO_Init+0x114>)
 800254c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002550:	6153      	str	r3, [r2, #20]
 8002552:	4b36      	ldr	r3, [pc, #216]	; (800262c <MX_GPIO_Init+0x114>)
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b33      	ldr	r3, [pc, #204]	; (800262c <MX_GPIO_Init+0x114>)
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	4a32      	ldr	r2, [pc, #200]	; (800262c <MX_GPIO_Init+0x114>)
 8002564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002568:	6153      	str	r3, [r2, #20]
 800256a:	4b30      	ldr	r3, [pc, #192]	; (800262c <MX_GPIO_Init+0x114>)
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <MX_GPIO_Init+0x114>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	4a2c      	ldr	r2, [pc, #176]	; (800262c <MX_GPIO_Init+0x114>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002580:	6153      	str	r3, [r2, #20]
 8002582:	4b2a      	ldr	r3, [pc, #168]	; (800262c <MX_GPIO_Init+0x114>)
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, high_charge_relay_Pin|low_charge_relay_Pin|discharge_relay_Pin|led_high_charge_Pin
 800258e:	2200      	movs	r2, #0
 8002590:	2137      	movs	r1, #55	; 0x37
 8002592:	4827      	ldr	r0, [pc, #156]	; (8002630 <MX_GPIO_Init+0x118>)
 8002594:	f001 fcea 	bl	8003f6c <HAL_GPIO_WritePin>
                          |led_discharge_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin|DC_Pin|user_led_Pin
 8002598:	2200      	movs	r2, #0
 800259a:	2173      	movs	r1, #115	; 0x73
 800259c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a0:	f001 fce4 	bl	8003f6c <HAL_GPIO_WritePin>
                          |CS_SD_CARD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 80025a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	481d      	ldr	r0, [pc, #116]	; (8002630 <MX_GPIO_Init+0x118>)
 80025bc:	f001 fb4c 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : high_charge_relay_Pin low_charge_relay_Pin discharge_relay_Pin led_high_charge_Pin
                           led_discharge_Pin */
  GPIO_InitStruct.Pin = high_charge_relay_Pin|low_charge_relay_Pin|discharge_relay_Pin|led_high_charge_Pin
 80025c0:	2337      	movs	r3, #55	; 0x37
 80025c2:	617b      	str	r3, [r7, #20]
                          |led_discharge_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	4816      	ldr	r0, [pc, #88]	; (8002630 <MX_GPIO_Init+0x118>)
 80025d8:	f001 fb3e 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_low_charge_Pin */
  GPIO_InitStruct.Pin = led_low_charge_Pin;
 80025dc:	2308      	movs	r3, #8
 80025de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_low_charge_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	480f      	ldr	r0, [pc, #60]	; (8002630 <MX_GPIO_Init+0x118>)
 80025f2:	f001 fb31 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin RST_Pin DC_Pin user_led_Pin
                           CS_SD_CARD_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin|user_led_Pin
 80025f6:	2373      	movs	r3, #115	; 0x73
 80025f8:	617b      	str	r3, [r7, #20]
                          |CS_SD_CARD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fa:	2301      	movs	r3, #1
 80025fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002610:	f001 fb22 	bl	8003c58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	2028      	movs	r0, #40	; 0x28
 800261a:	f001 fa9c 	bl	8003b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800261e:	2028      	movs	r0, #40	; 0x28
 8002620:	f001 fab5 	bl	8003b8e <HAL_NVIC_EnableIRQ>

}
 8002624:	bf00      	nop
 8002626:	3728      	adds	r7, #40	; 0x28
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	48000800 	.word	0x48000800

08002634 <manual_mode_func>:

/* USER CODE BEGIN 4 */
void manual_mode_func(){
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
	if(control_mode){
 8002638:	4b32      	ldr	r3, [pc, #200]	; (8002704 <manual_mode_func+0xd0>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d05a      	beq.n	80026f8 <manual_mode_func+0xc4>
		switch(manual_mode){
 8002642:	4b31      	ldr	r3, [pc, #196]	; (8002708 <manual_mode_func+0xd4>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d857      	bhi.n	80026fa <manual_mode_func+0xc6>
 800264a:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <manual_mode_func+0x1c>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002661 	.word	0x08002661
 8002654:	08002687 	.word	0x08002687
 8002658:	080026ad 	.word	0x080026ad
 800265c:	080026d3 	.word	0x080026d3
		case 0:
			high_charge_off();
 8002660:	4b2a      	ldr	r3, [pc, #168]	; (800270c <manual_mode_func+0xd8>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a29      	ldr	r2, [pc, #164]	; (800270c <manual_mode_func+0xd8>)
 8002666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266a:	6193      	str	r3, [r2, #24]
			low_charge_off();
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <manual_mode_func+0xd8>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4a26      	ldr	r2, [pc, #152]	; (800270c <manual_mode_func+0xd8>)
 8002672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002676:	6193      	str	r3, [r2, #24]
			discharge_off();
 8002678:	4b24      	ldr	r3, [pc, #144]	; (800270c <manual_mode_func+0xd8>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a23      	ldr	r2, [pc, #140]	; (800270c <manual_mode_func+0xd8>)
 800267e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002682:	6193      	str	r3, [r2, #24]
			break;
 8002684:	e039      	b.n	80026fa <manual_mode_func+0xc6>
		case 1:
			high_charge_on();
 8002686:	4b21      	ldr	r3, [pc, #132]	; (800270c <manual_mode_func+0xd8>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	4a20      	ldr	r2, [pc, #128]	; (800270c <manual_mode_func+0xd8>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6193      	str	r3, [r2, #24]
			low_charge_off();
 8002692:	4b1e      	ldr	r3, [pc, #120]	; (800270c <manual_mode_func+0xd8>)
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	4a1d      	ldr	r2, [pc, #116]	; (800270c <manual_mode_func+0xd8>)
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	6193      	str	r3, [r2, #24]
			discharge_off();
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <manual_mode_func+0xd8>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	4a1a      	ldr	r2, [pc, #104]	; (800270c <manual_mode_func+0xd8>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a8:	6193      	str	r3, [r2, #24]
			break;
 80026aa:	e026      	b.n	80026fa <manual_mode_func+0xc6>
		case 2:
			high_charge_off();
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <manual_mode_func+0xd8>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4a16      	ldr	r2, [pc, #88]	; (800270c <manual_mode_func+0xd8>)
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b6:	6193      	str	r3, [r2, #24]
			low_charge_on();
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <manual_mode_func+0xd8>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4a13      	ldr	r2, [pc, #76]	; (800270c <manual_mode_func+0xd8>)
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	6193      	str	r3, [r2, #24]
			discharge_off();
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <manual_mode_func+0xd8>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a10      	ldr	r2, [pc, #64]	; (800270c <manual_mode_func+0xd8>)
 80026ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ce:	6193      	str	r3, [r2, #24]
			break;
 80026d0:	e013      	b.n	80026fa <manual_mode_func+0xc6>
		case 3:
			high_charge_off();
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <manual_mode_func+0xd8>)
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	4a0d      	ldr	r2, [pc, #52]	; (800270c <manual_mode_func+0xd8>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6193      	str	r3, [r2, #24]
			low_charge_off();
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <manual_mode_func+0xd8>)
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <manual_mode_func+0xd8>)
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	6193      	str	r3, [r2, #24]
			discharge_on();
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <manual_mode_func+0xd8>)
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	4a07      	ldr	r2, [pc, #28]	; (800270c <manual_mode_func+0xd8>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6193      	str	r3, [r2, #24]
			break;
 80026f6:	e000      	b.n	80026fa <manual_mode_func+0xc6>
		}
	}
 80026f8:	bf00      	nop
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	20002d08 	.word	0x20002d08
 8002708:	20002d09 	.word	0x20002d09
 800270c:	48000800 	.word	0x48000800

08002710 <automatik_mode>:

void automatik_mode(){
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
	if(!control_mode){
 8002714:	4b39      	ldr	r3, [pc, #228]	; (80027fc <automatik_mode+0xec>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f083 0301 	eor.w	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d065      	beq.n	80027f0 <automatik_mode+0xe0>
		if(v_bus < 800 && (discharge_enable == 0)){
 8002724:	4b36      	ldr	r3, [pc, #216]	; (8002800 <automatik_mode+0xf0>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800272c:	d219      	bcs.n	8002762 <automatik_mode+0x52>
 800272e:	4b35      	ldr	r3, [pc, #212]	; (8002804 <automatik_mode+0xf4>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	f083 0301 	eor.w	r3, r3, #1
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d012      	beq.n	8002762 <automatik_mode+0x52>
			low_charge_off();
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <automatik_mode+0xf8>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4a31      	ldr	r2, [pc, #196]	; (8002808 <automatik_mode+0xf8>)
 8002742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002746:	6193      	str	r3, [r2, #24]
			discharge_off();
 8002748:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <automatik_mode+0xf8>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a2e      	ldr	r2, [pc, #184]	; (8002808 <automatik_mode+0xf8>)
 800274e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002752:	6193      	str	r3, [r2, #24]
			high_charge_on();
 8002754:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <automatik_mode+0xf8>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <automatik_mode+0xf8>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	e027      	b.n	80027b2 <automatik_mode+0xa2>
		}
		else if(v_bus > 3100 && (discharge_enable == 0)){
 8002762:	4b27      	ldr	r3, [pc, #156]	; (8002800 <automatik_mode+0xf0>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	f640 421c 	movw	r2, #3100	; 0xc1c
 800276a:	4293      	cmp	r3, r2
 800276c:	d921      	bls.n	80027b2 <automatik_mode+0xa2>
 800276e:	4b25      	ldr	r3, [pc, #148]	; (8002804 <automatik_mode+0xf4>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f083 0301 	eor.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01a      	beq.n	80027b2 <automatik_mode+0xa2>
			high_charge_off();
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <automatik_mode+0xf8>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4a21      	ldr	r2, [pc, #132]	; (8002808 <automatik_mode+0xf8>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002786:	6193      	str	r3, [r2, #24]
			discharge_off();
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <automatik_mode+0xf8>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <automatik_mode+0xf8>)
 800278e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002792:	6193      	str	r3, [r2, #24]
			low_charge_on();
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <automatik_mode+0xf8>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <automatik_mode+0xf8>)
 800279a:	f043 0302 	orr.w	r3, r3, #2
 800279e:	6193      	str	r3, [r2, #24]
			if(v_bus >= 4250){
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <automatik_mode+0xf0>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	f241 0299 	movw	r2, #4249	; 0x1099
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d902      	bls.n	80027b2 <automatik_mode+0xa2>
				discharge_enable = 1;
 80027ac:	4b15      	ldr	r3, [pc, #84]	; (8002804 <automatik_mode+0xf4>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(discharge_enable){
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <automatik_mode+0xf4>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01a      	beq.n	80027f0 <automatik_mode+0xe0>
			low_charge_off();
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <automatik_mode+0xf8>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	4a12      	ldr	r2, [pc, #72]	; (8002808 <automatik_mode+0xf8>)
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c4:	6193      	str	r3, [r2, #24]
			high_charge_off();
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <automatik_mode+0xf8>)
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <automatik_mode+0xf8>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d0:	6193      	str	r3, [r2, #24]
			discharge_on();
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <automatik_mode+0xf8>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <automatik_mode+0xf8>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6193      	str	r3, [r2, #24]
			if(v_bus <= 5100){
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <automatik_mode+0xf0>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	f241 32ec 	movw	r2, #5100	; 0x13ec
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d802      	bhi.n	80027f0 <automatik_mode+0xe0>
				discharge_enable = 0;
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <automatik_mode+0xf4>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20002d08 	.word	0x20002d08
 8002800:	20002cf0 	.word	0x20002cf0
 8002804:	20002d07 	.word	0x20002d07
 8002808:	48000800 	.word	0x48000800

0800280c <get_param_from_ina219>:

void get_param_from_ina219(){
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
	if((HAL_GetTick() - t_ina219) > 100){
 8002810:	f001 f896 	bl	8003940 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <get_param_from_ina219+0x5c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b64      	cmp	r3, #100	; 0x64
 800281e:	d920      	bls.n	8002862 <get_param_from_ina219+0x56>
		t_ina219 = HAL_GetTick();
 8002820:	f001 f88e 	bl	8003940 <HAL_GetTick>
 8002824:	4603      	mov	r3, r0
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <get_param_from_ina219+0x5c>)
 8002828:	6013      	str	r3, [r2, #0]
		v_bus = INA219_ReadBusVoltage(&ina219);
 800282a:	4810      	ldr	r0, [pc, #64]	; (800286c <get_param_from_ina219+0x60>)
 800282c:	f7fe fe5e 	bl	80014ec <INA219_ReadBusVoltage>
 8002830:	4603      	mov	r3, r0
 8002832:	461a      	mov	r2, r3
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <get_param_from_ina219+0x64>)
 8002836:	801a      	strh	r2, [r3, #0]
		v_shunt = INA219_ReadShuntVoltage(&ina219);
 8002838:	480c      	ldr	r0, [pc, #48]	; (800286c <get_param_from_ina219+0x60>)
 800283a:	f7fe fea1 	bl	8001580 <INA219_ReadShuntVoltage>
 800283e:	4603      	mov	r3, r0
 8002840:	461a      	mov	r2, r3
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <get_param_from_ina219+0x68>)
 8002844:	801a      	strh	r2, [r3, #0]
		current = INA219_ReadCurrent(&ina219);
 8002846:	4809      	ldr	r0, [pc, #36]	; (800286c <get_param_from_ina219+0x60>)
 8002848:	f7fe fe74 	bl	8001534 <INA219_ReadCurrent>
 800284c:	4603      	mov	r3, r0
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <get_param_from_ina219+0x6c>)
 8002852:	801a      	strh	r2, [r3, #0]
		power = INA219_Read_Power(&ina219);
 8002854:	4805      	ldr	r0, [pc, #20]	; (800286c <get_param_from_ina219+0x60>)
 8002856:	f7fe feb7 	bl	80015c8 <INA219_Read_Power>
 800285a:	4603      	mov	r3, r0
 800285c:	461a      	mov	r2, r3
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <get_param_from_ina219+0x70>)
 8002860:	801a      	strh	r2, [r3, #0]
	}
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20002cf8 	.word	0x20002cf8
 800286c:	20002ce8 	.word	0x20002ce8
 8002870:	20002cf0 	.word	0x20002cf0
 8002874:	20002cf2 	.word	0x20002cf2
 8002878:	20002cf4 	.word	0x20002cf4
 800287c:	20002cf6 	.word	0x20002cf6

08002880 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == (0x2000)){
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002890:	d115      	bne.n	80028be <HAL_GPIO_EXTI_Callback+0x3e>
		control_mode = !control_mode;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_GPIO_EXTI_Callback+0x4c>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f083 0301 	eor.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <HAL_GPIO_EXTI_Callback+0x4c>)
 80028b0:	701a      	strb	r2, [r3, #0]
		flag_change_mode = 1;
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x50>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
		sd_card_init_flag = 1;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x54>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
	}
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20002d08 	.word	0x20002d08
 80028d0:	20002d0a 	.word	0x20002d0a
 80028d4:	20002ce6 	.word	0x20002ce6

080028d8 <mode_change_func>:

void mode_change_func(){
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
	if(flag_change_mode){
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <mode_change_func+0x44>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d014      	beq.n	8002910 <mode_change_func+0x38>
		flag_change_mode = 0;
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <mode_change_func+0x44>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
		high_charge_off();
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <mode_change_func+0x48>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <mode_change_func+0x48>)
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f6:	6193      	str	r3, [r2, #24]
		low_charge_off();
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <mode_change_func+0x48>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a08      	ldr	r2, [pc, #32]	; (8002920 <mode_change_func+0x48>)
 80028fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002902:	6193      	str	r3, [r2, #24]
		discharge_off();
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <mode_change_func+0x48>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4a05      	ldr	r2, [pc, #20]	; (8002920 <mode_change_func+0x48>)
 800290a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800290e:	6193      	str	r3, [r2, #24]
	}
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20002d0a 	.word	0x20002d0a
 8002920:	48000800 	.word	0x48000800

08002924 <read_state_of_relays>:

void read_state_of_relays(){
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
	state_high_charge = read_state_of_high_charge();
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <read_state_of_relays+0x50>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <read_state_of_relays+0x54>)
 800293c:	701a      	strb	r2, [r3, #0]
	state_low_charge = read_state_of_low_charge();
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <read_state_of_relays+0x50>)
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	b2da      	uxtb	r2, r3
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <read_state_of_relays+0x58>)
 8002952:	701a      	strb	r2, [r3, #0]
	state_discharge = read_state_of_discharge();
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <read_state_of_relays+0x50>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <read_state_of_relays+0x5c>)
 8002968:	701a      	strb	r2, [r3, #0]
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	48000800 	.word	0x48000800
 8002978:	20002d04 	.word	0x20002d04
 800297c:	20002d05 	.word	0x20002d05
 8002980:	20002d06 	.word	0x20002d06

08002984 <print_gmg12864_level_1>:

void print_gmg12864_level_1(){
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
	if((HAL_GetTick() - t_gmg12864) > 200){
 8002988:	f000 ffda 	bl	8003940 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <print_gmg12864_level_1+0x54>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2bc8      	cmp	r3, #200	; 0xc8
 8002996:	d91c      	bls.n	80029d2 <print_gmg12864_level_1+0x4e>
		t_gmg12864 = HAL_GetTick();
 8002998:	f000 ffd2 	bl	8003940 <HAL_GetTick>
 800299c:	4603      	mov	r3, r0
 800299e:	4a0e      	ldr	r2, [pc, #56]	; (80029d8 <print_gmg12864_level_1+0x54>)
 80029a0:	6013      	str	r3, [r2, #0]
		GMG12864_first_line_level_1(0, 0);
 80029a2:	2100      	movs	r1, #0
 80029a4:	2000      	movs	r0, #0
 80029a6:	f000 f819 	bl	80029dc <GMG12864_first_line_level_1>
		GMG12864_second_line_level_1(0, 10);
 80029aa:	210a      	movs	r1, #10
 80029ac:	2000      	movs	r0, #0
 80029ae:	f000 f839 	bl	8002a24 <GMG12864_second_line_level_1>
		GMG12864_third_line_level_1(0, 20);
 80029b2:	2114      	movs	r1, #20
 80029b4:	2000      	movs	r0, #0
 80029b6:	f000 f863 	bl	8002a80 <GMG12864_third_line_level_1>
		GMG12864_fourth_line_level_1(0, 30);
 80029ba:	211e      	movs	r1, #30
 80029bc:	2000      	movs	r0, #0
 80029be:	f000 f883 	bl	8002ac8 <GMG12864_fourth_line_level_1>
		GMG12864_fifth_line_level_1(0, 40);
 80029c2:	2128      	movs	r1, #40	; 0x28
 80029c4:	2000      	movs	r0, #0
 80029c6:	f000 f8a3 	bl	8002b10 <GMG12864_fifth_line_level_1>
		GMG12864_sixth_line_level_1(0, 50);
 80029ca:	2132      	movs	r1, #50	; 0x32
 80029cc:	2000      	movs	r0, #0
 80029ce:	f000 f8c3 	bl	8002b58 <GMG12864_sixth_line_level_1>
	}
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20002cfc 	.word	0x20002cfc

080029dc <GMG12864_first_line_level_1>:

void GMG12864_first_line_level_1(uint8_t x, uint8_t y){
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	4603      	mov	r3, r0
 80029e4:	460a      	mov	r2, r1
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Voltage is %d         ", v_bus);
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <GMG12864_first_line_level_1+0x3c>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	490a      	ldr	r1, [pc, #40]	; (8002a1c <GMG12864_first_line_level_1+0x40>)
 80029f4:	480a      	ldr	r0, [pc, #40]	; (8002a20 <GMG12864_first_line_level_1+0x44>)
 80029f6:	f00a fb99 	bl	800d12c <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 80029fa:	79b9      	ldrb	r1, [r7, #6]
 80029fc:	79f8      	ldrb	r0, [r7, #7]
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <GMG12864_first_line_level_1+0x44>)
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2300      	movs	r3, #0
 8002a04:	2201      	movs	r2, #1
 8002a06:	f7fe fb89 	bl	800111c <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002a0a:	f7fe f9f3 	bl	8000df4 <GMG12864_Update>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20002cf0 	.word	0x20002cf0
 8002a1c:	0800f654 	.word	0x0800f654
 8002a20:	20000210 	.word	0x20000210

08002a24 <GMG12864_second_line_level_1>:

void GMG12864_second_line_level_1(uint8_t x, uint8_t y){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	460a      	mov	r2, r1
 8002a2e:	71fb      	strb	r3, [r7, #7]
 8002a30:	4613      	mov	r3, r2
 8002a32:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Time is %d :%d :%d    ", Hours, Minutes, Seconds);
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <GMG12864_second_line_level_1+0x48>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <GMG12864_second_line_level_1+0x4c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <GMG12864_second_line_level_1+0x50>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	460b      	mov	r3, r1
 8002a48:	490b      	ldr	r1, [pc, #44]	; (8002a78 <GMG12864_second_line_level_1+0x54>)
 8002a4a:	480c      	ldr	r0, [pc, #48]	; (8002a7c <GMG12864_second_line_level_1+0x58>)
 8002a4c:	f00a fb6e 	bl	800d12c <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8002a50:	79b9      	ldrb	r1, [r7, #6]
 8002a52:	79f8      	ldrb	r0, [r7, #7]
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <GMG12864_second_line_level_1+0x58>)
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f7fe fb5e 	bl	800111c <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002a60:	f7fe f9c8 	bl	8000df4 <GMG12864_Update>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20002d12 	.word	0x20002d12
 8002a70:	20002d11 	.word	0x20002d11
 8002a74:	20002d10 	.word	0x20002d10
 8002a78:	0800f66c 	.word	0x0800f66c
 8002a7c:	20000210 	.word	0x20000210

08002a80 <GMG12864_third_line_level_1>:

void GMG12864_third_line_level_1(uint8_t x, uint8_t y){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	4603      	mov	r3, r0
 8002a88:	460a      	mov	r2, r1
 8002a8a:	71fb      	strb	r3, [r7, #7]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	71bb      	strb	r3, [r7, #6]
	//sprintf(tx_buffer, "Power is %d           ", power);
	sprintf(buffer_sd_card, "SD card counter %d    ", counter_sd_card);
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <GMG12864_third_line_level_1+0x3c>)
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	490a      	ldr	r1, [pc, #40]	; (8002ac0 <GMG12864_third_line_level_1+0x40>)
 8002a98:	480a      	ldr	r0, [pc, #40]	; (8002ac4 <GMG12864_third_line_level_1+0x44>)
 8002a9a:	f00a fb47 	bl	800d12c <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, buffer_sd_card);
 8002a9e:	79b9      	ldrb	r1, [r7, #6]
 8002aa0:	79f8      	ldrb	r0, [r7, #7]
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <GMG12864_third_line_level_1+0x44>)
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f7fe fb37 	bl	800111c <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002aae:	f7fe f9a1 	bl	8000df4 <GMG12864_Update>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20002ce4 	.word	0x20002ce4
 8002ac0:	0800f684 	.word	0x0800f684
 8002ac4:	200028e4 	.word	0x200028e4

08002ac8 <GMG12864_fourth_line_level_1>:

void GMG12864_fourth_line_level_1(uint8_t x, uint8_t y){
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	71fb      	strb	r3, [r7, #7]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "low charge %d         ", state_low_charge);
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <GMG12864_fourth_line_level_1+0x3c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	490a      	ldr	r1, [pc, #40]	; (8002b08 <GMG12864_fourth_line_level_1+0x40>)
 8002ae0:	480a      	ldr	r0, [pc, #40]	; (8002b0c <GMG12864_fourth_line_level_1+0x44>)
 8002ae2:	f00a fb23 	bl	800d12c <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8002ae6:	79b9      	ldrb	r1, [r7, #6]
 8002ae8:	79f8      	ldrb	r0, [r7, #7]
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <GMG12864_fourth_line_level_1+0x44>)
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2300      	movs	r3, #0
 8002af0:	2201      	movs	r2, #1
 8002af2:	f7fe fb13 	bl	800111c <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002af6:	f7fe f97d 	bl	8000df4 <GMG12864_Update>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20002d05 	.word	0x20002d05
 8002b08:	0800f69c 	.word	0x0800f69c
 8002b0c:	20000210 	.word	0x20000210

08002b10 <GMG12864_fifth_line_level_1>:

void GMG12864_fifth_line_level_1(uint8_t x, uint8_t y){
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	4603      	mov	r3, r0
 8002b18:	460a      	mov	r2, r1
 8002b1a:	71fb      	strb	r3, [r7, #7]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "high charge %d         ", state_high_charge);
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <GMG12864_fifth_line_level_1+0x3c>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	490a      	ldr	r1, [pc, #40]	; (8002b50 <GMG12864_fifth_line_level_1+0x40>)
 8002b28:	480a      	ldr	r0, [pc, #40]	; (8002b54 <GMG12864_fifth_line_level_1+0x44>)
 8002b2a:	f00a faff 	bl	800d12c <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8002b2e:	79b9      	ldrb	r1, [r7, #6]
 8002b30:	79f8      	ldrb	r0, [r7, #7]
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <GMG12864_fifth_line_level_1+0x44>)
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2300      	movs	r3, #0
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f7fe faef 	bl	800111c <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002b3e:	f7fe f959 	bl	8000df4 <GMG12864_Update>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20002d04 	.word	0x20002d04
 8002b50:	0800f6b4 	.word	0x0800f6b4
 8002b54:	20000210 	.word	0x20000210

08002b58 <GMG12864_sixth_line_level_1>:

void GMG12864_sixth_line_level_1(uint8_t x, uint8_t y){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	4603      	mov	r3, r0
 8002b60:	460a      	mov	r2, r1
 8002b62:	71fb      	strb	r3, [r7, #7]
 8002b64:	4613      	mov	r3, r2
 8002b66:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "discharge %d         ", state_discharge);
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <GMG12864_sixth_line_level_1+0x3c>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	490a      	ldr	r1, [pc, #40]	; (8002b98 <GMG12864_sixth_line_level_1+0x40>)
 8002b70:	480a      	ldr	r0, [pc, #40]	; (8002b9c <GMG12864_sixth_line_level_1+0x44>)
 8002b72:	f00a fadb 	bl	800d12c <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8002b76:	79b9      	ldrb	r1, [r7, #6]
 8002b78:	79f8      	ldrb	r0, [r7, #7]
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <GMG12864_sixth_line_level_1+0x44>)
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2201      	movs	r2, #1
 8002b82:	f7fe facb 	bl	800111c <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002b86:	f7fe f935 	bl	8000df4 <GMG12864_Update>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20002d06 	.word	0x20002d06
 8002b98:	0800f6cc 	.word	0x0800f6cc
 8002b9c:	20000210 	.word	0x20000210

08002ba0 <sd_card_write>:

void sd_card_write(){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af02      	add	r7, sp, #8
	if(HAL_GetTick() - t_sd_card > 1000){
 8002ba6:	f000 fecb 	bl	8003940 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <sd_card_write+0x11c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb6:	d97e      	bls.n	8002cb6 <sd_card_write+0x116>
		if((fresult = f_open(&fil, "parameters.txt", FA_OPEN_ALWAYS | FA_WRITE)) == FR_OK){
 8002bb8:	2212      	movs	r2, #18
 8002bba:	4941      	ldr	r1, [pc, #260]	; (8002cc0 <sd_card_write+0x120>)
 8002bbc:	4841      	ldr	r0, [pc, #260]	; (8002cc4 <sd_card_write+0x124>)
 8002bbe:	f008 fba1 	bl	800b304 <f_open>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <sd_card_write+0x128>)
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <sd_card_write+0x128>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d141      	bne.n	8002c56 <sd_card_write+0xb6>
			t_sd_card = HAL_GetTick();
 8002bd2:	f000 feb5 	bl	8003940 <HAL_GetTick>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4a38      	ldr	r2, [pc, #224]	; (8002cbc <sd_card_write+0x11c>)
 8002bda:	6013      	str	r3, [r2, #0]
			sprintf(buffer_sd_card, "Time is %d :%d :%d, voltage is %d    ", Hours, Minutes, Seconds, v_bus);
 8002bdc:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <sd_card_write+0x12c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <sd_card_write+0x130>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	4b3a      	ldr	r3, [pc, #232]	; (8002cd4 <sd_card_write+0x134>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b3a      	ldr	r3, [pc, #232]	; (8002cd8 <sd_card_write+0x138>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	9200      	str	r2, [sp, #0]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	460a      	mov	r2, r1
 8002bfa:	4938      	ldr	r1, [pc, #224]	; (8002cdc <sd_card_write+0x13c>)
 8002bfc:	4838      	ldr	r0, [pc, #224]	; (8002ce0 <sd_card_write+0x140>)
 8002bfe:	f00a fa95 	bl	800d12c <siprintf>
			fresult = f_lseek(&fil, fil.fsize);
 8002c02:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <sd_card_write+0x124>)
 8002c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	482d      	ldr	r0, [pc, #180]	; (8002cc4 <sd_card_write+0x124>)
 8002c0e:	f009 f9c3 	bl	800bf98 <f_lseek>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b2c      	ldr	r3, [pc, #176]	; (8002cc8 <sd_card_write+0x128>)
 8002c18:	701a      	strb	r2, [r3, #0]
			fresult = f_puts("DATA!!!/n", &fil);
 8002c1a:	492a      	ldr	r1, [pc, #168]	; (8002cc4 <sd_card_write+0x124>)
 8002c1c:	4831      	ldr	r0, [pc, #196]	; (8002ce4 <sd_card_write+0x144>)
 8002c1e:	f009 fce9 	bl	800c5f4 <f_puts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <sd_card_write+0x128>)
 8002c28:	701a      	strb	r2, [r3, #0]
			fresult = f_close(&fil);
 8002c2a:	4826      	ldr	r0, [pc, #152]	; (8002cc4 <sd_card_write+0x124>)
 8002c2c:	f009 f989 	bl	800bf42 <f_close>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <sd_card_write+0x128>)
 8002c36:	701a      	strb	r2, [r3, #0]
			counter_sd_card += 1;
 8002c38:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <sd_card_write+0x148>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <sd_card_write+0x148>)
 8002c42:	801a      	strh	r2, [r3, #0]
			SET_BIT(GPIOA->BSRR, GPIO_BSRR_BR_5);
 8002c44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c52:	6193      	str	r3, [r2, #24]
			t_sd_card = HAL_GetTick();
			sprintf(buffer_sd_card, "Problem with sd card!!");
			SET_BIT(GPIOA->BSRR, GPIO_BSRR_BS_5);
		}
	}
}
 8002c54:	e02f      	b.n	8002cb6 <sd_card_write+0x116>
		else if((fresult = f_open(&fil, "parameters.txt", FA_OPEN_ALWAYS | FA_WRITE)) == FR_DISK_ERR){
 8002c56:	2212      	movs	r2, #18
 8002c58:	4919      	ldr	r1, [pc, #100]	; (8002cc0 <sd_card_write+0x120>)
 8002c5a:	481a      	ldr	r0, [pc, #104]	; (8002cc4 <sd_card_write+0x124>)
 8002c5c:	f008 fb52 	bl	800b304 <f_open>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <sd_card_write+0x128>)
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <sd_card_write+0x128>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d111      	bne.n	8002c94 <sd_card_write+0xf4>
			t_sd_card = HAL_GetTick();
 8002c70:	f000 fe66 	bl	8003940 <HAL_GetTick>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <sd_card_write+0x11c>)
 8002c78:	6013      	str	r3, [r2, #0]
			sprintf(buffer_sd_card, "Card is not detected!!");
 8002c7a:	491c      	ldr	r1, [pc, #112]	; (8002cec <sd_card_write+0x14c>)
 8002c7c:	4818      	ldr	r0, [pc, #96]	; (8002ce0 <sd_card_write+0x140>)
 8002c7e:	f00a fa55 	bl	800d12c <siprintf>
			SET_BIT(GPIOA->BSRR, GPIO_BSRR_BS_5);
 8002c82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c8c:	f043 0320 	orr.w	r3, r3, #32
 8002c90:	6193      	str	r3, [r2, #24]
}
 8002c92:	e010      	b.n	8002cb6 <sd_card_write+0x116>
			t_sd_card = HAL_GetTick();
 8002c94:	f000 fe54 	bl	8003940 <HAL_GetTick>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <sd_card_write+0x11c>)
 8002c9c:	6013      	str	r3, [r2, #0]
			sprintf(buffer_sd_card, "Problem with sd card!!");
 8002c9e:	4914      	ldr	r1, [pc, #80]	; (8002cf0 <sd_card_write+0x150>)
 8002ca0:	480f      	ldr	r0, [pc, #60]	; (8002ce0 <sd_card_write+0x140>)
 8002ca2:	f00a fa43 	bl	800d12c <siprintf>
			SET_BIT(GPIOA->BSRR, GPIO_BSRR_BS_5);
 8002ca6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cb0:	f043 0320 	orr.w	r3, r3, #32
 8002cb4:	6193      	str	r3, [r2, #24]
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20002d00 	.word	0x20002d00
 8002cc0:	0800f6e4 	.word	0x0800f6e4
 8002cc4:	200018b4 	.word	0x200018b4
 8002cc8:	200028e0 	.word	0x200028e0
 8002ccc:	20002d12 	.word	0x20002d12
 8002cd0:	20002d11 	.word	0x20002d11
 8002cd4:	20002d10 	.word	0x20002d10
 8002cd8:	20002cf0 	.word	0x20002cf0
 8002cdc:	0800f6f4 	.word	0x0800f6f4
 8002ce0:	200028e4 	.word	0x200028e4
 8002ce4:	0800f71c 	.word	0x0800f71c
 8002ce8:	20002ce4 	.word	0x20002ce4
 8002cec:	0800f63c 	.word	0x0800f63c
 8002cf0:	0800f728 	.word	0x0800f728

08002cf4 <manual_init_sd_card>:

void manual_init_sd_card(){
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
	if(sd_card_init_flag){
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <manual_init_sd_card+0x84>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d038      	beq.n	8002d74 <manual_init_sd_card+0x80>
		sd_card_init_flag = 0;
 8002d02:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <manual_init_sd_card+0x84>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
		memset(&fs, 0, sizeof(fs));
 8002d08:	f241 0230 	movw	r2, #4144	; 0x1030
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	481b      	ldr	r0, [pc, #108]	; (8002d7c <manual_init_sd_card+0x88>)
 8002d10:	f009 fd9a 	bl	800c848 <memset>
		fresult = f_mount(&fs, "", 0);
 8002d14:	2200      	movs	r2, #0
 8002d16:	491a      	ldr	r1, [pc, #104]	; (8002d80 <manual_init_sd_card+0x8c>)
 8002d18:	4818      	ldr	r0, [pc, #96]	; (8002d7c <manual_init_sd_card+0x88>)
 8002d1a:	f008 faa9 	bl	800b270 <f_mount>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <manual_init_sd_card+0x90>)
 8002d24:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8002d26:	2032      	movs	r0, #50	; 0x32
 8002d28:	f000 fe16 	bl	8003958 <HAL_Delay>
		fresult = f_mount(&fs, "", 0);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4914      	ldr	r1, [pc, #80]	; (8002d80 <manual_init_sd_card+0x8c>)
 8002d30:	4812      	ldr	r0, [pc, #72]	; (8002d7c <manual_init_sd_card+0x88>)
 8002d32:	f008 fa9d 	bl	800b270 <f_mount>
 8002d36:	4603      	mov	r3, r0
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <manual_init_sd_card+0x90>)
 8002d3c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8002d3e:	2032      	movs	r0, #50	; 0x32
 8002d40:	f000 fe0a 	bl	8003958 <HAL_Delay>
		fresult = f_mount(&fs, "", 0);
 8002d44:	2200      	movs	r2, #0
 8002d46:	490e      	ldr	r1, [pc, #56]	; (8002d80 <manual_init_sd_card+0x8c>)
 8002d48:	480c      	ldr	r0, [pc, #48]	; (8002d7c <manual_init_sd_card+0x88>)
 8002d4a:	f008 fa91 	bl	800b270 <f_mount>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <manual_init_sd_card+0x90>)
 8002d54:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8002d56:	2032      	movs	r0, #50	; 0x32
 8002d58:	f000 fdfe 	bl	8003958 <HAL_Delay>
		fresult = f_mount(&fs, "", 0);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4908      	ldr	r1, [pc, #32]	; (8002d80 <manual_init_sd_card+0x8c>)
 8002d60:	4806      	ldr	r0, [pc, #24]	; (8002d7c <manual_init_sd_card+0x88>)
 8002d62:	f008 fa85 	bl	800b270 <f_mount>
 8002d66:	4603      	mov	r3, r0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <manual_init_sd_card+0x90>)
 8002d6c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8002d6e:	2032      	movs	r0, #50	; 0x32
 8002d70:	f000 fdf2 	bl	8003958 <HAL_Delay>
	}
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20002ce6 	.word	0x20002ce6
 8002d7c:	20000884 	.word	0x20000884
 8002d80:	0800f638 	.word	0x0800f638
 8002d84:	200028e0 	.word	0x200028e0

08002d88 <ds3231_get_time_and_temp>:

void ds3231_get_time_and_temp(){
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - t_ds3231 > 1000){
 8002d8c:	f000 fdd8 	bl	8003940 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <ds3231_get_time_and_temp+0x2c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9c:	d908      	bls.n	8002db0 <ds3231_get_time_and_temp+0x28>
		t_ds3231 = HAL_GetTick();
 8002d9e:	f000 fdcf 	bl	8003940 <HAL_GetTick>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4a03      	ldr	r2, [pc, #12]	; (8002db4 <ds3231_get_time_and_temp+0x2c>)
 8002da6:	6013      	str	r3, [r2, #0]
		max_ds3231_get_time();
 8002da8:	f000 f80c 	bl	8002dc4 <max_ds3231_get_time>
		max_ds3231_get_temperature();
 8002dac:	f000 f8b0 	bl	8002f10 <max_ds3231_get_temperature>
	}
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20002d0c 	.word	0x20002d0c

08002db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dbc:	b672      	cpsid	i
}
 8002dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <Error_Handler+0x8>
	...

08002dc4 <max_ds3231_get_time>:

/*-------------------------------------Глобальные переменные----------------------------------*/

/*--------------------------------Функция запроса данных о времени----------------------------*/

void max_ds3231_get_time(void) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af02      	add	r7, sp, #8
	///Функция запроса данных о времени/
	///(См. Datasheet DS3231. Cтр.11, табл. 1).
	///Считываем регистры с 0x00 по 0x06 включительно.
	uint8_t tx_buffer = 0x00;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buffer[7] = { 0, };
 8002dce:	2300      	movs	r3, #0
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	460a      	mov	r2, r1
 8002dd8:	801a      	strh	r2, [r3, #0]
 8002dda:	460a      	mov	r2, r1
 8002ddc:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c2, Adress, &tx_buffer, 1, 10);
 8002dde:	1dfa      	adds	r2, r7, #7
 8002de0:	230a      	movs	r3, #10
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2301      	movs	r3, #1
 8002de6:	21d0      	movs	r1, #208	; 0xd0
 8002de8:	4840      	ldr	r0, [pc, #256]	; (8002eec <max_ds3231_get_time+0x128>)
 8002dea:	f001 f97f 	bl	80040ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, Adress, rx_buffer, 7, 10);
 8002dee:	463a      	mov	r2, r7
 8002df0:	230a      	movs	r3, #10
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2307      	movs	r3, #7
 8002df6:	21d0      	movs	r1, #208	; 0xd0
 8002df8:	483c      	ldr	r0, [pc, #240]	; (8002eec <max_ds3231_get_time+0x128>)
 8002dfa:	f001 fa6b 	bl	80042d4 <HAL_I2C_Master_Receive>

	Seconds = (rx_buffer[0] >> 4) * 10 + (rx_buffer[0] & 0x0F);
 8002dfe:	783b      	ldrb	r3, [r7, #0]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	0092      	lsls	r2, r2, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	783b      	ldrb	r3, [r7, #0]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4b35      	ldr	r3, [pc, #212]	; (8002ef0 <max_ds3231_get_time+0x12c>)
 8002e1c:	701a      	strb	r2, [r3, #0]
	Minutes = (rx_buffer[1] >> 4) * 10 + (rx_buffer[1] & 0x0F);
 8002e1e:	787b      	ldrb	r3, [r7, #1]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	787b      	ldrb	r3, [r7, #1]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <max_ds3231_get_time+0x130>)
 8002e3c:	701a      	strb	r2, [r3, #0]
	Hours = (rx_buffer[2] >> 4) * 10 + (rx_buffer[2] & 0x0F);
 8002e3e:	78bb      	ldrb	r3, [r7, #2]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	78bb      	ldrb	r3, [r7, #2]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <max_ds3231_get_time+0x134>)
 8002e5c:	701a      	strb	r2, [r3, #0]
	Day = rx_buffer[3];
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	4b26      	ldr	r3, [pc, #152]	; (8002efc <max_ds3231_get_time+0x138>)
 8002e62:	701a      	strb	r2, [r3, #0]
	Date = (rx_buffer[4] >> 4) * 10 + (rx_buffer[4] & 0x0F);
 8002e64:	793b      	ldrb	r3, [r7, #4]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	793b      	ldrb	r3, [r7, #4]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	4b1f      	ldr	r3, [pc, #124]	; (8002f00 <max_ds3231_get_time+0x13c>)
 8002e82:	701a      	strb	r2, [r3, #0]
	Month = ((rx_buffer[5] >> 4) & 0x07) * 10 + (rx_buffer[5] & 0x0F);
 8002e84:	797b      	ldrb	r3, [r7, #5]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	797b      	ldrb	r3, [r7, #5]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <max_ds3231_get_time+0x140>)
 8002ea8:	701a      	strb	r2, [r3, #0]
	Cuntury = 20 + (rx_buffer[5] >> 7);
 8002eaa:	797b      	ldrb	r3, [r7, #5]
 8002eac:	09db      	lsrs	r3, r3, #7
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	3314      	adds	r3, #20
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <max_ds3231_get_time+0x144>)
 8002eb6:	701a      	strb	r2, [r3, #0]
	Year = 2000 + (rx_buffer[6] >> 4) * 10 + (rx_buffer[6] & 0x0F);
 8002eb8:	79bb      	ldrb	r3, [r7, #6]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	0092      	lsls	r2, r2, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	79bb      	ldrb	r3, [r7, #6]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <max_ds3231_get_time+0x148>)
 8002ee0:	801a      	strh	r2, [r3, #0]
	//printf("Moscow time:\r\n");
	//printf("%02d:%02d:%02d\r\n", Hours, Minutes, Seconds);
	//printf("%02d:%02d:%d\r\n", Date, Month, Year);
	//printf("Cuntury = %d\r\n", Cuntury);
	/*-----------------------Если включена отладка по SWO-------------------------------------*/
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200006ec 	.word	0x200006ec
 8002ef0:	20002d10 	.word	0x20002d10
 8002ef4:	20002d11 	.word	0x20002d11
 8002ef8:	20002d12 	.word	0x20002d12
 8002efc:	20002d13 	.word	0x20002d13
 8002f00:	20002d14 	.word	0x20002d14
 8002f04:	20002d15 	.word	0x20002d15
 8002f08:	20002d16 	.word	0x20002d16
 8002f0c:	20002d18 	.word	0x20002d18

08002f10 <max_ds3231_get_temperature>:

/*--------------------------------Функция запроса данных о времени----------------------------*/

/*------------------------------Функция запроса данных о температуре--------------------------*/

void max_ds3231_get_temperature(void) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af02      	add	r7, sp, #8
	///Функция запроса данных о времени/
	///(См. Datasheet DS3231. Cтр.11, табл. 1).
	///Считываем регистры с 0x11 по 0x12 включительно.
	uint8_t rx_buffer[2] = { 0, };
 8002f16:	2300      	movs	r3, #0
 8002f18:	813b      	strh	r3, [r7, #8]
	uint8_t tx_buffer = 0x11;
 8002f1a:	2311      	movs	r3, #17
 8002f1c:	71fb      	strb	r3, [r7, #7]
	float temp_fractional_part = 0.0f;
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, Adress, &tx_buffer, 1, 10);
 8002f24:	1dfa      	adds	r2, r7, #7
 8002f26:	230a      	movs	r3, #10
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	21d0      	movs	r1, #208	; 0xd0
 8002f2e:	4828      	ldr	r0, [pc, #160]	; (8002fd0 <max_ds3231_get_temperature+0xc0>)
 8002f30:	f001 f8dc 	bl	80040ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, Adress, rx_buffer, 2, 10);
 8002f34:	f107 0208 	add.w	r2, r7, #8
 8002f38:	230a      	movs	r3, #10
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	21d0      	movs	r1, #208	; 0xd0
 8002f40:	4823      	ldr	r0, [pc, #140]	; (8002fd0 <max_ds3231_get_temperature+0xc0>)
 8002f42:	f001 f9c7 	bl	80042d4 <HAL_I2C_Master_Receive>

	max_ds3231_temp = 0.0f;
 8002f46:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <max_ds3231_get_temperature+0xc4>)
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
	temp_fractional_part = 0.0f;
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]

	if (rx_buffer[1] == 0x00) {
 8002f54:	7a7b      	ldrb	r3, [r7, #9]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <max_ds3231_get_temperature+0x52>
		temp_fractional_part = 0.0f;
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e013      	b.n	8002f8a <max_ds3231_get_temperature+0x7a>
	} else if (rx_buffer[1] == 0x40) {
 8002f62:	7a7b      	ldrb	r3, [r7, #9]
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d103      	bne.n	8002f70 <max_ds3231_get_temperature+0x60>
		temp_fractional_part = 0.25f;
 8002f68:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e00c      	b.n	8002f8a <max_ds3231_get_temperature+0x7a>
	} else if (rx_buffer[1] == 0x80) {
 8002f70:	7a7b      	ldrb	r3, [r7, #9]
 8002f72:	2b80      	cmp	r3, #128	; 0x80
 8002f74:	d103      	bne.n	8002f7e <max_ds3231_get_temperature+0x6e>
		temp_fractional_part = 0.5f;
 8002f76:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e005      	b.n	8002f8a <max_ds3231_get_temperature+0x7a>
	} else if (rx_buffer[1] == 0xC0) {
 8002f7e:	7a7b      	ldrb	r3, [r7, #9]
 8002f80:	2bc0      	cmp	r3, #192	; 0xc0
 8002f82:	d102      	bne.n	8002f8a <max_ds3231_get_temperature+0x7a>
		temp_fractional_part = 0.75f;
 8002f84:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002f88:	60fb      	str	r3, [r7, #12]
	}

	if (rx_buffer[0] < 0x80) {
 8002f8a:	7a3b      	ldrb	r3, [r7, #8]
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db0c      	blt.n	8002fac <max_ds3231_get_temperature+0x9c>
		max_ds3231_temp = rx_buffer[0] + temp_fractional_part;
 8002f92:	7a3b      	ldrb	r3, [r7, #8]
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <max_ds3231_get_temperature+0xc4>)
 8002fa6:	edc3 7a00 	vstr	s15, [r3]
		max_ds3231_temp = (rx_buffer[0] + temp_fractional_part) * (-1);
	}
	/*-----------------------Если включена отладка по SWO-------------------------------------*/
	//printf("Temperature: %.2f\r\n", max_ds3231_temp);
	/*-----------------------Если включена отладка по SWO-------------------------------------*/
}
 8002faa:	e00d      	b.n	8002fc8 <max_ds3231_get_temperature+0xb8>
		max_ds3231_temp = (rx_buffer[0] + temp_fractional_part) * (-1);
 8002fac:	7a3b      	ldrb	r3, [r7, #8]
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbe:	eef1 7a67 	vneg.f32	s15, s15
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <max_ds3231_get_temperature+0xc4>)
 8002fc4:	edc3 7a00 	vstr	s15, [r3]
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	200006ec 	.word	0x200006ec
 8002fd4:	20002d1c 	.word	0x20002d1c

08002fd8 <max_ds3231_set_seconds>:

/*------------------------------Функция запроса данных о температуре--------------------------*/

/*--------------------------------------Задать время(секунды)---------------------------------*/

void max_ds3231_set_seconds(uint8_t seconds) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
	///Функция: Задать время (секунды)
	///(См. Datasheet DS3231. Cтр.11, табл. 1).
	///Записываем данные в адрес 0x00.
	/// \param seconds - Секунды. Параметр от 0 до 59;
	uint8_t tx_buffer[2] = { 0, };
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	81bb      	strh	r3, [r7, #12]
	tx_buffer[0] = 0x00;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	733b      	strb	r3, [r7, #12]
	if (seconds < 10) {
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	2b09      	cmp	r3, #9
 8002fee:	d80c      	bhi.n	800300a <max_ds3231_set_seconds+0x32>
		tx_buffer[1] = seconds % 10;
 8002ff0:	79fa      	ldrb	r2, [r7, #7]
 8002ff2:	4b25      	ldr	r3, [pc, #148]	; (8003088 <max_ds3231_set_seconds+0xb0>)
 8002ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff8:	08d9      	lsrs	r1, r3, #3
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	737b      	strb	r3, [r7, #13]
 8003008:	e030      	b.n	800306c <max_ds3231_set_seconds+0x94>
	} else if (seconds >= 10 && seconds <= 59) {
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b09      	cmp	r3, #9
 800300e:	d928      	bls.n	8003062 <max_ds3231_set_seconds+0x8a>
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	2b3b      	cmp	r3, #59	; 0x3b
 8003014:	d825      	bhi.n	8003062 <max_ds3231_set_seconds+0x8a>
		tx_buffer[1] = (((seconds - (seconds % 10)) / 10) << 4)
 8003016:	79f8      	ldrb	r0, [r7, #7]
 8003018:	79fa      	ldrb	r2, [r7, #7]
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <max_ds3231_set_seconds+0xb0>)
 800301c:	fba3 1302 	umull	r1, r3, r3, r2
 8003020:	08d9      	lsrs	r1, r3, #3
 8003022:	460b      	mov	r3, r1
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	1ac3      	subs	r3, r0, r3
 8003030:	4a16      	ldr	r2, [pc, #88]	; (800308c <max_ds3231_set_seconds+0xb4>)
 8003032:	fb82 1203 	smull	r1, r2, r2, r3
 8003036:	1092      	asrs	r2, r2, #2
 8003038:	17db      	asrs	r3, r3, #31
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	011b      	lsls	r3, r3, #4
				| (seconds % 10);
 800303e:	b258      	sxtb	r0, r3
 8003040:	79fa      	ldrb	r2, [r7, #7]
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <max_ds3231_set_seconds+0xb0>)
 8003044:	fba3 1302 	umull	r1, r3, r3, r2
 8003048:	08d9      	lsrs	r1, r3, #3
 800304a:	460b      	mov	r3, r1
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	b25b      	sxtb	r3, r3
 8003058:	4303      	orrs	r3, r0
 800305a:	b25b      	sxtb	r3, r3
 800305c:	b2db      	uxtb	r3, r3
		tx_buffer[1] = (((seconds - (seconds % 10)) / 10) << 4)
 800305e:	737b      	strb	r3, [r7, #13]
 8003060:	e004      	b.n	800306c <max_ds3231_set_seconds+0x94>
	} else if (seconds > 59) {
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b3b      	cmp	r3, #59	; 0x3b
 8003066:	d901      	bls.n	800306c <max_ds3231_set_seconds+0x94>
		tx_buffer[1] = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	737b      	strb	r3, [r7, #13]
	}

	HAL_I2C_Master_Transmit(&hi2c2, Adress, tx_buffer, 2, HAL_MAX_DELAY);
 800306c:	f107 020c 	add.w	r2, r7, #12
 8003070:	f04f 33ff 	mov.w	r3, #4294967295
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	2302      	movs	r3, #2
 8003078:	21d0      	movs	r1, #208	; 0xd0
 800307a:	4805      	ldr	r0, [pc, #20]	; (8003090 <max_ds3231_set_seconds+0xb8>)
 800307c:	f001 f836 	bl	80040ec <HAL_I2C_Master_Transmit>
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	cccccccd 	.word	0xcccccccd
 800308c:	66666667 	.word	0x66666667
 8003090:	200006ec 	.word	0x200006ec

08003094 <max_ds3231_set_minutes>:

/*--------------------------------------Задать время(секунды)---------------------------------*/

/*--------------------------------------Задать время(минуты)---------------------------------*/

void max_ds3231_set_minutes(uint8_t minutes) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af02      	add	r7, sp, #8
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
	///Функция: Задать время (минуты)
	///(См. Datasheet DS3231. Cтр.11, табл. 1).
	///Записываем данные в адрес 0x01.
	/// \param minutes - Минуты. Параметр от 0 до 59;
	uint8_t tx_buffer[2] = { 0, };
 800309e:	2300      	movs	r3, #0
 80030a0:	81bb      	strh	r3, [r7, #12]
	tx_buffer[0] = 0x01;
 80030a2:	2301      	movs	r3, #1
 80030a4:	733b      	strb	r3, [r7, #12]
	if (minutes < 10) {
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d80c      	bhi.n	80030c6 <max_ds3231_set_minutes+0x32>
		tx_buffer[1] = minutes % 10;
 80030ac:	79fa      	ldrb	r2, [r7, #7]
 80030ae:	4b25      	ldr	r3, [pc, #148]	; (8003144 <max_ds3231_set_minutes+0xb0>)
 80030b0:	fba3 1302 	umull	r1, r3, r3, r2
 80030b4:	08d9      	lsrs	r1, r3, #3
 80030b6:	460b      	mov	r3, r1
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	737b      	strb	r3, [r7, #13]
 80030c4:	e030      	b.n	8003128 <max_ds3231_set_minutes+0x94>
	} else if (minutes >= 10 && minutes <= 59) {
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	2b09      	cmp	r3, #9
 80030ca:	d928      	bls.n	800311e <max_ds3231_set_minutes+0x8a>
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	2b3b      	cmp	r3, #59	; 0x3b
 80030d0:	d825      	bhi.n	800311e <max_ds3231_set_minutes+0x8a>
		tx_buffer[1] = (((minutes - (minutes % 10)) / 10) << 4)
 80030d2:	79f8      	ldrb	r0, [r7, #7]
 80030d4:	79fa      	ldrb	r2, [r7, #7]
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <max_ds3231_set_minutes+0xb0>)
 80030d8:	fba3 1302 	umull	r1, r3, r3, r2
 80030dc:	08d9      	lsrs	r1, r3, #3
 80030de:	460b      	mov	r3, r1
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	1ac3      	subs	r3, r0, r3
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <max_ds3231_set_minutes+0xb4>)
 80030ee:	fb82 1203 	smull	r1, r2, r2, r3
 80030f2:	1092      	asrs	r2, r2, #2
 80030f4:	17db      	asrs	r3, r3, #31
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	011b      	lsls	r3, r3, #4
				| (minutes % 10);
 80030fa:	b258      	sxtb	r0, r3
 80030fc:	79fa      	ldrb	r2, [r7, #7]
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <max_ds3231_set_minutes+0xb0>)
 8003100:	fba3 1302 	umull	r1, r3, r3, r2
 8003104:	08d9      	lsrs	r1, r3, #3
 8003106:	460b      	mov	r3, r1
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	b25b      	sxtb	r3, r3
 8003114:	4303      	orrs	r3, r0
 8003116:	b25b      	sxtb	r3, r3
 8003118:	b2db      	uxtb	r3, r3
		tx_buffer[1] = (((minutes - (minutes % 10)) / 10) << 4)
 800311a:	737b      	strb	r3, [r7, #13]
 800311c:	e004      	b.n	8003128 <max_ds3231_set_minutes+0x94>
	} else if (minutes > 59) {
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	2b3b      	cmp	r3, #59	; 0x3b
 8003122:	d901      	bls.n	8003128 <max_ds3231_set_minutes+0x94>
		tx_buffer[1] = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	737b      	strb	r3, [r7, #13]
	}

	HAL_I2C_Master_Transmit(&hi2c2, Adress, tx_buffer, 2, HAL_MAX_DELAY);
 8003128:	f107 020c 	add.w	r2, r7, #12
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2302      	movs	r3, #2
 8003134:	21d0      	movs	r1, #208	; 0xd0
 8003136:	4805      	ldr	r0, [pc, #20]	; (800314c <max_ds3231_set_minutes+0xb8>)
 8003138:	f000 ffd8 	bl	80040ec <HAL_I2C_Master_Transmit>
}
 800313c:	bf00      	nop
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	cccccccd 	.word	0xcccccccd
 8003148:	66666667 	.word	0x66666667
 800314c:	200006ec 	.word	0x200006ec

08003150 <max_ds3231_set_hours>:

/*--------------------------------------Задать время(минуты)---------------------------------*/

/*---------------------------------------Задать время(час)-----------------------------------*/

void max_ds3231_set_hours(uint8_t hours) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af02      	add	r7, sp, #8
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
	///Функция: Задать время (час)
	///(См. Datasheet DS3231. Cтр.11, табл. 1).
	///Записываем данные в адрес 0x02.
	/// \param hours - Часы. Параметр от 0 до 59;
	uint8_t tx_buffer[2] = { 0, };
 800315a:	2300      	movs	r3, #0
 800315c:	81bb      	strh	r3, [r7, #12]
	tx_buffer[0] = 0x02;
 800315e:	2302      	movs	r3, #2
 8003160:	733b      	strb	r3, [r7, #12]
	if (hours < 10) {
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2b09      	cmp	r3, #9
 8003166:	d80c      	bhi.n	8003182 <max_ds3231_set_hours+0x32>
		tx_buffer[1] = hours % 10;
 8003168:	79fa      	ldrb	r2, [r7, #7]
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <max_ds3231_set_hours+0xb0>)
 800316c:	fba3 1302 	umull	r1, r3, r3, r2
 8003170:	08d9      	lsrs	r1, r3, #3
 8003172:	460b      	mov	r3, r1
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	737b      	strb	r3, [r7, #13]
 8003180:	e030      	b.n	80031e4 <max_ds3231_set_hours+0x94>
	} else if (hours >= 10 && hours <= 23) {
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	2b09      	cmp	r3, #9
 8003186:	d928      	bls.n	80031da <max_ds3231_set_hours+0x8a>
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	2b17      	cmp	r3, #23
 800318c:	d825      	bhi.n	80031da <max_ds3231_set_hours+0x8a>
		tx_buffer[1] = (((hours - (hours % 10)) / 10) << 4) | (hours % 10);
 800318e:	79f8      	ldrb	r0, [r7, #7]
 8003190:	79fa      	ldrb	r2, [r7, #7]
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <max_ds3231_set_hours+0xb0>)
 8003194:	fba3 1302 	umull	r1, r3, r3, r2
 8003198:	08d9      	lsrs	r1, r3, #3
 800319a:	460b      	mov	r3, r1
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	1ac3      	subs	r3, r0, r3
 80031a8:	4a16      	ldr	r2, [pc, #88]	; (8003204 <max_ds3231_set_hours+0xb4>)
 80031aa:	fb82 1203 	smull	r1, r2, r2, r3
 80031ae:	1092      	asrs	r2, r2, #2
 80031b0:	17db      	asrs	r3, r3, #31
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	b258      	sxtb	r0, r3
 80031b8:	79fa      	ldrb	r2, [r7, #7]
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <max_ds3231_set_hours+0xb0>)
 80031bc:	fba3 1302 	umull	r1, r3, r3, r2
 80031c0:	08d9      	lsrs	r1, r3, #3
 80031c2:	460b      	mov	r3, r1
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	b25b      	sxtb	r3, r3
 80031d0:	4303      	orrs	r3, r0
 80031d2:	b25b      	sxtb	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	737b      	strb	r3, [r7, #13]
 80031d8:	e004      	b.n	80031e4 <max_ds3231_set_hours+0x94>
	} else if (hours > 23) {
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	2b17      	cmp	r3, #23
 80031de:	d901      	bls.n	80031e4 <max_ds3231_set_hours+0x94>
		tx_buffer[1] = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	737b      	strb	r3, [r7, #13]
	}

	HAL_I2C_Master_Transmit(&hi2c2, Adress, tx_buffer, 2, HAL_MAX_DELAY);
 80031e4:	f107 020c 	add.w	r2, r7, #12
 80031e8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2302      	movs	r3, #2
 80031f0:	21d0      	movs	r1, #208	; 0xd0
 80031f2:	4805      	ldr	r0, [pc, #20]	; (8003208 <max_ds3231_set_hours+0xb8>)
 80031f4:	f000 ff7a 	bl	80040ec <HAL_I2C_Master_Transmit>
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	cccccccd 	.word	0xcccccccd
 8003204:	66666667 	.word	0x66666667
 8003208:	200006ec 	.word	0x200006ec

0800320c <max_ds3231_set_day>:

/*---------------------------------------Задать время(час)-----------------------------------*/

/*----------------------------------Задать время(день недели)--------------------------------*/

void max_ds3231_set_day(uint8_t day) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af02      	add	r7, sp, #8
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
	///Функция: Задать время (день недели)
	///(См. Datasheet DS3231. Cтр.11, табл. 1).
	///Записываем данные в адрес 0x03.
	/// \param day - День недели. Пн = 1, Вт = 2 и т.д. Параметр от 1 до 7;
	uint8_t tx_buffer[2] = { 0, };
 8003216:	2300      	movs	r3, #0
 8003218:	81bb      	strh	r3, [r7, #12]
	tx_buffer[0] = 0x03;
 800321a:	2303      	movs	r3, #3
 800321c:	733b      	strb	r3, [r7, #12]
	if (day > 0 && day <= 7) {
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <max_ds3231_set_day+0x24>
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	2b07      	cmp	r3, #7
 8003228:	d802      	bhi.n	8003230 <max_ds3231_set_day+0x24>
		tx_buffer[1] = day;
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	737b      	strb	r3, [r7, #13]
 800322e:	e001      	b.n	8003234 <max_ds3231_set_day+0x28>
	} else {
		tx_buffer[1] = 1;
 8003230:	2301      	movs	r3, #1
 8003232:	737b      	strb	r3, [r7, #13]
	}

	HAL_I2C_Master_Transmit(&hi2c2, Adress, tx_buffer, 2, HAL_MAX_DELAY);
 8003234:	f107 020c 	add.w	r2, r7, #12
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2302      	movs	r3, #2
 8003240:	21d0      	movs	r1, #208	; 0xd0
 8003242:	4803      	ldr	r0, [pc, #12]	; (8003250 <max_ds3231_set_day+0x44>)
 8003244:	f000 ff52 	bl	80040ec <HAL_I2C_Master_Transmit>
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200006ec 	.word	0x200006ec

08003254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_MspInit+0x44>)
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <HAL_MspInit+0x44>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6193      	str	r3, [r2, #24]
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <HAL_MspInit+0x44>)
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_MspInit+0x44>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	4a08      	ldr	r2, [pc, #32]	; (8003298 <HAL_MspInit+0x44>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	61d3      	str	r3, [r2, #28]
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_MspInit+0x44>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800328a:	2007      	movs	r0, #7
 800328c:	f000 fc58 	bl	8003b40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000

0800329c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	; 0x30
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a46      	ldr	r2, [pc, #280]	; (80033d4 <HAL_I2C_MspInit+0x138>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d146      	bne.n	800334c <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4a45      	ldr	r2, [pc, #276]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 80032c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c8:	6153      	str	r3, [r2, #20]
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d6:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	4a3f      	ldr	r2, [pc, #252]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6153      	str	r3, [r2, #20]
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032f4:	2312      	movs	r3, #18
 80032f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032fc:	2303      	movs	r3, #3
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003300:	2304      	movs	r3, #4
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003304:	f107 031c 	add.w	r3, r7, #28
 8003308:	4619      	mov	r1, r3
 800330a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800330e:	f000 fca3 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003316:	2312      	movs	r3, #18
 8003318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800331e:	2303      	movs	r3, #3
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003322:	2304      	movs	r3, #4
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003326:	f107 031c 	add.w	r3, r7, #28
 800332a:	4619      	mov	r1, r3
 800332c:	482b      	ldr	r0, [pc, #172]	; (80033dc <HAL_I2C_MspInit+0x140>)
 800332e:	f000 fc93 	bl	8003c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003332:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	4a28      	ldr	r2, [pc, #160]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 8003338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800333c:	61d3      	str	r3, [r2, #28]
 800333e:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800334a:	e03e      	b.n	80033ca <HAL_I2C_MspInit+0x12e>
  else if(hi2c->Instance==I2C2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a23      	ldr	r2, [pc, #140]	; (80033e0 <HAL_I2C_MspInit+0x144>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d139      	bne.n	80033ca <HAL_I2C_MspInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 800335c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003360:	6153      	str	r3, [r2, #20]
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800336e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003374:	2312      	movs	r3, #18
 8003376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800337c:	2303      	movs	r3, #3
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003380:	2304      	movs	r3, #4
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003384:	f107 031c 	add.w	r3, r7, #28
 8003388:	4619      	mov	r1, r3
 800338a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800338e:	f000 fc63 	bl	8003c58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4a10      	ldr	r2, [pc, #64]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 8003398:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800339c:	61d3      	str	r3, [r2, #28]
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_I2C_MspInit+0x13c>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	2021      	movs	r0, #33	; 0x21
 80033b0:	f000 fbd1 	bl	8003b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80033b4:	2021      	movs	r0, #33	; 0x21
 80033b6:	f000 fbea 	bl	8003b8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	2022      	movs	r0, #34	; 0x22
 80033c0:	f000 fbc9 	bl	8003b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80033c4:	2022      	movs	r0, #34	; 0x22
 80033c6:	f000 fbe2 	bl	8003b8e <HAL_NVIC_EnableIRQ>
}
 80033ca:	bf00      	nop
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40005400 	.word	0x40005400
 80033d8:	40021000 	.word	0x40021000
 80033dc:	48000400 	.word	0x48000400
 80033e0:	40005800 	.word	0x40005800

080033e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08c      	sub	sp, #48	; 0x30
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	f107 031c 	add.w	r3, r7, #28
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a3d      	ldr	r2, [pc, #244]	; (80034f8 <HAL_SPI_MspInit+0x114>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d145      	bne.n	8003492 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <HAL_SPI_MspInit+0x118>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	4a3c      	ldr	r2, [pc, #240]	; (80034fc <HAL_SPI_MspInit+0x118>)
 800340c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003410:	6193      	str	r3, [r2, #24]
 8003412:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <HAL_SPI_MspInit+0x118>)
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <HAL_SPI_MspInit+0x118>)
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	4a36      	ldr	r2, [pc, #216]	; (80034fc <HAL_SPI_MspInit+0x118>)
 8003424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003428:	6153      	str	r3, [r2, #20]
 800342a:	4b34      	ldr	r3, [pc, #208]	; (80034fc <HAL_SPI_MspInit+0x118>)
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003436:	4b31      	ldr	r3, [pc, #196]	; (80034fc <HAL_SPI_MspInit+0x118>)
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	4a30      	ldr	r2, [pc, #192]	; (80034fc <HAL_SPI_MspInit+0x118>)
 800343c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003440:	6153      	str	r3, [r2, #20]
 8003442:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <HAL_SPI_MspInit+0x118>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003452:	2302      	movs	r3, #2
 8003454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800345a:	2303      	movs	r3, #3
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800345e:	2305      	movs	r3, #5
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003462:	f107 031c 	add.w	r3, r7, #28
 8003466:	4619      	mov	r1, r3
 8003468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800346c:	f000 fbf4 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003470:	2308      	movs	r3, #8
 8003472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003474:	2302      	movs	r3, #2
 8003476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800347c:	2303      	movs	r3, #3
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003480:	2305      	movs	r3, #5
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003484:	f107 031c 	add.w	r3, r7, #28
 8003488:	4619      	mov	r1, r3
 800348a:	481d      	ldr	r0, [pc, #116]	; (8003500 <HAL_SPI_MspInit+0x11c>)
 800348c:	f000 fbe4 	bl	8003c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003490:	e02d      	b.n	80034ee <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <HAL_SPI_MspInit+0x120>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d128      	bne.n	80034ee <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800349c:	4b17      	ldr	r3, [pc, #92]	; (80034fc <HAL_SPI_MspInit+0x118>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4a16      	ldr	r2, [pc, #88]	; (80034fc <HAL_SPI_MspInit+0x118>)
 80034a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a6:	61d3      	str	r3, [r2, #28]
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <HAL_SPI_MspInit+0x118>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_SPI_MspInit+0x118>)
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	4a10      	ldr	r2, [pc, #64]	; (80034fc <HAL_SPI_MspInit+0x118>)
 80034ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034be:	6153      	str	r3, [r2, #20]
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_SPI_MspInit+0x118>)
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80034cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80034d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034da:	2303      	movs	r3, #3
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034de:	2305      	movs	r3, #5
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e2:	f107 031c 	add.w	r3, r7, #28
 80034e6:	4619      	mov	r1, r3
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <HAL_SPI_MspInit+0x11c>)
 80034ea:	f000 fbb5 	bl	8003c58 <HAL_GPIO_Init>
}
 80034ee:	bf00      	nop
 80034f0:	3730      	adds	r7, #48	; 0x30
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40013000 	.word	0x40013000
 80034fc:	40021000 	.word	0x40021000
 8003500:	48000400 	.word	0x48000400
 8003504:	40003800 	.word	0x40003800

08003508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a17      	ldr	r2, [pc, #92]	; (8003584 <HAL_UART_MspInit+0x7c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d128      	bne.n	800357c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800352a:	4b17      	ldr	r3, [pc, #92]	; (8003588 <HAL_UART_MspInit+0x80>)
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	4a16      	ldr	r2, [pc, #88]	; (8003588 <HAL_UART_MspInit+0x80>)
 8003530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003534:	61d3      	str	r3, [r2, #28]
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_UART_MspInit+0x80>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_UART_MspInit+0x80>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	4a10      	ldr	r2, [pc, #64]	; (8003588 <HAL_UART_MspInit+0x80>)
 8003548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354c:	6153      	str	r3, [r2, #20]
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <HAL_UART_MspInit+0x80>)
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800355a:	230c      	movs	r3, #12
 800355c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800356a:	2307      	movs	r3, #7
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003578:	f000 fb6e 	bl	8003c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800357c:	bf00      	nop
 800357e:	3728      	adds	r7, #40	; 0x28
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40004400 	.word	0x40004400
 8003588:	40021000 	.word	0x40021000

0800358c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003590:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <SDTimer_Handler+0x40>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <SDTimer_Handler+0x1c>
    Timer1--;
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <SDTimer_Handler+0x40>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b09      	ldr	r3, [pc, #36]	; (80035cc <SDTimer_Handler+0x40>)
 80035a6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <SDTimer_Handler+0x44>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d006      	beq.n	80035c0 <SDTimer_Handler+0x34>
    Timer2--;
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <SDTimer_Handler+0x44>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <SDTimer_Handler+0x44>)
 80035be:	701a      	strb	r2, [r3, #0]
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20002d21 	.word	0x20002d21
 80035d0:	20002d22 	.word	0x20002d22

080035d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035d8:	e7fe      	b.n	80035d8 <NMI_Handler+0x4>

080035da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035de:	e7fe      	b.n	80035de <HardFault_Handler+0x4>

080035e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035e4:	e7fe      	b.n	80035e4 <MemManage_Handler+0x4>

080035e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035ea:	e7fe      	b.n	80035ea <BusFault_Handler+0x4>

080035ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035f0:	e7fe      	b.n	80035f0 <UsageFault_Handler+0x4>

080035f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <SysTick_Handler+0x30>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	3301      	adds	r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <SysTick_Handler+0x30>)
 800362c:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <SysTick_Handler+0x30>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b09      	cmp	r3, #9
 8003636:	d904      	bls.n	8003642 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <SysTick_Handler+0x30>)
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800363e:	f7ff ffa5 	bl	800358c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003642:	f000 f969 	bl	8003918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20002d20 	.word	0x20002d20

08003650 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <I2C2_EV_IRQHandler+0x10>)
 8003656:	f001 fa68 	bl	8004b2a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200006ec 	.word	0x200006ec

08003664 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <I2C2_ER_IRQHandler+0x10>)
 800366a:	f001 fa78 	bl	8004b5e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	200006ec 	.word	0x200006ec

08003678 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(user_button_Pin);
 800367c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003680:	f000 fc8c 	bl	8003f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}

08003688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
	return 1;
 800368c:	2301      	movs	r3, #1
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <_kill>:

int _kill(int pid, int sig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036a2:	f009 f8a7 	bl	800c7f4 <__errno>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2216      	movs	r2, #22
 80036aa:	601a      	str	r2, [r3, #0]
	return -1;
 80036ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_exit>:

void _exit (int status)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036c0:	f04f 31ff 	mov.w	r1, #4294967295
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ffe7 	bl	8003698 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036ca:	e7fe      	b.n	80036ca <_exit+0x12>

080036cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	e00a      	b.n	80036f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036de:	f3af 8000 	nop.w
 80036e2:	4601      	mov	r1, r0
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	60ba      	str	r2, [r7, #8]
 80036ea:	b2ca      	uxtb	r2, r1
 80036ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	3301      	adds	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	dbf0      	blt.n	80036de <_read+0x12>
	}

return len;
 80036fc:	687b      	ldr	r3, [r7, #4]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e009      	b.n	800372c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	60ba      	str	r2, [r7, #8]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3301      	adds	r3, #1
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	dbf1      	blt.n	8003718 <_write+0x12>
	}
	return len;
 8003734:	687b      	ldr	r3, [r7, #4]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <_close>:

int _close(int file)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
	return -1;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003766:	605a      	str	r2, [r3, #4]
	return 0;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <_isatty>:

int _isatty(int file)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
	return 1;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
	return 0;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <_sbrk+0x5c>)
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <_sbrk+0x60>)
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <_sbrk+0x64>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <_sbrk+0x64>)
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <_sbrk+0x68>)
 80037c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <_sbrk+0x64>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d207      	bcs.n	80037e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037d8:	f009 f80c 	bl	800c7f4 <__errno>
 80037dc:	4603      	mov	r3, r0
 80037de:	220c      	movs	r2, #12
 80037e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295
 80037e6:	e009      	b.n	80037fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <_sbrk+0x64>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <_sbrk+0x64>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <_sbrk+0x64>)
 80037f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037fa:	68fb      	ldr	r3, [r7, #12]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20010000 	.word	0x20010000
 8003808:	00000400 	.word	0x00000400
 800380c:	20002d24 	.word	0x20002d24
 8003810:	20002f70 	.word	0x20002f70

08003814 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <SystemInit+0x20>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	4a05      	ldr	r2, [pc, #20]	; (8003834 <SystemInit+0x20>)
 8003820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003870 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800383c:	480d      	ldr	r0, [pc, #52]	; (8003874 <LoopForever+0x6>)
  ldr r1, =_edata
 800383e:	490e      	ldr	r1, [pc, #56]	; (8003878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003840:	4a0e      	ldr	r2, [pc, #56]	; (800387c <LoopForever+0xe>)
  movs r3, #0
 8003842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003844:	e002      	b.n	800384c <LoopCopyDataInit>

08003846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800384a:	3304      	adds	r3, #4

0800384c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800384c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800384e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003850:	d3f9      	bcc.n	8003846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003852:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003854:	4c0b      	ldr	r4, [pc, #44]	; (8003884 <LoopForever+0x16>)
  movs r3, #0
 8003856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003858:	e001      	b.n	800385e <LoopFillZerobss>

0800385a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800385a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800385c:	3204      	adds	r2, #4

0800385e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800385e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003860:	d3fb      	bcc.n	800385a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003862:	f7ff ffd7 	bl	8003814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003866:	f008 ffcb 	bl	800c800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800386a:	f7fe fc39 	bl	80020e0 <main>

0800386e <LoopForever>:

LoopForever:
    b LoopForever
 800386e:	e7fe      	b.n	800386e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003870:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003878:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800387c:	08010604 	.word	0x08010604
  ldr r2, =_sbss
 8003880:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003884:	20002f70 	.word	0x20002f70

08003888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003888:	e7fe      	b.n	8003888 <ADC1_2_IRQHandler>
	...

0800388c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <HAL_Init+0x28>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <HAL_Init+0x28>)
 8003896:	f043 0310 	orr.w	r3, r3, #16
 800389a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800389c:	2003      	movs	r0, #3
 800389e:	f000 f94f 	bl	8003b40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038a2:	2000      	movs	r0, #0
 80038a4:	f000 f808 	bl	80038b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038a8:	f7ff fcd4 	bl	8003254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40022000 	.word	0x40022000

080038b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <HAL_InitTick+0x54>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <HAL_InitTick+0x58>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4619      	mov	r1, r3
 80038ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80038d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f967 	bl	8003baa <HAL_SYSTICK_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e00e      	b.n	8003904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b0f      	cmp	r3, #15
 80038ea:	d80a      	bhi.n	8003902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038ec:	2200      	movs	r2, #0
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	f000 f92f 	bl	8003b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038f8:	4a06      	ldr	r2, [pc, #24]	; (8003914 <HAL_InitTick+0x5c>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e000      	b.n	8003904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000004 	.word	0x20000004
 8003910:	2000000c 	.word	0x2000000c
 8003914:	20000008 	.word	0x20000008

08003918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_IncTick+0x20>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_IncTick+0x24>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4413      	add	r3, r2
 8003928:	4a04      	ldr	r2, [pc, #16]	; (800393c <HAL_IncTick+0x24>)
 800392a:	6013      	str	r3, [r2, #0]
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	2000000c 	.word	0x2000000c
 800393c:	20002d28 	.word	0x20002d28

08003940 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return uwTick;  
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_GetTick+0x14>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20002d28 	.word	0x20002d28

08003958 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003960:	f7ff ffee 	bl	8003940 <HAL_GetTick>
 8003964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d005      	beq.n	800397e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_Delay+0x44>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800397e:	bf00      	nop
 8003980:	f7ff ffde 	bl	8003940 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d8f7      	bhi.n	8003980 <HAL_Delay+0x28>
  {
  }
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2000000c 	.word	0x2000000c

080039a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <__NVIC_SetPriorityGrouping+0x44>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039bc:	4013      	ands	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039d2:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <__NVIC_SetPriorityGrouping+0x44>)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	60d3      	str	r3, [r2, #12]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <__NVIC_GetPriorityGrouping+0x18>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	f003 0307 	and.w	r3, r3, #7
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	db0b      	blt.n	8003a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	f003 021f 	and.w	r2, r3, #31
 8003a1c:	4907      	ldr	r1, [pc, #28]	; (8003a3c <__NVIC_EnableIRQ+0x38>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2001      	movs	r0, #1
 8003a26:	fa00 f202 	lsl.w	r2, r0, r2
 8003a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	e000e100 	.word	0xe000e100

08003a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	6039      	str	r1, [r7, #0]
 8003a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	db0a      	blt.n	8003a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	490c      	ldr	r1, [pc, #48]	; (8003a8c <__NVIC_SetPriority+0x4c>)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	0112      	lsls	r2, r2, #4
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	440b      	add	r3, r1
 8003a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a68:	e00a      	b.n	8003a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	4908      	ldr	r1, [pc, #32]	; (8003a90 <__NVIC_SetPriority+0x50>)
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	3b04      	subs	r3, #4
 8003a78:	0112      	lsls	r2, r2, #4
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	761a      	strb	r2, [r3, #24]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	e000e100 	.word	0xe000e100
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f1c3 0307 	rsb	r3, r3, #7
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	bf28      	it	cs
 8003ab2:	2304      	movcs	r3, #4
 8003ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d902      	bls.n	8003ac4 <NVIC_EncodePriority+0x30>
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3b03      	subs	r3, #3
 8003ac2:	e000      	b.n	8003ac6 <NVIC_EncodePriority+0x32>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003adc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	43d9      	mvns	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	4313      	orrs	r3, r2
         );
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3724      	adds	r7, #36	; 0x24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b0c:	d301      	bcc.n	8003b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00f      	b.n	8003b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b12:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <SysTick_Config+0x40>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b1a:	210f      	movs	r1, #15
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b20:	f7ff ff8e 	bl	8003a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <SysTick_Config+0x40>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <SysTick_Config+0x40>)
 8003b2c:	2207      	movs	r2, #7
 8003b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	e000e010 	.word	0xe000e010

08003b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff29 	bl	80039a0 <__NVIC_SetPriorityGrouping>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b68:	f7ff ff3e 	bl	80039e8 <__NVIC_GetPriorityGrouping>
 8003b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	6978      	ldr	r0, [r7, #20]
 8003b74:	f7ff ff8e 	bl	8003a94 <NVIC_EncodePriority>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff5d 	bl	8003a40 <__NVIC_SetPriority>
}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	4603      	mov	r3, r0
 8003b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff ff31 	bl	8003a04 <__NVIC_EnableIRQ>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ffa2 	bl	8003afc <SysTick_Config>
 8003bb8:	4603      	mov	r3, r0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d005      	beq.n	8003be4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
 8003be2:	e027      	b.n	8003c34 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 020e 	bic.w	r2, r2, #14
 8003bf2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c12:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	4798      	blx	r3
    } 
  }
  return status;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c66:	e160      	b.n	8003f2a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	4013      	ands	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8152 	beq.w	8003f24 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d005      	beq.n	8003c98 <HAL_GPIO_Init+0x40>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d130      	bne.n	8003cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cce:	2201      	movs	r2, #1
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	f003 0201 	and.w	r2, r3, #1
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d017      	beq.n	8003d36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d123      	bne.n	8003d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	08da      	lsrs	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3208      	adds	r2, #8
 8003d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	220f      	movs	r2, #15
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	08da      	lsrs	r2, r3, #3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3208      	adds	r2, #8
 8003d84:	6939      	ldr	r1, [r7, #16]
 8003d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	2203      	movs	r2, #3
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0203 	and.w	r2, r3, #3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80ac 	beq.w	8003f24 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dcc:	4b5e      	ldr	r3, [pc, #376]	; (8003f48 <HAL_GPIO_Init+0x2f0>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	4a5d      	ldr	r2, [pc, #372]	; (8003f48 <HAL_GPIO_Init+0x2f0>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6193      	str	r3, [r2, #24]
 8003dd8:	4b5b      	ldr	r3, [pc, #364]	; (8003f48 <HAL_GPIO_Init+0x2f0>)
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003de4:	4a59      	ldr	r2, [pc, #356]	; (8003f4c <HAL_GPIO_Init+0x2f4>)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	3302      	adds	r3, #2
 8003dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	220f      	movs	r2, #15
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e0e:	d025      	beq.n	8003e5c <HAL_GPIO_Init+0x204>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a4f      	ldr	r2, [pc, #316]	; (8003f50 <HAL_GPIO_Init+0x2f8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d01f      	beq.n	8003e58 <HAL_GPIO_Init+0x200>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a4e      	ldr	r2, [pc, #312]	; (8003f54 <HAL_GPIO_Init+0x2fc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d019      	beq.n	8003e54 <HAL_GPIO_Init+0x1fc>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a4d      	ldr	r2, [pc, #308]	; (8003f58 <HAL_GPIO_Init+0x300>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_GPIO_Init+0x1f8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a4c      	ldr	r2, [pc, #304]	; (8003f5c <HAL_GPIO_Init+0x304>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00d      	beq.n	8003e4c <HAL_GPIO_Init+0x1f4>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a4b      	ldr	r2, [pc, #300]	; (8003f60 <HAL_GPIO_Init+0x308>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d007      	beq.n	8003e48 <HAL_GPIO_Init+0x1f0>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a4a      	ldr	r2, [pc, #296]	; (8003f64 <HAL_GPIO_Init+0x30c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_GPIO_Init+0x1ec>
 8003e40:	2306      	movs	r3, #6
 8003e42:	e00c      	b.n	8003e5e <HAL_GPIO_Init+0x206>
 8003e44:	2307      	movs	r3, #7
 8003e46:	e00a      	b.n	8003e5e <HAL_GPIO_Init+0x206>
 8003e48:	2305      	movs	r3, #5
 8003e4a:	e008      	b.n	8003e5e <HAL_GPIO_Init+0x206>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	e006      	b.n	8003e5e <HAL_GPIO_Init+0x206>
 8003e50:	2303      	movs	r3, #3
 8003e52:	e004      	b.n	8003e5e <HAL_GPIO_Init+0x206>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e002      	b.n	8003e5e <HAL_GPIO_Init+0x206>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <HAL_GPIO_Init+0x206>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	f002 0203 	and.w	r2, r2, #3
 8003e64:	0092      	lsls	r2, r2, #2
 8003e66:	4093      	lsls	r3, r2
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e6e:	4937      	ldr	r1, [pc, #220]	; (8003f4c <HAL_GPIO_Init+0x2f4>)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	3302      	adds	r3, #2
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <HAL_GPIO_Init+0x310>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ea0:	4a31      	ldr	r2, [pc, #196]	; (8003f68 <HAL_GPIO_Init+0x310>)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ea6:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <HAL_GPIO_Init+0x310>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003eca:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <HAL_GPIO_Init+0x310>)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ed0:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <HAL_GPIO_Init+0x310>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ef4:	4a1c      	ldr	r2, [pc, #112]	; (8003f68 <HAL_GPIO_Init+0x310>)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_GPIO_Init+0x310>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	43db      	mvns	r3, r3
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4013      	ands	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <HAL_GPIO_Init+0x310>)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3301      	adds	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f47f ae97 	bne.w	8003c68 <HAL_GPIO_Init+0x10>
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40010000 	.word	0x40010000
 8003f50:	48000400 	.word	0x48000400
 8003f54:	48000800 	.word	0x48000800
 8003f58:	48000c00 	.word	0x48000c00
 8003f5c:	48001000 	.word	0x48001000
 8003f60:	48001400 	.word	0x48001400
 8003f64:	48001800 	.word	0x48001800
 8003f68:	40010400 	.word	0x40010400

08003f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f7c:	787b      	ldrb	r3, [r7, #1]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f82:	887a      	ldrh	r2, [r7, #2]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f88:	e002      	b.n	8003f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d006      	beq.n	8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fb2:	4a05      	ldr	r2, [pc, #20]	; (8003fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fc60 	bl	8002880 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40010400 	.word	0x40010400

08003fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e081      	b.n	80040e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff f952 	bl	800329c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2224      	movs	r2, #36	; 0x24
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800401c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800402c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d107      	bne.n	8004046 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	e006      	b.n	8004054 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004052:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d104      	bne.n	8004066 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004064:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004078:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004088:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69d9      	ldr	r1, [r3, #28]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1a      	ldr	r2, [r3, #32]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	461a      	mov	r2, r3
 80040f8:	460b      	mov	r3, r1
 80040fa:	817b      	strh	r3, [r7, #10]
 80040fc:	4613      	mov	r3, r2
 80040fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b20      	cmp	r3, #32
 800410a:	f040 80da 	bne.w	80042c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_I2C_Master_Transmit+0x30>
 8004118:	2302      	movs	r3, #2
 800411a:	e0d3      	b.n	80042c4 <HAL_I2C_Master_Transmit+0x1d8>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004124:	f7ff fc0c 	bl	8003940 <HAL_GetTick>
 8004128:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	2319      	movs	r3, #25
 8004130:	2201      	movs	r2, #1
 8004132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f001 fad9 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e0be      	b.n	80042c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2221      	movs	r2, #33	; 0x21
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2210      	movs	r2, #16
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	893a      	ldrh	r2, [r7, #8]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	2bff      	cmp	r3, #255	; 0xff
 8004176:	d90e      	bls.n	8004196 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	22ff      	movs	r2, #255	; 0xff
 800417c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004182:	b2da      	uxtb	r2, r3
 8004184:	8979      	ldrh	r1, [r7, #10]
 8004186:	4b51      	ldr	r3, [pc, #324]	; (80042cc <HAL_I2C_Master_Transmit+0x1e0>)
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f001 fc4c 	bl	8005a2c <I2C_TransferConfig>
 8004194:	e06c      	b.n	8004270 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	8979      	ldrh	r1, [r7, #10]
 80041a8:	4b48      	ldr	r3, [pc, #288]	; (80042cc <HAL_I2C_Master_Transmit+0x1e0>)
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f001 fc3b 	bl	8005a2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80041b6:	e05b      	b.n	8004270 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	6a39      	ldr	r1, [r7, #32]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f001 fad6 	bl	800576e <I2C_WaitOnTXISFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e07b      	b.n	80042c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d034      	beq.n	8004270 <HAL_I2C_Master_Transmit+0x184>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d130      	bne.n	8004270 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	2200      	movs	r2, #0
 8004216:	2180      	movs	r1, #128	; 0x80
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f001 fa68 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e04d      	b.n	80042c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2bff      	cmp	r3, #255	; 0xff
 8004230:	d90e      	bls.n	8004250 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	22ff      	movs	r2, #255	; 0xff
 8004236:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	b2da      	uxtb	r2, r3
 800423e:	8979      	ldrh	r1, [r7, #10]
 8004240:	2300      	movs	r3, #0
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f001 fbef 	bl	8005a2c <I2C_TransferConfig>
 800424e:	e00f      	b.n	8004270 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425e:	b2da      	uxtb	r2, r3
 8004260:	8979      	ldrh	r1, [r7, #10]
 8004262:	2300      	movs	r3, #0
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f001 fbde 	bl	8005a2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d19e      	bne.n	80041b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	6a39      	ldr	r1, [r7, #32]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f001 fab5 	bl	80057ee <I2C_WaitOnSTOPFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e01a      	b.n	80042c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2220      	movs	r2, #32
 8004294:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6859      	ldr	r1, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80042a2:	400b      	ands	r3, r1
 80042a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
  }
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	80002000 	.word	0x80002000
 80042d0:	fe00e800 	.word	0xfe00e800

080042d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	461a      	mov	r2, r3
 80042e0:	460b      	mov	r3, r1
 80042e2:	817b      	strh	r3, [r7, #10]
 80042e4:	4613      	mov	r3, r2
 80042e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	f040 80db 	bne.w	80044ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_I2C_Master_Receive+0x30>
 8004300:	2302      	movs	r3, #2
 8004302:	e0d4      	b.n	80044ae <HAL_I2C_Master_Receive+0x1da>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800430c:	f7ff fb18 	bl	8003940 <HAL_GetTick>
 8004310:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	2319      	movs	r3, #25
 8004318:	2201      	movs	r2, #1
 800431a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f001 f9e5 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e0bf      	b.n	80044ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2222      	movs	r2, #34	; 0x22
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2210      	movs	r2, #16
 800433a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	893a      	ldrh	r2, [r7, #8]
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	2bff      	cmp	r3, #255	; 0xff
 800435e:	d90e      	bls.n	800437e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	22ff      	movs	r2, #255	; 0xff
 8004364:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436a:	b2da      	uxtb	r2, r3
 800436c:	8979      	ldrh	r1, [r7, #10]
 800436e:	4b52      	ldr	r3, [pc, #328]	; (80044b8 <HAL_I2C_Master_Receive+0x1e4>)
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f001 fb58 	bl	8005a2c <I2C_TransferConfig>
 800437c:	e06d      	b.n	800445a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438c:	b2da      	uxtb	r2, r3
 800438e:	8979      	ldrh	r1, [r7, #10]
 8004390:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <HAL_I2C_Master_Receive+0x1e4>)
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f001 fb47 	bl	8005a2c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800439e:	e05c      	b.n	800445a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	6a39      	ldr	r1, [r7, #32]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f001 fa5f 	bl	8005868 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e07c      	b.n	80044ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d034      	beq.n	800445a <HAL_I2C_Master_Receive+0x186>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d130      	bne.n	800445a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	2200      	movs	r2, #0
 8004400:	2180      	movs	r1, #128	; 0x80
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f001 f973 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e04d      	b.n	80044ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	2bff      	cmp	r3, #255	; 0xff
 800441a:	d90e      	bls.n	800443a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	22ff      	movs	r2, #255	; 0xff
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	b2da      	uxtb	r2, r3
 8004428:	8979      	ldrh	r1, [r7, #10]
 800442a:	2300      	movs	r3, #0
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f001 fafa 	bl	8005a2c <I2C_TransferConfig>
 8004438:	e00f      	b.n	800445a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	b2da      	uxtb	r2, r3
 800444a:	8979      	ldrh	r1, [r7, #10]
 800444c:	2300      	movs	r3, #0
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f001 fae9 	bl	8005a2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d19d      	bne.n	80043a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	6a39      	ldr	r1, [r7, #32]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f001 f9c0 	bl	80057ee <I2C_WaitOnSTOPFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e01a      	b.n	80044ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2220      	movs	r2, #32
 800447e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <HAL_I2C_Master_Receive+0x1e8>)
 800448c:	400b      	ands	r3, r1
 800448e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	e000      	b.n	80044ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	80002400 	.word	0x80002400
 80044bc:	fe00e800 	.word	0xfe00e800

080044c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	4608      	mov	r0, r1
 80044ca:	4611      	mov	r1, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	817b      	strh	r3, [r7, #10]
 80044d2:	460b      	mov	r3, r1
 80044d4:	813b      	strh	r3, [r7, #8]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	f040 80f9 	bne.w	80046da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_I2C_Mem_Write+0x34>
 80044ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d105      	bne.n	8004500 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0ed      	b.n	80046dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_I2C_Mem_Write+0x4e>
 800450a:	2302      	movs	r3, #2
 800450c:	e0e6      	b.n	80046dc <HAL_I2C_Mem_Write+0x21c>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004516:	f7ff fa13 	bl	8003940 <HAL_GetTick>
 800451a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	2319      	movs	r3, #25
 8004522:	2201      	movs	r2, #1
 8004524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f001 f8e0 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0d1      	b.n	80046dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2221      	movs	r2, #33	; 0x21
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2240      	movs	r2, #64	; 0x40
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a3a      	ldr	r2, [r7, #32]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004558:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004560:	88f8      	ldrh	r0, [r7, #6]
 8004562:	893a      	ldrh	r2, [r7, #8]
 8004564:	8979      	ldrh	r1, [r7, #10]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4603      	mov	r3, r0
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fc99 	bl	8004ea8 <I2C_RequestMemoryWrite>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0a9      	b.n	80046dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2bff      	cmp	r3, #255	; 0xff
 8004590:	d90e      	bls.n	80045b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	22ff      	movs	r2, #255	; 0xff
 8004596:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459c:	b2da      	uxtb	r2, r3
 800459e:	8979      	ldrh	r1, [r7, #10]
 80045a0:	2300      	movs	r3, #0
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f001 fa3f 	bl	8005a2c <I2C_TransferConfig>
 80045ae:	e00f      	b.n	80045d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	8979      	ldrh	r1, [r7, #10]
 80045c2:	2300      	movs	r3, #0
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f001 fa2e 	bl	8005a2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f001 f8ca 	bl	800576e <I2C_WaitOnTXISFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e07b      	b.n	80046dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	781a      	ldrb	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d034      	beq.n	8004688 <HAL_I2C_Mem_Write+0x1c8>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d130      	bne.n	8004688 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	2200      	movs	r2, #0
 800462e:	2180      	movs	r1, #128	; 0x80
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f001 f85c 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e04d      	b.n	80046dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	2bff      	cmp	r3, #255	; 0xff
 8004648:	d90e      	bls.n	8004668 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	22ff      	movs	r2, #255	; 0xff
 800464e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004654:	b2da      	uxtb	r2, r3
 8004656:	8979      	ldrh	r1, [r7, #10]
 8004658:	2300      	movs	r3, #0
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f001 f9e3 	bl	8005a2c <I2C_TransferConfig>
 8004666:	e00f      	b.n	8004688 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004676:	b2da      	uxtb	r2, r3
 8004678:	8979      	ldrh	r1, [r7, #10]
 800467a:	2300      	movs	r3, #0
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f001 f9d2 	bl	8005a2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d19e      	bne.n	80045d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f001 f8a9 	bl	80057ee <I2C_WaitOnSTOPFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e01a      	b.n	80046dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2220      	movs	r2, #32
 80046ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6859      	ldr	r1, [r3, #4]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <HAL_I2C_Mem_Write+0x224>)
 80046ba:	400b      	ands	r3, r1
 80046bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e000      	b.n	80046dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80046da:	2302      	movs	r3, #2
  }
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	fe00e800 	.word	0xfe00e800

080046e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	4608      	mov	r0, r1
 80046f2:	4611      	mov	r1, r2
 80046f4:	461a      	mov	r2, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	817b      	strh	r3, [r7, #10]
 80046fa:	460b      	mov	r3, r1
 80046fc:	813b      	strh	r3, [r7, #8]
 80046fe:	4613      	mov	r3, r2
 8004700:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b20      	cmp	r3, #32
 800470c:	f040 80fd 	bne.w	800490a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_I2C_Mem_Read+0x34>
 8004716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004718:	2b00      	cmp	r3, #0
 800471a:	d105      	bne.n	8004728 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004722:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0f1      	b.n	800490c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_I2C_Mem_Read+0x4e>
 8004732:	2302      	movs	r3, #2
 8004734:	e0ea      	b.n	800490c <HAL_I2C_Mem_Read+0x224>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800473e:	f7ff f8ff 	bl	8003940 <HAL_GetTick>
 8004742:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	2319      	movs	r3, #25
 800474a:	2201      	movs	r2, #1
 800474c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 ffcc 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0d5      	b.n	800490c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2222      	movs	r2, #34	; 0x22
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2240      	movs	r2, #64	; 0x40
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a3a      	ldr	r2, [r7, #32]
 800477a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004788:	88f8      	ldrh	r0, [r7, #6]
 800478a:	893a      	ldrh	r2, [r7, #8]
 800478c:	8979      	ldrh	r1, [r7, #10]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	4603      	mov	r3, r0
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fbd9 	bl	8004f50 <I2C_RequestMemoryRead>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0ad      	b.n	800490c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2bff      	cmp	r3, #255	; 0xff
 80047b8:	d90e      	bls.n	80047d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	22ff      	movs	r2, #255	; 0xff
 80047be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	8979      	ldrh	r1, [r7, #10]
 80047c8:	4b52      	ldr	r3, [pc, #328]	; (8004914 <HAL_I2C_Mem_Read+0x22c>)
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f001 f92b 	bl	8005a2c <I2C_TransferConfig>
 80047d6:	e00f      	b.n	80047f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	8979      	ldrh	r1, [r7, #10]
 80047ea:	4b4a      	ldr	r3, [pc, #296]	; (8004914 <HAL_I2C_Mem_Read+0x22c>)
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f001 f91a 	bl	8005a2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	2200      	movs	r2, #0
 8004800:	2104      	movs	r1, #4
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 ff73 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e07c      	b.n	800490c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d034      	beq.n	80048b8 <HAL_I2C_Mem_Read+0x1d0>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004852:	2b00      	cmp	r3, #0
 8004854:	d130      	bne.n	80048b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 ff44 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e04d      	b.n	800490c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	2bff      	cmp	r3, #255	; 0xff
 8004878:	d90e      	bls.n	8004898 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	22ff      	movs	r2, #255	; 0xff
 800487e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	b2da      	uxtb	r2, r3
 8004886:	8979      	ldrh	r1, [r7, #10]
 8004888:	2300      	movs	r3, #0
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f001 f8cb 	bl	8005a2c <I2C_TransferConfig>
 8004896:	e00f      	b.n	80048b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	8979      	ldrh	r1, [r7, #10]
 80048aa:	2300      	movs	r3, #0
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f001 f8ba 	bl	8005a2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d19a      	bne.n	80047f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 ff91 	bl	80057ee <I2C_WaitOnSTOPFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e01a      	b.n	800490c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2220      	movs	r2, #32
 80048dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6859      	ldr	r1, [r3, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_I2C_Mem_Read+0x230>)
 80048ea:	400b      	ands	r3, r1
 80048ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e000      	b.n	800490c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800490a:	2302      	movs	r3, #2
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	80002400 	.word	0x80002400
 8004918:	fe00e800 	.word	0xfe00e800

0800491c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	460b      	mov	r3, r1
 800492a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b20      	cmp	r3, #32
 800493a:	f040 80f1 	bne.w	8004b20 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494c:	d101      	bne.n	8004952 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
 8004950:	e0e7      	b.n	8004b22 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_I2C_IsDeviceReady+0x44>
 800495c:	2302      	movs	r3, #2
 800495e:	e0e0      	b.n	8004b22 <HAL_I2C_IsDeviceReady+0x206>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2224      	movs	r2, #36	; 0x24
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <HAL_I2C_IsDeviceReady+0x72>
 800497e:	897b      	ldrh	r3, [r7, #10]
 8004980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004984:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004988:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800498c:	e004      	b.n	8004998 <HAL_I2C_IsDeviceReady+0x7c>
 800498e:	897b      	ldrh	r3, [r7, #10]
 8004990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004994:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800499e:	f7fe ffcf 	bl	8003940 <HAL_GetTick>
 80049a2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	bf0c      	ite	eq
 80049b2:	2301      	moveq	r3, #1
 80049b4:	2300      	movne	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	bf0c      	ite	eq
 80049c8:	2301      	moveq	r3, #1
 80049ca:	2300      	movne	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80049d0:	e034      	b.n	8004a3c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d01a      	beq.n	8004a10 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049da:	f7fe ffb1 	bl	8003940 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d302      	bcc.n	80049f0 <HAL_I2C_IsDeviceReady+0xd4>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10f      	bne.n	8004a10 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	f043 0220 	orr.w	r2, r3, #32
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e088      	b.n	8004b22 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b10      	cmp	r3, #16
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004a3c:	7ffb      	ldrb	r3, [r7, #31]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <HAL_I2C_IsDeviceReady+0x12c>
 8004a42:	7fbb      	ldrb	r3, [r7, #30]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0c4      	beq.n	80049d2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d01a      	beq.n	8004a8c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2120      	movs	r1, #32
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fe44 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e058      	b.n	8004b22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2220      	movs	r2, #32
 8004a76:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e04a      	b.n	8004b22 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	2120      	movs	r1, #32
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fe29 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e03d      	b.n	8004b22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2210      	movs	r2, #16
 8004aac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d118      	bne.n	8004af0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004acc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2120      	movs	r1, #32
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fe08 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e01c      	b.n	8004b22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2220      	movs	r2, #32
 8004aee:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	3301      	adds	r3, #1
 8004af4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	f63f af3b 	bhi.w	8004976 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	f043 0220 	orr.w	r2, r3, #32
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
  }
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b086      	sub	sp, #24
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d010      	beq.n	8004ba4 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	09db      	lsrs	r3, r3, #7
 8004b86:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	f043 0201 	orr.w	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ba2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	0a9b      	lsrs	r3, r3, #10
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d010      	beq.n	8004bd2 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	09db      	lsrs	r3, r3, #7
 8004bb4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc0:	f043 0208 	orr.w	r2, r3, #8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bd0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	0a5b      	lsrs	r3, r3, #9
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d010      	beq.n	8004c00 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	09db      	lsrs	r3, r3, #7
 8004be2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	f043 0202 	orr.w	r2, r3, #2
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bfe:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f003 030b 	and.w	r3, r3, #11
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fc32 	bl	800547c <I2C_ITError>
  }
}
 8004c18:	bf00      	nop
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	70fb      	strb	r3, [r7, #3]
 8004c54:	4613      	mov	r3, r2
 8004c56:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <I2C_Slave_ISR_IT+0x24>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e0ec      	b.n	8004e9e <I2C_Slave_ISR_IT+0x1fe>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004ce4:	6939      	ldr	r1, [r7, #16]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fa68 	bl	80051bc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d04d      	beq.n	8004d94 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d047      	beq.n	8004d94 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d128      	bne.n	8004d60 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b28      	cmp	r3, #40	; 0x28
 8004d18:	d108      	bne.n	8004d2c <I2C_Slave_ISR_IT+0x8c>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d20:	d104      	bne.n	8004d2c <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d22:	6939      	ldr	r1, [r7, #16]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fb53 	bl	80053d0 <I2C_ITListenCplt>
 8004d2a:	e032      	b.n	8004d92 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b29      	cmp	r3, #41	; 0x29
 8004d36:	d10e      	bne.n	8004d56 <I2C_Slave_ISR_IT+0xb6>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d3e:	d00a      	beq.n	8004d56 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2210      	movs	r2, #16
 8004d46:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 fc8e 	bl	800566a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f9d6 	bl	8005100 <I2C_ITSlaveSeqCplt>
 8004d54:	e01d      	b.n	8004d92 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2210      	movs	r2, #16
 8004d5c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004d5e:	e096      	b.n	8004e8e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2210      	movs	r2, #16
 8004d66:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6c:	f043 0204 	orr.w	r2, r3, #4
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d004      	beq.n	8004d84 <I2C_Slave_ISR_IT+0xe4>
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d80:	f040 8085 	bne.w	8004e8e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	4619      	mov	r1, r3
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fb76 	bl	800547c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004d90:	e07d      	b.n	8004e8e <I2C_Slave_ISR_IT+0x1ee>
 8004d92:	e07c      	b.n	8004e8e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d030      	beq.n	8004e02 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	089b      	lsrs	r3, r3, #2
 8004da4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02a      	beq.n	8004e02 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d018      	beq.n	8004de8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d14f      	bne.n	8004e92 <I2C_Slave_ISR_IT+0x1f2>
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004df8:	d04b      	beq.n	8004e92 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f980 	bl	8005100 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004e00:	e047      	b.n	8004e92 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	08db      	lsrs	r3, r3, #3
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	08db      	lsrs	r3, r3, #3
 8004e12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d004      	beq.n	8004e24 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004e1a:	6939      	ldr	r1, [r7, #16]
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f8eb 	bl	8004ff8 <I2C_ITAddrCplt>
 8004e22:	e037      	b.n	8004e94 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d031      	beq.n	8004e94 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02b      	beq.n	8004e94 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d018      	beq.n	8004e78 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	781a      	ldrb	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e76:	e00d      	b.n	8004e94 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e7e:	d002      	beq.n	8004e86 <I2C_Slave_ISR_IT+0x1e6>
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f93a 	bl	8005100 <I2C_ITSlaveSeqCplt>
 8004e8c:	e002      	b.n	8004e94 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004e8e:	bf00      	nop
 8004e90:	e000      	b.n	8004e94 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004e92:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	817b      	strh	r3, [r7, #10]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	813b      	strh	r3, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	8979      	ldrh	r1, [r7, #10]
 8004ec8:	4b20      	ldr	r3, [pc, #128]	; (8004f4c <I2C_RequestMemoryWrite+0xa4>)
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fdab 	bl	8005a2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fc47 	bl	800576e <I2C_WaitOnTXISFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e02c      	b.n	8004f44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d105      	bne.n	8004efc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef0:	893b      	ldrh	r3, [r7, #8]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	629a      	str	r2, [r3, #40]	; 0x28
 8004efa:	e015      	b.n	8004f28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fc2d 	bl	800576e <I2C_WaitOnTXISFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e012      	b.n	8004f44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f1e:	893b      	ldrh	r3, [r7, #8]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2180      	movs	r1, #128	; 0x80
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fbdb 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	80002000 	.word	0x80002000

08004f50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	4608      	mov	r0, r1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	817b      	strh	r3, [r7, #10]
 8004f62:	460b      	mov	r3, r1
 8004f64:	813b      	strh	r3, [r7, #8]
 8004f66:	4613      	mov	r3, r2
 8004f68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	8979      	ldrh	r1, [r7, #10]
 8004f70:	4b20      	ldr	r3, [pc, #128]	; (8004ff4 <I2C_RequestMemoryRead+0xa4>)
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	2300      	movs	r3, #0
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fd58 	bl	8005a2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	69b9      	ldr	r1, [r7, #24]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fbf4 	bl	800576e <I2C_WaitOnTXISFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e02c      	b.n	8004fea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d105      	bne.n	8004fa2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f96:	893b      	ldrh	r3, [r7, #8]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004fa0:	e015      	b.n	8004fce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fa2:	893b      	ldrh	r3, [r7, #8]
 8004fa4:	0a1b      	lsrs	r3, r3, #8
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	69b9      	ldr	r1, [r7, #24]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fbda 	bl	800576e <I2C_WaitOnTXISFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e012      	b.n	8004fea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc4:	893b      	ldrh	r3, [r7, #8]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2140      	movs	r1, #64	; 0x40
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 fb88 	bl	80056ee <I2C_WaitOnFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	80002000 	.word	0x80002000

08004ff8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005008:	b2db      	uxtb	r3, r3
 800500a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800500e:	2b28      	cmp	r3, #40	; 0x28
 8005010:	d16a      	bne.n	80050e8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	b2db      	uxtb	r3, r3
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	0c1b      	lsrs	r3, r3, #16
 800502a:	b29b      	uxth	r3, r3
 800502c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005030:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800503e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800504c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d138      	bne.n	80050c8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005056:	897b      	ldrh	r3, [r7, #10]
 8005058:	09db      	lsrs	r3, r3, #7
 800505a:	b29a      	uxth	r2, r3
 800505c:	89bb      	ldrh	r3, [r7, #12]
 800505e:	4053      	eors	r3, r2
 8005060:	b29b      	uxth	r3, r3
 8005062:	f003 0306 	and.w	r3, r3, #6
 8005066:	2b00      	cmp	r3, #0
 8005068:	d11c      	bne.n	80050a4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800506a:	897b      	ldrh	r3, [r7, #10]
 800506c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507c:	2b02      	cmp	r3, #2
 800507e:	d13b      	bne.n	80050f8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2208      	movs	r2, #8
 800508c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005096:	89ba      	ldrh	r2, [r7, #12]
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff fdd3 	bl	8004c48 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80050a2:	e029      	b.n	80050f8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80050a4:	893b      	ldrh	r3, [r7, #8]
 80050a6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80050a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fceb 	bl	8005a88 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050ba:	89ba      	ldrh	r2, [r7, #12]
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff fdc1 	bl	8004c48 <HAL_I2C_AddrCallback>
}
 80050c6:	e017      	b.n	80050f8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80050c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fcdb 	bl	8005a88 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050da:	89ba      	ldrh	r2, [r7, #12]
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff fdb1 	bl	8004c48 <HAL_I2C_AddrCallback>
}
 80050e6:	e007      	b.n	80050f8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2208      	movs	r2, #8
 80050ee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	0b9b      	lsrs	r3, r3, #14
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	e00d      	b.n	8005152 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	0bdb      	lsrs	r3, r3, #15
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005150:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b29      	cmp	r3, #41	; 0x29
 800515c:	d112      	bne.n	8005184 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2228      	movs	r2, #40	; 0x28
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2221      	movs	r2, #33	; 0x21
 800516a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800516c:	2101      	movs	r1, #1
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fc8a 	bl	8005a88 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fd4f 	bl	8004c20 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005182:	e017      	b.n	80051b4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b2a      	cmp	r3, #42	; 0x2a
 800518e:	d111      	bne.n	80051b4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2228      	movs	r2, #40	; 0x28
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2222      	movs	r2, #34	; 0x22
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800519e:	2102      	movs	r1, #2
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fc71 	bl	8005a88 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fd40 	bl	8004c34 <HAL_I2C_SlaveRxCpltCallback>
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2220      	movs	r2, #32
 80051e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	2b21      	cmp	r3, #33	; 0x21
 80051e6:	d002      	beq.n	80051ee <I2C_ITSlaveCplt+0x32>
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b29      	cmp	r3, #41	; 0x29
 80051ec:	d108      	bne.n	8005200 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80051ee:	f248 0101 	movw	r1, #32769	; 0x8001
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fc48 	bl	8005a88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2221      	movs	r2, #33	; 0x21
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30
 80051fe:	e00d      	b.n	800521c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b22      	cmp	r3, #34	; 0x22
 8005204:	d002      	beq.n	800520c <I2C_ITSlaveCplt+0x50>
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b2a      	cmp	r3, #42	; 0x2a
 800520a:	d107      	bne.n	800521c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800520c:	f248 0102 	movw	r1, #32770	; 0x8002
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fc39 	bl	8005a88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2222      	movs	r2, #34	; 0x22
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800522a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6859      	ldr	r1, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b64      	ldr	r3, [pc, #400]	; (80053c8 <I2C_ITSlaveCplt+0x20c>)
 8005238:	400b      	ands	r3, r1
 800523a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fa14 	bl	800566a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	0b9b      	lsrs	r3, r3, #14
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d013      	beq.n	8005276 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800525c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	2b00      	cmp	r3, #0
 8005264:	d020      	beq.n	80052a8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005274:	e018      	b.n	80052a8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	0bdb      	lsrs	r3, r3, #15
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d012      	beq.n	80052a8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005290:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d006      	beq.n	80052a8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	089b      	lsrs	r3, r3, #2
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d020      	beq.n	80052f6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0304 	bic.w	r3, r3, #4
 80052ba:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00c      	beq.n	80052f6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	f043 0204 	orr.w	r2, r3, #4
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	2b00      	cmp	r3, #0
 8005320:	d010      	beq.n	8005344 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f8a7 	bl	800547c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b28      	cmp	r3, #40	; 0x28
 8005338:	d141      	bne.n	80053be <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f847 	bl	80053d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005342:	e03c      	b.n	80053be <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800534c:	d014      	beq.n	8005378 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fed6 	bl	8005100 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <I2C_ITSlaveCplt+0x210>)
 8005358:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff fc77 	bl	8004c64 <HAL_I2C_ListenCpltCallback>
}
 8005376:	e022      	b.n	80053be <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b22      	cmp	r3, #34	; 0x22
 8005382:	d10e      	bne.n	80053a2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fc4a 	bl	8004c34 <HAL_I2C_SlaveRxCpltCallback>
}
 80053a0:	e00d      	b.n	80053be <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fc31 	bl	8004c20 <HAL_I2C_SlaveTxCpltCallback>
}
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	fe00e800 	.word	0xfe00e800
 80053cc:	ffff0000 	.word	0xffff0000

080053d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a26      	ldr	r2, [pc, #152]	; (8005478 <I2C_ITListenCplt+0xa8>)
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	089b      	lsrs	r3, r3, #2
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d022      	beq.n	800544e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005424:	2b00      	cmp	r3, #0
 8005426:	d012      	beq.n	800544e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	f043 0204 	orr.w	r2, r3, #4
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800544e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fb18 	bl	8005a88 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2210      	movs	r2, #16
 800545e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff fbfb 	bl	8004c64 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	ffff0000 	.word	0xffff0000

0800547c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a5d      	ldr	r2, [pc, #372]	; (8005610 <I2C_ITError+0x194>)
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b28      	cmp	r3, #40	; 0x28
 80054b2:	d005      	beq.n	80054c0 <I2C_ITError+0x44>
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	2b29      	cmp	r3, #41	; 0x29
 80054b8:	d002      	beq.n	80054c0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2b2a      	cmp	r3, #42	; 0x2a
 80054be:	d10b      	bne.n	80054d8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80054c0:	2103      	movs	r1, #3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fae0 	bl	8005a88 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2228      	movs	r2, #40	; 0x28
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a50      	ldr	r2, [pc, #320]	; (8005614 <I2C_ITError+0x198>)
 80054d4:	635a      	str	r2, [r3, #52]	; 0x34
 80054d6:	e011      	b.n	80054fc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80054d8:	f248 0103 	movw	r1, #32771	; 0x8003
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fad3 	bl	8005a88 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b60      	cmp	r3, #96	; 0x60
 80054ec:	d003      	beq.n	80054f6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	2b00      	cmp	r3, #0
 8005508:	d039      	beq.n	800557e <I2C_ITError+0x102>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b11      	cmp	r3, #17
 800550e:	d002      	beq.n	8005516 <I2C_ITError+0x9a>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b21      	cmp	r3, #33	; 0x21
 8005514:	d133      	bne.n	800557e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005524:	d107      	bne.n	8005536 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005534:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fb7f 	bl	8003c3e <HAL_DMA_GetState>
 8005540:	4603      	mov	r3, r0
 8005542:	2b01      	cmp	r3, #1
 8005544:	d017      	beq.n	8005576 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	4a33      	ldr	r2, [pc, #204]	; (8005618 <I2C_ITError+0x19c>)
 800554c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fb31 	bl	8003bc2 <HAL_DMA_Abort_IT>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d04d      	beq.n	8005602 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005570:	4610      	mov	r0, r2
 8005572:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005574:	e045      	b.n	8005602 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f850 	bl	800561c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800557c:	e041      	b.n	8005602 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d039      	beq.n	80055fa <I2C_ITError+0x17e>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b12      	cmp	r3, #18
 800558a:	d002      	beq.n	8005592 <I2C_ITError+0x116>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b22      	cmp	r3, #34	; 0x22
 8005590:	d133      	bne.n	80055fa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800559c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a0:	d107      	bne.n	80055b2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe fb41 	bl	8003c3e <HAL_DMA_GetState>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d017      	beq.n	80055f2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	4a14      	ldr	r2, [pc, #80]	; (8005618 <I2C_ITError+0x19c>)
 80055c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe faf3 	bl	8003bc2 <HAL_DMA_Abort_IT>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d011      	beq.n	8005606 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055ec:	4610      	mov	r0, r2
 80055ee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055f0:	e009      	b.n	8005606 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f812 	bl	800561c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055f8:	e005      	b.n	8005606 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f80e 	bl	800561c <I2C_TreatErrorCallback>
  }
}
 8005600:	e002      	b.n	8005608 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005602:	bf00      	nop
 8005604:	e000      	b.n	8005608 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005606:	bf00      	nop
}
 8005608:	bf00      	nop
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	ffff0000 	.word	0xffff0000
 8005614:	08004ca1 	.word	0x08004ca1
 8005618:	080056b3 	.word	0x080056b3

0800561c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b60      	cmp	r3, #96	; 0x60
 800562e:	d10e      	bne.n	800564e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff fb20 	bl	8004c8c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800564c:	e009      	b.n	8005662 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff fb0b 	bl	8004c78 <HAL_I2C_ErrorCallback>
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b02      	cmp	r3, #2
 800567e:	d103      	bne.n	8005688 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2200      	movs	r2, #0
 8005686:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b01      	cmp	r3, #1
 8005694:	d007      	beq.n	80056a6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0201 	orr.w	r2, r2, #1
 80056a4:	619a      	str	r2, [r3, #24]
  }
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	2200      	movs	r2, #0
 80056ce:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	2200      	movs	r2, #0
 80056de:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7ff ff9b 	bl	800561c <I2C_TreatErrorCallback>
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	4613      	mov	r3, r2
 80056fc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056fe:	e022      	b.n	8005746 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d01e      	beq.n	8005746 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005708:	f7fe f91a 	bl	8003940 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	d302      	bcc.n	800571e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d113      	bne.n	8005746 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f043 0220 	orr.w	r2, r3, #32
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e00f      	b.n	8005766 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699a      	ldr	r2, [r3, #24]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4013      	ands	r3, r2
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	429a      	cmp	r2, r3
 8005762:	d0cd      	beq.n	8005700 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800577a:	e02c      	b.n	80057d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 f8dd 	bl	8005940 <I2C_IsAcknowledgeFailed>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e02a      	b.n	80057e6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d01e      	beq.n	80057d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005798:	f7fe f8d2 	bl	8003940 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d302      	bcc.n	80057ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d113      	bne.n	80057d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e007      	b.n	80057e6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d1cb      	bne.n	800577c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057fa:	e028      	b.n	800584e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f89d 	bl	8005940 <I2C_IsAcknowledgeFailed>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e026      	b.n	800585e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005810:	f7fe f896 	bl	8003940 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	d302      	bcc.n	8005826 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d113      	bne.n	800584e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	f043 0220 	orr.w	r2, r3, #32
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e007      	b.n	800585e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b20      	cmp	r3, #32
 800585a:	d1cf      	bne.n	80057fc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005874:	e055      	b.n	8005922 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f860 	bl	8005940 <I2C_IsAcknowledgeFailed>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e053      	b.n	8005932 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b20      	cmp	r3, #32
 8005896:	d129      	bne.n	80058ec <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d105      	bne.n	80058b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e03f      	b.n	8005932 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2220      	movs	r2, #32
 80058b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6859      	ldr	r1, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4b1d      	ldr	r3, [pc, #116]	; (800593c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80058c6:	400b      	ands	r3, r1
 80058c8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e022      	b.n	8005932 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ec:	f7fe f828 	bl	8003940 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d302      	bcc.n	8005902 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10f      	bne.n	8005922 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e007      	b.n	8005932 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b04      	cmp	r3, #4
 800592e:	d1a2      	bne.n	8005876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	fe00e800 	.word	0xfe00e800

08005940 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b10      	cmp	r3, #16
 8005958:	d161      	bne.n	8005a1e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005968:	d02b      	beq.n	80059c2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005978:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800597a:	e022      	b.n	80059c2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d01e      	beq.n	80059c2 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005984:	f7fd ffdc 	bl	8003940 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	429a      	cmp	r2, r3
 8005992:	d302      	bcc.n	800599a <I2C_IsAcknowledgeFailed+0x5a>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d113      	bne.n	80059c2 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f043 0220 	orr.w	r2, r3, #32
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e02e      	b.n	8005a20 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d1d5      	bne.n	800597c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2210      	movs	r2, #16
 80059d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2220      	movs	r2, #32
 80059de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff fe42 	bl	800566a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6859      	ldr	r1, [r3, #4]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	4b0d      	ldr	r3, [pc, #52]	; (8005a28 <I2C_IsAcknowledgeFailed+0xe8>)
 80059f2:	400b      	ands	r3, r1
 80059f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	f043 0204 	orr.w	r2, r3, #4
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	fe00e800 	.word	0xfe00e800

08005a2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	607b      	str	r3, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	817b      	strh	r3, [r7, #10]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	0d5b      	lsrs	r3, r3, #21
 8005a48:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005a4c:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <I2C_TransferConfig+0x58>)
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	43db      	mvns	r3, r3
 8005a52:	ea02 0103 	and.w	r1, r2, r3
 8005a56:	897b      	ldrh	r3, [r7, #10]
 8005a58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a5c:	7a7b      	ldrb	r3, [r7, #9]
 8005a5e:	041b      	lsls	r3, r3, #16
 8005a60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	03ff63ff 	.word	0x03ff63ff

08005a88 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005a98:	887b      	ldrh	r3, [r7, #2]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00f      	beq.n	8005ac2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005aa8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ab6:	2b28      	cmp	r3, #40	; 0x28
 8005ab8:	d003      	beq.n	8005ac2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005ac0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ac2:	887b      	ldrh	r3, [r7, #2]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00f      	beq.n	8005aec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005ad2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ae0:	2b28      	cmp	r3, #40	; 0x28
 8005ae2:	d003      	beq.n	8005aec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005aea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005aec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	da03      	bge.n	8005afc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005afa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005afc:	887b      	ldrh	r3, [r7, #2]
 8005afe:	2b10      	cmp	r3, #16
 8005b00:	d103      	bne.n	8005b0a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005b08:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b0a:	887b      	ldrh	r3, [r7, #2]
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d103      	bne.n	8005b18 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f043 0320 	orr.w	r3, r3, #32
 8005b16:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005b18:	887b      	ldrh	r3, [r7, #2]
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d103      	bne.n	8005b26 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6819      	ldr	r1, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	43da      	mvns	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	400a      	ands	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d138      	bne.n	8005bcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e032      	b.n	8005bce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2224      	movs	r2, #36	; 0x24
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0201 	bic.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6819      	ldr	r1, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e000      	b.n	8005bce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
  }
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d139      	bne.n	8005c64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e033      	b.n	8005c66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2224      	movs	r2, #36	; 0x24
 8005c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0201 	bic.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e000      	b.n	8005c66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	f001 b83a 	b.w	8006d0e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 816f 	beq.w	8005f8e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005cb0:	4bb5      	ldr	r3, [pc, #724]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 030c 	and.w	r3, r3, #12
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d00c      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005cbc:	4bb2      	ldr	r3, [pc, #712]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 030c 	and.w	r3, r3, #12
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d15c      	bne.n	8005d82 <HAL_RCC_OscConfig+0x10e>
 8005cc8:	4baf      	ldr	r3, [pc, #700]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd4:	d155      	bne.n	8005d82 <HAL_RCC_OscConfig+0x10e>
 8005cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cda:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005ce2:	fa93 f3a3 	rbit	r3, r3
 8005ce6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005cea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cee:	fab3 f383 	clz	r3, r3
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	f043 0301 	orr.w	r3, r3, #1
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d102      	bne.n	8005d08 <HAL_RCC_OscConfig+0x94>
 8005d02:	4ba1      	ldr	r3, [pc, #644]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	e015      	b.n	8005d34 <HAL_RCC_OscConfig+0xc0>
 8005d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d0c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d10:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005d14:	fa93 f3a3 	rbit	r3, r3
 8005d18:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d20:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005d24:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005d28:	fa93 f3a3 	rbit	r3, r3
 8005d2c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005d30:	4b95      	ldr	r3, [pc, #596]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d38:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005d3c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005d40:	fa92 f2a2 	rbit	r2, r2
 8005d44:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8005d48:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005d4c:	fab2 f282 	clz	r2, r2
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	f042 0220 	orr.w	r2, r2, #32
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	f002 021f 	and.w	r2, r2, #31
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d62:	4013      	ands	r3, r2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8111 	beq.w	8005f8c <HAL_RCC_OscConfig+0x318>
 8005d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 8108 	bne.w	8005f8c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f000 bfc6 	b.w	8006d0e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d92:	d106      	bne.n	8005da2 <HAL_RCC_OscConfig+0x12e>
 8005d94:	4b7c      	ldr	r3, [pc, #496]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a7b      	ldr	r2, [pc, #492]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e036      	b.n	8005e10 <HAL_RCC_OscConfig+0x19c>
 8005da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005da6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10c      	bne.n	8005dcc <HAL_RCC_OscConfig+0x158>
 8005db2:	4b75      	ldr	r3, [pc, #468]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a74      	ldr	r2, [pc, #464]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	4b72      	ldr	r3, [pc, #456]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a71      	ldr	r2, [pc, #452]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	e021      	b.n	8005e10 <HAL_RCC_OscConfig+0x19c>
 8005dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ddc:	d10c      	bne.n	8005df8 <HAL_RCC_OscConfig+0x184>
 8005dde:	4b6a      	ldr	r3, [pc, #424]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a69      	ldr	r2, [pc, #420]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	4b67      	ldr	r3, [pc, #412]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a66      	ldr	r2, [pc, #408]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	e00b      	b.n	8005e10 <HAL_RCC_OscConfig+0x19c>
 8005df8:	4b63      	ldr	r3, [pc, #396]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a62      	ldr	r2, [pc, #392]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	4b60      	ldr	r3, [pc, #384]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a5f      	ldr	r2, [pc, #380]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e0e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d059      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e20:	f7fd fd8e 	bl	8003940 <HAL_GetTick>
 8005e24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e28:	e00a      	b.n	8005e40 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e2a:	f7fd fd89 	bl	8003940 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b64      	cmp	r3, #100	; 0x64
 8005e38:	d902      	bls.n	8005e40 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	f000 bf67 	b.w	8006d0e <HAL_RCC_OscConfig+0x109a>
 8005e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e44:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e48:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005e4c:	fa93 f3a3 	rbit	r3, r3
 8005e50:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005e54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e58:	fab3 f383 	clz	r3, r3
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d102      	bne.n	8005e72 <HAL_RCC_OscConfig+0x1fe>
 8005e6c:	4b46      	ldr	r3, [pc, #280]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	e015      	b.n	8005e9e <HAL_RCC_OscConfig+0x22a>
 8005e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e76:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8005e7e:	fa93 f3a3 	rbit	r3, r3
 8005e82:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e8a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005e8e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8005e92:	fa93 f3a3 	rbit	r3, r3
 8005e96:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005e9a:	4b3b      	ldr	r3, [pc, #236]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ea2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005ea6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005eaa:	fa92 f2a2 	rbit	r2, r2
 8005eae:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8005eb2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005eb6:	fab2 f282 	clz	r2, r2
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	f042 0220 	orr.w	r2, r2, #32
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	f002 021f 	and.w	r2, r2, #31
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0ab      	beq.n	8005e2a <HAL_RCC_OscConfig+0x1b6>
 8005ed2:	e05c      	b.n	8005f8e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed4:	f7fd fd34 	bl	8003940 <HAL_GetTick>
 8005ed8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005edc:	e00a      	b.n	8005ef4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ede:	f7fd fd2f 	bl	8003940 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b64      	cmp	r3, #100	; 0x64
 8005eec:	d902      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	f000 bf0d 	b.w	8006d0e <HAL_RCC_OscConfig+0x109a>
 8005ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ef8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005f00:	fa93 f3a3 	rbit	r3, r3
 8005f04:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005f08:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f0c:	fab3 f383 	clz	r3, r3
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	f043 0301 	orr.w	r3, r3, #1
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d102      	bne.n	8005f26 <HAL_RCC_OscConfig+0x2b2>
 8005f20:	4b19      	ldr	r3, [pc, #100]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	e015      	b.n	8005f52 <HAL_RCC_OscConfig+0x2de>
 8005f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f2a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f2e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005f32:	fa93 f3a3 	rbit	r3, r3
 8005f36:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f3e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005f42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005f46:	fa93 f3a3 	rbit	r3, r3
 8005f4a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005f4e:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <HAL_RCC_OscConfig+0x314>)
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f56:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005f5a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8005f5e:	fa92 f2a2 	rbit	r2, r2
 8005f62:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8005f66:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005f6a:	fab2 f282 	clz	r2, r2
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	f042 0220 	orr.w	r2, r2, #32
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	f002 021f 	and.w	r2, r2, #31
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1ab      	bne.n	8005ede <HAL_RCC_OscConfig+0x26a>
 8005f86:	e002      	b.n	8005f8e <HAL_RCC_OscConfig+0x31a>
 8005f88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 817f 	beq.w	80062a2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005fa4:	4ba7      	ldr	r3, [pc, #668]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 030c 	and.w	r3, r3, #12
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00c      	beq.n	8005fca <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005fb0:	4ba4      	ldr	r3, [pc, #656]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f003 030c 	and.w	r3, r3, #12
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d173      	bne.n	80060a4 <HAL_RCC_OscConfig+0x430>
 8005fbc:	4ba1      	ldr	r3, [pc, #644]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc8:	d16c      	bne.n	80060a4 <HAL_RCC_OscConfig+0x430>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005fd4:	fa93 f3a3 	rbit	r3, r3
 8005fd8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005fdc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fe0:	fab3 f383 	clz	r3, r3
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d102      	bne.n	8005ffa <HAL_RCC_OscConfig+0x386>
 8005ff4:	4b93      	ldr	r3, [pc, #588]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	e013      	b.n	8006022 <HAL_RCC_OscConfig+0x3ae>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006000:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8006004:	fa93 f3a3 	rbit	r3, r3
 8006008:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800600c:	2302      	movs	r3, #2
 800600e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006012:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006016:	fa93 f3a3 	rbit	r3, r3
 800601a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800601e:	4b89      	ldr	r3, [pc, #548]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	2202      	movs	r2, #2
 8006024:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006028:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800602c:	fa92 f2a2 	rbit	r2, r2
 8006030:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8006034:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006038:	fab2 f282 	clz	r2, r2
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	f042 0220 	orr.w	r2, r2, #32
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	f002 021f 	and.w	r2, r2, #31
 8006048:	2101      	movs	r1, #1
 800604a:	fa01 f202 	lsl.w	r2, r1, r2
 800604e:	4013      	ands	r3, r2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <HAL_RCC_OscConfig+0x3f6>
 8006054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006058:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d002      	beq.n	800606a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	f000 be52 	b.w	8006d0e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606a:	4b76      	ldr	r3, [pc, #472]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006076:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	21f8      	movs	r1, #248	; 0xf8
 8006080:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006084:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006088:	fa91 f1a1 	rbit	r1, r1
 800608c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8006090:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006094:	fab1 f181 	clz	r1, r1
 8006098:	b2c9      	uxtb	r1, r1
 800609a:	408b      	lsls	r3, r1
 800609c:	4969      	ldr	r1, [pc, #420]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060a2:	e0fe      	b.n	80062a2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8088 	beq.w	80061c6 <HAL_RCC_OscConfig+0x552>
 80060b6:	2301      	movs	r3, #1
 80060b8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80060c0:	fa93 f3a3 	rbit	r3, r3
 80060c4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80060c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060cc:	fab3 f383 	clz	r3, r3
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	461a      	mov	r2, r3
 80060de:	2301      	movs	r3, #1
 80060e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e2:	f7fd fc2d 	bl	8003940 <HAL_GetTick>
 80060e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ea:	e00a      	b.n	8006102 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ec:	f7fd fc28 	bl	8003940 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d902      	bls.n	8006102 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	f000 be06 	b.w	8006d0e <HAL_RCC_OscConfig+0x109a>
 8006102:	2302      	movs	r3, #2
 8006104:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006108:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800610c:	fa93 f3a3 	rbit	r3, r3
 8006110:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8006114:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006118:	fab3 f383 	clz	r3, r3
 800611c:	b2db      	uxtb	r3, r3
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	b2db      	uxtb	r3, r3
 8006122:	f043 0301 	orr.w	r3, r3, #1
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d102      	bne.n	8006132 <HAL_RCC_OscConfig+0x4be>
 800612c:	4b45      	ldr	r3, [pc, #276]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	e013      	b.n	800615a <HAL_RCC_OscConfig+0x4e6>
 8006132:	2302      	movs	r3, #2
 8006134:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006138:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800613c:	fa93 f3a3 	rbit	r3, r3
 8006140:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006144:	2302      	movs	r3, #2
 8006146:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800614a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006156:	4b3b      	ldr	r3, [pc, #236]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	2202      	movs	r2, #2
 800615c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006160:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006164:	fa92 f2a2 	rbit	r2, r2
 8006168:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800616c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006170:	fab2 f282 	clz	r2, r2
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	f042 0220 	orr.w	r2, r2, #32
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	f002 021f 	and.w	r2, r2, #31
 8006180:	2101      	movs	r1, #1
 8006182:	fa01 f202 	lsl.w	r2, r1, r2
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0af      	beq.n	80060ec <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800618c:	4b2d      	ldr	r3, [pc, #180]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006198:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	21f8      	movs	r1, #248	; 0xf8
 80061a2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80061aa:	fa91 f1a1 	rbit	r1, r1
 80061ae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80061b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80061b6:	fab1 f181 	clz	r1, r1
 80061ba:	b2c9      	uxtb	r1, r1
 80061bc:	408b      	lsls	r3, r1
 80061be:	4921      	ldr	r1, [pc, #132]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	600b      	str	r3, [r1, #0]
 80061c4:	e06d      	b.n	80062a2 <HAL_RCC_OscConfig+0x62e>
 80061c6:	2301      	movs	r3, #1
 80061c8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80061d0:	fa93 f3a3 	rbit	r3, r3
 80061d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80061d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061dc:	fab3 f383 	clz	r3, r3
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80061e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	461a      	mov	r2, r3
 80061ee:	2300      	movs	r3, #0
 80061f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f2:	f7fd fba5 	bl	8003940 <HAL_GetTick>
 80061f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061fa:	e00a      	b.n	8006212 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061fc:	f7fd fba0 	bl	8003940 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d902      	bls.n	8006212 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	f000 bd7e 	b.w	8006d0e <HAL_RCC_OscConfig+0x109a>
 8006212:	2302      	movs	r3, #2
 8006214:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006218:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800621c:	fa93 f3a3 	rbit	r3, r3
 8006220:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8006224:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006228:	fab3 f383 	clz	r3, r3
 800622c:	b2db      	uxtb	r3, r3
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	d105      	bne.n	8006248 <HAL_RCC_OscConfig+0x5d4>
 800623c:	4b01      	ldr	r3, [pc, #4]	; (8006244 <HAL_RCC_OscConfig+0x5d0>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	e016      	b.n	8006270 <HAL_RCC_OscConfig+0x5fc>
 8006242:	bf00      	nop
 8006244:	40021000 	.word	0x40021000
 8006248:	2302      	movs	r3, #2
 800624a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006252:	fa93 f3a3 	rbit	r3, r3
 8006256:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800625a:	2302      	movs	r3, #2
 800625c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006260:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006264:	fa93 f3a3 	rbit	r3, r3
 8006268:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800626c:	4bbf      	ldr	r3, [pc, #764]	; (800656c <HAL_RCC_OscConfig+0x8f8>)
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	2202      	movs	r2, #2
 8006272:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006276:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800627a:	fa92 f2a2 	rbit	r2, r2
 800627e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8006282:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006286:	fab2 f282 	clz	r2, r2
 800628a:	b2d2      	uxtb	r2, r2
 800628c:	f042 0220 	orr.w	r2, r2, #32
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	f002 021f 	and.w	r2, r2, #31
 8006296:	2101      	movs	r1, #1
 8006298:	fa01 f202 	lsl.w	r2, r1, r2
 800629c:	4013      	ands	r3, r2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1ac      	bne.n	80061fc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 8113 	beq.w	80064de <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d07c      	beq.n	80063c2 <HAL_RCC_OscConfig+0x74e>
 80062c8:	2301      	movs	r3, #1
 80062ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d2:	fa93 f3a3 	rbit	r3, r3
 80062d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80062da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062de:	fab3 f383 	clz	r3, r3
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	4ba2      	ldr	r3, [pc, #648]	; (8006570 <HAL_RCC_OscConfig+0x8fc>)
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	461a      	mov	r2, r3
 80062ee:	2301      	movs	r3, #1
 80062f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f2:	f7fd fb25 	bl	8003940 <HAL_GetTick>
 80062f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062fa:	e00a      	b.n	8006312 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062fc:	f7fd fb20 	bl	8003940 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d902      	bls.n	8006312 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	f000 bcfe 	b.w	8006d0e <HAL_RCC_OscConfig+0x109a>
 8006312:	2302      	movs	r3, #2
 8006314:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631c:	fa93 f2a3 	rbit	r2, r3
 8006320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006324:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800632e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006332:	2202      	movs	r2, #2
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800633a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	fa93 f2a3 	rbit	r2, r3
 8006344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006352:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006356:	2202      	movs	r2, #2
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800635e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	fa93 f2a3 	rbit	r2, r3
 8006368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800636c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006370:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006372:	4b7e      	ldr	r3, [pc, #504]	; (800656c <HAL_RCC_OscConfig+0x8f8>)
 8006374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800637a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800637e:	2102      	movs	r1, #2
 8006380:	6019      	str	r1, [r3, #0]
 8006382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006386:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	fa93 f1a3 	rbit	r1, r3
 8006390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006394:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006398:	6019      	str	r1, [r3, #0]
  return result;
 800639a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800639e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	fab3 f383 	clz	r3, r3
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	2101      	movs	r1, #1
 80063b6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ba:	4013      	ands	r3, r2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d09d      	beq.n	80062fc <HAL_RCC_OscConfig+0x688>
 80063c0:	e08d      	b.n	80064de <HAL_RCC_OscConfig+0x86a>
 80063c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063ca:	2201      	movs	r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	fa93 f2a3 	rbit	r2, r3
 80063dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80063e4:	601a      	str	r2, [r3, #0]
  return result;
 80063e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80063ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063f0:	fab3 f383 	clz	r3, r3
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	461a      	mov	r2, r3
 80063f8:	4b5d      	ldr	r3, [pc, #372]	; (8006570 <HAL_RCC_OscConfig+0x8fc>)
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	461a      	mov	r2, r3
 8006400:	2300      	movs	r3, #0
 8006402:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006404:	f7fd fa9c 	bl	8003940 <HAL_GetTick>
 8006408:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800640c:	e00a      	b.n	8006424 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800640e:	f7fd fa97 	bl	8003940 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d902      	bls.n	8006424 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	f000 bc75 	b.w	8006d0e <HAL_RCC_OscConfig+0x109a>
 8006424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006428:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800642c:	2202      	movs	r2, #2
 800642e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006434:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	fa93 f2a3 	rbit	r2, r3
 800643e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006442:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800644c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006450:	2202      	movs	r2, #2
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	fa93 f2a3 	rbit	r2, r3
 8006462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006470:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006474:	2202      	movs	r2, #2
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800647c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	fa93 f2a3 	rbit	r2, r3
 8006486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800648a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800648e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006490:	4b36      	ldr	r3, [pc, #216]	; (800656c <HAL_RCC_OscConfig+0x8f8>)
 8006492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006498:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800649c:	2102      	movs	r1, #2
 800649e:	6019      	str	r1, [r3, #0]
 80064a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	fa93 f1a3 	rbit	r1, r3
 80064ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064b2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80064b6:	6019      	str	r1, [r3, #0]
  return result;
 80064b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	fab3 f383 	clz	r3, r3
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	2101      	movs	r1, #1
 80064d4:	fa01 f303 	lsl.w	r3, r1, r3
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d197      	bne.n	800640e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 81a5 	beq.w	800683e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064f4:	2300      	movs	r3, #0
 80064f6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064fa:	4b1c      	ldr	r3, [pc, #112]	; (800656c <HAL_RCC_OscConfig+0x8f8>)
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d116      	bne.n	8006534 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006506:	4b19      	ldr	r3, [pc, #100]	; (800656c <HAL_RCC_OscConfig+0x8f8>)
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	4a18      	ldr	r2, [pc, #96]	; (800656c <HAL_RCC_OscConfig+0x8f8>)
 800650c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006510:	61d3      	str	r3, [r2, #28]
 8006512:	4b16      	ldr	r3, [pc, #88]	; (800656c <HAL_RCC_OscConfig+0x8f8>)
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800651a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800651e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006528:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800652c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800652e:	2301      	movs	r3, #1
 8006530:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006534:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <HAL_RCC_OscConfig+0x900>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d121      	bne.n	8006584 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006540:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <HAL_RCC_OscConfig+0x900>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a0b      	ldr	r2, [pc, #44]	; (8006574 <HAL_RCC_OscConfig+0x900>)
 8006546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800654a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800654c:	f7fd f9f8 	bl	8003940 <HAL_GetTick>
 8006550:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006554:	e010      	b.n	8006578 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006556:	f7fd f9f3 	bl	8003940 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b64      	cmp	r3, #100	; 0x64
 8006564:	d908      	bls.n	8006578 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e3d1      	b.n	8006d0e <HAL_RCC_OscConfig+0x109a>
 800656a:	bf00      	nop
 800656c:	40021000 	.word	0x40021000
 8006570:	10908120 	.word	0x10908120
 8006574:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006578:	4b8d      	ldr	r3, [pc, #564]	; (80067b0 <HAL_RCC_OscConfig+0xb3c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0e8      	beq.n	8006556 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006588:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d106      	bne.n	80065a2 <HAL_RCC_OscConfig+0x92e>
 8006594:	4b87      	ldr	r3, [pc, #540]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	4a86      	ldr	r2, [pc, #536]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	6213      	str	r3, [r2, #32]
 80065a0:	e035      	b.n	800660e <HAL_RCC_OscConfig+0x99a>
 80065a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10c      	bne.n	80065cc <HAL_RCC_OscConfig+0x958>
 80065b2:	4b80      	ldr	r3, [pc, #512]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	4a7f      	ldr	r2, [pc, #508]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	6213      	str	r3, [r2, #32]
 80065be:	4b7d      	ldr	r3, [pc, #500]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	4a7c      	ldr	r2, [pc, #496]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80065c4:	f023 0304 	bic.w	r3, r3, #4
 80065c8:	6213      	str	r3, [r2, #32]
 80065ca:	e020      	b.n	800660e <HAL_RCC_OscConfig+0x99a>
 80065cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	2b05      	cmp	r3, #5
 80065da:	d10c      	bne.n	80065f6 <HAL_RCC_OscConfig+0x982>
 80065dc:	4b75      	ldr	r3, [pc, #468]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	4a74      	ldr	r2, [pc, #464]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80065e2:	f043 0304 	orr.w	r3, r3, #4
 80065e6:	6213      	str	r3, [r2, #32]
 80065e8:	4b72      	ldr	r3, [pc, #456]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	4a71      	ldr	r2, [pc, #452]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	6213      	str	r3, [r2, #32]
 80065f4:	e00b      	b.n	800660e <HAL_RCC_OscConfig+0x99a>
 80065f6:	4b6f      	ldr	r3, [pc, #444]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	4a6e      	ldr	r2, [pc, #440]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	6213      	str	r3, [r2, #32]
 8006602:	4b6c      	ldr	r3, [pc, #432]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	4a6b      	ldr	r2, [pc, #428]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 8006608:	f023 0304 	bic.w	r3, r3, #4
 800660c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800660e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006612:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 8081 	beq.w	8006722 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006620:	f7fd f98e 	bl	8003940 <HAL_GetTick>
 8006624:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006628:	e00b      	b.n	8006642 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800662a:	f7fd f989 	bl	8003940 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f241 3288 	movw	r2, #5000	; 0x1388
 800663a:	4293      	cmp	r3, r2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e365      	b.n	8006d0e <HAL_RCC_OscConfig+0x109a>
 8006642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006646:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800664a:	2202      	movs	r2, #2
 800664c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800664e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006652:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	fa93 f2a3 	rbit	r2, r3
 800665c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006660:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800666a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800666e:	2202      	movs	r2, #2
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006676:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	fa93 f2a3 	rbit	r2, r3
 8006680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006684:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006688:	601a      	str	r2, [r3, #0]
  return result;
 800668a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800668e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006692:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006694:	fab3 f383 	clz	r3, r3
 8006698:	b2db      	uxtb	r3, r3
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f043 0302 	orr.w	r3, r3, #2
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d102      	bne.n	80066ae <HAL_RCC_OscConfig+0xa3a>
 80066a8:	4b42      	ldr	r3, [pc, #264]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	e013      	b.n	80066d6 <HAL_RCC_OscConfig+0xa62>
 80066ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80066b6:	2202      	movs	r2, #2
 80066b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	fa93 f2a3 	rbit	r2, r3
 80066c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066cc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	4b38      	ldr	r3, [pc, #224]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80066da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80066de:	2102      	movs	r1, #2
 80066e0:	6011      	str	r1, [r2, #0]
 80066e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80066e6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	fa92 f1a2 	rbit	r1, r2
 80066f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80066f4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80066f8:	6011      	str	r1, [r2, #0]
  return result;
 80066fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80066fe:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006702:	6812      	ldr	r2, [r2, #0]
 8006704:	fab2 f282 	clz	r2, r2
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	f002 021f 	and.w	r2, r2, #31
 8006714:	2101      	movs	r1, #1
 8006716:	fa01 f202 	lsl.w	r2, r1, r2
 800671a:	4013      	ands	r3, r2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d084      	beq.n	800662a <HAL_RCC_OscConfig+0x9b6>
 8006720:	e083      	b.n	800682a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006722:	f7fd f90d 	bl	8003940 <HAL_GetTick>
 8006726:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800672a:	e00b      	b.n	8006744 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800672c:	f7fd f908 	bl	8003940 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	f241 3288 	movw	r2, #5000	; 0x1388
 800673c:	4293      	cmp	r3, r2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e2e4      	b.n	8006d0e <HAL_RCC_OscConfig+0x109a>
 8006744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006748:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800674c:	2202      	movs	r2, #2
 800674e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006750:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006754:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	fa93 f2a3 	rbit	r2, r3
 800675e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006762:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800676c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006770:	2202      	movs	r2, #2
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006778:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	fa93 f2a3 	rbit	r2, r3
 8006782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006786:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800678a:	601a      	str	r2, [r3, #0]
  return result;
 800678c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006790:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006794:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006796:	fab3 f383 	clz	r3, r3
 800679a:	b2db      	uxtb	r3, r3
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	f043 0302 	orr.w	r3, r3, #2
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d106      	bne.n	80067b8 <HAL_RCC_OscConfig+0xb44>
 80067aa:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <HAL_RCC_OscConfig+0xb40>)
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	e017      	b.n	80067e0 <HAL_RCC_OscConfig+0xb6c>
 80067b0:	40007000 	.word	0x40007000
 80067b4:	40021000 	.word	0x40021000
 80067b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067bc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80067c0:	2202      	movs	r2, #2
 80067c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	fa93 f2a3 	rbit	r2, r3
 80067d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067d6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	4bb3      	ldr	r3, [pc, #716]	; (8006aac <HAL_RCC_OscConfig+0xe38>)
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80067e4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80067e8:	2102      	movs	r1, #2
 80067ea:	6011      	str	r1, [r2, #0]
 80067ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80067f0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	fa92 f1a2 	rbit	r1, r2
 80067fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80067fe:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8006802:	6011      	str	r1, [r2, #0]
  return result;
 8006804:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006808:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	fab2 f282 	clz	r2, r2
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	f002 021f 	and.w	r2, r2, #31
 800681e:	2101      	movs	r1, #1
 8006820:	fa01 f202 	lsl.w	r2, r1, r2
 8006824:	4013      	ands	r3, r2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d180      	bne.n	800672c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800682a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800682e:	2b01      	cmp	r3, #1
 8006830:	d105      	bne.n	800683e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006832:	4b9e      	ldr	r3, [pc, #632]	; (8006aac <HAL_RCC_OscConfig+0xe38>)
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	4a9d      	ldr	r2, [pc, #628]	; (8006aac <HAL_RCC_OscConfig+0xe38>)
 8006838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800683c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800683e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006842:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 825e 	beq.w	8006d0c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006850:	4b96      	ldr	r3, [pc, #600]	; (8006aac <HAL_RCC_OscConfig+0xe38>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f003 030c 	and.w	r3, r3, #12
 8006858:	2b08      	cmp	r3, #8
 800685a:	f000 821f 	beq.w	8006c9c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800685e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006862:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	2b02      	cmp	r3, #2
 800686c:	f040 8170 	bne.w	8006b50 <HAL_RCC_OscConfig+0xedc>
 8006870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006874:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800687c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006882:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	fa93 f2a3 	rbit	r2, r3
 800688c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006890:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006894:	601a      	str	r2, [r3, #0]
  return result;
 8006896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800689a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800689e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a0:	fab3 f383 	clz	r3, r3
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80068aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	461a      	mov	r2, r3
 80068b2:	2300      	movs	r3, #0
 80068b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b6:	f7fd f843 	bl	8003940 <HAL_GetTick>
 80068ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068be:	e009      	b.n	80068d4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fd f83e 	bl	8003940 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e21c      	b.n	8006d0e <HAL_RCC_OscConfig+0x109a>
 80068d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80068dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068e6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	fa93 f2a3 	rbit	r2, r3
 80068f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80068f8:	601a      	str	r2, [r3, #0]
  return result;
 80068fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006902:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006904:	fab3 f383 	clz	r3, r3
 8006908:	b2db      	uxtb	r3, r3
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	b2db      	uxtb	r3, r3
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d102      	bne.n	800691e <HAL_RCC_OscConfig+0xcaa>
 8006918:	4b64      	ldr	r3, [pc, #400]	; (8006aac <HAL_RCC_OscConfig+0xe38>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	e027      	b.n	800696e <HAL_RCC_OscConfig+0xcfa>
 800691e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006922:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800692a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006930:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	fa93 f2a3 	rbit	r2, r3
 800693a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800693e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006948:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800694c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006956:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	fa93 f2a3 	rbit	r2, r3
 8006960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006964:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	4b50      	ldr	r3, [pc, #320]	; (8006aac <HAL_RCC_OscConfig+0xe38>)
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006972:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006976:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800697a:	6011      	str	r1, [r2, #0]
 800697c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006980:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	fa92 f1a2 	rbit	r1, r2
 800698a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800698e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006992:	6011      	str	r1, [r2, #0]
  return result;
 8006994:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006998:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	fab2 f282 	clz	r2, r2
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	f042 0220 	orr.w	r2, r2, #32
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	f002 021f 	and.w	r2, r2, #31
 80069ae:	2101      	movs	r1, #1
 80069b0:	fa01 f202 	lsl.w	r2, r1, r2
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d182      	bne.n	80068c0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ba:	4b3c      	ldr	r3, [pc, #240]	; (8006aac <HAL_RCC_OscConfig+0xe38>)
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	f023 020f 	bic.w	r2, r3, #15
 80069c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	4937      	ldr	r1, [pc, #220]	; (8006aac <HAL_RCC_OscConfig+0xe38>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80069d4:	4b35      	ldr	r3, [pc, #212]	; (8006aac <HAL_RCC_OscConfig+0xe38>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80069dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a19      	ldr	r1, [r3, #32]
 80069e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	430b      	orrs	r3, r1
 80069f6:	492d      	ldr	r1, [pc, #180]	; (8006aac <HAL_RCC_OscConfig+0xe38>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	604b      	str	r3, [r1, #4]
 80069fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a00:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006a04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a0e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	fa93 f2a3 	rbit	r2, r3
 8006a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a1c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006a20:	601a      	str	r2, [r3, #0]
  return result;
 8006a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a26:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006a2a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a2c:	fab3 f383 	clz	r3, r3
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	2301      	movs	r3, #1
 8006a40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a42:	f7fc ff7d 	bl	8003940 <HAL_GetTick>
 8006a46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a4a:	e009      	b.n	8006a60 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a4c:	f7fc ff78 	bl	8003940 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e156      	b.n	8006d0e <HAL_RCC_OscConfig+0x109a>
 8006a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a64:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a72:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	fa93 f2a3 	rbit	r2, r3
 8006a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a80:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006a84:	601a      	str	r2, [r3, #0]
  return result;
 8006a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006a8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a90:	fab3 f383 	clz	r3, r3
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d105      	bne.n	8006ab0 <HAL_RCC_OscConfig+0xe3c>
 8006aa4:	4b01      	ldr	r3, [pc, #4]	; (8006aac <HAL_RCC_OscConfig+0xe38>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	e02a      	b.n	8006b00 <HAL_RCC_OscConfig+0xe8c>
 8006aaa:	bf00      	nop
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ab4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ac2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	fa93 f2a3 	rbit	r2, r3
 8006acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ad0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ada:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ae8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	fa93 f2a3 	rbit	r2, r3
 8006af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006af6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	4b86      	ldr	r3, [pc, #536]	; (8006d18 <HAL_RCC_OscConfig+0x10a4>)
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b04:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006b08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b0c:	6011      	str	r1, [r2, #0]
 8006b0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b12:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	fa92 f1a2 	rbit	r1, r2
 8006b1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b20:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006b24:	6011      	str	r1, [r2, #0]
  return result;
 8006b26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b2a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	fab2 f282 	clz	r2, r2
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	f042 0220 	orr.w	r2, r2, #32
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	f002 021f 	and.w	r2, r2, #31
 8006b40:	2101      	movs	r1, #1
 8006b42:	fa01 f202 	lsl.w	r2, r1, r2
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f43f af7f 	beq.w	8006a4c <HAL_RCC_OscConfig+0xdd8>
 8006b4e:	e0dd      	b.n	8006d0c <HAL_RCC_OscConfig+0x1098>
 8006b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b54:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006b58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b62:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	fa93 f2a3 	rbit	r2, r3
 8006b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b70:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006b74:	601a      	str	r2, [r3, #0]
  return result;
 8006b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b7a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006b7e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b80:	fab3 f383 	clz	r3, r3
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	461a      	mov	r2, r3
 8006b92:	2300      	movs	r3, #0
 8006b94:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b96:	f7fc fed3 	bl	8003940 <HAL_GetTick>
 8006b9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b9e:	e009      	b.n	8006bb4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ba0:	f7fc fece 	bl	8003940 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e0ac      	b.n	8006d0e <HAL_RCC_OscConfig+0x109a>
 8006bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bb8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bc6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	fa93 f2a3 	rbit	r2, r3
 8006bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bd4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006bd8:	601a      	str	r2, [r3, #0]
  return result;
 8006bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bde:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006be2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006be4:	fab3 f383 	clz	r3, r3
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	095b      	lsrs	r3, r3, #5
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d102      	bne.n	8006bfe <HAL_RCC_OscConfig+0xf8a>
 8006bf8:	4b47      	ldr	r3, [pc, #284]	; (8006d18 <HAL_RCC_OscConfig+0x10a4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	e027      	b.n	8006c4e <HAL_RCC_OscConfig+0xfda>
 8006bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c02:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c10:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	fa93 f2a3 	rbit	r2, r3
 8006c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c1e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c28:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c36:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	fa93 f2a3 	rbit	r2, r3
 8006c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c44:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	4b33      	ldr	r3, [pc, #204]	; (8006d18 <HAL_RCC_OscConfig+0x10a4>)
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006c52:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006c56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006c5a:	6011      	str	r1, [r2, #0]
 8006c5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006c60:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006c64:	6812      	ldr	r2, [r2, #0]
 8006c66:	fa92 f1a2 	rbit	r1, r2
 8006c6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006c6e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006c72:	6011      	str	r1, [r2, #0]
  return result;
 8006c74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006c78:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	fab2 f282 	clz	r2, r2
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	f042 0220 	orr.w	r2, r2, #32
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	f002 021f 	and.w	r2, r2, #31
 8006c8e:	2101      	movs	r1, #1
 8006c90:	fa01 f202 	lsl.w	r2, r1, r2
 8006c94:	4013      	ands	r3, r2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d182      	bne.n	8006ba0 <HAL_RCC_OscConfig+0xf2c>
 8006c9a:	e037      	b.n	8006d0c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ca0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e02e      	b.n	8006d0e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <HAL_RCC_OscConfig+0x10a4>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006cb8:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <HAL_RCC_OscConfig+0x10a4>)
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006cc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cc4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ccc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d117      	bne.n	8006d08 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006cd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cdc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ce4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d10b      	bne.n	8006d08 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006cf4:	f003 020f 	and.w	r2, r3, #15
 8006cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d001      	beq.n	8006d0c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40021000 	.word	0x40021000

08006d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b09e      	sub	sp, #120	; 0x78
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e162      	b.n	8006ffa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d34:	4b90      	ldr	r3, [pc, #576]	; (8006f78 <HAL_RCC_ClockConfig+0x25c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d910      	bls.n	8006d64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d42:	4b8d      	ldr	r3, [pc, #564]	; (8006f78 <HAL_RCC_ClockConfig+0x25c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f023 0207 	bic.w	r2, r3, #7
 8006d4a:	498b      	ldr	r1, [pc, #556]	; (8006f78 <HAL_RCC_ClockConfig+0x25c>)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d52:	4b89      	ldr	r3, [pc, #548]	; (8006f78 <HAL_RCC_ClockConfig+0x25c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e14a      	b.n	8006ffa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d008      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d70:	4b82      	ldr	r3, [pc, #520]	; (8006f7c <HAL_RCC_ClockConfig+0x260>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	497f      	ldr	r1, [pc, #508]	; (8006f7c <HAL_RCC_ClockConfig+0x260>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 80dc 	beq.w	8006f48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d13c      	bne.n	8006e12 <HAL_RCC_ClockConfig+0xf6>
 8006d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006da0:	fa93 f3a3 	rbit	r3, r3
 8006da4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006da8:	fab3 f383 	clz	r3, r3
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	f043 0301 	orr.w	r3, r3, #1
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d102      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xa6>
 8006dbc:	4b6f      	ldr	r3, [pc, #444]	; (8006f7c <HAL_RCC_ClockConfig+0x260>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	e00f      	b.n	8006de2 <HAL_RCC_ClockConfig+0xc6>
 8006dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dca:	fa93 f3a3 	rbit	r3, r3
 8006dce:	667b      	str	r3, [r7, #100]	; 0x64
 8006dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8006dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dd8:	fa93 f3a3 	rbit	r3, r3
 8006ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dde:	4b67      	ldr	r3, [pc, #412]	; (8006f7c <HAL_RCC_ClockConfig+0x260>)
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006de6:	65ba      	str	r2, [r7, #88]	; 0x58
 8006de8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dea:	fa92 f2a2 	rbit	r2, r2
 8006dee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006df0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006df2:	fab2 f282 	clz	r2, r2
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	f042 0220 	orr.w	r2, r2, #32
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	f002 021f 	and.w	r2, r2, #31
 8006e02:	2101      	movs	r1, #1
 8006e04:	fa01 f202 	lsl.w	r2, r1, r2
 8006e08:	4013      	ands	r3, r2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d17b      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e0f3      	b.n	8006ffa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d13c      	bne.n	8006e94 <HAL_RCC_ClockConfig+0x178>
 8006e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e22:	fa93 f3a3 	rbit	r3, r3
 8006e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e2a:	fab3 f383 	clz	r3, r3
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d102      	bne.n	8006e44 <HAL_RCC_ClockConfig+0x128>
 8006e3e:	4b4f      	ldr	r3, [pc, #316]	; (8006f7c <HAL_RCC_ClockConfig+0x260>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	e00f      	b.n	8006e64 <HAL_RCC_ClockConfig+0x148>
 8006e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4c:	fa93 f3a3 	rbit	r3, r3
 8006e50:	647b      	str	r3, [r7, #68]	; 0x44
 8006e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e56:	643b      	str	r3, [r7, #64]	; 0x40
 8006e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5a:	fa93 f3a3 	rbit	r3, r3
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e60:	4b46      	ldr	r3, [pc, #280]	; (8006f7c <HAL_RCC_ClockConfig+0x260>)
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e68:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e6c:	fa92 f2a2 	rbit	r2, r2
 8006e70:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e74:	fab2 f282 	clz	r2, r2
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	f042 0220 	orr.w	r2, r2, #32
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	f002 021f 	and.w	r2, r2, #31
 8006e84:	2101      	movs	r1, #1
 8006e86:	fa01 f202 	lsl.w	r2, r1, r2
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d13a      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e0b2      	b.n	8006ffa <HAL_RCC_ClockConfig+0x2de>
 8006e94:	2302      	movs	r3, #2
 8006e96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	fa93 f3a3 	rbit	r3, r3
 8006e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ea2:	fab3 f383 	clz	r3, r3
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d102      	bne.n	8006ebc <HAL_RCC_ClockConfig+0x1a0>
 8006eb6:	4b31      	ldr	r3, [pc, #196]	; (8006f7c <HAL_RCC_ClockConfig+0x260>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	e00d      	b.n	8006ed8 <HAL_RCC_ClockConfig+0x1bc>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	fa93 f3a3 	rbit	r3, r3
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec8:	2302      	movs	r3, #2
 8006eca:	623b      	str	r3, [r7, #32]
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	fa93 f3a3 	rbit	r3, r3
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	4b29      	ldr	r3, [pc, #164]	; (8006f7c <HAL_RCC_ClockConfig+0x260>)
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	2202      	movs	r2, #2
 8006eda:	61ba      	str	r2, [r7, #24]
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	fa92 f2a2 	rbit	r2, r2
 8006ee2:	617a      	str	r2, [r7, #20]
  return result;
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	fab2 f282 	clz	r2, r2
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	f042 0220 	orr.w	r2, r2, #32
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	f002 021f 	and.w	r2, r2, #31
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e079      	b.n	8006ffa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f06:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <HAL_RCC_ClockConfig+0x260>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f023 0203 	bic.w	r2, r3, #3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	491a      	ldr	r1, [pc, #104]	; (8006f7c <HAL_RCC_ClockConfig+0x260>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f18:	f7fc fd12 	bl	8003940 <HAL_GetTick>
 8006f1c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1e:	e00a      	b.n	8006f36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f20:	f7fc fd0e 	bl	8003940 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e061      	b.n	8006ffa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f36:	4b11      	ldr	r3, [pc, #68]	; (8006f7c <HAL_RCC_ClockConfig+0x260>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f003 020c 	and.w	r2, r3, #12
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d1eb      	bne.n	8006f20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f48:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <HAL_RCC_ClockConfig+0x25c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d214      	bcs.n	8006f80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f56:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <HAL_RCC_ClockConfig+0x25c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f023 0207 	bic.w	r2, r3, #7
 8006f5e:	4906      	ldr	r1, [pc, #24]	; (8006f78 <HAL_RCC_ClockConfig+0x25c>)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f66:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <HAL_RCC_ClockConfig+0x25c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d005      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e040      	b.n	8006ffa <HAL_RCC_ClockConfig+0x2de>
 8006f78:	40022000 	.word	0x40022000
 8006f7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d008      	beq.n	8006f9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f8c:	4b1d      	ldr	r3, [pc, #116]	; (8007004 <HAL_RCC_ClockConfig+0x2e8>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	491a      	ldr	r1, [pc, #104]	; (8007004 <HAL_RCC_ClockConfig+0x2e8>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0308 	and.w	r3, r3, #8
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d009      	beq.n	8006fbe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006faa:	4b16      	ldr	r3, [pc, #88]	; (8007004 <HAL_RCC_ClockConfig+0x2e8>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	4912      	ldr	r1, [pc, #72]	; (8007004 <HAL_RCC_ClockConfig+0x2e8>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006fbe:	f000 f829 	bl	8007014 <HAL_RCC_GetSysClockFreq>
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	4b0f      	ldr	r3, [pc, #60]	; (8007004 <HAL_RCC_ClockConfig+0x2e8>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fcc:	22f0      	movs	r2, #240	; 0xf0
 8006fce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	fa92 f2a2 	rbit	r2, r2
 8006fd6:	60fa      	str	r2, [r7, #12]
  return result;
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	fab2 f282 	clz	r2, r2
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	40d3      	lsrs	r3, r2
 8006fe2:	4a09      	ldr	r2, [pc, #36]	; (8007008 <HAL_RCC_ClockConfig+0x2ec>)
 8006fe4:	5cd3      	ldrb	r3, [r2, r3]
 8006fe6:	fa21 f303 	lsr.w	r3, r1, r3
 8006fea:	4a08      	ldr	r2, [pc, #32]	; (800700c <HAL_RCC_ClockConfig+0x2f0>)
 8006fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006fee:	4b08      	ldr	r3, [pc, #32]	; (8007010 <HAL_RCC_ClockConfig+0x2f4>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fc fc60 	bl	80038b8 <HAL_InitTick>
  
  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3778      	adds	r7, #120	; 0x78
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40021000 	.word	0x40021000
 8007008:	0800fc9c 	.word	0x0800fc9c
 800700c:	20000004 	.word	0x20000004
 8007010:	20000008 	.word	0x20000008

08007014 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007014:	b480      	push	{r7}
 8007016:	b08b      	sub	sp, #44	; 0x2c
 8007018:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	61fb      	str	r3, [r7, #28]
 800701e:	2300      	movs	r3, #0
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	2300      	movs	r3, #0
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800702e:	4b2a      	ldr	r3, [pc, #168]	; (80070d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	f003 030c 	and.w	r3, r3, #12
 800703a:	2b04      	cmp	r3, #4
 800703c:	d002      	beq.n	8007044 <HAL_RCC_GetSysClockFreq+0x30>
 800703e:	2b08      	cmp	r3, #8
 8007040:	d003      	beq.n	800704a <HAL_RCC_GetSysClockFreq+0x36>
 8007042:	e03f      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007044:	4b25      	ldr	r3, [pc, #148]	; (80070dc <HAL_RCC_GetSysClockFreq+0xc8>)
 8007046:	623b      	str	r3, [r7, #32]
      break;
 8007048:	e03f      	b.n	80070ca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007050:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007054:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	fa92 f2a2 	rbit	r2, r2
 800705c:	607a      	str	r2, [r7, #4]
  return result;
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	fab2 f282 	clz	r2, r2
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	40d3      	lsrs	r3, r2
 8007068:	4a1d      	ldr	r2, [pc, #116]	; (80070e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800706a:	5cd3      	ldrb	r3, [r2, r3]
 800706c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800706e:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	220f      	movs	r2, #15
 8007078:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	fa92 f2a2 	rbit	r2, r2
 8007080:	60fa      	str	r2, [r7, #12]
  return result;
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	fab2 f282 	clz	r2, r2
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	40d3      	lsrs	r3, r2
 800708c:	4a15      	ldr	r2, [pc, #84]	; (80070e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800708e:	5cd3      	ldrb	r3, [r2, r3]
 8007090:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800709c:	4a0f      	ldr	r2, [pc, #60]	; (80070dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
 80070ac:	e007      	b.n	80070be <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80070ae:	4a0b      	ldr	r2, [pc, #44]	; (80070dc <HAL_RCC_GetSysClockFreq+0xc8>)
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	fb02 f303 	mul.w	r3, r2, r3
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	623b      	str	r3, [r7, #32]
      break;
 80070c2:	e002      	b.n	80070ca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070c4:	4b05      	ldr	r3, [pc, #20]	; (80070dc <HAL_RCC_GetSysClockFreq+0xc8>)
 80070c6:	623b      	str	r3, [r7, #32]
      break;
 80070c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070ca:	6a3b      	ldr	r3, [r7, #32]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	372c      	adds	r7, #44	; 0x2c
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	40021000 	.word	0x40021000
 80070dc:	007a1200 	.word	0x007a1200
 80070e0:	0800fcb4 	.word	0x0800fcb4
 80070e4:	0800fcc4 	.word	0x0800fcc4

080070e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070ec:	4b03      	ldr	r3, [pc, #12]	; (80070fc <HAL_RCC_GetHCLKFreq+0x14>)
 80070ee:	681b      	ldr	r3, [r3, #0]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20000004 	.word	0x20000004

08007100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007106:	f7ff ffef 	bl	80070e8 <HAL_RCC_GetHCLKFreq>
 800710a:	4601      	mov	r1, r0
 800710c:	4b0b      	ldr	r3, [pc, #44]	; (800713c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007114:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007118:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	fa92 f2a2 	rbit	r2, r2
 8007120:	603a      	str	r2, [r7, #0]
  return result;
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	fab2 f282 	clz	r2, r2
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	40d3      	lsrs	r3, r2
 800712c:	4a04      	ldr	r2, [pc, #16]	; (8007140 <HAL_RCC_GetPCLK1Freq+0x40>)
 800712e:	5cd3      	ldrb	r3, [r2, r3]
 8007130:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007134:	4618      	mov	r0, r3
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40021000 	.word	0x40021000
 8007140:	0800fcac 	.word	0x0800fcac

08007144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800714a:	f7ff ffcd 	bl	80070e8 <HAL_RCC_GetHCLKFreq>
 800714e:	4601      	mov	r1, r0
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007158:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800715c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	fa92 f2a2 	rbit	r2, r2
 8007164:	603a      	str	r2, [r7, #0]
  return result;
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	fab2 f282 	clz	r2, r2
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	40d3      	lsrs	r3, r2
 8007170:	4a04      	ldr	r2, [pc, #16]	; (8007184 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007172:	5cd3      	ldrb	r3, [r2, r3]
 8007174:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40021000 	.word	0x40021000
 8007184:	0800fcac 	.word	0x0800fcac

08007188 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b092      	sub	sp, #72	; 0x48
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007198:	2300      	movs	r3, #0
 800719a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 80d4 	beq.w	8007354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071ac:	4b4e      	ldr	r3, [pc, #312]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10e      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071b8:	4b4b      	ldr	r3, [pc, #300]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	4a4a      	ldr	r2, [pc, #296]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c2:	61d3      	str	r3, [r2, #28]
 80071c4:	4b48      	ldr	r3, [pc, #288]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071cc:	60bb      	str	r3, [r7, #8]
 80071ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d6:	4b45      	ldr	r3, [pc, #276]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d118      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071e2:	4b42      	ldr	r3, [pc, #264]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a41      	ldr	r2, [pc, #260]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ee:	f7fc fba7 	bl	8003940 <HAL_GetTick>
 80071f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f4:	e008      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f6:	f7fc fba3 	bl	8003940 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b64      	cmp	r3, #100	; 0x64
 8007202:	d901      	bls.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e1d6      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007208:	4b38      	ldr	r3, [pc, #224]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007214:	4b34      	ldr	r3, [pc, #208]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800721e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 8084 	beq.w	800732e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007230:	429a      	cmp	r2, r3
 8007232:	d07c      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007234:	4b2c      	ldr	r3, [pc, #176]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800723e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	fa93 f3a3 	rbit	r3, r3
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800724e:	fab3 f383 	clz	r3, r3
 8007252:	b2db      	uxtb	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	461a      	mov	r2, r3
 800725e:	2301      	movs	r3, #1
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007266:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	fa93 f3a3 	rbit	r3, r3
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007272:	fab3 f383 	clz	r3, r3
 8007276:	b2db      	uxtb	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800727c:	4413      	add	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	461a      	mov	r2, r3
 8007282:	2300      	movs	r3, #0
 8007284:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007286:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800728c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d04b      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007296:	f7fc fb53 	bl	8003940 <HAL_GetTick>
 800729a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729c:	e00a      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800729e:	f7fc fb4f 	bl	8003940 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e180      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80072b4:	2302      	movs	r3, #2
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	fa93 f3a3 	rbit	r3, r3
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
 80072c0:	2302      	movs	r3, #2
 80072c2:	623b      	str	r3, [r7, #32]
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	fa93 f3a3 	rbit	r3, r3
 80072ca:	61fb      	str	r3, [r7, #28]
  return result;
 80072cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ce:	fab3 f383 	clz	r3, r3
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	095b      	lsrs	r3, r3, #5
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	f043 0302 	orr.w	r3, r3, #2
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d108      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80072e2:	4b01      	ldr	r3, [pc, #4]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	e00d      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80072e8:	40021000 	.word	0x40021000
 80072ec:	40007000 	.word	0x40007000
 80072f0:	10908100 	.word	0x10908100
 80072f4:	2302      	movs	r3, #2
 80072f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	fa93 f3a3 	rbit	r3, r3
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	4b9a      	ldr	r3, [pc, #616]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	2202      	movs	r2, #2
 8007306:	613a      	str	r2, [r7, #16]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	fa92 f2a2 	rbit	r2, r2
 800730e:	60fa      	str	r2, [r7, #12]
  return result;
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	fab2 f282 	clz	r2, r2
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	f002 021f 	and.w	r2, r2, #31
 8007322:	2101      	movs	r1, #1
 8007324:	fa01 f202 	lsl.w	r2, r1, r2
 8007328:	4013      	ands	r3, r2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0b7      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800732e:	4b8f      	ldr	r3, [pc, #572]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	498c      	ldr	r1, [pc, #560]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800733c:	4313      	orrs	r3, r2
 800733e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007340:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007344:	2b01      	cmp	r3, #1
 8007346:	d105      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007348:	4b88      	ldr	r3, [pc, #544]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	4a87      	ldr	r2, [pc, #540]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800734e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007352:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d008      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007360:	4b82      	ldr	r3, [pc, #520]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	f023 0203 	bic.w	r2, r3, #3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	497f      	ldr	r1, [pc, #508]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800736e:	4313      	orrs	r3, r2
 8007370:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d008      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800737e:	4b7b      	ldr	r3, [pc, #492]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	4978      	ldr	r1, [pc, #480]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800738c:	4313      	orrs	r3, r2
 800738e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	d008      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800739c:	4b73      	ldr	r3, [pc, #460]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	4970      	ldr	r1, [pc, #448]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d008      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073ba:	4b6c      	ldr	r3, [pc, #432]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	f023 0210 	bic.w	r2, r3, #16
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	4969      	ldr	r1, [pc, #420]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d008      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80073d8:	4b64      	ldr	r3, [pc, #400]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	4961      	ldr	r1, [pc, #388]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d008      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073f6:	4b5d      	ldr	r3, [pc, #372]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80073f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fa:	f023 0220 	bic.w	r2, r3, #32
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	495a      	ldr	r1, [pc, #360]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007404:	4313      	orrs	r3, r2
 8007406:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007414:	4b55      	ldr	r3, [pc, #340]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007418:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	4952      	ldr	r1, [pc, #328]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007422:	4313      	orrs	r3, r2
 8007424:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0308 	and.w	r3, r3, #8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d008      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007432:	4b4e      	ldr	r3, [pc, #312]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	494b      	ldr	r1, [pc, #300]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007440:	4313      	orrs	r3, r2
 8007442:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007450:	4b46      	ldr	r3, [pc, #280]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	4943      	ldr	r1, [pc, #268]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800745e:	4313      	orrs	r3, r2
 8007460:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800746a:	2b00      	cmp	r3, #0
 800746c:	d008      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800746e:	4b3f      	ldr	r3, [pc, #252]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	493c      	ldr	r1, [pc, #240]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800747c:	4313      	orrs	r3, r2
 800747e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007488:	2b00      	cmp	r3, #0
 800748a:	d008      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800748c:	4b37      	ldr	r3, [pc, #220]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	4934      	ldr	r1, [pc, #208]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800749a:	4313      	orrs	r3, r2
 800749c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d008      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80074aa:	4b30      	ldr	r3, [pc, #192]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b6:	492d      	ldr	r1, [pc, #180]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d008      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80074c8:	4b28      	ldr	r3, [pc, #160]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d4:	4925      	ldr	r1, [pc, #148]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d008      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80074e6:	4b21      	ldr	r3, [pc, #132]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	491e      	ldr	r1, [pc, #120]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d008      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007504:	4b19      	ldr	r3, [pc, #100]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007508:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	4916      	ldr	r1, [pc, #88]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007512:	4313      	orrs	r3, r2
 8007514:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d008      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007522:	4b12      	ldr	r3, [pc, #72]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752e:	490f      	ldr	r1, [pc, #60]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007530:	4313      	orrs	r3, r2
 8007532:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d008      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754c:	4907      	ldr	r1, [pc, #28]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800754e:	4313      	orrs	r3, r2
 8007550:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00c      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800755e:	4b03      	ldr	r3, [pc, #12]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	e002      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800756a:	bf00      	nop
 800756c:	40021000 	.word	0x40021000
 8007570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007572:	4913      	ldr	r1, [pc, #76]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007574:	4313      	orrs	r3, r2
 8007576:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007584:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007590:	490b      	ldr	r1, [pc, #44]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007592:	4313      	orrs	r3, r2
 8007594:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80075a2:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ae:	4904      	ldr	r1, [pc, #16]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3748      	adds	r7, #72	; 0x48
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40021000 	.word	0x40021000

080075c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e09d      	b.n	8007712 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d108      	bne.n	80075f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075e6:	d009      	beq.n	80075fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	61da      	str	r2, [r3, #28]
 80075ee:	e005      	b.n	80075fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fb fee4 	bl	80033e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007632:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800763c:	d902      	bls.n	8007644 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	e002      	b.n	800764a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007648:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007652:	d007      	beq.n	8007664 <HAL_SPI_Init+0xa0>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800765c:	d002      	beq.n	8007664 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a6:	ea42 0103 	orr.w	r1, r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	0c1b      	lsrs	r3, r3, #16
 80076c0:	f003 0204 	and.w	r2, r3, #4
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	f003 0310 	and.w	r3, r3, #16
 80076cc:	431a      	orrs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80076e0:	ea42 0103 	orr.w	r1, r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69da      	ldr	r2, [r3, #28]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007700:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b088      	sub	sp, #32
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	603b      	str	r3, [r7, #0]
 8007726:	4613      	mov	r3, r2
 8007728:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007734:	2b01      	cmp	r3, #1
 8007736:	d101      	bne.n	800773c <HAL_SPI_Transmit+0x22>
 8007738:	2302      	movs	r3, #2
 800773a:	e158      	b.n	80079ee <HAL_SPI_Transmit+0x2d4>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007744:	f7fc f8fc 	bl	8003940 <HAL_GetTick>
 8007748:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b01      	cmp	r3, #1
 8007758:	d002      	beq.n	8007760 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800775a:	2302      	movs	r3, #2
 800775c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800775e:	e13d      	b.n	80079dc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_SPI_Transmit+0x52>
 8007766:	88fb      	ldrh	r3, [r7, #6]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007770:	e134      	b.n	80079dc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2203      	movs	r2, #3
 8007776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	88fa      	ldrh	r2, [r7, #6]
 800778a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	88fa      	ldrh	r2, [r7, #6]
 8007790:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077bc:	d10f      	bne.n	80077de <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d007      	beq.n	80077fc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007804:	d94b      	bls.n	800789e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_SPI_Transmit+0xfa>
 800780e:	8afb      	ldrh	r3, [r7, #22]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d13e      	bne.n	8007892 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007818:	881a      	ldrh	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	1c9a      	adds	r2, r3, #2
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007838:	e02b      	b.n	8007892 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b02      	cmp	r3, #2
 8007846:	d112      	bne.n	800786e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	881a      	ldrh	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	1c9a      	adds	r2, r3, #2
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007862:	b29b      	uxth	r3, r3
 8007864:	3b01      	subs	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800786c:	e011      	b.n	8007892 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800786e:	f7fc f867 	bl	8003940 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d803      	bhi.n	8007886 <HAL_SPI_Transmit+0x16c>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d102      	bne.n	800788c <HAL_SPI_Transmit+0x172>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007890:	e0a4      	b.n	80079dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007896:	b29b      	uxth	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1ce      	bne.n	800783a <HAL_SPI_Transmit+0x120>
 800789c:	e07c      	b.n	8007998 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <HAL_SPI_Transmit+0x192>
 80078a6:	8afb      	ldrh	r3, [r7, #22]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d170      	bne.n	800798e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d912      	bls.n	80078dc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	881a      	ldrh	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c6:	1c9a      	adds	r2, r3, #2
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b02      	subs	r3, #2
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078da:	e058      	b.n	800798e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	7812      	ldrb	r2, [r2, #0]
 80078e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007902:	e044      	b.n	800798e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b02      	cmp	r3, #2
 8007910:	d12b      	bne.n	800796a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007916:	b29b      	uxth	r3, r3
 8007918:	2b01      	cmp	r3, #1
 800791a:	d912      	bls.n	8007942 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007920:	881a      	ldrh	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	1c9a      	adds	r2, r3, #2
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b02      	subs	r3, #2
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007940:	e025      	b.n	800798e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	330c      	adds	r3, #12
 800794c:	7812      	ldrb	r2, [r2, #0]
 800794e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800795e:	b29b      	uxth	r3, r3
 8007960:	3b01      	subs	r3, #1
 8007962:	b29a      	uxth	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007968:	e011      	b.n	800798e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800796a:	f7fb ffe9 	bl	8003940 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d803      	bhi.n	8007982 <HAL_SPI_Transmit+0x268>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d102      	bne.n	8007988 <HAL_SPI_Transmit+0x26e>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d102      	bne.n	800798e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800798c:	e026      	b.n	80079dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1b5      	bne.n	8007904 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 fb69 	bl	8008074 <SPI_EndRxTxTransaction>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	77fb      	strb	r3, [r7, #31]
 80079d8:	e000      	b.n	80079dc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80079da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80079ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b08a      	sub	sp, #40	; 0x28
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	607a      	str	r2, [r7, #4]
 8007a02:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a04:	2301      	movs	r3, #1
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_SPI_TransmitReceive+0x26>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e1fb      	b.n	8007e14 <HAL_SPI_TransmitReceive+0x41e>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a24:	f7fb ff8c 	bl	8003940 <HAL_GetTick>
 8007a28:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a30:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007a38:	887b      	ldrh	r3, [r7, #2]
 8007a3a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007a3c:	887b      	ldrh	r3, [r7, #2]
 8007a3e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a40:	7efb      	ldrb	r3, [r7, #27]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d00e      	beq.n	8007a64 <HAL_SPI_TransmitReceive+0x6e>
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a4c:	d106      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d102      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x66>
 8007a56:	7efb      	ldrb	r3, [r7, #27]
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d003      	beq.n	8007a64 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007a62:	e1cd      	b.n	8007e00 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d005      	beq.n	8007a76 <HAL_SPI_TransmitReceive+0x80>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <HAL_SPI_TransmitReceive+0x80>
 8007a70:	887b      	ldrh	r3, [r7, #2]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d103      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007a7c:	e1c0      	b.n	8007e00 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d003      	beq.n	8007a92 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2205      	movs	r2, #5
 8007a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	887a      	ldrh	r2, [r7, #2]
 8007aa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	887a      	ldrh	r2, [r7, #2]
 8007aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	887a      	ldrh	r2, [r7, #2]
 8007ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	887a      	ldrh	r2, [r7, #2]
 8007abe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ad4:	d802      	bhi.n	8007adc <HAL_SPI_TransmitReceive+0xe6>
 8007ad6:	8a3b      	ldrh	r3, [r7, #16]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d908      	bls.n	8007aee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007aea:	605a      	str	r2, [r3, #4]
 8007aec:	e007      	b.n	8007afe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007afc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b08:	2b40      	cmp	r3, #64	; 0x40
 8007b0a:	d007      	beq.n	8007b1c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b24:	d97c      	bls.n	8007c20 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_SPI_TransmitReceive+0x13e>
 8007b2e:	8a7b      	ldrh	r3, [r7, #18]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d169      	bne.n	8007c08 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b38:	881a      	ldrh	r2, [r3, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	1c9a      	adds	r2, r3, #2
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b58:	e056      	b.n	8007c08 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d11b      	bne.n	8007ba0 <HAL_SPI_TransmitReceive+0x1aa>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d016      	beq.n	8007ba0 <HAL_SPI_TransmitReceive+0x1aa>
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d113      	bne.n	8007ba0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	881a      	ldrh	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b88:	1c9a      	adds	r2, r3, #2
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d11c      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x1f2>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d016      	beq.n	8007be8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	b292      	uxth	r2, r2
 8007bc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bcc:	1c9a      	adds	r2, r3, #2
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007be4:	2301      	movs	r3, #1
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007be8:	f7fb feaa 	bl	8003940 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d807      	bhi.n	8007c08 <HAL_SPI_TransmitReceive+0x212>
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfe:	d003      	beq.n	8007c08 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007c06:	e0fb      	b.n	8007e00 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1a3      	bne.n	8007b5a <HAL_SPI_TransmitReceive+0x164>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d19d      	bne.n	8007b5a <HAL_SPI_TransmitReceive+0x164>
 8007c1e:	e0df      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <HAL_SPI_TransmitReceive+0x23a>
 8007c28:	8a7b      	ldrh	r3, [r7, #18]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	f040 80cb 	bne.w	8007dc6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d912      	bls.n	8007c60 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3e:	881a      	ldrh	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	1c9a      	adds	r2, r3, #2
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	3b02      	subs	r3, #2
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c5e:	e0b2      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	330c      	adds	r3, #12
 8007c6a:	7812      	ldrb	r2, [r2, #0]
 8007c6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c86:	e09e      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d134      	bne.n	8007d00 <HAL_SPI_TransmitReceive+0x30a>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d02f      	beq.n	8007d00 <HAL_SPI_TransmitReceive+0x30a>
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d12c      	bne.n	8007d00 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d912      	bls.n	8007cd6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	881a      	ldrh	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	1c9a      	adds	r2, r3, #2
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	3b02      	subs	r3, #2
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cd4:	e012      	b.n	8007cfc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	330c      	adds	r3, #12
 8007ce0:	7812      	ldrb	r2, [r2, #0]
 8007ce2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d148      	bne.n	8007da0 <HAL_SPI_TransmitReceive+0x3aa>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d042      	beq.n	8007da0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d923      	bls.n	8007d6e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68da      	ldr	r2, [r3, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d30:	b292      	uxth	r2, r2
 8007d32:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	1c9a      	adds	r2, r3, #2
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b02      	subs	r3, #2
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d81f      	bhi.n	8007d9c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d6a:	605a      	str	r2, [r3, #4]
 8007d6c:	e016      	b.n	8007d9c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f103 020c 	add.w	r2, r3, #12
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	b2d2      	uxtb	r2, r2
 8007d7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	3b01      	subs	r3, #1
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007da0:	f7fb fdce 	bl	8003940 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d803      	bhi.n	8007db8 <HAL_SPI_TransmitReceive+0x3c2>
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db6:	d102      	bne.n	8007dbe <HAL_SPI_TransmitReceive+0x3c8>
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d103      	bne.n	8007dc6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007dc4:	e01c      	b.n	8007e00 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f47f af5b 	bne.w	8007c88 <HAL_SPI_TransmitReceive+0x292>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f47f af54 	bne.w	8007c88 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f945 	bl	8008074 <SPI_EndRxTxTransaction>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d006      	beq.n	8007dfe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	661a      	str	r2, [r3, #96]	; 0x60
 8007dfc:	e000      	b.n	8007e00 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007dfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3728      	adds	r7, #40	; 0x28
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e2a:	b2db      	uxtb	r3, r3
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	4613      	mov	r3, r2
 8007e46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e48:	f7fb fd7a 	bl	8003940 <HAL_GetTick>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	1a9b      	subs	r3, r3, r2
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	4413      	add	r3, r2
 8007e56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e58:	f7fb fd72 	bl	8003940 <HAL_GetTick>
 8007e5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e5e:	4b39      	ldr	r3, [pc, #228]	; (8007f44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	015b      	lsls	r3, r3, #5
 8007e64:	0d1b      	lsrs	r3, r3, #20
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	fb02 f303 	mul.w	r3, r2, r3
 8007e6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e6e:	e054      	b.n	8007f1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d050      	beq.n	8007f1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e78:	f7fb fd62 	bl	8003940 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	69fa      	ldr	r2, [r7, #28]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d902      	bls.n	8007e8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d13d      	bne.n	8007f0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea6:	d111      	bne.n	8007ecc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb0:	d004      	beq.n	8007ebc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eba:	d107      	bne.n	8007ecc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ed4:	d10f      	bne.n	8007ef6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ef4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e017      	b.n	8007f3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	4013      	ands	r3, r2
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	bf0c      	ite	eq
 8007f2a:	2301      	moveq	r3, #1
 8007f2c:	2300      	movne	r3, #0
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	461a      	mov	r2, r3
 8007f32:	79fb      	ldrb	r3, [r7, #7]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d19b      	bne.n	8007e70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3720      	adds	r7, #32
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	20000004 	.word	0x20000004

08007f48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	; 0x28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f5a:	f7fb fcf1 	bl	8003940 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	1a9b      	subs	r3, r3, r2
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	4413      	add	r3, r2
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007f6a:	f7fb fce9 	bl	8003940 <HAL_GetTick>
 8007f6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	330c      	adds	r3, #12
 8007f76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f78:	4b3d      	ldr	r3, [pc, #244]	; (8008070 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	00da      	lsls	r2, r3, #3
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	0d1b      	lsrs	r3, r3, #20
 8007f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8a:	fb02 f303 	mul.w	r3, r2, r3
 8007f8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f90:	e060      	b.n	8008054 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f98:	d107      	bne.n	8007faa <SPI_WaitFifoStateUntilTimeout+0x62>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d104      	bne.n	8007faa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb0:	d050      	beq.n	8008054 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fb2:	f7fb fcc5 	bl	8003940 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d902      	bls.n	8007fc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d13d      	bne.n	8008044 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fe0:	d111      	bne.n	8008006 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fea:	d004      	beq.n	8007ff6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff4:	d107      	bne.n	8008006 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008004:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800800e:	d10f      	bne.n	8008030 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800802e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e010      	b.n	8008066 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	3b01      	subs	r3, #1
 8008052:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	4013      	ands	r3, r2
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	d196      	bne.n	8007f92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3728      	adds	r7, #40	; 0x28
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000004 	.word	0x20000004

08008074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af02      	add	r7, sp, #8
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2200      	movs	r2, #0
 8008088:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7ff ff5b 	bl	8007f48 <SPI_WaitFifoStateUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d007      	beq.n	80080a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800809c:	f043 0220 	orr.w	r2, r3, #32
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e027      	b.n	80080f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2200      	movs	r2, #0
 80080b0:	2180      	movs	r1, #128	; 0x80
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f7ff fec0 	bl	8007e38 <SPI_WaitFlagStateUntilTimeout>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d007      	beq.n	80080ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c2:	f043 0220 	orr.w	r2, r3, #32
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e014      	b.n	80080f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f7ff ff34 	bl	8007f48 <SPI_WaitFifoStateUntilTimeout>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ea:	f043 0220 	orr.w	r2, r3, #32
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e000      	b.n	80080f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e040      	b.n	8008194 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7fb f9f0 	bl	8003508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2224      	movs	r2, #36	; 0x24
 800812c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0201 	bic.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f82c 	bl	800819c <UART_SetConfig>
 8008144:	4603      	mov	r3, r0
 8008146:	2b01      	cmp	r3, #1
 8008148:	d101      	bne.n	800814e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e022      	b.n	8008194 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f9f6 	bl	8008548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800816a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800817a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0201 	orr.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fa7d 	bl	800868c <UART_CheckIdleState>
 8008192:	4603      	mov	r3, r0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	431a      	orrs	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	4313      	orrs	r3, r2
 80081be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	4b92      	ldr	r3, [pc, #584]	; (8008410 <UART_SetConfig+0x274>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	6979      	ldr	r1, [r7, #20]
 80081d0:	430b      	orrs	r3, r1
 80081d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	430a      	orrs	r2, r1
 800820c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a80      	ldr	r2, [pc, #512]	; (8008414 <UART_SetConfig+0x278>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d120      	bne.n	800825a <UART_SetConfig+0xbe>
 8008218:	4b7f      	ldr	r3, [pc, #508]	; (8008418 <UART_SetConfig+0x27c>)
 800821a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	2b03      	cmp	r3, #3
 8008222:	d817      	bhi.n	8008254 <UART_SetConfig+0xb8>
 8008224:	a201      	add	r2, pc, #4	; (adr r2, 800822c <UART_SetConfig+0x90>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	0800823d 	.word	0x0800823d
 8008230:	08008249 	.word	0x08008249
 8008234:	0800824f 	.word	0x0800824f
 8008238:	08008243 	.word	0x08008243
 800823c:	2301      	movs	r3, #1
 800823e:	77fb      	strb	r3, [r7, #31]
 8008240:	e0b5      	b.n	80083ae <UART_SetConfig+0x212>
 8008242:	2302      	movs	r3, #2
 8008244:	77fb      	strb	r3, [r7, #31]
 8008246:	e0b2      	b.n	80083ae <UART_SetConfig+0x212>
 8008248:	2304      	movs	r3, #4
 800824a:	77fb      	strb	r3, [r7, #31]
 800824c:	e0af      	b.n	80083ae <UART_SetConfig+0x212>
 800824e:	2308      	movs	r3, #8
 8008250:	77fb      	strb	r3, [r7, #31]
 8008252:	e0ac      	b.n	80083ae <UART_SetConfig+0x212>
 8008254:	2310      	movs	r3, #16
 8008256:	77fb      	strb	r3, [r7, #31]
 8008258:	e0a9      	b.n	80083ae <UART_SetConfig+0x212>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a6f      	ldr	r2, [pc, #444]	; (800841c <UART_SetConfig+0x280>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d124      	bne.n	80082ae <UART_SetConfig+0x112>
 8008264:	4b6c      	ldr	r3, [pc, #432]	; (8008418 <UART_SetConfig+0x27c>)
 8008266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800826c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008270:	d011      	beq.n	8008296 <UART_SetConfig+0xfa>
 8008272:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008276:	d817      	bhi.n	80082a8 <UART_SetConfig+0x10c>
 8008278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800827c:	d011      	beq.n	80082a2 <UART_SetConfig+0x106>
 800827e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008282:	d811      	bhi.n	80082a8 <UART_SetConfig+0x10c>
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <UART_SetConfig+0xf4>
 8008288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800828c:	d006      	beq.n	800829c <UART_SetConfig+0x100>
 800828e:	e00b      	b.n	80082a8 <UART_SetConfig+0x10c>
 8008290:	2300      	movs	r3, #0
 8008292:	77fb      	strb	r3, [r7, #31]
 8008294:	e08b      	b.n	80083ae <UART_SetConfig+0x212>
 8008296:	2302      	movs	r3, #2
 8008298:	77fb      	strb	r3, [r7, #31]
 800829a:	e088      	b.n	80083ae <UART_SetConfig+0x212>
 800829c:	2304      	movs	r3, #4
 800829e:	77fb      	strb	r3, [r7, #31]
 80082a0:	e085      	b.n	80083ae <UART_SetConfig+0x212>
 80082a2:	2308      	movs	r3, #8
 80082a4:	77fb      	strb	r3, [r7, #31]
 80082a6:	e082      	b.n	80083ae <UART_SetConfig+0x212>
 80082a8:	2310      	movs	r3, #16
 80082aa:	77fb      	strb	r3, [r7, #31]
 80082ac:	e07f      	b.n	80083ae <UART_SetConfig+0x212>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a5b      	ldr	r2, [pc, #364]	; (8008420 <UART_SetConfig+0x284>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d124      	bne.n	8008302 <UART_SetConfig+0x166>
 80082b8:	4b57      	ldr	r3, [pc, #348]	; (8008418 <UART_SetConfig+0x27c>)
 80082ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80082c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80082c4:	d011      	beq.n	80082ea <UART_SetConfig+0x14e>
 80082c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80082ca:	d817      	bhi.n	80082fc <UART_SetConfig+0x160>
 80082cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082d0:	d011      	beq.n	80082f6 <UART_SetConfig+0x15a>
 80082d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082d6:	d811      	bhi.n	80082fc <UART_SetConfig+0x160>
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <UART_SetConfig+0x148>
 80082dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082e0:	d006      	beq.n	80082f0 <UART_SetConfig+0x154>
 80082e2:	e00b      	b.n	80082fc <UART_SetConfig+0x160>
 80082e4:	2300      	movs	r3, #0
 80082e6:	77fb      	strb	r3, [r7, #31]
 80082e8:	e061      	b.n	80083ae <UART_SetConfig+0x212>
 80082ea:	2302      	movs	r3, #2
 80082ec:	77fb      	strb	r3, [r7, #31]
 80082ee:	e05e      	b.n	80083ae <UART_SetConfig+0x212>
 80082f0:	2304      	movs	r3, #4
 80082f2:	77fb      	strb	r3, [r7, #31]
 80082f4:	e05b      	b.n	80083ae <UART_SetConfig+0x212>
 80082f6:	2308      	movs	r3, #8
 80082f8:	77fb      	strb	r3, [r7, #31]
 80082fa:	e058      	b.n	80083ae <UART_SetConfig+0x212>
 80082fc:	2310      	movs	r3, #16
 80082fe:	77fb      	strb	r3, [r7, #31]
 8008300:	e055      	b.n	80083ae <UART_SetConfig+0x212>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a47      	ldr	r2, [pc, #284]	; (8008424 <UART_SetConfig+0x288>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d124      	bne.n	8008356 <UART_SetConfig+0x1ba>
 800830c:	4b42      	ldr	r3, [pc, #264]	; (8008418 <UART_SetConfig+0x27c>)
 800830e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008310:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008314:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008318:	d011      	beq.n	800833e <UART_SetConfig+0x1a2>
 800831a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800831e:	d817      	bhi.n	8008350 <UART_SetConfig+0x1b4>
 8008320:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008324:	d011      	beq.n	800834a <UART_SetConfig+0x1ae>
 8008326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800832a:	d811      	bhi.n	8008350 <UART_SetConfig+0x1b4>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <UART_SetConfig+0x19c>
 8008330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008334:	d006      	beq.n	8008344 <UART_SetConfig+0x1a8>
 8008336:	e00b      	b.n	8008350 <UART_SetConfig+0x1b4>
 8008338:	2300      	movs	r3, #0
 800833a:	77fb      	strb	r3, [r7, #31]
 800833c:	e037      	b.n	80083ae <UART_SetConfig+0x212>
 800833e:	2302      	movs	r3, #2
 8008340:	77fb      	strb	r3, [r7, #31]
 8008342:	e034      	b.n	80083ae <UART_SetConfig+0x212>
 8008344:	2304      	movs	r3, #4
 8008346:	77fb      	strb	r3, [r7, #31]
 8008348:	e031      	b.n	80083ae <UART_SetConfig+0x212>
 800834a:	2308      	movs	r3, #8
 800834c:	77fb      	strb	r3, [r7, #31]
 800834e:	e02e      	b.n	80083ae <UART_SetConfig+0x212>
 8008350:	2310      	movs	r3, #16
 8008352:	77fb      	strb	r3, [r7, #31]
 8008354:	e02b      	b.n	80083ae <UART_SetConfig+0x212>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a33      	ldr	r2, [pc, #204]	; (8008428 <UART_SetConfig+0x28c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d124      	bne.n	80083aa <UART_SetConfig+0x20e>
 8008360:	4b2d      	ldr	r3, [pc, #180]	; (8008418 <UART_SetConfig+0x27c>)
 8008362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008364:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008368:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800836c:	d011      	beq.n	8008392 <UART_SetConfig+0x1f6>
 800836e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008372:	d817      	bhi.n	80083a4 <UART_SetConfig+0x208>
 8008374:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008378:	d011      	beq.n	800839e <UART_SetConfig+0x202>
 800837a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800837e:	d811      	bhi.n	80083a4 <UART_SetConfig+0x208>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <UART_SetConfig+0x1f0>
 8008384:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008388:	d006      	beq.n	8008398 <UART_SetConfig+0x1fc>
 800838a:	e00b      	b.n	80083a4 <UART_SetConfig+0x208>
 800838c:	2300      	movs	r3, #0
 800838e:	77fb      	strb	r3, [r7, #31]
 8008390:	e00d      	b.n	80083ae <UART_SetConfig+0x212>
 8008392:	2302      	movs	r3, #2
 8008394:	77fb      	strb	r3, [r7, #31]
 8008396:	e00a      	b.n	80083ae <UART_SetConfig+0x212>
 8008398:	2304      	movs	r3, #4
 800839a:	77fb      	strb	r3, [r7, #31]
 800839c:	e007      	b.n	80083ae <UART_SetConfig+0x212>
 800839e:	2308      	movs	r3, #8
 80083a0:	77fb      	strb	r3, [r7, #31]
 80083a2:	e004      	b.n	80083ae <UART_SetConfig+0x212>
 80083a4:	2310      	movs	r3, #16
 80083a6:	77fb      	strb	r3, [r7, #31]
 80083a8:	e001      	b.n	80083ae <UART_SetConfig+0x212>
 80083aa:	2310      	movs	r3, #16
 80083ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b6:	d16c      	bne.n	8008492 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80083b8:	7ffb      	ldrb	r3, [r7, #31]
 80083ba:	2b08      	cmp	r3, #8
 80083bc:	d838      	bhi.n	8008430 <UART_SetConfig+0x294>
 80083be:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <UART_SetConfig+0x228>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	080083e9 	.word	0x080083e9
 80083c8:	080083f1 	.word	0x080083f1
 80083cc:	080083f9 	.word	0x080083f9
 80083d0:	08008431 	.word	0x08008431
 80083d4:	080083ff 	.word	0x080083ff
 80083d8:	08008431 	.word	0x08008431
 80083dc:	08008431 	.word	0x08008431
 80083e0:	08008431 	.word	0x08008431
 80083e4:	08008407 	.word	0x08008407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083e8:	f7fe fe8a 	bl	8007100 <HAL_RCC_GetPCLK1Freq>
 80083ec:	61b8      	str	r0, [r7, #24]
        break;
 80083ee:	e024      	b.n	800843a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f0:	f7fe fea8 	bl	8007144 <HAL_RCC_GetPCLK2Freq>
 80083f4:	61b8      	str	r0, [r7, #24]
        break;
 80083f6:	e020      	b.n	800843a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083f8:	4b0c      	ldr	r3, [pc, #48]	; (800842c <UART_SetConfig+0x290>)
 80083fa:	61bb      	str	r3, [r7, #24]
        break;
 80083fc:	e01d      	b.n	800843a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083fe:	f7fe fe09 	bl	8007014 <HAL_RCC_GetSysClockFreq>
 8008402:	61b8      	str	r0, [r7, #24]
        break;
 8008404:	e019      	b.n	800843a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800840a:	61bb      	str	r3, [r7, #24]
        break;
 800840c:	e015      	b.n	800843a <UART_SetConfig+0x29e>
 800840e:	bf00      	nop
 8008410:	efff69f3 	.word	0xefff69f3
 8008414:	40013800 	.word	0x40013800
 8008418:	40021000 	.word	0x40021000
 800841c:	40004400 	.word	0x40004400
 8008420:	40004800 	.word	0x40004800
 8008424:	40004c00 	.word	0x40004c00
 8008428:	40005000 	.word	0x40005000
 800842c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	77bb      	strb	r3, [r7, #30]
        break;
 8008438:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d075      	beq.n	800852c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	005a      	lsls	r2, r3, #1
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	085b      	lsrs	r3, r3, #1
 800844a:	441a      	add	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	fbb2 f3f3 	udiv	r3, r2, r3
 8008454:	b29b      	uxth	r3, r3
 8008456:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	2b0f      	cmp	r3, #15
 800845c:	d916      	bls.n	800848c <UART_SetConfig+0x2f0>
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008464:	d212      	bcs.n	800848c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	b29b      	uxth	r3, r3
 800846a:	f023 030f 	bic.w	r3, r3, #15
 800846e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	085b      	lsrs	r3, r3, #1
 8008474:	b29b      	uxth	r3, r3
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	b29a      	uxth	r2, r3
 800847c:	89fb      	ldrh	r3, [r7, #14]
 800847e:	4313      	orrs	r3, r2
 8008480:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	89fa      	ldrh	r2, [r7, #14]
 8008488:	60da      	str	r2, [r3, #12]
 800848a:	e04f      	b.n	800852c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	77bb      	strb	r3, [r7, #30]
 8008490:	e04c      	b.n	800852c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008492:	7ffb      	ldrb	r3, [r7, #31]
 8008494:	2b08      	cmp	r3, #8
 8008496:	d828      	bhi.n	80084ea <UART_SetConfig+0x34e>
 8008498:	a201      	add	r2, pc, #4	; (adr r2, 80084a0 <UART_SetConfig+0x304>)
 800849a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849e:	bf00      	nop
 80084a0:	080084c5 	.word	0x080084c5
 80084a4:	080084cd 	.word	0x080084cd
 80084a8:	080084d5 	.word	0x080084d5
 80084ac:	080084eb 	.word	0x080084eb
 80084b0:	080084db 	.word	0x080084db
 80084b4:	080084eb 	.word	0x080084eb
 80084b8:	080084eb 	.word	0x080084eb
 80084bc:	080084eb 	.word	0x080084eb
 80084c0:	080084e3 	.word	0x080084e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084c4:	f7fe fe1c 	bl	8007100 <HAL_RCC_GetPCLK1Freq>
 80084c8:	61b8      	str	r0, [r7, #24]
        break;
 80084ca:	e013      	b.n	80084f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084cc:	f7fe fe3a 	bl	8007144 <HAL_RCC_GetPCLK2Freq>
 80084d0:	61b8      	str	r0, [r7, #24]
        break;
 80084d2:	e00f      	b.n	80084f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084d4:	4b1b      	ldr	r3, [pc, #108]	; (8008544 <UART_SetConfig+0x3a8>)
 80084d6:	61bb      	str	r3, [r7, #24]
        break;
 80084d8:	e00c      	b.n	80084f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084da:	f7fe fd9b 	bl	8007014 <HAL_RCC_GetSysClockFreq>
 80084de:	61b8      	str	r0, [r7, #24]
        break;
 80084e0:	e008      	b.n	80084f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084e6:	61bb      	str	r3, [r7, #24]
        break;
 80084e8:	e004      	b.n	80084f4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	77bb      	strb	r3, [r7, #30]
        break;
 80084f2:	bf00      	nop
    }

    if (pclk != 0U)
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d018      	beq.n	800852c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	085a      	lsrs	r2, r3, #1
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	441a      	add	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	fbb2 f3f3 	udiv	r3, r2, r3
 800850c:	b29b      	uxth	r3, r3
 800850e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	2b0f      	cmp	r3, #15
 8008514:	d908      	bls.n	8008528 <UART_SetConfig+0x38c>
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800851c:	d204      	bcs.n	8008528 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	60da      	str	r2, [r3, #12]
 8008526:	e001      	b.n	800852c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008538:	7fbb      	ldrb	r3, [r7, #30]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	007a1200 	.word	0x007a1200

08008548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00a      	beq.n	80085fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01a      	beq.n	800865e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008646:	d10a      	bne.n	800865e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	605a      	str	r2, [r3, #4]
  }
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af02      	add	r7, sp, #8
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800869c:	f7fb f950 	bl	8003940 <HAL_GetTick>
 80086a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0308 	and.w	r3, r3, #8
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d10e      	bne.n	80086ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f82d 	bl	800871e <UART_WaitOnFlagUntilTimeout>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e023      	b.n	8008716 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b04      	cmp	r3, #4
 80086da:	d10e      	bne.n	80086fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f817 	bl	800871e <UART_WaitOnFlagUntilTimeout>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e00d      	b.n	8008716 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2220      	movs	r2, #32
 8008704:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b09c      	sub	sp, #112	; 0x70
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	603b      	str	r3, [r7, #0]
 800872a:	4613      	mov	r3, r2
 800872c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800872e:	e0a5      	b.n	800887c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	f000 80a1 	beq.w	800887c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800873a:	f7fb f901 	bl	8003940 <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008746:	429a      	cmp	r2, r3
 8008748:	d302      	bcc.n	8008750 <UART_WaitOnFlagUntilTimeout+0x32>
 800874a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800874c:	2b00      	cmp	r3, #0
 800874e:	d13e      	bne.n	80087ce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008758:	e853 3f00 	ldrex	r3, [r3]
 800875c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800875e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008760:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008764:	667b      	str	r3, [r7, #100]	; 0x64
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800876e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008770:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800877c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e6      	bne.n	8008750 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3308      	adds	r3, #8
 8008788:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	f023 0301 	bic.w	r3, r3, #1
 8008798:	663b      	str	r3, [r7, #96]	; 0x60
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3308      	adds	r3, #8
 80087a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80087a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e5      	bne.n	8008782 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2220      	movs	r2, #32
 80087ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2220      	movs	r2, #32
 80087c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e067      	b.n	800889e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d04f      	beq.n	800887c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ea:	d147      	bne.n	800887c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800880a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	461a      	mov	r2, r3
 8008812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008814:	637b      	str	r3, [r7, #52]	; 0x34
 8008816:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800881a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e6      	bne.n	80087f6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3308      	adds	r3, #8
 800882e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	613b      	str	r3, [r7, #16]
   return(result);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	f023 0301 	bic.w	r3, r3, #1
 800883e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3308      	adds	r3, #8
 8008846:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008848:	623a      	str	r2, [r7, #32]
 800884a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884c:	69f9      	ldr	r1, [r7, #28]
 800884e:	6a3a      	ldr	r2, [r7, #32]
 8008850:	e841 2300 	strex	r3, r2, [r1]
 8008854:	61bb      	str	r3, [r7, #24]
   return(result);
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1e5      	bne.n	8008828 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2220      	movs	r2, #32
 8008860:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2220      	movs	r2, #32
 8008866:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2220      	movs	r2, #32
 800886c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e010      	b.n	800889e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	69da      	ldr	r2, [r3, #28]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	4013      	ands	r3, r2
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	429a      	cmp	r2, r3
 800888a:	bf0c      	ite	eq
 800888c:	2301      	moveq	r3, #1
 800888e:	2300      	movne	r3, #0
 8008890:	b2db      	uxtb	r3, r3
 8008892:	461a      	mov	r2, r3
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	429a      	cmp	r2, r3
 8008898:	f43f af4a 	beq.w	8008730 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3770      	adds	r7, #112	; 0x70
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80088ac:	4904      	ldr	r1, [pc, #16]	; (80088c0 <MX_FATFS_Init+0x18>)
 80088ae:	4805      	ldr	r0, [pc, #20]	; (80088c4 <MX_FATFS_Init+0x1c>)
 80088b0:	f003 ff26 	bl	800c700 <FATFS_LinkDriver>
 80088b4:	4603      	mov	r3, r0
 80088b6:	461a      	mov	r2, r3
 80088b8:	4b03      	ldr	r3, [pc, #12]	; (80088c8 <MX_FATFS_Init+0x20>)
 80088ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80088bc:	bf00      	nop
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20002d30 	.word	0x20002d30
 80088c4:	20000010 	.word	0x20000010
 80088c8:	20002d2c 	.word	0x20002d2c

080088cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80088d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//return SD_disk_initialize(pdrv);
	return SD_disk_initialize(pdrv);
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7f9 f8d9 	bl	8001aa0 <SD_disk_initialize>
 80088ee:	4603      	mov	r3, r0
 80088f0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	4603      	mov	r3, r0
 8008902:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	//return SD_disk_status(pdrv);
	return SD_disk_status(pdrv);
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	4618      	mov	r0, r3
 8008908:	f7f9 f9b4 	bl	8001c74 <SD_disk_status>
 800890c:	4603      	mov	r3, r0
 800890e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	//return SD_disk_read(pdrv, buff, sector, count);
	return SD_disk_read(pdrv, buff, sector, count);
 8008928:	7bf8      	ldrb	r0, [r7, #15]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	68b9      	ldr	r1, [r7, #8]
 8008930:	f7f9 f9b6 	bl	8001ca0 <SD_disk_read>
 8008934:	4603      	mov	r3, r0
 8008936:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60b9      	str	r1, [r7, #8]
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	//return SD_disk_write(pdrv, buff, sector, count);
	return SD_disk_write(pdrv, buff, sector, count);
 8008950:	7bf8      	ldrb	r0, [r7, #15]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	f7f9 fa0c 	bl	8001d74 <SD_disk_write>
 800895c:	4603      	mov	r3, r0
 800895e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	4603      	mov	r3, r0
 8008970:	603a      	str	r2, [r7, #0]
 8008972:	71fb      	strb	r3, [r7, #7]
 8008974:	460b      	mov	r3, r1
 8008976:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	//return SD_disk_ioctl(pdrv, cmd, buff);
	return SD_disk_ioctl(pdrv, cmd, buff);
 8008978:	79fb      	ldrb	r3, [r7, #7]
 800897a:	79b9      	ldrb	r1, [r7, #6]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	4618      	mov	r0, r3
 8008980:	f7f9 fa7c 	bl	8001e7c <SD_disk_ioctl>
 8008984:	4603      	mov	r3, r0
 8008986:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800899a:	79fb      	ldrb	r3, [r7, #7]
 800899c:	4a08      	ldr	r2, [pc, #32]	; (80089c0 <disk_status+0x30>)
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	79fa      	ldrb	r2, [r7, #7]
 80089a8:	4905      	ldr	r1, [pc, #20]	; (80089c0 <disk_status+0x30>)
 80089aa:	440a      	add	r2, r1
 80089ac:	7a12      	ldrb	r2, [r2, #8]
 80089ae:	4610      	mov	r0, r2
 80089b0:	4798      	blx	r3
 80089b2:	4603      	mov	r3, r0
 80089b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20002f54 	.word	0x20002f54

080089c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	4a0d      	ldr	r2, [pc, #52]	; (8008a0c <disk_initialize+0x48>)
 80089d6:	5cd3      	ldrb	r3, [r2, r3]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d111      	bne.n	8008a00 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80089dc:	79fb      	ldrb	r3, [r7, #7]
 80089de:	4a0b      	ldr	r2, [pc, #44]	; (8008a0c <disk_initialize+0x48>)
 80089e0:	2101      	movs	r1, #1
 80089e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <disk_initialize+0x48>)
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	79fa      	ldrb	r2, [r7, #7]
 80089f2:	4906      	ldr	r1, [pc, #24]	; (8008a0c <disk_initialize+0x48>)
 80089f4:	440a      	add	r2, r1
 80089f6:	7a12      	ldrb	r2, [r2, #8]
 80089f8:	4610      	mov	r0, r2
 80089fa:	4798      	blx	r3
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20002f54 	.word	0x20002f54

08008a10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008a10:	b590      	push	{r4, r7, lr}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	607a      	str	r2, [r7, #4]
 8008a1a:	603b      	str	r3, [r7, #0]
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	4a0a      	ldr	r2, [pc, #40]	; (8008a4c <disk_read+0x3c>)
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	689c      	ldr	r4, [r3, #8]
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	4a07      	ldr	r2, [pc, #28]	; (8008a4c <disk_read+0x3c>)
 8008a30:	4413      	add	r3, r2
 8008a32:	7a18      	ldrb	r0, [r3, #8]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	68b9      	ldr	r1, [r7, #8]
 8008a3a:	47a0      	blx	r4
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	371c      	adds	r7, #28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd90      	pop	{r4, r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20002f54 	.word	0x20002f54

08008a50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	607a      	str	r2, [r7, #4]
 8008a5a:	603b      	str	r3, [r7, #0]
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	4a0a      	ldr	r2, [pc, #40]	; (8008a8c <disk_write+0x3c>)
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	68dc      	ldr	r4, [r3, #12]
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	4a07      	ldr	r2, [pc, #28]	; (8008a8c <disk_write+0x3c>)
 8008a70:	4413      	add	r3, r2
 8008a72:	7a18      	ldrb	r0, [r3, #8]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	68b9      	ldr	r1, [r7, #8]
 8008a7a:	47a0      	blx	r4
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd90      	pop	{r4, r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20002f54 	.word	0x20002f54

08008a90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	603a      	str	r2, [r7, #0]
 8008a9a:	71fb      	strb	r3, [r7, #7]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	4a09      	ldr	r2, [pc, #36]	; (8008ac8 <disk_ioctl+0x38>)
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	79fa      	ldrb	r2, [r7, #7]
 8008aae:	4906      	ldr	r1, [pc, #24]	; (8008ac8 <disk_ioctl+0x38>)
 8008ab0:	440a      	add	r2, r1
 8008ab2:	7a10      	ldrb	r0, [r2, #8]
 8008ab4:	79b9      	ldrb	r1, [r7, #6]
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	4798      	blx	r3
 8008aba:	4603      	mov	r3, r0
 8008abc:	73fb      	strb	r3, [r7, #15]
  return res;
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	20002f54 	.word	0x20002f54

08008acc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008ae0:	e007      	b.n	8008af2 <mem_cpy+0x26>
		*d++ = *s++;
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	1c53      	adds	r3, r2, #1
 8008ae6:	613b      	str	r3, [r7, #16]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	1c59      	adds	r1, r3, #1
 8008aec:	6179      	str	r1, [r7, #20]
 8008aee:	7812      	ldrb	r2, [r2, #0]
 8008af0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	1e5a      	subs	r2, r3, #1
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1f2      	bne.n	8008ae2 <mem_cpy+0x16>
}
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008b0a:	b480      	push	{r7}
 8008b0c:	b087      	sub	sp, #28
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	60b9      	str	r1, [r7, #8]
 8008b14:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8008b1a:	e005      	b.n	8008b28 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	617a      	str	r2, [r7, #20]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	b2d2      	uxtb	r2, r2
 8008b26:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	1e5a      	subs	r2, r3, #1
 8008b2c:	607a      	str	r2, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1f4      	bne.n	8008b1c <mem_set+0x12>
}
 8008b32:	bf00      	nop
 8008b34:	bf00      	nop
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8008b40:	b480      	push	{r7}
 8008b42:	b089      	sub	sp, #36	; 0x24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	61fb      	str	r3, [r7, #28]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8008b58:	bf00      	nop
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	1e5a      	subs	r2, r3, #1
 8008b5e:	607a      	str	r2, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00d      	beq.n	8008b80 <mem_cmp+0x40>
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	61fa      	str	r2, [r7, #28]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	1c5a      	adds	r2, r3, #1
 8008b72:	61ba      	str	r2, [r7, #24]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	1acb      	subs	r3, r1, r3
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d0ec      	beq.n	8008b5a <mem_cmp+0x1a>
	return r;
 8008b80:	697b      	ldr	r3, [r7, #20]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3724      	adds	r7, #36	; 0x24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008b98:	e002      	b.n	8008ba0 <chk_chr+0x12>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	607b      	str	r3, [r7, #4]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d005      	beq.n	8008bb4 <chk_chr+0x26>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d1f2      	bne.n	8008b9a <chk_chr+0xc>
	return *str;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60bb      	str	r3, [r7, #8]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	60fb      	str	r3, [r7, #12]
 8008bd6:	e03b      	b.n	8008c50 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8008bd8:	4931      	ldr	r1, [pc, #196]	; (8008ca0 <chk_lock+0xdc>)
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	005b      	lsls	r3, r3, #1
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	440b      	add	r3, r1
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d02c      	beq.n	8008c46 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008bec:	492c      	ldr	r1, [pc, #176]	; (8008ca0 <chk_lock+0xdc>)
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	4413      	add	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d120      	bne.n	8008c4a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8008c08:	4925      	ldr	r1, [pc, #148]	; (8008ca0 <chk_lock+0xdc>)
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	3304      	adds	r3, #4
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c20:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d111      	bne.n	8008c4a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8008c26:	491e      	ldr	r1, [pc, #120]	; (8008ca0 <chk_lock+0xdc>)
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	3308      	adds	r3, #8
 8008c36:	881a      	ldrh	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d102      	bne.n	8008c4a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8008c44:	e007      	b.n	8008c56 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8008c46:	2301      	movs	r3, #1
 8008c48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d9c0      	bls.n	8008bd8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d109      	bne.n	8008c70 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <chk_lock+0xa4>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d101      	bne.n	8008c6c <chk_lock+0xa8>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e013      	b.n	8008c94 <chk_lock+0xd0>
 8008c6c:	2312      	movs	r3, #18
 8008c6e:	e011      	b.n	8008c94 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10b      	bne.n	8008c8e <chk_lock+0xca>
 8008c76:	490a      	ldr	r1, [pc, #40]	; (8008ca0 <chk_lock+0xdc>)
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	330a      	adds	r3, #10
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c8c:	d101      	bne.n	8008c92 <chk_lock+0xce>
 8008c8e:	2310      	movs	r3, #16
 8008c90:	e000      	b.n	8008c94 <chk_lock+0xd0>
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	20002d3c 	.word	0x20002d3c

08008ca4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008caa:	2300      	movs	r3, #0
 8008cac:	607b      	str	r3, [r7, #4]
 8008cae:	e002      	b.n	8008cb6 <enq_lock+0x12>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	607b      	str	r3, [r7, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d809      	bhi.n	8008cd0 <enq_lock+0x2c>
 8008cbc:	490a      	ldr	r1, [pc, #40]	; (8008ce8 <enq_lock+0x44>)
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	4413      	add	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	440b      	add	r3, r1
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1ef      	bne.n	8008cb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	bf14      	ite	ne
 8008cd6:	2301      	movne	r3, #1
 8008cd8:	2300      	moveq	r3, #0
 8008cda:	b2db      	uxtb	r3, r3
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	20002d3c 	.word	0x20002d3c

08008cec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	e02e      	b.n	8008d5a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8008cfc:	4959      	ldr	r1, [pc, #356]	; (8008e64 <inc_lock+0x178>)
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	4613      	mov	r3, r2
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	4413      	add	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d11d      	bne.n	8008d54 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8008d18:	4952      	ldr	r1, [pc, #328]	; (8008e64 <inc_lock+0x178>)
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	440b      	add	r3, r1
 8008d26:	3304      	adds	r3, #4
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d10e      	bne.n	8008d54 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8008d36:	494b      	ldr	r1, [pc, #300]	; (8008e64 <inc_lock+0x178>)
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	3308      	adds	r3, #8
 8008d46:	881a      	ldrh	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d4e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d006      	beq.n	8008d62 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3301      	adds	r3, #1
 8008d58:	60fb      	str	r3, [r7, #12]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d9cd      	bls.n	8008cfc <inc_lock+0x10>
 8008d60:	e000      	b.n	8008d64 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8008d62:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d148      	bne.n	8008dfc <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	e002      	b.n	8008d76 <inc_lock+0x8a>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3301      	adds	r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d809      	bhi.n	8008d90 <inc_lock+0xa4>
 8008d7c:	4939      	ldr	r1, [pc, #228]	; (8008e64 <inc_lock+0x178>)
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4613      	mov	r3, r2
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1ef      	bne.n	8008d70 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d101      	bne.n	8008d9a <inc_lock+0xae>
 8008d96:	2300      	movs	r3, #0
 8008d98:	e05d      	b.n	8008e56 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da0:	6819      	ldr	r1, [r3, #0]
 8008da2:	4830      	ldr	r0, [pc, #192]	; (8008e64 <inc_lock+0x178>)
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	4613      	mov	r3, r2
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4403      	add	r3, r0
 8008db0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db8:	6899      	ldr	r1, [r3, #8]
 8008dba:	482a      	ldr	r0, [pc, #168]	; (8008e64 <inc_lock+0x178>)
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	005b      	lsls	r3, r3, #1
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4403      	add	r3, r0
 8008dc8:	3304      	adds	r3, #4
 8008dca:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd2:	88d8      	ldrh	r0, [r3, #6]
 8008dd4:	4923      	ldr	r1, [pc, #140]	; (8008e64 <inc_lock+0x178>)
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	005b      	lsls	r3, r3, #1
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	3308      	adds	r3, #8
 8008de4:	4602      	mov	r2, r0
 8008de6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8008de8:	491e      	ldr	r1, [pc, #120]	; (8008e64 <inc_lock+0x178>)
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	4613      	mov	r3, r2
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	330a      	adds	r3, #10
 8008df8:	2200      	movs	r2, #0
 8008dfa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00c      	beq.n	8008e1c <inc_lock+0x130>
 8008e02:	4918      	ldr	r1, [pc, #96]	; (8008e64 <inc_lock+0x178>)
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	4613      	mov	r3, r2
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	440b      	add	r3, r1
 8008e10:	330a      	adds	r3, #10
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <inc_lock+0x130>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	e01c      	b.n	8008e56 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10b      	bne.n	8008e3a <inc_lock+0x14e>
 8008e22:	4910      	ldr	r1, [pc, #64]	; (8008e64 <inc_lock+0x178>)
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	4613      	mov	r3, r2
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	440b      	add	r3, r1
 8008e30:	330a      	adds	r3, #10
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	3301      	adds	r3, #1
 8008e36:	b299      	uxth	r1, r3
 8008e38:	e001      	b.n	8008e3e <inc_lock+0x152>
 8008e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e3e:	4809      	ldr	r0, [pc, #36]	; (8008e64 <inc_lock+0x178>)
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4613      	mov	r3, r2
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4403      	add	r3, r0
 8008e4c:	330a      	adds	r3, #10
 8008e4e:	460a      	mov	r2, r1
 8008e50:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20002d3c 	.word	0x20002d3c

08008e68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	607b      	str	r3, [r7, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d82e      	bhi.n	8008eda <dec_lock+0x72>
		n = Files[i].ctr;
 8008e7c:	491b      	ldr	r1, [pc, #108]	; (8008eec <dec_lock+0x84>)
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	4613      	mov	r3, r2
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	4413      	add	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	440b      	add	r3, r1
 8008e8a:	330a      	adds	r3, #10
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008e90:	89fb      	ldrh	r3, [r7, #14]
 8008e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e96:	d101      	bne.n	8008e9c <dec_lock+0x34>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8008e9c:	89fb      	ldrh	r3, [r7, #14]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <dec_lock+0x40>
 8008ea2:	89fb      	ldrh	r3, [r7, #14]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008ea8:	4910      	ldr	r1, [pc, #64]	; (8008eec <dec_lock+0x84>)
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4613      	mov	r3, r2
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	330a      	adds	r3, #10
 8008eb8:	89fa      	ldrh	r2, [r7, #14]
 8008eba:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008ebc:	89fb      	ldrh	r3, [r7, #14]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d108      	bne.n	8008ed4 <dec_lock+0x6c>
 8008ec2:	490a      	ldr	r1, [pc, #40]	; (8008eec <dec_lock+0x84>)
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	440b      	add	r3, r1
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	737b      	strb	r3, [r7, #13]
 8008ed8:	e001      	b.n	8008ede <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008eda:	2302      	movs	r3, #2
 8008edc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008ede:	7b7b      	ldrb	r3, [r7, #13]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	20002d3c 	.word	0x20002d3c

08008ef0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	e016      	b.n	8008f2c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008efe:	4910      	ldr	r1, [pc, #64]	; (8008f40 <clear_lock+0x50>)
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4613      	mov	r3, r2
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	440b      	add	r3, r1
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d108      	bne.n	8008f26 <clear_lock+0x36>
 8008f14:	490a      	ldr	r1, [pc, #40]	; (8008f40 <clear_lock+0x50>)
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	4413      	add	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	440b      	add	r3, r1
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d9e5      	bls.n	8008efe <clear_lock+0xe>
	}
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	20002d3c 	.word	0x20002d3c

08008f44 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f56:	791b      	ldrb	r3, [r3, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d040      	beq.n	8008fde <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f6c:	7858      	ldrb	r0, [r3, #1]
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	2301      	movs	r3, #1
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	f7ff fd6c 	bl	8008a50 <disk_write>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <sync_window+0x40>
			res = FR_DISK_ERR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	73fb      	strb	r3, [r7, #15]
 8008f82:	e02c      	b.n	8008fde <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	1ad2      	subs	r2, r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d21b      	bcs.n	8008fde <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fac:	78db      	ldrb	r3, [r3, #3]
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	e012      	b.n	8008fd8 <sync_window+0x94>
					wsect += fs->fsize;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fc6:	7858      	ldrb	r0, [r3, #1]
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	2301      	movs	r3, #1
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	f7ff fd3f 	bl	8008a50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	613b      	str	r3, [r7, #16]
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d8e9      	bhi.n	8008fb2 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	d01e      	beq.n	8009042 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff ff9d 	bl	8008f44 <sync_window>
 800900a:	4603      	mov	r3, r0
 800900c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d116      	bne.n	8009042 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901a:	7858      	ldrb	r0, [r3, #1]
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	2301      	movs	r3, #1
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	f7ff fcf5 	bl	8008a10 <disk_read>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d004      	beq.n	8009036 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800902c:	f04f 33ff 	mov.w	r3, #4294967295
 8009030:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009032:	2301      	movs	r3, #1
 8009034:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800903c:	461a      	mov	r2, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff ff75 	bl	8008f44 <sync_window>
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f040 80ad 	bne.w	80091c0 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b03      	cmp	r3, #3
 8009070:	f040 8098 	bne.w	80091a4 <sync_fs+0x158>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800907a:	795b      	ldrb	r3, [r3, #5]
 800907c:	2b01      	cmp	r3, #1
 800907e:	f040 8091 	bne.w	80091a4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800908a:	895b      	ldrh	r3, [r3, #10]
 800908c:	461a      	mov	r2, r3
 800908e:	2100      	movs	r1, #0
 8009090:	f7ff fd3b 	bl	8008b0a <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2255      	movs	r2, #85	; 0x55
 8009098:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	22aa      	movs	r2, #170	; 0xaa
 80090a0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2252      	movs	r2, #82	; 0x52
 80090a8:	701a      	strb	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2252      	movs	r2, #82	; 0x52
 80090ae:	705a      	strb	r2, [r3, #1]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2261      	movs	r2, #97	; 0x61
 80090b4:	709a      	strb	r2, [r3, #2]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2241      	movs	r2, #65	; 0x41
 80090ba:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2272      	movs	r2, #114	; 0x72
 80090c0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2272      	movs	r2, #114	; 0x72
 80090c8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2241      	movs	r2, #65	; 0x41
 80090d0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2261      	movs	r2, #97	; 0x61
 80090d8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	0a1b      	lsrs	r3, r3, #8
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	0c1b      	lsrs	r3, r3, #16
 800910c:	b2da      	uxtb	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	0e1b      	lsrs	r3, r3, #24
 800911e:	b2da      	uxtb	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	b2da      	uxtb	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	b29b      	uxth	r3, r3
 8009140:	0a1b      	lsrs	r3, r3, #8
 8009142:	b29b      	uxth	r3, r3
 8009144:	b2da      	uxtb	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	0c1b      	lsrs	r3, r3, #16
 8009156:	b2da      	uxtb	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	0e1b      	lsrs	r3, r3, #24
 8009168:	b2da      	uxtb	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	3301      	adds	r3, #1
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009180:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009188:	7858      	ldrb	r0, [r3, #1]
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009194:	2301      	movs	r3, #1
 8009196:	f7ff fc5b 	bl	8008a50 <disk_write>
			fs->fsi_flag = 0;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a0:	2200      	movs	r2, #0
 80091a2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2100      	movs	r1, #0
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fc6d 	bl	8008a90 <disk_ioctl>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <sync_fs+0x174>
			res = FR_DISK_ERR;
 80091bc:	2301      	movs	r3, #1
 80091be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	3b02      	subs	r3, #2
 80091d8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	3b02      	subs	r3, #2
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d301      	bcc.n	80091ee <clust2sect+0x24>
 80091ea:	2300      	movs	r3, #0
 80091ec:	e00c      	b.n	8009208 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f4:	789b      	ldrb	r3, [r3, #2]
 80091f6:	461a      	mov	r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	fb03 f202 	mul.w	r2, r3, r2
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009206:	4413      	add	r3, r2
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d906      	bls.n	8009232 <get_fat+0x1e>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	429a      	cmp	r2, r3
 8009230:	d302      	bcc.n	8009238 <get_fat+0x24>
		val = 1;	/* Internal error */
 8009232:	2301      	movs	r3, #1
 8009234:	617b      	str	r3, [r7, #20]
 8009236:	e0e4      	b.n	8009402 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009238:	f04f 33ff 	mov.w	r3, #4294967295
 800923c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b03      	cmp	r3, #3
 8009248:	f000 8098 	beq.w	800937c <get_fat+0x168>
 800924c:	2b03      	cmp	r3, #3
 800924e:	f300 80ce 	bgt.w	80093ee <get_fat+0x1da>
 8009252:	2b01      	cmp	r3, #1
 8009254:	d002      	beq.n	800925c <get_fat+0x48>
 8009256:	2b02      	cmp	r3, #2
 8009258:	d05f      	beq.n	800931a <get_fat+0x106>
 800925a:	e0c8      	b.n	80093ee <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	085b      	lsrs	r3, r3, #1
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009270:	6a1a      	ldr	r2, [r3, #32]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009278:	895b      	ldrh	r3, [r3, #10]
 800927a:	4619      	mov	r1, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009282:	4413      	add	r3, r2
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff feae 	bl	8008fe8 <move_window>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	f040 80b0 	bne.w	80093f4 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	60fa      	str	r2, [r7, #12]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092a0:	8952      	ldrh	r2, [r2, #10]
 80092a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80092a6:	fb01 f202 	mul.w	r2, r1, r2
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	5cd3      	ldrb	r3, [r2, r3]
 80092b0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b8:	6a1a      	ldr	r2, [r3, #32]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092c0:	895b      	ldrh	r3, [r3, #10]
 80092c2:	4619      	mov	r1, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80092ca:	4413      	add	r3, r2
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff fe8a 	bl	8008fe8 <move_window>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f040 808e 	bne.w	80093f8 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e2:	895b      	ldrh	r3, [r3, #10]
 80092e4:	461a      	mov	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80092ec:	fb01 f202 	mul.w	r2, r1, r2
 80092f0:	1a9b      	subs	r3, r3, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	5cd3      	ldrb	r3, [r2, r3]
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	461a      	mov	r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <get_fat+0xfc>
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	e002      	b.n	8009316 <get_fat+0x102>
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009316:	617b      	str	r3, [r7, #20]
			break;
 8009318:	e073      	b.n	8009402 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009320:	6a1a      	ldr	r2, [r3, #32]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009328:	895b      	ldrh	r3, [r3, #10]
 800932a:	085b      	lsrs	r3, r3, #1
 800932c:	b29b      	uxth	r3, r3
 800932e:	4619      	mov	r1, r3
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	fbb3 f3f1 	udiv	r3, r3, r1
 8009336:	4413      	add	r3, r2
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7ff fe54 	bl	8008fe8 <move_window>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d15a      	bne.n	80093fc <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009350:	8952      	ldrh	r2, [r2, #10]
 8009352:	fbb3 f1f2 	udiv	r1, r3, r2
 8009356:	fb01 f202 	mul.w	r2, r1, r2
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	4413      	add	r3, r2
 8009360:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	3301      	adds	r3, #1
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	b21a      	sxth	r2, r3
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	b21b      	sxth	r3, r3
 8009372:	4313      	orrs	r3, r2
 8009374:	b21b      	sxth	r3, r3
 8009376:	b29b      	uxth	r3, r3
 8009378:	617b      	str	r3, [r7, #20]
			break;
 800937a:	e042      	b.n	8009402 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009382:	6a1a      	ldr	r2, [r3, #32]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800938a:	895b      	ldrh	r3, [r3, #10]
 800938c:	089b      	lsrs	r3, r3, #2
 800938e:	b29b      	uxth	r3, r3
 8009390:	4619      	mov	r1, r3
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	fbb3 f3f1 	udiv	r3, r3, r1
 8009398:	4413      	add	r3, r2
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff fe23 	bl	8008fe8 <move_window>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d12b      	bne.n	8009400 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80093b2:	8952      	ldrh	r2, [r2, #10]
 80093b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80093b8:	fb01 f202 	mul.w	r2, r1, r2
 80093bc:	1a9b      	subs	r3, r3, r2
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	4413      	add	r3, r2
 80093c2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	3303      	adds	r3, #3
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	061a      	lsls	r2, r3, #24
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	3302      	adds	r3, #2
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	041b      	lsls	r3, r3, #16
 80093d4:	4313      	orrs	r3, r2
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	3201      	adds	r2, #1
 80093da:	7812      	ldrb	r2, [r2, #0]
 80093dc:	0212      	lsls	r2, r2, #8
 80093de:	4313      	orrs	r3, r2
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	7812      	ldrb	r2, [r2, #0]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80093ea:	617b      	str	r3, [r7, #20]
			break;
 80093ec:	e009      	b.n	8009402 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 80093ee:	2301      	movs	r3, #1
 80093f0:	617b      	str	r3, [r7, #20]
 80093f2:	e006      	b.n	8009402 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093f4:	bf00      	nop
 80093f6:	e004      	b.n	8009402 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093f8:	bf00      	nop
 80093fa:	e002      	b.n	8009402 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80093fc:	bf00      	nop
 80093fe:	e000      	b.n	8009402 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009400:	bf00      	nop
		}
	}

	return val;
 8009402:	697b      	ldr	r3, [r7, #20]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d906      	bls.n	800942c <put_fat+0x20>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	429a      	cmp	r2, r3
 800942a:	d302      	bcc.n	8009432 <put_fat+0x26>
		res = FR_INT_ERR;
 800942c:	2302      	movs	r3, #2
 800942e:	77fb      	strb	r3, [r7, #31]
 8009430:	e13a      	b.n	80096a8 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b03      	cmp	r3, #3
 800943c:	f000 80d0 	beq.w	80095e0 <put_fat+0x1d4>
 8009440:	2b03      	cmp	r3, #3
 8009442:	f300 8127 	bgt.w	8009694 <put_fat+0x288>
 8009446:	2b01      	cmp	r3, #1
 8009448:	d003      	beq.n	8009452 <put_fat+0x46>
 800944a:	2b02      	cmp	r3, #2
 800944c:	f000 808f 	beq.w	800956e <put_fat+0x162>
 8009450:	e120      	b.n	8009694 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	617b      	str	r3, [r7, #20]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	085b      	lsrs	r3, r3, #1
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	4413      	add	r3, r2
 800945e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009466:	6a1a      	ldr	r2, [r3, #32]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946e:	895b      	ldrh	r3, [r3, #10]
 8009470:	4619      	mov	r1, r3
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	fbb3 f3f1 	udiv	r3, r3, r1
 8009478:	4413      	add	r3, r2
 800947a:	4619      	mov	r1, r3
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f7ff fdb3 	bl	8008fe8 <move_window>
 8009482:	4603      	mov	r3, r0
 8009484:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009486:	7ffb      	ldrb	r3, [r7, #31]
 8009488:	2b00      	cmp	r3, #0
 800948a:	f040 8106 	bne.w	800969a <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	617a      	str	r2, [r7, #20]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800949a:	8952      	ldrh	r2, [r2, #10]
 800949c:	fbb3 f1f2 	udiv	r1, r3, r2
 80094a0:	fb01 f202 	mul.w	r2, r1, r2
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	4413      	add	r3, r2
 80094aa:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00d      	beq.n	80094d2 <put_fat+0xc6>
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	b25b      	sxtb	r3, r3
 80094bc:	f003 030f 	and.w	r3, r3, #15
 80094c0:	b25a      	sxtb	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	b25b      	sxtb	r3, r3
 80094ca:	4313      	orrs	r3, r2
 80094cc:	b25b      	sxtb	r3, r3
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	e001      	b.n	80094d6 <put_fat+0xca>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e0:	2201      	movs	r2, #1
 80094e2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ea:	6a1a      	ldr	r2, [r3, #32]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f2:	895b      	ldrh	r3, [r3, #10]
 80094f4:	4619      	mov	r1, r3
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80094fc:	4413      	add	r3, r2
 80094fe:	4619      	mov	r1, r3
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7ff fd71 	bl	8008fe8 <move_window>
 8009506:	4603      	mov	r3, r0
 8009508:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800950a:	7ffb      	ldrb	r3, [r7, #31]
 800950c:	2b00      	cmp	r3, #0
 800950e:	f040 80c6 	bne.w	800969e <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009518:	895b      	ldrh	r3, [r3, #10]
 800951a:	461a      	mov	r2, r3
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009522:	fb01 f202 	mul.w	r2, r1, r2
 8009526:	1a9b      	subs	r3, r3, r2
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4413      	add	r3, r2
 800952c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <put_fat+0x134>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	091b      	lsrs	r3, r3, #4
 800953c:	b2db      	uxtb	r3, r3
 800953e:	e00e      	b.n	800955e <put_fat+0x152>
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	b25b      	sxtb	r3, r3
 8009546:	f023 030f 	bic.w	r3, r3, #15
 800954a:	b25a      	sxtb	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	0a1b      	lsrs	r3, r3, #8
 8009550:	b25b      	sxtb	r3, r3
 8009552:	f003 030f 	and.w	r3, r3, #15
 8009556:	b25b      	sxtb	r3, r3
 8009558:	4313      	orrs	r3, r2
 800955a:	b25b      	sxtb	r3, r3
 800955c:	b2db      	uxtb	r3, r3
 800955e:	69ba      	ldr	r2, [r7, #24]
 8009560:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009568:	2201      	movs	r2, #1
 800956a:	711a      	strb	r2, [r3, #4]
			break;
 800956c:	e09c      	b.n	80096a8 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009574:	6a1a      	ldr	r2, [r3, #32]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957c:	895b      	ldrh	r3, [r3, #10]
 800957e:	085b      	lsrs	r3, r3, #1
 8009580:	b29b      	uxth	r3, r3
 8009582:	4619      	mov	r1, r3
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	fbb3 f3f1 	udiv	r3, r3, r1
 800958a:	4413      	add	r3, r2
 800958c:	4619      	mov	r1, r3
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7ff fd2a 	bl	8008fe8 <move_window>
 8009594:	4603      	mov	r3, r0
 8009596:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009598:	7ffb      	ldrb	r3, [r7, #31]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f040 8081 	bne.w	80096a2 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095aa:	8952      	ldrh	r2, [r2, #10]
 80095ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80095b0:	fb01 f202 	mul.w	r2, r1, r2
 80095b4:	1a9b      	subs	r3, r3, r2
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	4413      	add	r3, r2
 80095ba:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	701a      	strb	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	0a1b      	lsrs	r3, r3, #8
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	3301      	adds	r3, #1
 80095d0:	b2d2      	uxtb	r2, r2
 80095d2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095da:	2201      	movs	r2, #1
 80095dc:	711a      	strb	r2, [r3, #4]
			break;
 80095de:	e063      	b.n	80096a8 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e6:	6a1a      	ldr	r2, [r3, #32]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ee:	895b      	ldrh	r3, [r3, #10]
 80095f0:	089b      	lsrs	r3, r3, #2
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	4619      	mov	r1, r3
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80095fc:	4413      	add	r3, r2
 80095fe:	4619      	mov	r1, r3
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff fcf1 	bl	8008fe8 <move_window>
 8009606:	4603      	mov	r3, r0
 8009608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800960a:	7ffb      	ldrb	r3, [r7, #31]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d14a      	bne.n	80096a6 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800961a:	8952      	ldrh	r2, [r2, #10]
 800961c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009620:	fb01 f202 	mul.w	r2, r1, r2
 8009624:	1a9b      	subs	r3, r3, r2
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	4413      	add	r3, r2
 800962a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	3303      	adds	r3, #3
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	061a      	lsls	r2, r3, #24
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	3302      	adds	r3, #2
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	041b      	lsls	r3, r3, #16
 800963c:	4313      	orrs	r3, r2
 800963e:	69ba      	ldr	r2, [r7, #24]
 8009640:	3201      	adds	r2, #1
 8009642:	7812      	ldrb	r2, [r2, #0]
 8009644:	0212      	lsls	r2, r2, #8
 8009646:	4313      	orrs	r3, r2
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	7812      	ldrb	r2, [r2, #0]
 800964c:	4313      	orrs	r3, r2
 800964e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	4313      	orrs	r3, r2
 8009656:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	b2da      	uxtb	r2, r3
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	701a      	strb	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	b29b      	uxth	r3, r3
 8009664:	0a1b      	lsrs	r3, r3, #8
 8009666:	b29a      	uxth	r2, r3
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	3301      	adds	r3, #1
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	701a      	strb	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	0c1a      	lsrs	r2, r3, #16
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	3302      	adds	r3, #2
 8009678:	b2d2      	uxtb	r2, r2
 800967a:	701a      	strb	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	0e1a      	lsrs	r2, r3, #24
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	3303      	adds	r3, #3
 8009684:	b2d2      	uxtb	r2, r2
 8009686:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800968e:	2201      	movs	r2, #1
 8009690:	711a      	strb	r2, [r3, #4]
			break;
 8009692:	e009      	b.n	80096a8 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8009694:	2302      	movs	r3, #2
 8009696:	77fb      	strb	r3, [r7, #31]
 8009698:	e006      	b.n	80096a8 <put_fat+0x29c>
			if (res != FR_OK) break;
 800969a:	bf00      	nop
 800969c:	e004      	b.n	80096a8 <put_fat+0x29c>
			if (res != FR_OK) break;
 800969e:	bf00      	nop
 80096a0:	e002      	b.n	80096a8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80096a2:	bf00      	nop
 80096a4:	e000      	b.n	80096a8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80096a6:	bf00      	nop
		}
	}

	return res;
 80096a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3720      	adds	r7, #32
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d906      	bls.n	80096d0 <remove_chain+0x1e>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d302      	bcc.n	80096d6 <remove_chain+0x24>
		res = FR_INT_ERR;
 80096d0:	2302      	movs	r3, #2
 80096d2:	73fb      	strb	r3, [r7, #15]
 80096d4:	e049      	b.n	800976a <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80096da:	e03b      	b.n	8009754 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80096dc:	6839      	ldr	r1, [r7, #0]
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7ff fd98 	bl	8009214 <get_fat>
 80096e4:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d03b      	beq.n	8009764 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d102      	bne.n	80096f8 <remove_chain+0x46>
 80096f2:	2302      	movs	r3, #2
 80096f4:	73fb      	strb	r3, [r7, #15]
 80096f6:	e038      	b.n	800976a <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fe:	d102      	bne.n	8009706 <remove_chain+0x54>
 8009700:	2301      	movs	r3, #1
 8009702:	73fb      	strb	r3, [r7, #15]
 8009704:	e031      	b.n	800976a <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8009706:	2200      	movs	r2, #0
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff fe7e 	bl	800940c <put_fat>
 8009710:	4603      	mov	r3, r0
 8009712:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d126      	bne.n	8009768 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d013      	beq.n	8009750 <remove_chain+0x9e>
				fs->free_clust++;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	3301      	adds	r3, #1
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009738:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009740:	795b      	ldrb	r3, [r3, #5]
 8009742:	f043 0301 	orr.w	r3, r3, #1
 8009746:	b2da      	uxtb	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800974e:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	429a      	cmp	r2, r3
 8009760:	d3bc      	bcc.n	80096dc <remove_chain+0x2a>
 8009762:	e002      	b.n	800976a <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <remove_chain+0xb8>
			if (res != FR_OK) break;
 8009768:	bf00      	nop
		}
	}

	return res;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d111      	bne.n	80097a8 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d006      	beq.n	80097a2 <create_chain+0x2e>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d31d      	bcc.n	80097de <create_chain+0x6a>
 80097a2:	2301      	movs	r3, #1
 80097a4:	613b      	str	r3, [r7, #16]
 80097a6:	e01a      	b.n	80097de <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff fd32 	bl	8009214 <get_fat>
 80097b0:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d801      	bhi.n	80097bc <create_chain+0x48>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e07f      	b.n	80098bc <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c2:	d101      	bne.n	80097c8 <create_chain+0x54>
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	e079      	b.n	80098bc <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d201      	bcs.n	80097da <create_chain+0x66>
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	e070      	b.n	80098bc <create_chain+0x148>
		scl = clst;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	3301      	adds	r3, #1
 80097e6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d307      	bcc.n	8009806 <create_chain+0x92>
			ncl = 2;
 80097f6:	2302      	movs	r3, #2
 80097f8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d901      	bls.n	8009806 <create_chain+0x92>
 8009802:	2300      	movs	r3, #0
 8009804:	e05a      	b.n	80098bc <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8009806:	6979      	ldr	r1, [r7, #20]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff fd03 	bl	8009214 <get_fat>
 800980e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00e      	beq.n	8009834 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981c:	d002      	beq.n	8009824 <create_chain+0xb0>
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d101      	bne.n	8009828 <create_chain+0xb4>
			return cs;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	e049      	b.n	80098bc <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	429a      	cmp	r2, r3
 800982e:	d1d8      	bne.n	80097e2 <create_chain+0x6e>
 8009830:	2300      	movs	r3, #0
 8009832:	e043      	b.n	80098bc <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8009834:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009836:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800983a:	6979      	ldr	r1, [r7, #20]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff fde5 	bl	800940c <put_fat>
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d109      	bne.n	8009860 <create_chain+0xec>
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d006      	beq.n	8009860 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff fdd8 	bl	800940c <put_fat>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d121      	bne.n	80098aa <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800986c:	461a      	mov	r2, r3
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987e:	d01c      	beq.n	80098ba <create_chain+0x146>
			fs->free_clust--;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	3b01      	subs	r3, #1
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009890:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009898:	795b      	ldrb	r3, [r3, #5]
 800989a:	f043 0301 	orr.w	r3, r3, #1
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a6:	715a      	strb	r2, [r3, #5]
 80098a8:	e007      	b.n	80098ba <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d102      	bne.n	80098b6 <create_chain+0x142>
 80098b0:	f04f 33ff 	mov.w	r3, #4294967295
 80098b4:	e000      	b.n	80098b8 <create_chain+0x144>
 80098b6:	2301      	movs	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80098ba:	697b      	ldr	r3, [r7, #20]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	3304      	adds	r3, #4
 80098d8:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e6:	895b      	ldrh	r3, [r3, #10]
 80098e8:	461a      	mov	r2, r3
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098f6:	6812      	ldr	r2, [r2, #0]
 80098f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098fc:	7892      	ldrb	r2, [r2, #2]
 80098fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009902:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	1d1a      	adds	r2, r3, #4
 8009908:	613a      	str	r2, [r7, #16]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <clmt_clust+0x54>
 8009914:	2300      	movs	r3, #0
 8009916:	e010      	b.n	800993a <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	429a      	cmp	r2, r3
 800991e:	d307      	bcc.n	8009930 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	3304      	adds	r3, #4
 800992c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800992e:	e7e9      	b.n	8009904 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8009930:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	4413      	add	r3, r2
}
 800993a:	4618      	mov	r0, r3
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b086      	sub	sp, #24
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800995a:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d009      	beq.n	8009980 <dir_sdi+0x3a>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	429a      	cmp	r2, r3
 800997e:	d301      	bcc.n	8009984 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8009980:	2302      	movs	r3, #2
 8009982:	e0aa      	b.n	8009ada <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d110      	bne.n	80099ac <dir_sdi+0x66>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	2b03      	cmp	r3, #3
 800999a:	d107      	bne.n	80099ac <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d115      	bne.n	80099de <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099be:	891b      	ldrh	r3, [r3, #8]
 80099c0:	461a      	mov	r2, r3
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d301      	bcc.n	80099cc <dir_sdi+0x86>
			return FR_INT_ERR;
 80099c8:	2302      	movs	r3, #2
 80099ca:	e086      	b.n	8009ada <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099da:	613b      	str	r3, [r7, #16]
 80099dc:	e043      	b.n	8009a66 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ea:	895b      	ldrh	r3, [r3, #10]
 80099ec:	095b      	lsrs	r3, r3, #5
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	461a      	mov	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099fe:	789b      	ldrb	r3, [r3, #2]
 8009a00:	fb02 f303 	mul.w	r3, r2, r3
 8009a04:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8009a06:	e021      	b.n	8009a4c <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6979      	ldr	r1, [r7, #20]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7ff fbfe 	bl	8009214 <get_fat>
 8009a18:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a20:	d101      	bne.n	8009a26 <dir_sdi+0xe0>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e059      	b.n	8009ada <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d909      	bls.n	8009a40 <dir_sdi+0xfa>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d301      	bcc.n	8009a44 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8009a40:	2302      	movs	r3, #2
 8009a42:	e04a      	b.n	8009ada <dir_sdi+0x194>
			idx -= ic;
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d2d9      	bcs.n	8009a08 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6979      	ldr	r1, [r7, #20]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff fbb3 	bl	80091ca <clust2sect>
 8009a64:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <dir_sdi+0x136>
 8009a78:	2302      	movs	r3, #2
 8009a7a:	e02e      	b.n	8009ada <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a88:	895b      	ldrh	r3, [r3, #10]
 8009a8a:	095b      	lsrs	r3, r3, #5
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	461a      	mov	r2, r3
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	4413      	add	r3, r2
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009aa0:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab8:	895b      	ldrh	r3, [r3, #10]
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	461a      	mov	r2, r3
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ac6:	fb01 f202 	mul.w	r2, r1, r2
 8009aca:	1a9b      	subs	r3, r3, r2
 8009acc:	015b      	lsls	r3, r3, #5
 8009ace:	4403      	add	r3, r0
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ad6:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009ae2:	b590      	push	{r4, r7, lr}
 8009ae4:	b087      	sub	sp, #28
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009af2:	88db      	ldrh	r3, [r3, #6]
 8009af4:	3301      	adds	r3, #1
 8009af6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d005      	beq.n	8009b0c <dir_next+0x2a>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <dir_next+0x2e>
		return FR_NO_FILE;
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	e12e      	b.n	8009d6e <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b1c:	895b      	ldrh	r3, [r3, #10]
 8009b1e:	095b      	lsrs	r3, r3, #5
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b2a:	fb01 f202 	mul.w	r2, r1, r2
 8009b2e:	1a9b      	subs	r3, r3, r2
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f040 80fa 	bne.w	8009d2a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b46:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10d      	bne.n	8009b70 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b60:	891b      	ldrh	r3, [r3, #8]
 8009b62:	461a      	mov	r2, r3
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4293      	cmp	r3, r2
 8009b68:	f0c0 80df 	bcc.w	8009d2a <dir_next+0x248>
				return FR_NO_FILE;
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	e0fe      	b.n	8009d6e <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b7c:	895b      	ldrh	r3, [r3, #10]
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	461a      	mov	r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b90:	6812      	ldr	r2, [r2, #0]
 8009b92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b96:	7892      	ldrb	r2, [r2, #2]
 8009b98:	3a01      	subs	r2, #1
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f040 80c4 	bne.w	8009d2a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	f7ff fb2d 	bl	8009214 <get_fat>
 8009bba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d801      	bhi.n	8009bc6 <dir_next+0xe4>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	e0d3      	b.n	8009d6e <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bcc:	d101      	bne.n	8009bd2 <dir_next+0xf0>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e0cd      	b.n	8009d6e <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	f0c0 808e 	bcc.w	8009d04 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <dir_next+0x110>
 8009bee:	2304      	movs	r3, #4
 8009bf0:	e0bd      	b.n	8009d6e <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	4619      	mov	r1, r3
 8009c04:	4610      	mov	r0, r2
 8009c06:	f7ff fdb5 	bl	8009774 <create_chain>
 8009c0a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <dir_next+0x134>
 8009c12:	2307      	movs	r3, #7
 8009c14:	e0ab      	b.n	8009d6e <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d101      	bne.n	8009c20 <dir_next+0x13e>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e0a6      	b.n	8009d6e <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c26:	d101      	bne.n	8009c2c <dir_next+0x14a>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e0a0      	b.n	8009d6e <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff f985 	bl	8008f44 <sync_window>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <dir_next+0x162>
 8009c40:	2301      	movs	r3, #1
 8009c42:	e094      	b.n	8009d6e <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5a:	895b      	ldrh	r3, [r3, #10]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	2100      	movs	r1, #0
 8009c60:	f7fe ff53 	bl	8008b0a <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c72:	681c      	ldr	r4, [r3, #0]
 8009c74:	6979      	ldr	r1, [r7, #20]
 8009c76:	4610      	mov	r0, r2
 8009c78:	f7ff faa7 	bl	80091ca <clust2sect>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8009c82:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009c84:	2300      	movs	r3, #0
 8009c86:	613b      	str	r3, [r7, #16]
 8009c88:	e021      	b.n	8009cce <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c96:	2201      	movs	r2, #1
 8009c98:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff f94e 	bl	8008f44 <sync_window>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <dir_next+0x1d0>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e05d      	b.n	8009d6e <dir_next+0x28c>
						dp->fs->winsect++;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009cbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009cc0:	3201      	adds	r2, #1
 8009cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	613b      	str	r3, [r7, #16]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cda:	789b      	ldrb	r3, [r3, #2]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d3d2      	bcc.n	8009c8a <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	1acb      	subs	r3, r1, r3
 8009cfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d02:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6979      	ldr	r1, [r7, #20]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff fa55 	bl	80091ca <clust2sect>
 8009d20:	4602      	mov	r2, r0
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d28:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d34:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4c:	895b      	ldrh	r3, [r3, #10]
 8009d4e:	095b      	lsrs	r3, r3, #5
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	461a      	mov	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d5a:	fb01 f202 	mul.w	r2, r1, r2
 8009d5e:	1a9b      	subs	r3, r3, r2
 8009d60:	015b      	lsls	r3, r3, #5
 8009d62:	4403      	add	r3, r0
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d6a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd90      	pop	{r4, r7, pc}

08009d76 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8009d80:	2100      	movs	r1, #0
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff fddf 	bl	8009946 <dir_sdi>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d135      	bne.n	8009dfe <dir_alloc+0x88>
		n = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	4619      	mov	r1, r3
 8009da8:	4610      	mov	r0, r2
 8009daa:	f7ff f91d 	bl	8008fe8 <move_window>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d121      	bne.n	8009dfc <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2be5      	cmp	r3, #229	; 0xe5
 8009dc4:	d006      	beq.n	8009dd4 <dir_alloc+0x5e>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d107      	bne.n	8009de4 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	60bb      	str	r3, [r7, #8]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d102      	bne.n	8009de8 <dir_alloc+0x72>
 8009de2:	e00c      	b.n	8009dfe <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009de4:	2300      	movs	r3, #0
 8009de6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009de8:	2101      	movs	r1, #1
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff fe79 	bl	8009ae2 <dir_next>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0cd      	beq.n	8009d96 <dir_alloc+0x20>
 8009dfa:	e000      	b.n	8009dfe <dir_alloc+0x88>
			if (res != FR_OK) break;
 8009dfc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	2b04      	cmp	r3, #4
 8009e02:	d101      	bne.n	8009e08 <dir_alloc+0x92>
 8009e04:	2307      	movs	r3, #7
 8009e06:	73fb      	strb	r3, [r7, #15]
	return res;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	331b      	adds	r3, #27
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	021b      	lsls	r3, r3, #8
 8009e24:	b21a      	sxth	r2, r3
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	331a      	adds	r3, #26
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	b21b      	sxth	r3, r3
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	b21b      	sxth	r3, r3
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d10f      	bne.n	8009e62 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	3315      	adds	r3, #21
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	021b      	lsls	r3, r3, #8
 8009e4a:	b21a      	sxth	r2, r3
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	3314      	adds	r3, #20
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b21b      	sxth	r3, r3
 8009e54:	4313      	orrs	r3, r2
 8009e56:	b21b      	sxth	r3, r3
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	041b      	lsls	r3, r3, #16
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]

	return cl;
 8009e62:	68fb      	ldr	r3, [r7, #12]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	331a      	adds	r3, #26
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	b2d2      	uxtb	r2, r2
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	0a1b      	lsrs	r3, r3, #8
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	331b      	adds	r3, #27
 8009e90:	b2d2      	uxtb	r2, r2
 8009e92:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	0c1a      	lsrs	r2, r3, #16
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3314      	adds	r3, #20
 8009e9c:	b2d2      	uxtb	r2, r2
 8009e9e:	701a      	strb	r2, [r3, #0]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	0c1b      	lsrs	r3, r3, #16
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	0a1b      	lsrs	r3, r3, #8
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	3315      	adds	r3, #21
 8009eae:	b2d2      	uxtb	r2, r2
 8009eb0:	701a      	strb	r2, [r3, #0]
}
 8009eb2:	bf00      	nop
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
	...

08009ec0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ed2:	1e5a      	subs	r2, r3, #1
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	613b      	str	r3, [r7, #16]
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8009ee8:	4a2b      	ldr	r2, [pc, #172]	; (8009f98 <cmp_lfn+0xd8>)
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	4413      	add	r3, r2
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	b21a      	sxth	r2, r3
 8009efc:	4926      	ldr	r1, [pc, #152]	; (8009f98 <cmp_lfn+0xd8>)
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	440b      	add	r3, r1
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	4619      	mov	r1, r3
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	440b      	add	r3, r1
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	b21b      	sxth	r3, r3
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	b21b      	sxth	r3, r3
 8009f12:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8009f14:	89fb      	ldrh	r3, [r7, #14]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d019      	beq.n	8009f4e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8009f1a:	89bb      	ldrh	r3, [r7, #12]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f002 fc3b 	bl	800c798 <ff_wtoupper>
 8009f22:	4603      	mov	r3, r0
 8009f24:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	2bfe      	cmp	r3, #254	; 0xfe
 8009f2a:	d80e      	bhi.n	8009f4a <cmp_lfn+0x8a>
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	617a      	str	r2, [r7, #20]
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	4413      	add	r3, r2
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f002 fc2c 	bl	800c798 <ff_wtoupper>
 8009f40:	4603      	mov	r3, r0
 8009f42:	461a      	mov	r2, r3
 8009f44:	89fb      	ldrh	r3, [r7, #14]
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d008      	beq.n	8009f5c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	e01f      	b.n	8009f8e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8009f4e:	89bb      	ldrh	r3, [r7, #12]
 8009f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d001      	beq.n	8009f5c <cmp_lfn+0x9c>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	e018      	b.n	8009f8e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	613b      	str	r3, [r7, #16]
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	2b0c      	cmp	r3, #12
 8009f66:	d9bf      	bls.n	8009ee8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00b      	beq.n	8009f8c <cmp_lfn+0xcc>
 8009f74:	89fb      	ldrh	r3, [r7, #14]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d008      	beq.n	8009f8c <cmp_lfn+0xcc>
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	4413      	add	r3, r2
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <cmp_lfn+0xcc>
		return 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	e000      	b.n	8009f8e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8009f8c:	2301      	movs	r3, #1
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3718      	adds	r7, #24
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	0800fd54 	.word	0x0800fd54

08009f9c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b089      	sub	sp, #36	; 0x24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	461a      	mov	r2, r3
 8009faa:	460b      	mov	r3, r1
 8009fac:	71fb      	strb	r3, [r7, #7]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	330d      	adds	r3, #13
 8009fb6:	79ba      	ldrb	r2, [r7, #6]
 8009fb8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	330b      	adds	r3, #11
 8009fbe:	220f      	movs	r2, #15
 8009fc0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	330c      	adds	r3, #12
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	331a      	adds	r3, #26
 8009fce:	2200      	movs	r2, #0
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	331b      	adds	r3, #27
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8009fda:	79fb      	ldrb	r3, [r7, #7]
 8009fdc:	1e5a      	subs	r2, r3, #1
 8009fde:	4613      	mov	r3, r2
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009fea:	2300      	movs	r3, #0
 8009fec:	82fb      	strh	r3, [r7, #22]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8009ff2:	8afb      	ldrh	r3, [r7, #22]
 8009ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d007      	beq.n	800a00c <fit_lfn+0x70>
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	61fa      	str	r2, [r7, #28]
 800a002:	005b      	lsls	r3, r3, #1
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	4413      	add	r3, r2
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800a00c:	4a1d      	ldr	r2, [pc, #116]	; (800a084 <fit_lfn+0xe8>)
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	4413      	add	r3, r2
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	461a      	mov	r2, r3
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	4413      	add	r3, r2
 800a01a:	8afa      	ldrh	r2, [r7, #22]
 800a01c:	b2d2      	uxtb	r2, r2
 800a01e:	701a      	strb	r2, [r3, #0]
 800a020:	8afb      	ldrh	r3, [r7, #22]
 800a022:	0a1b      	lsrs	r3, r3, #8
 800a024:	b299      	uxth	r1, r3
 800a026:	4a17      	ldr	r2, [pc, #92]	; (800a084 <fit_lfn+0xe8>)
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	4413      	add	r3, r2
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	3301      	adds	r3, #1
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	4413      	add	r3, r2
 800a034:	b2ca      	uxtb	r2, r1
 800a036:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800a038:	8afb      	ldrh	r3, [r7, #22]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d102      	bne.n	800a044 <fit_lfn+0xa8>
 800a03e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a042:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	3301      	adds	r3, #1
 800a048:	61bb      	str	r3, [r7, #24]
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	2b0c      	cmp	r3, #12
 800a04e:	d9d0      	bls.n	8009ff2 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800a050:	8afb      	ldrh	r3, [r7, #22]
 800a052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a056:	4293      	cmp	r3, r2
 800a058:	d006      	beq.n	800a068 <fit_lfn+0xcc>
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	005b      	lsls	r3, r3, #1
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	4413      	add	r3, r2
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d103      	bne.n	800a070 <fit_lfn+0xd4>
 800a068:	79fb      	ldrb	r3, [r7, #7]
 800a06a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a06e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	79fa      	ldrb	r2, [r7, #7]
 800a074:	701a      	strb	r2, [r3, #0]
}
 800a076:	bf00      	nop
 800a078:	3724      	adds	r7, #36	; 0x24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	0800fd54 	.word	0x0800fd54

0800a088 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08c      	sub	sp, #48	; 0x30
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a096:	220b      	movs	r2, #11
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7fe fd16 	bl	8008acc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b05      	cmp	r3, #5
 800a0a4:	d92b      	bls.n	800a0fe <gen_numname+0x76>
		sr = seq;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a0aa:	e022      	b.n	800a0f2 <gen_numname+0x6a>
			wc = *lfn++;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	1c9a      	adds	r2, r3, #2
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	881b      	ldrh	r3, [r3, #0]
 800a0b4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0ba:	e017      	b.n	800a0ec <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	005a      	lsls	r2, r3, #1
 800a0c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0c2:	f003 0301 	and.w	r3, r3, #1
 800a0c6:	4413      	add	r3, r2
 800a0c8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a0ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0cc:	085b      	lsrs	r3, r3, #1
 800a0ce:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d005      	beq.n	800a0e6 <gen_numname+0x5e>
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a0e0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a0e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	2b0f      	cmp	r3, #15
 800a0f0:	d9e4      	bls.n	800a0bc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1d8      	bne.n	800a0ac <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a0fe:	2307      	movs	r3, #7
 800a100:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	f003 030f 	and.w	r3, r3, #15
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	3330      	adds	r3, #48	; 0x30
 800a10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a116:	2b39      	cmp	r3, #57	; 0x39
 800a118:	d904      	bls.n	800a124 <gen_numname+0x9c>
 800a11a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a11e:	3307      	adds	r3, #7
 800a120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a126:	1e5a      	subs	r2, r3, #1
 800a128:	62ba      	str	r2, [r7, #40]	; 0x28
 800a12a:	3330      	adds	r3, #48	; 0x30
 800a12c:	443b      	add	r3, r7
 800a12e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a132:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	091b      	lsrs	r3, r3, #4
 800a13a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1df      	bne.n	800a102 <gen_numname+0x7a>
	ns[i] = '~';
 800a142:	f107 0214 	add.w	r2, r7, #20
 800a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a148:	4413      	add	r3, r2
 800a14a:	227e      	movs	r2, #126	; 0x7e
 800a14c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a14e:	2300      	movs	r3, #0
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
 800a152:	e002      	b.n	800a15a <gen_numname+0xd2>
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	3301      	adds	r3, #1
 800a158:	627b      	str	r3, [r7, #36]	; 0x24
 800a15a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	429a      	cmp	r2, r3
 800a160:	d205      	bcs.n	800a16e <gen_numname+0xe6>
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	4413      	add	r3, r2
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	d1f2      	bne.n	800a154 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	2b07      	cmp	r3, #7
 800a172:	d807      	bhi.n	800a184 <gen_numname+0xfc>
 800a174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	62ba      	str	r2, [r7, #40]	; 0x28
 800a17a:	3330      	adds	r3, #48	; 0x30
 800a17c:	443b      	add	r3, r7
 800a17e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a182:	e000      	b.n	800a186 <gen_numname+0xfe>
 800a184:	2120      	movs	r1, #32
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	627a      	str	r2, [r7, #36]	; 0x24
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4413      	add	r3, r2
 800a190:	460a      	mov	r2, r1
 800a192:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	2b07      	cmp	r3, #7
 800a198:	d9e9      	bls.n	800a16e <gen_numname+0xe6>
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	3730      	adds	r7, #48	; 0x30
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a1b0:	230b      	movs	r3, #11
 800a1b2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	0852      	lsrs	r2, r2, #1
 800a1ba:	01db      	lsls	r3, r3, #7
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	1c59      	adds	r1, r3, #1
 800a1c4:	6079      	str	r1, [r7, #4]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	73fb      	strb	r3, [r7, #15]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	60bb      	str	r3, [r7, #8]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1ed      	bne.n	800a1b4 <sum_sfn+0x10>
	return sum;
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b086      	sub	sp, #24
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff fba8 	bl	8009946 <dir_sdi>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d001      	beq.n	800a204 <dir_find+0x1e>
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	e0b8      	b.n	800a376 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a204:	23ff      	movs	r3, #255	; 0xff
 800a206:	753b      	strb	r3, [r7, #20]
 800a208:	7d3b      	ldrb	r3, [r7, #20]
 800a20a:	757b      	strb	r3, [r7, #21]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a216:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	4619      	mov	r1, r3
 800a22a:	4610      	mov	r0, r2
 800a22c:	f7fe fedc 	bl	8008fe8 <move_window>
 800a230:	4603      	mov	r3, r0
 800a232:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f040 8097 	bne.w	800a36a <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a24c:	7dbb      	ldrb	r3, [r7, #22]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d102      	bne.n	800a258 <dir_find+0x72>
 800a252:	2304      	movs	r3, #4
 800a254:	75fb      	strb	r3, [r7, #23]
 800a256:	e08d      	b.n	800a374 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	330b      	adds	r3, #11
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a262:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a264:	7dbb      	ldrb	r3, [r7, #22]
 800a266:	2be5      	cmp	r3, #229	; 0xe5
 800a268:	d007      	beq.n	800a27a <dir_find+0x94>
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	f003 0308 	and.w	r3, r3, #8
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00b      	beq.n	800a28c <dir_find+0xa6>
 800a274:	7bfb      	ldrb	r3, [r7, #15]
 800a276:	2b0f      	cmp	r3, #15
 800a278:	d008      	beq.n	800a28c <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a27a:	23ff      	movs	r3, #255	; 0xff
 800a27c:	757b      	strb	r3, [r7, #21]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a288:	849a      	strh	r2, [r3, #36]	; 0x24
 800a28a:	e063      	b.n	800a354 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	2b0f      	cmp	r3, #15
 800a290:	d137      	bne.n	800a302 <dir_find+0x11c>
				if (dp->lfn) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a298:	6a1b      	ldr	r3, [r3, #32]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d05a      	beq.n	800a354 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a29e:	7dbb      	ldrb	r3, [r7, #22]
 800a2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d010      	beq.n	800a2ca <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	7b5b      	ldrb	r3, [r3, #13]
 800a2ac:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800a2ae:	7dbb      	ldrb	r3, [r7, #22]
 800a2b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2b4:	75bb      	strb	r3, [r7, #22]
 800a2b6:	7dbb      	ldrb	r3, [r7, #22]
 800a2b8:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2c0:	88da      	ldrh	r2, [r3, #6]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2c8:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800a2ca:	7dba      	ldrb	r2, [r7, #22]
 800a2cc:	7d7b      	ldrb	r3, [r7, #21]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d114      	bne.n	800a2fc <dir_find+0x116>
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	330d      	adds	r3, #13
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	7d3a      	ldrb	r2, [r7, #20]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d10e      	bne.n	800a2fc <dir_find+0x116>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	6939      	ldr	r1, [r7, #16]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff fde9 	bl	8009ec0 <cmp_lfn>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <dir_find+0x116>
 800a2f4:	7d7b      	ldrb	r3, [r7, #21]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	e000      	b.n	800a2fe <dir_find+0x118>
 800a2fc:	23ff      	movs	r3, #255	; 0xff
 800a2fe:	757b      	strb	r3, [r7, #21]
 800a300:	e028      	b.n	800a354 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800a302:	7d7b      	ldrb	r3, [r7, #21]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d107      	bne.n	800a318 <dir_find+0x132>
 800a308:	6938      	ldr	r0, [r7, #16]
 800a30a:	f7ff ff4b 	bl	800a1a4 <sum_sfn>
 800a30e:	4603      	mov	r3, r0
 800a310:	461a      	mov	r2, r3
 800a312:	7d3b      	ldrb	r3, [r7, #20]
 800a314:	4293      	cmp	r3, r2
 800a316:	d02a      	beq.n	800a36e <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	330b      	adds	r3, #11
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10b      	bne.n	800a344 <dir_find+0x15e>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	220b      	movs	r2, #11
 800a336:	4619      	mov	r1, r3
 800a338:	6938      	ldr	r0, [r7, #16]
 800a33a:	f7fe fc01 	bl	8008b40 <mem_cmp>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d016      	beq.n	800a372 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a344:	23ff      	movs	r3, #255	; 0xff
 800a346:	757b      	strb	r3, [r7, #21]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a34e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a352:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800a354:	2100      	movs	r1, #0
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7ff fbc3 	bl	8009ae2 <dir_next>
 800a35c:	4603      	mov	r3, r0
 800a35e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	2b00      	cmp	r3, #0
 800a364:	f43f af58 	beq.w	800a218 <dir_find+0x32>
 800a368:	e004      	b.n	800a374 <dir_find+0x18e>
		if (res != FR_OK) break;
 800a36a:	bf00      	nop
 800a36c:	e002      	b.n	800a374 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800a36e:	bf00      	nop
 800a370:	e000      	b.n	800a374 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800a372:	bf00      	nop

	return res;
 800a374:	7dfb      	ldrb	r3, [r7, #23]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08c      	sub	sp, #48	; 0x30
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	623b      	str	r3, [r7, #32]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800a39c:	f107 030c 	add.w	r3, r7, #12
 800a3a0:	220c      	movs	r2, #12
 800a3a2:	6a39      	ldr	r1, [r7, #32]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe fb91 	bl	8008acc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d03b      	beq.n	800a42c <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	330b      	adds	r3, #11
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	701a      	strb	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3cc:	e013      	b.n	800a3f6 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800a3ce:	f107 010c 	add.w	r1, r7, #12
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	69fa      	ldr	r2, [r7, #28]
 800a3d6:	6a38      	ldr	r0, [r7, #32]
 800a3d8:	f7ff fe56 	bl	800a088 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff ff02 	bl	800a1e6 <dir_find>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a3e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d106      	bne.n	800a3fe <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	2b63      	cmp	r3, #99	; 0x63
 800a3fa:	d9e8      	bls.n	800a3ce <dir_register+0x4e>
 800a3fc:	e000      	b.n	800a400 <dir_register+0x80>
			if (res != FR_OK) break;
 800a3fe:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	2b64      	cmp	r3, #100	; 0x64
 800a404:	d101      	bne.n	800a40a <dir_register+0x8a>
 800a406:	2307      	movs	r3, #7
 800a408:	e0d8      	b.n	800a5bc <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a40a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a40e:	2b04      	cmp	r3, #4
 800a410:	d002      	beq.n	800a418 <dir_register+0x98>
 800a412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a416:	e0d1      	b.n	800a5bc <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	330b      	adds	r3, #11
 800a41c:	7dfa      	ldrb	r2, [r7, #23]
 800a41e:	701a      	strb	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a426:	461a      	mov	r2, r3
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	f003 0302 	and.w	r3, r3, #2
 800a432:	2b00      	cmp	r3, #0
 800a434:	d014      	beq.n	800a460 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800a436:	2300      	movs	r3, #0
 800a438:	62bb      	str	r3, [r7, #40]	; 0x28
 800a43a:	e002      	b.n	800a442 <dir_register+0xc2>
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	3301      	adds	r3, #1
 800a440:	62bb      	str	r3, [r7, #40]	; 0x28
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	69fa      	ldr	r2, [r7, #28]
 800a448:	4413      	add	r3, r2
 800a44a:	881b      	ldrh	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1f5      	bne.n	800a43c <dir_register+0xbc>
		nent = (n + 25) / 13;
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	3319      	adds	r3, #25
 800a454:	4a5b      	ldr	r2, [pc, #364]	; (800a5c4 <dir_register+0x244>)
 800a456:	fba2 2303 	umull	r2, r3, r2, r3
 800a45a:	089b      	lsrs	r3, r3, #2
 800a45c:	627b      	str	r3, [r7, #36]	; 0x24
 800a45e:	e001      	b.n	800a464 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800a460:	2301      	movs	r3, #1
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7ff fc85 	bl	8009d76 <dir_alloc>
 800a46c:	4603      	mov	r3, r0
 800a46e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a476:	2b00      	cmp	r3, #0
 800a478:	d15b      	bne.n	800a532 <dir_register+0x1b2>
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	3b01      	subs	r3, #1
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	2b00      	cmp	r3, #0
 800a484:	d055      	beq.n	800a532 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a48c:	88db      	ldrh	r3, [r3, #6]
 800a48e:	461a      	mov	r2, r3
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff fa55 	bl	8009946 <dir_sdi>
 800a49c:	4603      	mov	r3, r0
 800a49e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a4a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d143      	bne.n	800a532 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff fe76 	bl	800a1a4 <sum_sfn>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	f7fe fd8a 	bl	8008fe8 <move_window>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a4da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d126      	bne.n	800a530 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e8:	6a18      	ldr	r0, [r3, #32]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f0:	6959      	ldr	r1, [r3, #20]
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	7efb      	ldrb	r3, [r7, #27]
 800a4f8:	f7ff fd50 	bl	8009f9c <fit_lfn>
				dp->fs->wflag = 1;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a508:	2201      	movs	r2, #1
 800a50a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800a50c:	2100      	movs	r1, #0
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff fae7 	bl	8009ae2 <dir_next>
 800a514:	4603      	mov	r3, r0
 800a516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a51a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d107      	bne.n	800a532 <dir_register+0x1b2>
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	3b01      	subs	r3, #1
 800a526:	627b      	str	r3, [r7, #36]	; 0x24
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1c6      	bne.n	800a4bc <dir_register+0x13c>
 800a52e:	e000      	b.n	800a532 <dir_register+0x1b2>
				if (res != FR_OK) break;
 800a530:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800a532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a536:	2b00      	cmp	r3, #0
 800a538:	d13e      	bne.n	800a5b8 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	4619      	mov	r1, r3
 800a54c:	4610      	mov	r0, r2
 800a54e:	f7fe fd4b 	bl	8008fe8 <move_window>
 800a552:	4603      	mov	r3, r0
 800a554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d12b      	bne.n	800a5b8 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	2220      	movs	r2, #32
 800a56a:	2100      	movs	r1, #0
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe facc 	bl	8008b0a <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a578:	6958      	ldr	r0, [r3, #20]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	220b      	movs	r2, #11
 800a584:	4619      	mov	r1, r3
 800a586:	f7fe faa1 	bl	8008acc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	330b      	adds	r3, #11
 800a594:	781a      	ldrb	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	330c      	adds	r3, #12
 800a5a0:	f002 0218 	and.w	r2, r2, #24
 800a5a4:	b2d2      	uxtb	r2, r2
 800a5a6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800a5b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3730      	adds	r7, #48	; 0x30
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	4ec4ec4f 	.word	0x4ec4ec4f

0800a5c8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08a      	sub	sp, #40	; 0x28
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	613b      	str	r3, [r7, #16]
 800a5d8:	e002      	b.n	800a5e0 <create_name+0x18>
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	613b      	str	r3, [r7, #16]
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2b2f      	cmp	r3, #47	; 0x2f
 800a5e6:	d0f8      	beq.n	800a5da <create_name+0x12>
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b5c      	cmp	r3, #92	; 0x5c
 800a5ee:	d0f4      	beq.n	800a5da <create_name+0x12>
	lfn = dp->lfn;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	61ba      	str	r2, [r7, #24]
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	4413      	add	r3, r2
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800a610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a612:	2b1f      	cmp	r3, #31
 800a614:	d92f      	bls.n	800a676 <create_name+0xae>
 800a616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a618:	2b2f      	cmp	r3, #47	; 0x2f
 800a61a:	d02c      	beq.n	800a676 <create_name+0xae>
 800a61c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a61e:	2b5c      	cmp	r3, #92	; 0x5c
 800a620:	d029      	beq.n	800a676 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2bfe      	cmp	r3, #254	; 0xfe
 800a626:	d901      	bls.n	800a62c <create_name+0x64>
			return FR_INVALID_NAME;
 800a628:	2306      	movs	r3, #6
 800a62a:	e186      	b.n	800a93a <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a62c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a632:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a634:	2101      	movs	r1, #1
 800a636:	4618      	mov	r0, r3
 800a638:	f002 f872 	bl	800c720 <ff_convert>
 800a63c:	4603      	mov	r3, r0
 800a63e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <create_name+0x82>
 800a646:	2306      	movs	r3, #6
 800a648:	e177      	b.n	800a93a <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800a64a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a64c:	2b7f      	cmp	r3, #127	; 0x7f
 800a64e:	d809      	bhi.n	800a664 <create_name+0x9c>
 800a650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a652:	4619      	mov	r1, r3
 800a654:	488e      	ldr	r0, [pc, #568]	; (800a890 <create_name+0x2c8>)
 800a656:	f7fe fa9a 	bl	8008b8e <chk_chr>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <create_name+0x9c>
			return FR_INVALID_NAME;
 800a660:	2306      	movs	r3, #6
 800a662:	e16a      	b.n	800a93a <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	617a      	str	r2, [r7, #20]
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	4413      	add	r3, r2
 800a670:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a672:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a674:	e7c5      	b.n	800a602 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	441a      	add	r2, r3
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a680:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a682:	2b1f      	cmp	r3, #31
 800a684:	d801      	bhi.n	800a68a <create_name+0xc2>
 800a686:	2304      	movs	r3, #4
 800a688:	e000      	b.n	800a68c <create_name+0xc4>
 800a68a:	2300      	movs	r3, #0
 800a68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800a690:	e011      	b.n	800a6b6 <create_name+0xee>
		w = lfn[di - 1];
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a698:	3b01      	subs	r3, #1
 800a69a:	005b      	lsls	r3, r3, #1
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	4413      	add	r3, r2
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a6a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6a6:	2b20      	cmp	r3, #32
 800a6a8:	d002      	beq.n	800a6b0 <create_name+0xe8>
 800a6aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6ac:	2b2e      	cmp	r3, #46	; 0x2e
 800a6ae:	d106      	bne.n	800a6be <create_name+0xf6>
		di--;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1ea      	bne.n	800a692 <create_name+0xca>
 800a6bc:	e000      	b.n	800a6c0 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800a6be:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <create_name+0x102>
 800a6c6:	2306      	movs	r3, #6
 800a6c8:	e137      	b.n	800a93a <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	005b      	lsls	r3, r3, #1
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	220b      	movs	r2, #11
 800a6e0:	2120      	movs	r1, #32
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe fa11 	bl	8008b0a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	61bb      	str	r3, [r7, #24]
 800a6ec:	e002      	b.n	800a6f4 <create_name+0x12c>
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	61bb      	str	r3, [r7, #24]
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	005b      	lsls	r3, r3, #1
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	2b20      	cmp	r3, #32
 800a700:	d0f5      	beq.n	800a6ee <create_name+0x126>
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	005b      	lsls	r3, r3, #1
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	4413      	add	r3, r2
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	2b2e      	cmp	r3, #46	; 0x2e
 800a70e:	d0ee      	beq.n	800a6ee <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <create_name+0x162>
 800a716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a71a:	f043 0303 	orr.w	r3, r3, #3
 800a71e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a722:	e002      	b.n	800a72a <create_name+0x162>
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	3b01      	subs	r3, #1
 800a728:	617b      	str	r3, [r7, #20]
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d009      	beq.n	800a744 <create_name+0x17c>
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a736:	3b01      	subs	r3, #1
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	4413      	add	r3, r2
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	2b2e      	cmp	r3, #46	; 0x2e
 800a742:	d1ef      	bne.n	800a724 <create_name+0x15c>

	b = i = 0; ni = 8;
 800a744:	2300      	movs	r3, #0
 800a746:	623b      	str	r3, [r7, #32]
 800a748:	2300      	movs	r3, #0
 800a74a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a74e:	2308      	movs	r3, #8
 800a750:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	61ba      	str	r2, [r7, #24]
 800a758:	005b      	lsls	r3, r3, #1
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	4413      	add	r3, r2
 800a75e:	881b      	ldrh	r3, [r3, #0]
 800a760:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 8091 	beq.w	800a88c <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a76a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a76c:	2b20      	cmp	r3, #32
 800a76e:	d006      	beq.n	800a77e <create_name+0x1b6>
 800a770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a772:	2b2e      	cmp	r3, #46	; 0x2e
 800a774:	d10a      	bne.n	800a78c <create_name+0x1c4>
 800a776:	69ba      	ldr	r2, [r7, #24]
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d006      	beq.n	800a78c <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800a77e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a782:	f043 0303 	orr.w	r3, r3, #3
 800a786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a78a:	e07e      	b.n	800a88a <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a78c:	6a3a      	ldr	r2, [r7, #32]
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	429a      	cmp	r2, r3
 800a792:	d203      	bcs.n	800a79c <create_name+0x1d4>
 800a794:	69ba      	ldr	r2, [r7, #24]
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d123      	bne.n	800a7e4 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	2b0b      	cmp	r3, #11
 800a7a0:	d106      	bne.n	800a7b0 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800a7a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7a6:	f043 0303 	orr.w	r3, r3, #3
 800a7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7ae:	e076      	b.n	800a89e <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a7b0:	69ba      	ldr	r2, [r7, #24]
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d005      	beq.n	800a7c4 <create_name+0x1fc>
 800a7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7bc:	f043 0303 	orr.w	r3, r3, #3
 800a7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a7c4:	69ba      	ldr	r2, [r7, #24]
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d867      	bhi.n	800a89c <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	61bb      	str	r3, [r7, #24]
 800a7d0:	2308      	movs	r3, #8
 800a7d2:	623b      	str	r3, [r7, #32]
 800a7d4:	230b      	movs	r3, #11
 800a7d6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a7d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a7e2:	e052      	b.n	800a88a <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a7e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7e6:	2b7f      	cmp	r3, #127	; 0x7f
 800a7e8:	d914      	bls.n	800a814 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a7ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f001 ff96 	bl	800c720 <ff_convert>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a7f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <create_name+0x240>
 800a7fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a800:	3b80      	subs	r3, #128	; 0x80
 800a802:	4a24      	ldr	r2, [pc, #144]	; (800a894 <create_name+0x2cc>)
 800a804:	5cd3      	ldrb	r3, [r2, r3]
 800a806:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a80c:	f043 0302 	orr.w	r3, r3, #2
 800a810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a816:	2b00      	cmp	r3, #0
 800a818:	d007      	beq.n	800a82a <create_name+0x262>
 800a81a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a81c:	4619      	mov	r1, r3
 800a81e:	481e      	ldr	r0, [pc, #120]	; (800a898 <create_name+0x2d0>)
 800a820:	f7fe f9b5 	bl	8008b8e <chk_chr>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d008      	beq.n	800a83c <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a82a:	235f      	movs	r3, #95	; 0x5f
 800a82c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a82e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a832:	f043 0303 	orr.w	r3, r3, #3
 800a836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a83a:	e01b      	b.n	800a874 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a83c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a83e:	2b40      	cmp	r3, #64	; 0x40
 800a840:	d909      	bls.n	800a856 <create_name+0x28e>
 800a842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a844:	2b5a      	cmp	r3, #90	; 0x5a
 800a846:	d806      	bhi.n	800a856 <create_name+0x28e>
					b |= 2;
 800a848:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a84c:	f043 0302 	orr.w	r3, r3, #2
 800a850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a854:	e00e      	b.n	800a874 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a858:	2b60      	cmp	r3, #96	; 0x60
 800a85a:	d90b      	bls.n	800a874 <create_name+0x2ac>
 800a85c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a85e:	2b7a      	cmp	r3, #122	; 0x7a
 800a860:	d808      	bhi.n	800a874 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800a862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a866:	f043 0301 	orr.w	r3, r3, #1
 800a86a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a86e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a870:	3b20      	subs	r3, #32
 800a872:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a87a:	699a      	ldr	r2, [r3, #24]
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	1c59      	adds	r1, r3, #1
 800a880:	6239      	str	r1, [r7, #32]
 800a882:	4413      	add	r3, r2
 800a884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a886:	b2d2      	uxtb	r2, r2
 800a888:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800a88a:	e762      	b.n	800a752 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800a88c:	bf00      	nop
 800a88e:	e006      	b.n	800a89e <create_name+0x2d6>
 800a890:	0800f740 	.word	0x0800f740
 800a894:	0800fcd4 	.word	0x0800fcd4
 800a898:	0800f74c 	.word	0x0800f74c
			if (si > di) break;			/* No extension */
 800a89c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2be5      	cmp	r3, #229	; 0xe5
 800a8aa:	d105      	bne.n	800a8b8 <create_name+0x2f0>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	2b08      	cmp	r3, #8
 800a8bc:	d104      	bne.n	800a8c8 <create_name+0x300>
 800a8be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800a8c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8cc:	f003 030c 	and.w	r3, r3, #12
 800a8d0:	2b0c      	cmp	r3, #12
 800a8d2:	d005      	beq.n	800a8e0 <create_name+0x318>
 800a8d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8d8:	f003 0303 	and.w	r3, r3, #3
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d105      	bne.n	800a8ec <create_name+0x324>
		cf |= NS_LFN;
 800a8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8e4:	f043 0302 	orr.w	r3, r3, #2
 800a8e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d117      	bne.n	800a928 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a8f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8fc:	f003 0303 	and.w	r3, r3, #3
 800a900:	2b01      	cmp	r3, #1
 800a902:	d105      	bne.n	800a910 <create_name+0x348>
 800a904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a908:	f043 0310 	orr.w	r3, r3, #16
 800a90c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a910:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a914:	f003 030c 	and.w	r3, r3, #12
 800a918:	2b04      	cmp	r3, #4
 800a91a:	d105      	bne.n	800a928 <create_name+0x360>
 800a91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a920:	f043 0308 	orr.w	r3, r3, #8
 800a924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	330b      	adds	r3, #11
 800a932:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a936:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a938:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3728      	adds	r7, #40	; 0x28
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop

0800a944 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	2b2f      	cmp	r3, #47	; 0x2f
 800a954:	d003      	beq.n	800a95e <follow_path+0x1a>
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	2b5c      	cmp	r3, #92	; 0x5c
 800a95c:	d102      	bne.n	800a964 <follow_path+0x20>
		path++;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	3301      	adds	r3, #1
 800a962:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a96a:	461a      	mov	r2, r3
 800a96c:	2300      	movs	r3, #0
 800a96e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	2b1f      	cmp	r3, #31
 800a976:	d80c      	bhi.n	800a992 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800a978:	2100      	movs	r1, #0
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7fe ffe3 	bl	8009946 <dir_sdi>
 800a980:	4603      	mov	r3, r0
 800a982:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a98a:	461a      	mov	r2, r3
 800a98c:	2300      	movs	r3, #0
 800a98e:	6153      	str	r3, [r2, #20]
 800a990:	e049      	b.n	800aa26 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a992:	463b      	mov	r3, r7
 800a994:	4619      	mov	r1, r3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff fe16 	bl	800a5c8 <create_name>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d13a      	bne.n	800aa1c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7ff fc1d 	bl	800a1e6 <dir_find>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	7adb      	ldrb	r3, [r3, #11]
 800a9ba:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00a      	beq.n	800a9d8 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d12b      	bne.n	800aa20 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	f003 0304 	and.w	r3, r3, #4
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d126      	bne.n	800aa20 <follow_path+0xdc>
 800a9d2:	2305      	movs	r3, #5
 800a9d4:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800a9d6:	e023      	b.n	800aa20 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	f003 0304 	and.w	r3, r3, #4
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d120      	bne.n	800aa24 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	330b      	adds	r3, #11
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	f003 0310 	and.w	r3, r3, #16
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d102      	bne.n	800aa00 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800a9fa:	2305      	movs	r3, #5
 800a9fc:	73fb      	strb	r3, [r7, #15]
 800a9fe:	e012      	b.n	800aa26 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68b9      	ldr	r1, [r7, #8]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7ff fa01 	bl	8009e12 <ld_clust>
 800aa10:	4602      	mov	r2, r0
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa18:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aa1a:	e7ba      	b.n	800a992 <follow_path+0x4e>
			if (res != FR_OK) break;
 800aa1c:	bf00      	nop
 800aa1e:	e002      	b.n	800aa26 <follow_path+0xe2>
				break;
 800aa20:	bf00      	nop
 800aa22:	e000      	b.n	800aa26 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aa24:	bf00      	nop
		}
	}

	return res;
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b087      	sub	sp, #28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aa38:	f04f 33ff 	mov.w	r3, #4294967295
 800aa3c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d031      	beq.n	800aaaa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	e002      	b.n	800aa54 <get_ldnumber+0x24>
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	3301      	adds	r3, #1
 800aa52:	617b      	str	r3, [r7, #20]
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	2b1f      	cmp	r3, #31
 800aa5a:	d903      	bls.n	800aa64 <get_ldnumber+0x34>
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2b3a      	cmp	r3, #58	; 0x3a
 800aa62:	d1f4      	bne.n	800aa4e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2b3a      	cmp	r3, #58	; 0x3a
 800aa6a:	d11c      	bne.n	800aaa6 <get_ldnumber+0x76>
			tp = *path;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	1c5a      	adds	r2, r3, #1
 800aa76:	60fa      	str	r2, [r7, #12]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	3b30      	subs	r3, #48	; 0x30
 800aa7c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2b09      	cmp	r3, #9
 800aa82:	d80e      	bhi.n	800aaa2 <get_ldnumber+0x72>
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d10a      	bne.n	800aaa2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d107      	bne.n	800aaa2 <get_ldnumber+0x72>
					vol = (int)i;
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	e002      	b.n	800aaac <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aaaa:	693b      	ldr	r3, [r7, #16]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	371c      	adds	r7, #28
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aac8:	2200      	movs	r2, #0
 800aaca:	711a      	strb	r2, [r3, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aad2:	461a      	mov	r2, r3
 800aad4:	f04f 33ff 	mov.w	r3, #4294967295
 800aad8:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7fe fa83 	bl	8008fe8 <move_window>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <check_fs+0x34>
		return 3;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e04a      	b.n	800ab82 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	021b      	lsls	r3, r3, #8
 800aaf8:	b21a      	sxth	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ab00:	b21b      	sxth	r3, r3
 800ab02:	4313      	orrs	r3, r2
 800ab04:	b21b      	sxth	r3, r3
 800ab06:	4a21      	ldr	r2, [pc, #132]	; (800ab8c <check_fs+0xd4>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d001      	beq.n	800ab10 <check_fs+0x58>
		return 2;
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	e038      	b.n	800ab82 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3336      	adds	r3, #54	; 0x36
 800ab14:	3303      	adds	r3, #3
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	061a      	lsls	r2, r3, #24
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	3336      	adds	r3, #54	; 0x36
 800ab1e:	3302      	adds	r3, #2
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	041b      	lsls	r3, r3, #16
 800ab24:	4313      	orrs	r3, r2
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	3236      	adds	r2, #54	; 0x36
 800ab2a:	3201      	adds	r2, #1
 800ab2c:	7812      	ldrb	r2, [r2, #0]
 800ab2e:	0212      	lsls	r2, r2, #8
 800ab30:	4313      	orrs	r3, r2
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ab3e:	4a14      	ldr	r2, [pc, #80]	; (800ab90 <check_fs+0xd8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d101      	bne.n	800ab48 <check_fs+0x90>
		return 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	e01c      	b.n	800ab82 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3352      	adds	r3, #82	; 0x52
 800ab4c:	3303      	adds	r3, #3
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	061a      	lsls	r2, r3, #24
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3352      	adds	r3, #82	; 0x52
 800ab56:	3302      	adds	r3, #2
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	041b      	lsls	r3, r3, #16
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	3252      	adds	r2, #82	; 0x52
 800ab62:	3201      	adds	r2, #1
 800ab64:	7812      	ldrb	r2, [r2, #0]
 800ab66:	0212      	lsls	r2, r2, #8
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800ab70:	4313      	orrs	r3, r2
 800ab72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ab76:	4a06      	ldr	r2, [pc, #24]	; (800ab90 <check_fs+0xd8>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d101      	bne.n	800ab80 <check_fs+0xc8>
		return 0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	e000      	b.n	800ab82 <check_fs+0xca>

	return 1;
 800ab80:	2301      	movs	r3, #1
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	ffffaa55 	.word	0xffffaa55
 800ab90:	00544146 	.word	0x00544146

0800ab94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b096      	sub	sp, #88	; 0x58
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aba8:	68b8      	ldr	r0, [r7, #8]
 800abaa:	f7ff ff41 	bl	800aa30 <get_ldnumber>
 800abae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800abb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	da01      	bge.n	800abba <find_volume+0x26>
 800abb6:	230b      	movs	r3, #11
 800abb8:	e311      	b.n	800b1de <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800abba:	4a98      	ldr	r2, [pc, #608]	; (800ae1c <find_volume+0x288>)
 800abbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abc2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800abc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <find_volume+0x3a>
 800abca:	230c      	movs	r3, #12
 800abcc:	e307      	b.n	800b1de <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abd2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800abd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01c      	beq.n	800ac1a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800abe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abe6:	785b      	ldrb	r3, [r3, #1]
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fd fed1 	bl	8008990 <disk_status>
 800abee:	4603      	mov	r3, r0
 800abf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800abf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abf8:	f003 0301 	and.w	r3, r3, #1
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10c      	bne.n	800ac1a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800ac00:	79fb      	ldrb	r3, [r7, #7]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d007      	beq.n	800ac16 <find_volume+0x82>
 800ac06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac0a:	f003 0304 	and.w	r3, r3, #4
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ac12:	230a      	movs	r3, #10
 800ac14:	e2e3      	b.n	800b1de <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800ac16:	2300      	movs	r3, #0
 800ac18:	e2e1      	b.n	800b1de <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ac1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac20:	2200      	movs	r2, #0
 800ac22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ac24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ac30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac36:	785b      	ldrb	r3, [r3, #1]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fd fec3 	bl	80089c4 <disk_initialize>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800ac44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac48:	f003 0301 	and.w	r3, r3, #1
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ac50:	2303      	movs	r3, #3
 800ac52:	e2c4      	b.n	800b1de <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800ac54:	79fb      	ldrb	r3, [r7, #7]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d007      	beq.n	800ac6a <find_volume+0xd6>
 800ac5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac5e:	f003 0304 	and.w	r3, r3, #4
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800ac66:	230a      	movs	r3, #10
 800ac68:	e2b9      	b.n	800b1de <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac70:	7858      	ldrb	r0, [r3, #1]
 800ac72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac78:	330a      	adds	r3, #10
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	2102      	movs	r1, #2
 800ac7e:	f7fd ff07 	bl	8008a90 <disk_ioctl>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10d      	bne.n	800aca4 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac8e:	895b      	ldrh	r3, [r3, #10]
 800ac90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac94:	d306      	bcc.n	800aca4 <find_volume+0x110>
 800ac96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac9c:	895b      	ldrh	r3, [r3, #10]
 800ac9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca2:	d901      	bls.n	800aca8 <find_volume+0x114>
 800aca4:	2301      	movs	r3, #1
 800aca6:	e29a      	b.n	800b1de <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800acac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800acae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acb0:	f7ff ff02 	bl	800aab8 <check_fs>
 800acb4:	4603      	mov	r3, r0
 800acb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800acba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d153      	bne.n	800ad6a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800acc2:	2300      	movs	r3, #0
 800acc4:	643b      	str	r3, [r7, #64]	; 0x40
 800acc6:	e028      	b.n	800ad1a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800acc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800accc:	011b      	lsls	r3, r3, #4
 800acce:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800acd2:	4413      	add	r3, r2
 800acd4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800acd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd8:	3304      	adds	r3, #4
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d012      	beq.n	800ad06 <find_volume+0x172>
 800ace0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace2:	330b      	adds	r3, #11
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	061a      	lsls	r2, r3, #24
 800ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acea:	330a      	adds	r3, #10
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	041b      	lsls	r3, r3, #16
 800acf0:	4313      	orrs	r3, r2
 800acf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf4:	3209      	adds	r2, #9
 800acf6:	7812      	ldrb	r2, [r2, #0]
 800acf8:	0212      	lsls	r2, r2, #8
 800acfa:	4313      	orrs	r3, r2
 800acfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acfe:	3208      	adds	r2, #8
 800ad00:	7812      	ldrb	r2, [r2, #0]
 800ad02:	431a      	orrs	r2, r3
 800ad04:	e000      	b.n	800ad08 <find_volume+0x174>
 800ad06:	2200      	movs	r2, #0
 800ad08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	3358      	adds	r3, #88	; 0x58
 800ad0e:	443b      	add	r3, r7
 800ad10:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ad14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad16:	3301      	adds	r3, #1
 800ad18:	643b      	str	r3, [r7, #64]	; 0x40
 800ad1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad1c:	2b03      	cmp	r3, #3
 800ad1e:	d9d3      	bls.n	800acc8 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800ad20:	2300      	movs	r3, #0
 800ad22:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ad24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <find_volume+0x19c>
 800ad2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800ad30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	3358      	adds	r3, #88	; 0x58
 800ad36:	443b      	add	r3, r7
 800ad38:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ad3c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800ad3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d005      	beq.n	800ad50 <find_volume+0x1bc>
 800ad44:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad48:	f7ff feb6 	bl	800aab8 <check_fs>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	e000      	b.n	800ad52 <find_volume+0x1be>
 800ad50:	2302      	movs	r3, #2
 800ad52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800ad56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d005      	beq.n	800ad6a <find_volume+0x1d6>
 800ad5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad60:	3301      	adds	r3, #1
 800ad62:	643b      	str	r3, [r7, #64]	; 0x40
 800ad64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d9e2      	bls.n	800ad30 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ad6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad6e:	2b03      	cmp	r3, #3
 800ad70:	d101      	bne.n	800ad76 <find_volume+0x1e2>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e233      	b.n	800b1de <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800ad76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <find_volume+0x1ee>
 800ad7e:	230d      	movs	r3, #13
 800ad80:	e22d      	b.n	800b1de <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad84:	7b1b      	ldrb	r3, [r3, #12]
 800ad86:	021b      	lsls	r3, r3, #8
 800ad88:	b21a      	sxth	r2, r3
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	7adb      	ldrb	r3, [r3, #11]
 800ad8e:	b21b      	sxth	r3, r3
 800ad90:	4313      	orrs	r3, r2
 800ad92:	b21a      	sxth	r2, r3
 800ad94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad9a:	895b      	ldrh	r3, [r3, #10]
 800ad9c:	b21b      	sxth	r3, r3
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d001      	beq.n	800ada6 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800ada2:	230d      	movs	r3, #13
 800ada4:	e21b      	b.n	800b1de <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800ada6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada8:	7ddb      	ldrb	r3, [r3, #23]
 800adaa:	021b      	lsls	r3, r3, #8
 800adac:	b21a      	sxth	r2, r3
 800adae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb0:	7d9b      	ldrb	r3, [r3, #22]
 800adb2:	b21b      	sxth	r3, r3
 800adb4:	4313      	orrs	r3, r2
 800adb6:	b21b      	sxth	r3, r3
 800adb8:	b29b      	uxth	r3, r3
 800adba:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800adbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d112      	bne.n	800ade8 <find_volume+0x254>
 800adc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800adc8:	061a      	lsls	r2, r3, #24
 800adca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adcc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800add0:	041b      	lsls	r3, r3, #16
 800add2:	4313      	orrs	r3, r2
 800add4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800add6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800adda:	0212      	lsls	r2, r2, #8
 800addc:	4313      	orrs	r3, r2
 800adde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ade0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ade4:	4313      	orrs	r3, r2
 800ade6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800ade8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adee:	461a      	mov	r2, r3
 800adf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf2:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	7c1a      	ldrb	r2, [r3, #16]
 800adf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adfe:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800ae00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae06:	78db      	ldrb	r3, [r3, #3]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d009      	beq.n	800ae20 <find_volume+0x28c>
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae12:	78db      	ldrb	r3, [r3, #3]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d003      	beq.n	800ae20 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800ae18:	230d      	movs	r3, #13
 800ae1a:	e1e0      	b.n	800b1de <find_volume+0x64a>
 800ae1c:	20002d34 	.word	0x20002d34
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae26:	78db      	ldrb	r3, [r3, #3]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae2c:	fb02 f303 	mul.w	r3, r2, r3
 800ae30:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	7b5a      	ldrb	r2, [r3, #13]
 800ae36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae3c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae44:	789b      	ldrb	r3, [r3, #2]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00c      	beq.n	800ae64 <find_volume+0x2d0>
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae50:	789b      	ldrb	r3, [r3, #2]
 800ae52:	461a      	mov	r2, r3
 800ae54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae5a:	789b      	ldrb	r3, [r3, #2]
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800ae64:	230d      	movs	r3, #13
 800ae66:	e1ba      	b.n	800b1de <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800ae68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6a:	7c9b      	ldrb	r3, [r3, #18]
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	b21a      	sxth	r2, r3
 800ae70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae72:	7c5b      	ldrb	r3, [r3, #17]
 800ae74:	b21b      	sxth	r3, r3
 800ae76:	4313      	orrs	r3, r2
 800ae78:	b21b      	sxth	r3, r3
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae82:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae8a:	891b      	ldrh	r3, [r3, #8]
 800ae8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae92:	8952      	ldrh	r2, [r2, #10]
 800ae94:	0952      	lsrs	r2, r2, #5
 800ae96:	b292      	uxth	r2, r2
 800ae98:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae9c:	fb01 f202 	mul.w	r2, r1, r2
 800aea0:	1a9b      	subs	r3, r3, r2
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800aea8:	230d      	movs	r3, #13
 800aeaa:	e198      	b.n	800b1de <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800aeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeae:	7d1b      	ldrb	r3, [r3, #20]
 800aeb0:	021b      	lsls	r3, r3, #8
 800aeb2:	b21a      	sxth	r2, r3
 800aeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb6:	7cdb      	ldrb	r3, [r3, #19]
 800aeb8:	b21b      	sxth	r3, r3
 800aeba:	4313      	orrs	r3, r2
 800aebc:	b21b      	sxth	r3, r3
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800aec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d112      	bne.n	800aeee <find_volume+0x35a>
 800aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800aece:	061a      	lsls	r2, r3, #24
 800aed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800aed6:	041b      	lsls	r3, r3, #16
 800aed8:	4313      	orrs	r3, r2
 800aeda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aedc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800aee0:	0212      	lsls	r2, r2, #8
 800aee2:	4313      	orrs	r3, r2
 800aee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aee6:	f892 2020 	ldrb.w	r2, [r2, #32]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	7bdb      	ldrb	r3, [r3, #15]
 800aef2:	021b      	lsls	r3, r3, #8
 800aef4:	b21a      	sxth	r2, r3
 800aef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef8:	7b9b      	ldrb	r3, [r3, #14]
 800aefa:	b21b      	sxth	r3, r3
 800aefc:	4313      	orrs	r3, r2
 800aefe:	b21b      	sxth	r3, r3
 800af00:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800af02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af04:	2b00      	cmp	r3, #0
 800af06:	d101      	bne.n	800af0c <find_volume+0x378>
 800af08:	230d      	movs	r3, #13
 800af0a:	e168      	b.n	800b1de <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800af0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af10:	4413      	add	r3, r2
 800af12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af18:	8911      	ldrh	r1, [r2, #8]
 800af1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af20:	8952      	ldrh	r2, [r2, #10]
 800af22:	0952      	lsrs	r2, r2, #5
 800af24:	b292      	uxth	r2, r2
 800af26:	fbb1 f2f2 	udiv	r2, r1, r2
 800af2a:	b292      	uxth	r2, r2
 800af2c:	4413      	add	r3, r2
 800af2e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800af30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af34:	429a      	cmp	r2, r3
 800af36:	d201      	bcs.n	800af3c <find_volume+0x3a8>
 800af38:	230d      	movs	r3, #13
 800af3a:	e150      	b.n	800b1de <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800af3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af48:	7892      	ldrb	r2, [r2, #2]
 800af4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800af4e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <find_volume+0x3c6>
 800af56:	230d      	movs	r3, #13
 800af58:	e141      	b.n	800b1de <find_volume+0x64a>
	fmt = FS_FAT12;
 800af5a:	2301      	movs	r3, #1
 800af5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	f640 72f5 	movw	r2, #4085	; 0xff5
 800af66:	4293      	cmp	r3, r2
 800af68:	d902      	bls.n	800af70 <find_volume+0x3dc>
 800af6a:	2302      	movs	r3, #2
 800af6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800af70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af72:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800af76:	4293      	cmp	r3, r2
 800af78:	d902      	bls.n	800af80 <find_volume+0x3ec>
 800af7a:	2303      	movs	r3, #3
 800af7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	3302      	adds	r3, #2
 800af84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af8a:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af92:	461a      	mov	r2, r3
 800af94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af96:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800af98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af9c:	4413      	add	r3, r2
 800af9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afa0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800afa4:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800afa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	4413      	add	r3, r2
 800afac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800afb2:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800afb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afb8:	2b03      	cmp	r3, #3
 800afba:	d124      	bne.n	800b006 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afc2:	891b      	ldrh	r3, [r3, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <find_volume+0x438>
 800afc8:	230d      	movs	r3, #13
 800afca:	e108      	b.n	800b1de <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afd2:	061a      	lsls	r2, r3, #24
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800afda:	041b      	lsls	r3, r3, #16
 800afdc:	4313      	orrs	r3, r2
 800afde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afe0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800afe4:	0212      	lsls	r2, r2, #8
 800afe6:	4313      	orrs	r3, r2
 800afe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afea:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800afee:	4313      	orrs	r3, r2
 800aff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aff2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aff6:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	647b      	str	r3, [r7, #68]	; 0x44
 800b004:	e02b      	b.n	800b05e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b00c:	891b      	ldrh	r3, [r3, #8]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <find_volume+0x482>
 800b012:	230d      	movs	r3, #13
 800b014:	e0e3      	b.n	800b1de <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b01c:	6a1a      	ldr	r2, [r3, #32]
 800b01e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b020:	4413      	add	r3, r2
 800b022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b024:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b028:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b02a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d105      	bne.n	800b03e <find_volume+0x4aa>
 800b032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	005b      	lsls	r3, r3, #1
 800b03c:	e00e      	b.n	800b05c <find_volume+0x4c8>
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b044:	695a      	ldr	r2, [r3, #20]
 800b046:	4613      	mov	r3, r2
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	4413      	add	r3, r2
 800b04c:	085a      	lsrs	r2, r3, #1
 800b04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b05c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b064:	699a      	ldr	r2, [r3, #24]
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b06c:	895b      	ldrh	r3, [r3, #10]
 800b06e:	4619      	mov	r1, r3
 800b070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b072:	440b      	add	r3, r1
 800b074:	3b01      	subs	r3, #1
 800b076:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b078:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800b07c:	8949      	ldrh	r1, [r1, #10]
 800b07e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b082:	429a      	cmp	r2, r3
 800b084:	d201      	bcs.n	800b08a <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800b086:	230d      	movs	r3, #13
 800b088:	e0a9      	b.n	800b1de <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b090:	461a      	mov	r2, r3
 800b092:	f04f 33ff 	mov.w	r3, #4294967295
 800b096:	6113      	str	r3, [r2, #16]
 800b098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b0a6:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ae:	2280      	movs	r2, #128	; 0x80
 800b0b0:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b0b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d17a      	bne.n	800b1b0 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b0c0:	021b      	lsls	r3, r3, #8
 800b0c2:	b21a      	sxth	r2, r3
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0ca:	b21b      	sxth	r3, r3
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	b21b      	sxth	r3, r3
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d16d      	bne.n	800b1b0 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b0d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0dc:	f7fd ff84 	bl	8008fe8 <move_window>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d164      	bne.n	800b1b0 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800b0f6:	021b      	lsls	r3, r3, #8
 800b0f8:	b21a      	sxth	r2, r3
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b100:	b21b      	sxth	r3, r3
 800b102:	4313      	orrs	r3, r2
 800b104:	b21b      	sxth	r3, r3
 800b106:	4a38      	ldr	r2, [pc, #224]	; (800b1e8 <find_volume+0x654>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d151      	bne.n	800b1b0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10e:	78db      	ldrb	r3, [r3, #3]
 800b110:	061a      	lsls	r2, r3, #24
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	789b      	ldrb	r3, [r3, #2]
 800b116:	041b      	lsls	r3, r3, #16
 800b118:	4313      	orrs	r3, r2
 800b11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b11c:	7852      	ldrb	r2, [r2, #1]
 800b11e:	0212      	lsls	r2, r2, #8
 800b120:	4313      	orrs	r3, r2
 800b122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b124:	7812      	ldrb	r2, [r2, #0]
 800b126:	4313      	orrs	r3, r2
 800b128:	4a30      	ldr	r2, [pc, #192]	; (800b1ec <find_volume+0x658>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d140      	bne.n	800b1b0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b130:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800b134:	061a      	lsls	r2, r3, #24
 800b136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b138:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800b13c:	041b      	lsls	r3, r3, #16
 800b13e:	4313      	orrs	r3, r2
 800b140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b142:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800b146:	0212      	lsls	r2, r2, #8
 800b148:	4313      	orrs	r3, r2
 800b14a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b14c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800b150:	4313      	orrs	r3, r2
 800b152:	4a27      	ldr	r2, [pc, #156]	; (800b1f0 <find_volume+0x65c>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d12b      	bne.n	800b1b0 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b15e:	061a      	lsls	r2, r3, #24
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800b166:	041b      	lsls	r3, r3, #16
 800b168:	4313      	orrs	r3, r2
 800b16a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b16c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800b170:	0212      	lsls	r2, r2, #8
 800b172:	4313      	orrs	r3, r2
 800b174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b176:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800b17a:	4313      	orrs	r3, r2
 800b17c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b17e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b182:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b186:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800b18a:	061a      	lsls	r2, r3, #24
 800b18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800b192:	041b      	lsls	r3, r3, #16
 800b194:	4313      	orrs	r3, r2
 800b196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b198:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800b19c:	0212      	lsls	r2, r2, #8
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1a2:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b1ae:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1bc:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800b1be:	4b0d      	ldr	r3, [pc, #52]	; (800b1f4 <find_volume+0x660>)
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	4b0b      	ldr	r3, [pc, #44]	; (800b1f4 <find_volume+0x660>)
 800b1c8:	801a      	strh	r2, [r3, #0]
 800b1ca:	4b0a      	ldr	r3, [pc, #40]	; (800b1f4 <find_volume+0x660>)
 800b1cc:	881a      	ldrh	r2, [r3, #0]
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1d4:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b1d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b1d8:	f7fd fe8a 	bl	8008ef0 <clear_lock>
#endif

	return FR_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3758      	adds	r7, #88	; 0x58
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	ffffaa55 	.word	0xffffaa55
 800b1ec:	41615252 	.word	0x41615252
 800b1f0:	61417272 	.word	0x61417272
 800b1f4:	20002d38 	.word	0x20002d38

0800b1f8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d02a      	beq.n	800b260 <validate+0x68>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d024      	beq.n	800b260 <validate+0x68>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d01b      	beq.n	800b260 <validate+0x68>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b234:	88da      	ldrh	r2, [r3, #6]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b23c:	889b      	ldrh	r3, [r3, #4]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d10e      	bne.n	800b260 <validate+0x68>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b24e:	785b      	ldrb	r3, [r3, #1]
 800b250:	4618      	mov	r0, r3
 800b252:	f7fd fb9d 	bl	8008990 <disk_status>
 800b256:	4603      	mov	r3, r0
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800b260:	2309      	movs	r3, #9
 800b262:	e000      	b.n	800b266 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	4613      	mov	r3, r2
 800b27c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b282:	f107 0310 	add.w	r3, r7, #16
 800b286:	4618      	mov	r0, r3
 800b288:	f7ff fbd2 	bl	800aa30 <get_ldnumber>
 800b28c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	2b00      	cmp	r3, #0
 800b292:	da01      	bge.n	800b298 <f_mount+0x28>
 800b294:	230b      	movs	r3, #11
 800b296:	e02f      	b.n	800b2f8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b298:	4a19      	ldr	r2, [pc, #100]	; (800b300 <f_mount+0x90>)
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d007      	beq.n	800b2b8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800b2a8:	69b8      	ldr	r0, [r7, #24]
 800b2aa:	f7fd fe21 	bl	8008ef0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d004      	beq.n	800b2c8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	490d      	ldr	r1, [pc, #52]	; (800b300 <f_mount+0x90>)
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <f_mount+0x6e>
 800b2d8:	79fb      	ldrb	r3, [r7, #7]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d001      	beq.n	800b2e2 <f_mount+0x72>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	e00a      	b.n	800b2f8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b2e2:	f107 0108 	add.w	r1, r7, #8
 800b2e6:	f107 030c 	add.w	r3, r7, #12
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7ff fc51 	bl	800ab94 <find_volume>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3720      	adds	r7, #32
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	20002d34 	.word	0x20002d34

0800b304 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b312:	f843 0c4c 	str.w	r0, [r3, #-76]
 800b316:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b31a:	f843 1c50 	str.w	r1, [r3, #-80]
 800b31e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b322:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b326:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b32a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <f_open+0x32>
 800b332:	2309      	movs	r3, #9
 800b334:	e2f7      	b.n	800b926 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800b336:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b33a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b33e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b342:	461a      	mov	r2, r3
 800b344:	2300      	movs	r3, #0
 800b346:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b348:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b34c:	461a      	mov	r2, r3
 800b34e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b352:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b356:	f003 031f 	and.w	r3, r3, #31
 800b35a:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b35e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b362:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b366:	f023 0301 	bic.w	r3, r3, #1
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	f107 0118 	add.w	r1, r7, #24
 800b370:	3910      	subs	r1, #16
 800b372:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b376:	3b18      	subs	r3, #24
 800b378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7ff fc09 	bl	800ab94 <find_volume>
 800b382:	4603      	mov	r3, r0
 800b384:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b388:	f102 0217 	add.w	r2, r2, #23
 800b38c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b38e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b392:	f103 0317 	add.w	r3, r3, #23
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f040 82bf 	bne.w	800b91c <f_open+0x618>
		INIT_BUF(dj);
 800b39e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f107 0318 	add.w	r3, r7, #24
 800b3a8:	3b04      	subs	r3, #4
 800b3aa:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800b3ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	4bd4      	ldr	r3, [pc, #848]	; (800b708 <f_open+0x404>)
 800b3b6:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800b3ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3be:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800b3c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b3c6:	3b18      	subs	r3, #24
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff faba 	bl	800a944 <follow_path>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b3d6:	f102 0217 	add.w	r2, r2, #23
 800b3da:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800b3dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3e0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800b3e4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b3e8:	f102 0210 	add.w	r2, r2, #16
 800b3ec:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b3ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b3f2:	f103 0317 	add.w	r3, r3, #23
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d126      	bne.n	800b44a <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800b3fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b400:	f103 0310 	add.w	r3, r3, #16
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d106      	bne.n	800b418 <f_open+0x114>
				res = FR_INVALID_NAME;
 800b40a:	2306      	movs	r3, #6
 800b40c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b410:	f102 0217 	add.w	r2, r2, #23
 800b414:	7013      	strb	r3, [r2, #0]
 800b416:	e018      	b.n	800b44a <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b418:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b41c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b420:	f023 0301 	bic.w	r3, r3, #1
 800b424:	2b00      	cmp	r3, #0
 800b426:	bf14      	ite	ne
 800b428:	2301      	movne	r3, #1
 800b42a:	2300      	moveq	r3, #0
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	461a      	mov	r2, r3
 800b430:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b434:	3b18      	subs	r3, #24
 800b436:	4611      	mov	r1, r2
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fd fbc3 	bl	8008bc4 <chk_lock>
 800b43e:	4603      	mov	r3, r0
 800b440:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b444:	f102 0217 	add.w	r2, r2, #23
 800b448:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b44a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b44e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b452:	f003 031c 	and.w	r3, r3, #28
 800b456:	2b00      	cmp	r3, #0
 800b458:	f000 813c 	beq.w	800b6d4 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800b45c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b460:	f103 0317 	add.w	r3, r3, #23
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d02e      	beq.n	800b4c8 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b46a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b46e:	f103 0317 	add.w	r3, r3, #23
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	2b04      	cmp	r3, #4
 800b476:	d112      	bne.n	800b49e <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b478:	f7fd fc14 	bl	8008ca4 <enq_lock>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d007      	beq.n	800b492 <f_open+0x18e>
 800b482:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b486:	3b18      	subs	r3, #24
 800b488:	4618      	mov	r0, r3
 800b48a:	f7fe ff79 	bl	800a380 <dir_register>
 800b48e:	4603      	mov	r3, r0
 800b490:	e000      	b.n	800b494 <f_open+0x190>
 800b492:	2312      	movs	r3, #18
 800b494:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b498:	f102 0217 	add.w	r2, r2, #23
 800b49c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b49e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b4a8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b4ac:	f043 0308 	orr.w	r3, r3, #8
 800b4b0:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800b4b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b4b8:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800b4bc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b4c0:	f102 0210 	add.w	r2, r2, #16
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	e01f      	b.n	800b508 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b4c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b4cc:	f103 0310 	add.w	r3, r3, #16
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	330b      	adds	r3, #11
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	f003 0311 	and.w	r3, r3, #17
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d006      	beq.n	800b4ec <f_open+0x1e8>
					res = FR_DENIED;
 800b4de:	2307      	movs	r3, #7
 800b4e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b4e4:	f102 0217 	add.w	r2, r2, #23
 800b4e8:	7013      	strb	r3, [r2, #0]
 800b4ea:	e00d      	b.n	800b508 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b4ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b4f0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b4f4:	f003 0304 	and.w	r3, r3, #4
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d005      	beq.n	800b508 <f_open+0x204>
						res = FR_EXIST;
 800b4fc:	2308      	movs	r3, #8
 800b4fe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b502:	f102 0217 	add.w	r2, r2, #23
 800b506:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b508:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b50c:	f103 0317 	add.w	r3, r3, #23
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	f040 8113 	bne.w	800b73e <f_open+0x43a>
 800b518:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b51c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b520:	f003 0308 	and.w	r3, r3, #8
 800b524:	2b00      	cmp	r3, #0
 800b526:	f000 810a 	beq.w	800b73e <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800b52a:	f7fd f9cf 	bl	80088cc <get_fattime>
 800b52e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b532:	f103 030c 	add.w	r3, r3, #12
 800b536:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b538:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b53c:	f103 0310 	add.w	r3, r3, #16
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	330e      	adds	r3, #14
 800b544:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b548:	f102 020c 	add.w	r2, r2, #12
 800b54c:	6812      	ldr	r2, [r2, #0]
 800b54e:	b2d2      	uxtb	r2, r2
 800b550:	701a      	strb	r2, [r3, #0]
 800b552:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b556:	f103 030c 	add.w	r3, r3, #12
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	0a1b      	lsrs	r3, r3, #8
 800b560:	b29a      	uxth	r2, r3
 800b562:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b566:	f103 0310 	add.w	r3, r3, #16
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	330f      	adds	r3, #15
 800b56e:	b2d2      	uxtb	r2, r2
 800b570:	701a      	strb	r2, [r3, #0]
 800b572:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b576:	f103 030c 	add.w	r3, r3, #12
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	0c1a      	lsrs	r2, r3, #16
 800b57e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b582:	f103 0310 	add.w	r3, r3, #16
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3310      	adds	r3, #16
 800b58a:	b2d2      	uxtb	r2, r2
 800b58c:	701a      	strb	r2, [r3, #0]
 800b58e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b592:	f103 030c 	add.w	r3, r3, #12
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	0e1a      	lsrs	r2, r3, #24
 800b59a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b59e:	f103 0310 	add.w	r3, r3, #16
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3311      	adds	r3, #17
 800b5a6:	b2d2      	uxtb	r2, r2
 800b5a8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800b5aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b5ae:	f103 0310 	add.w	r3, r3, #16
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	330b      	adds	r3, #11
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800b5ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b5be:	f103 0310 	add.w	r3, r3, #16
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	331c      	adds	r3, #28
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	701a      	strb	r2, [r3, #0]
 800b5ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b5ce:	f103 0310 	add.w	r3, r3, #16
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	331d      	adds	r3, #29
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	701a      	strb	r2, [r3, #0]
 800b5da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b5de:	f103 0310 	add.w	r3, r3, #16
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	331e      	adds	r3, #30
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	701a      	strb	r2, [r3, #0]
 800b5ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b5ee:	f103 0310 	add.w	r3, r3, #16
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	331f      	adds	r3, #31
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800b5fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b5fe:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b602:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b606:	f102 0210 	add.w	r2, r2, #16
 800b60a:	6811      	ldr	r1, [r2, #0]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7fe fc00 	bl	8009e12 <ld_clust>
 800b612:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b616:	f103 0308 	add.w	r3, r3, #8
 800b61a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800b61c:	2100      	movs	r1, #0
 800b61e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b622:	f103 0310 	add.w	r3, r3, #16
 800b626:	6818      	ldr	r0, [r3, #0]
 800b628:	f7fe fc22 	bl	8009e70 <st_clust>
				dj.fs->wflag = 1;
 800b62c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b630:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b638:	2201      	movs	r2, #1
 800b63a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800b63c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b640:	f103 0308 	add.w	r3, r3, #8
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d079      	beq.n	800b73e <f_open+0x43a>
					dw = dj.fs->winsect;
 800b64a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b64e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b658:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b65c:	f102 020c 	add.w	r2, r2, #12
 800b660:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800b662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b666:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b66a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b66e:	f102 0208 	add.w	r2, r2, #8
 800b672:	6811      	ldr	r1, [r2, #0]
 800b674:	4618      	mov	r0, r3
 800b676:	f7fe f81c 	bl	80096b2 <remove_chain>
 800b67a:	4603      	mov	r3, r0
 800b67c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b680:	f102 0217 	add.w	r2, r2, #23
 800b684:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800b686:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b68a:	f103 0317 	add.w	r3, r3, #23
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d154      	bne.n	800b73e <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800b694:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b698:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800b69c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b6a0:	f103 0308 	add.w	r3, r3, #8
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b6ac:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800b6ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b6b2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b6b6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b6ba:	f102 020c 	add.w	r2, r2, #12
 800b6be:	6811      	ldr	r1, [r2, #0]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7fd fc91 	bl	8008fe8 <move_window>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b6cc:	f102 0217 	add.w	r2, r2, #23
 800b6d0:	7013      	strb	r3, [r2, #0]
 800b6d2:	e034      	b.n	800b73e <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800b6d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b6d8:	f103 0317 	add.w	r3, r3, #23
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d12d      	bne.n	800b73e <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800b6e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b6e6:	f103 0310 	add.w	r3, r3, #16
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	330b      	adds	r3, #11
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	f003 0310 	and.w	r3, r3, #16
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d009      	beq.n	800b70c <f_open+0x408>
					res = FR_NO_FILE;
 800b6f8:	2304      	movs	r3, #4
 800b6fa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b6fe:	f102 0217 	add.w	r2, r2, #23
 800b702:	7013      	strb	r3, [r2, #0]
 800b704:	e01b      	b.n	800b73e <f_open+0x43a>
 800b706:	bf00      	nop
 800b708:	20002d54 	.word	0x20002d54
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800b70c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b710:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b714:	f003 0302 	and.w	r3, r3, #2
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d010      	beq.n	800b73e <f_open+0x43a>
 800b71c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b720:	f103 0310 	add.w	r3, r3, #16
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	330b      	adds	r3, #11
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d005      	beq.n	800b73e <f_open+0x43a>
						res = FR_DENIED;
 800b732:	2307      	movs	r3, #7
 800b734:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b738:	f102 0217 	add.w	r2, r2, #23
 800b73c:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800b73e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b742:	f103 0317 	add.w	r3, r3, #23
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d157      	bne.n	800b7fc <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b74c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b750:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b754:	f003 0308 	and.w	r3, r3, #8
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00a      	beq.n	800b772 <f_open+0x46e>
				mode |= FA__WRITTEN;
 800b75c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b760:	461a      	mov	r2, r3
 800b762:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b766:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b76a:	f043 0320 	orr.w	r3, r3, #32
 800b76e:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800b772:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b776:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b77a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b780:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b784:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800b788:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b78c:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800b78e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b792:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b79a:	461a      	mov	r2, r3
 800b79c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b7a0:	f103 0310 	add.w	r3, r3, #16
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b7a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b7ac:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b7b0:	f023 0301 	bic.w	r3, r3, #1
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	bf14      	ite	ne
 800b7b8:	2301      	movne	r3, #1
 800b7ba:	2300      	moveq	r3, #0
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b7c4:	3b18      	subs	r3, #24
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fd fa8f 	bl	8008cec <inc_lock>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b7d4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b7d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7dc:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800b7de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b7e2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b7e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d105      	bne.n	800b7fc <f_open+0x4f8>
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b7f6:	f102 0217 	add.w	r2, r2, #23
 800b7fa:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800b7fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b800:	f103 0317 	add.w	r3, r3, #23
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	f040 8088 	bne.w	800b91c <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800b80c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b810:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b818:	461a      	mov	r2, r3
 800b81a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b81e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b822:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800b824:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b828:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b82c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b830:	2200      	movs	r2, #0
 800b832:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800b834:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b838:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b83c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b840:	f102 0210 	add.w	r2, r2, #16
 800b844:	6811      	ldr	r1, [r2, #0]
 800b846:	4618      	mov	r0, r3
 800b848:	f7fe fae3 	bl	8009e12 <ld_clust>
 800b84c:	4602      	mov	r2, r0
 800b84e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b852:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b85a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800b85c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b860:	f103 0310 	add.w	r3, r3, #16
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	331f      	adds	r3, #31
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	061a      	lsls	r2, r3, #24
 800b86c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b870:	f103 0310 	add.w	r3, r3, #16
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	331e      	adds	r3, #30
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	041b      	lsls	r3, r3, #16
 800b87c:	4313      	orrs	r3, r2
 800b87e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b882:	f102 0210 	add.w	r2, r2, #16
 800b886:	6812      	ldr	r2, [r2, #0]
 800b888:	321d      	adds	r2, #29
 800b88a:	7812      	ldrb	r2, [r2, #0]
 800b88c:	0212      	lsls	r2, r2, #8
 800b88e:	4313      	orrs	r3, r2
 800b890:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b894:	f102 0210 	add.w	r2, r2, #16
 800b898:	6812      	ldr	r2, [r2, #0]
 800b89a:	321c      	adds	r2, #28
 800b89c:	7812      	ldrb	r2, [r2, #0]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b8a4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800b8a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b8ac:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800b8ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8b2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b8b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	2300      	movs	r3, #0
 800b8be:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800b8c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8c4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800b8d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8d6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b8da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8de:	461a      	mov	r2, r3
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800b8e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8e8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b8ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b8f0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800b8f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b8f8:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800b8fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8fe:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b90c:	88da      	ldrh	r2, [r3, #6]
 800b90e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b912:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b91a:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800b91c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b920:	f103 0317 	add.w	r3, r3, #23
 800b924:	781b      	ldrb	r3, [r3, #0]
}
 800b926:	4618      	mov	r0, r3
 800b928:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop

0800b934 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	; 0x28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
 800b940:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2200      	movs	r2, #0
 800b94a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f7ff fc53 	bl	800b1f8 <validate>
 800b952:	4603      	mov	r3, r0
 800b954:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b956:	7dfb      	ldrb	r3, [r7, #23]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <f_write+0x2c>
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
 800b95e:	e21e      	b.n	800bd9e <f_write+0x46a>
	if (fp->err)							/* Check error */
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b966:	79db      	ldrb	r3, [r3, #7]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d004      	beq.n	800b976 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b972:	79db      	ldrb	r3, [r3, #7]
 800b974:	e213      	b.n	800bd9e <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b97c:	799b      	ldrb	r3, [r3, #6]
 800b97e:	f003 0302 	and.w	r3, r3, #2
 800b982:	2b00      	cmp	r3, #0
 800b984:	d101      	bne.n	800b98a <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800b986:	2307      	movs	r3, #7
 800b988:	e209      	b.n	800bd9e <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b990:	689a      	ldr	r2, [r3, #8]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	441a      	add	r2, r3
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	f080 81d9 	bcs.w	800bd56 <f_write+0x422>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800b9a8:	e1d5      	b.n	800bd56 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b9b8:	6812      	ldr	r2, [r2, #0]
 800b9ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b9be:	8952      	ldrh	r2, [r2, #10]
 800b9c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9c4:	fb01 f202 	mul.w	r2, r1, r2
 800b9c8:	1a9b      	subs	r3, r3, r2
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f040 8169 	bne.w	800bca2 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b9de:	6812      	ldr	r2, [r2, #0]
 800b9e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b9e4:	8952      	ldrh	r2, [r2, #10]
 800b9e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9ea:	b2da      	uxtb	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f8:	789b      	ldrb	r3, [r3, #2]
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	4013      	ands	r3, r2
 800ba00:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800ba02:	7dbb      	ldrb	r3, [r7, #22]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d15f      	bne.n	800bac8 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d111      	bne.n	800ba38 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d126      	bne.n	800ba72 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fd fea0 	bl	8009774 <create_chain>
 800ba34:	6278      	str	r0, [r7, #36]	; 0x24
 800ba36:	e01c      	b.n	800ba72 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d009      	beq.n	800ba58 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f7fd ff38 	bl	80098c4 <clmt_clust>
 800ba54:	6278      	str	r0, [r7, #36]	; 0x24
 800ba56:	e00c      	b.n	800ba72 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba66:	695b      	ldr	r3, [r3, #20]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	4610      	mov	r0, r2
 800ba6c:	f7fd fe82 	bl	8009774 <create_chain>
 800ba70:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f000 8173 	beq.w	800bd60 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d106      	bne.n	800ba8e <f_write+0x15a>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba86:	2202      	movs	r2, #2
 800ba88:	71da      	strb	r2, [r3, #7]
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	e187      	b.n	800bd9e <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba94:	d106      	bne.n	800baa4 <f_write+0x170>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	71da      	strb	r2, [r3, #7]
 800baa0:	2301      	movs	r3, #1
 800baa2:	e17c      	b.n	800bd9e <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baaa:	461a      	mov	r2, r3
 800baac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baae:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bab6:	691b      	ldr	r3, [r3, #16]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d105      	bne.n	800bac8 <f_write+0x194>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bac2:	461a      	mov	r2, r3
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bace:	799b      	ldrb	r3, [r3, #6]
 800bad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d023      	beq.n	800bb20 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bae4:	7858      	ldrb	r0, [r3, #1]
 800bae6:	68f9      	ldr	r1, [r7, #12]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baee:	699a      	ldr	r2, [r3, #24]
 800baf0:	2301      	movs	r3, #1
 800baf2:	f7fc ffad 	bl	8008a50 <disk_write>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d006      	beq.n	800bb0a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb02:	2201      	movs	r2, #1
 800bb04:	71da      	strb	r2, [r3, #7]
 800bb06:	2301      	movs	r3, #1
 800bb08:	e149      	b.n	800bd9e <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb10:	799b      	ldrb	r3, [r3, #6]
 800bb12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb1e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb2e:	695b      	ldr	r3, [r3, #20]
 800bb30:	4619      	mov	r1, r3
 800bb32:	4610      	mov	r0, r2
 800bb34:	f7fd fb49 	bl	80091ca <clust2sect>
 800bb38:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d106      	bne.n	800bb4e <f_write+0x21a>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb46:	2202      	movs	r2, #2
 800bb48:	71da      	strb	r2, [r3, #7]
 800bb4a:	2302      	movs	r3, #2
 800bb4c:	e127      	b.n	800bd9e <f_write+0x46a>
			sect += csect;
 800bb4e:	7dbb      	ldrb	r3, [r7, #22]
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	4413      	add	r3, r2
 800bb54:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb62:	895b      	ldrh	r3, [r3, #10]
 800bb64:	461a      	mov	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb6c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d069      	beq.n	800bc48 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800bb74:	7dba      	ldrb	r2, [r7, #22]
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	4413      	add	r3, r2
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb80:	6812      	ldr	r2, [r2, #0]
 800bb82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb86:	7892      	ldrb	r2, [r2, #2]
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d90a      	bls.n	800bba2 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb98:	789b      	ldrb	r3, [r3, #2]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	7dbb      	ldrb	r3, [r7, #22]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbae:	7858      	ldrb	r0, [r3, #1]
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	69b9      	ldr	r1, [r7, #24]
 800bbb6:	f7fc ff4b 	bl	8008a50 <disk_write>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d006      	beq.n	800bbce <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	71da      	strb	r2, [r3, #7]
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e0e7      	b.n	800bd9e <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbd4:	699a      	ldr	r2, [r3, #24]
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	69fa      	ldr	r2, [r7, #28]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d926      	bls.n	800bc2e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbe8:	699a      	ldr	r2, [r3, #24]
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbf4:	6812      	ldr	r2, [r2, #0]
 800bbf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbfa:	8952      	ldrh	r2, [r2, #10]
 800bbfc:	fb02 f303 	mul.w	r3, r2, r3
 800bc00:	69ba      	ldr	r2, [r7, #24]
 800bc02:	18d1      	adds	r1, r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc10:	895b      	ldrh	r3, [r3, #10]
 800bc12:	461a      	mov	r2, r3
 800bc14:	f7fc ff5a 	bl	8008acc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc1e:	799b      	ldrb	r3, [r3, #6]
 800bc20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc2c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc3a:	895b      	ldrh	r3, [r3, #10]
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	fb02 f303 	mul.w	r3, r2, r3
 800bc44:	623b      	str	r3, [r7, #32]
				continue;
 800bc46:	e06e      	b.n	800bd26 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	693a      	ldr	r2, [r7, #16]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d01f      	beq.n	800bc96 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc5c:	689a      	ldr	r2, [r3, #8]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d215      	bcs.n	800bc96 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc76:	7858      	ldrb	r0, [r3, #1]
 800bc78:	68f9      	ldr	r1, [r7, #12]
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	f7fc fec7 	bl	8008a10 <disk_read>
 800bc82:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d006      	beq.n	800bc96 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc8e:	2201      	movs	r2, #1
 800bc90:	71da      	strb	r2, [r3, #7]
 800bc92:	2301      	movs	r3, #1
 800bc94:	e083      	b.n	800bd9e <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcae:	895b      	ldrh	r3, [r3, #10]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	68fa      	ldr	r2, [r7, #12]
 800bcbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bcc0:	6812      	ldr	r2, [r2, #0]
 800bcc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bcc6:	8952      	ldrh	r2, [r2, #10]
 800bcc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bccc:	fb01 f202 	mul.w	r2, r1, r2
 800bcd0:	1a9b      	subs	r3, r3, r2
 800bcd2:	1ac3      	subs	r3, r0, r3
 800bcd4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bcd6:	6a3a      	ldr	r2, [r7, #32]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d901      	bls.n	800bce2 <f_write+0x3ae>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bcf0:	6812      	ldr	r2, [r2, #0]
 800bcf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bcf6:	8952      	ldrh	r2, [r2, #10]
 800bcf8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcfc:	fb01 f202 	mul.w	r2, r1, r2
 800bd00:	1a9b      	subs	r3, r3, r2
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	4413      	add	r3, r2
 800bd06:	6a3a      	ldr	r2, [r7, #32]
 800bd08:	69b9      	ldr	r1, [r7, #24]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fc fede 	bl	8008acc <mem_cpy>
		fp->flag |= FA__DIRTY;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd16:	799b      	ldrb	r3, [r3, #6]
 800bd18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd1c:	b2da      	uxtb	r2, r3
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd24:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bd26:	69ba      	ldr	r2, [r7, #24]
 800bd28:	6a3b      	ldr	r3, [r7, #32]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	61bb      	str	r3, [r7, #24]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd34:	689a      	ldr	r2, [r3, #8]
 800bd36:	6a3b      	ldr	r3, [r7, #32]
 800bd38:	4413      	add	r3, r2
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd40:	6093      	str	r3, [r2, #8]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	6a3b      	ldr	r3, [r7, #32]
 800bd48:	441a      	add	r2, r3
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	601a      	str	r2, [r3, #0]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	1ad3      	subs	r3, r2, r3
 800bd54:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f47f ae26 	bne.w	800b9aa <f_write+0x76>
 800bd5e:	e000      	b.n	800bd62 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bd60:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd68:	689a      	ldr	r2, [r3, #8]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d907      	bls.n	800bd86 <f_write+0x452>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd84:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd8c:	799b      	ldrb	r3, [r3, #6]
 800bd8e:	f043 0320 	orr.w	r3, r3, #32
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd9a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3728      	adds	r7, #40	; 0x28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b086      	sub	sp, #24
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7ff fa22 	bl	800b1f8 <validate>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f040 80bc 	bne.w	800bf38 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdc6:	799b      	ldrb	r3, [r3, #6]
 800bdc8:	f003 0320 	and.w	r3, r3, #32
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f000 80b3 	beq.w	800bf38 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdd8:	799b      	ldrb	r3, [r3, #6]
 800bdda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d01e      	beq.n	800be20 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdee:	7858      	ldrb	r0, [r3, #1]
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf8:	699a      	ldr	r2, [r3, #24]
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	f7fc fe28 	bl	8008a50 <disk_write>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800be06:	2301      	movs	r3, #1
 800be08:	e097      	b.n	800bf3a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be10:	799b      	ldrb	r3, [r3, #6]
 800be12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be16:	b2da      	uxtb	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be1e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be2e:	69db      	ldr	r3, [r3, #28]
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f7fd f8d8 	bl	8008fe8 <move_window>
 800be38:	4603      	mov	r3, r0
 800be3a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d17a      	bne.n	800bf38 <f_sync+0x192>
				dir = fp->dir_ptr;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	330b      	adds	r3, #11
 800be50:	781a      	ldrb	r2, [r3, #0]
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	330b      	adds	r3, #11
 800be56:	f042 0220 	orr.w	r2, r2, #32
 800be5a:	b2d2      	uxtb	r2, r2
 800be5c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be64:	68da      	ldr	r2, [r3, #12]
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	331c      	adds	r3, #28
 800be6a:	b2d2      	uxtb	r2, r2
 800be6c:	701a      	strb	r2, [r3, #0]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	b29b      	uxth	r3, r3
 800be78:	0a1b      	lsrs	r3, r3, #8
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	331d      	adds	r3, #29
 800be80:	b2d2      	uxtb	r2, r2
 800be82:	701a      	strb	r2, [r3, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	0c1a      	lsrs	r2, r3, #16
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	331e      	adds	r3, #30
 800be92:	b2d2      	uxtb	r2, r2
 800be94:	701a      	strb	r2, [r3, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	0e1a      	lsrs	r2, r3, #24
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	331f      	adds	r3, #31
 800bea4:	b2d2      	uxtb	r2, r2
 800bea6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	4619      	mov	r1, r3
 800beb2:	6938      	ldr	r0, [r7, #16]
 800beb4:	f7fd ffdc 	bl	8009e70 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800beb8:	f7fc fd08 	bl	80088cc <get_fattime>
 800bebc:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	3316      	adds	r3, #22
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	b2d2      	uxtb	r2, r2
 800bec6:	701a      	strb	r2, [r3, #0]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	b29b      	uxth	r3, r3
 800becc:	0a1b      	lsrs	r3, r3, #8
 800bece:	b29a      	uxth	r2, r3
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	3317      	adds	r3, #23
 800bed4:	b2d2      	uxtb	r2, r2
 800bed6:	701a      	strb	r2, [r3, #0]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	0c1a      	lsrs	r2, r3, #16
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	3318      	adds	r3, #24
 800bee0:	b2d2      	uxtb	r2, r2
 800bee2:	701a      	strb	r2, [r3, #0]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	0e1a      	lsrs	r2, r3, #24
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	3319      	adds	r3, #25
 800beec:	b2d2      	uxtb	r2, r2
 800beee:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	3312      	adds	r3, #18
 800bef4:	2200      	movs	r2, #0
 800bef6:	701a      	strb	r2, [r3, #0]
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	3313      	adds	r3, #19
 800befc:	2200      	movs	r2, #0
 800befe:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf06:	799b      	ldrb	r3, [r3, #6]
 800bf08:	f023 0320 	bic.w	r3, r3, #32
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf14:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf22:	2201      	movs	r2, #1
 800bf24:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fd f88c 	bl	800904c <sync_fs>
 800bf34:	4603      	mov	r3, r0
 800bf36:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3718      	adds	r7, #24
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b084      	sub	sp, #16
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff ff2b 	bl	800bda6 <f_sync>
 800bf50:	4603      	mov	r3, r0
 800bf52:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d119      	bne.n	800bf8e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff f94c 	bl	800b1f8 <validate>
 800bf60:	4603      	mov	r3, r0
 800bf62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d111      	bne.n	800bf8e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fc ff78 	bl	8008e68 <dec_lock>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d105      	bne.n	800bf8e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf88:	461a      	mov	r2, r3
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b090      	sub	sp, #64	; 0x40
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f7ff f928 	bl	800b1f8 <validate>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800bfae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <f_lseek+0x24>
 800bfb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bfba:	e2da      	b.n	800c572 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc2:	79db      	ldrb	r3, [r3, #7]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d004      	beq.n	800bfd2 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfce:	79db      	ldrb	r3, [r3, #7]
 800bfd0:	e2cf      	b.n	800c572 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f000 8124 	beq.w	800c228 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe6:	d16c      	bne.n	800c0c2 <f_lseek+0x12a>
			tbl = fp->cltbl;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff4:	1d1a      	adds	r2, r3, #4
 800bff6:	627a      	str	r2, [r7, #36]	; 0x24
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	617b      	str	r3, [r7, #20]
 800bffc:	2302      	movs	r3, #2
 800bffe:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d046      	beq.n	800c09e <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c012:	613b      	str	r3, [r7, #16]
 800c014:	2300      	movs	r3, #0
 800c016:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01a:	3302      	adds	r3, #2
 800c01c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	60fb      	str	r3, [r7, #12]
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	3301      	adds	r3, #1
 800c026:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c032:	4618      	mov	r0, r3
 800c034:	f7fd f8ee 	bl	8009214 <get_fat>
 800c038:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d806      	bhi.n	800c04e <f_lseek+0xb6>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c046:	2202      	movs	r2, #2
 800c048:	71da      	strb	r2, [r3, #7]
 800c04a:	2302      	movs	r3, #2
 800c04c:	e291      	b.n	800c572 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c054:	d106      	bne.n	800c064 <f_lseek+0xcc>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c05c:	2201      	movs	r2, #1
 800c05e:	71da      	strb	r2, [r3, #7]
 800c060:	2301      	movs	r3, #1
 800c062:	e286      	b.n	800c572 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	3301      	adds	r3, #1
 800c068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d0d7      	beq.n	800c01e <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c06e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	429a      	cmp	r2, r3
 800c074:	d809      	bhi.n	800c08a <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800c076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c078:	1d1a      	adds	r2, r3, #4
 800c07a:	627a      	str	r2, [r7, #36]	; 0x24
 800c07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c082:	1d1a      	adds	r2, r3, #4
 800c084:	627a      	str	r2, [r7, #36]	; 0x24
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d3b8      	bcc.n	800c010 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0a8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800c0aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d803      	bhi.n	800c0ba <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	601a      	str	r2, [r3, #0]
 800c0b8:	e259      	b.n	800c56e <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c0ba:	2311      	movs	r3, #17
 800c0bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c0c0:	e255      	b.n	800c56e <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d904      	bls.n	800c0da <f_lseek+0x142>
				ofs = fp->fsize;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f000 8240 	beq.w	800c56e <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7fd fbe5 	bl	80098c4 <clmt_clust>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c102:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	4619      	mov	r1, r3
 800c116:	4610      	mov	r0, r2
 800c118:	f7fd f857 	bl	80091ca <clust2sect>
 800c11c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d106      	bne.n	800c132 <f_lseek+0x19a>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c12a:	2202      	movs	r2, #2
 800c12c:	71da      	strb	r2, [r3, #7]
 800c12e:	2302      	movs	r3, #2
 800c130:	e21f      	b.n	800c572 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	3b01      	subs	r3, #1
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c13c:	6812      	ldr	r2, [r2, #0]
 800c13e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c142:	8952      	ldrh	r2, [r2, #10]
 800c144:	fbb3 f3f2 	udiv	r3, r3, r2
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c14e:	6812      	ldr	r2, [r2, #0]
 800c150:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c154:	7892      	ldrb	r2, [r2, #2]
 800c156:	3a01      	subs	r2, #1
 800c158:	4013      	ands	r3, r2
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	4413      	add	r3, r2
 800c15e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c16e:	6812      	ldr	r2, [r2, #0]
 800c170:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c174:	8952      	ldrh	r2, [r2, #10]
 800c176:	fbb3 f1f2 	udiv	r1, r3, r2
 800c17a:	fb01 f202 	mul.w	r2, r1, r2
 800c17e:	1a9b      	subs	r3, r3, r2
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 81f4 	beq.w	800c56e <f_lseek+0x5d6>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	69ba      	ldr	r2, [r7, #24]
 800c190:	429a      	cmp	r2, r3
 800c192:	f000 81ec 	beq.w	800c56e <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c19c:	799b      	ldrb	r3, [r3, #6]
 800c19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d023      	beq.n	800c1ee <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1b2:	7858      	ldrb	r0, [r3, #1]
 800c1b4:	6879      	ldr	r1, [r7, #4]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1bc:	699a      	ldr	r2, [r3, #24]
 800c1be:	2301      	movs	r3, #1
 800c1c0:	f7fc fc46 	bl	8008a50 <disk_write>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d006      	beq.n	800c1d8 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	71da      	strb	r2, [r3, #7]
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e1cc      	b.n	800c572 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1de:	799b      	ldrb	r3, [r3, #6]
 800c1e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1ec:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1fa:	7858      	ldrb	r0, [r3, #1]
 800c1fc:	6879      	ldr	r1, [r7, #4]
 800c1fe:	2301      	movs	r3, #1
 800c200:	69ba      	ldr	r2, [r7, #24]
 800c202:	f7fc fc05 	bl	8008a10 <disk_read>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d006      	beq.n	800c21a <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c212:	2201      	movs	r2, #1
 800c214:	71da      	strb	r2, [r3, #7]
 800c216:	2301      	movs	r3, #1
 800c218:	e1ab      	b.n	800c572 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c220:	461a      	mov	r2, r3
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	6193      	str	r3, [r2, #24]
 800c226:	e1a2      	b.n	800c56e <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	429a      	cmp	r2, r3
 800c234:	d90c      	bls.n	800c250 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c23c:	799b      	ldrb	r3, [r3, #6]
 800c23e:	f003 0302 	and.w	r3, r3, #2
 800c242:	2b00      	cmp	r3, #0
 800c244:	d104      	bne.n	800c250 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	637b      	str	r3, [r7, #52]	; 0x34
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c264:	461a      	mov	r2, r3
 800c266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c268:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f000 8100 	beq.w	800c472 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c27e:	789b      	ldrb	r3, [r3, #2]
 800c280:	461a      	mov	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c28e:	895b      	ldrh	r3, [r3, #10]
 800c290:	fb02 f303 	mul.w	r3, r2, r3
 800c294:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c296:	6a3b      	ldr	r3, [r7, #32]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d021      	beq.n	800c2e0 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	1e5a      	subs	r2, r3, #1
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2a6:	6a3b      	ldr	r3, [r7, #32]
 800c2a8:	1e59      	subs	r1, r3, #1
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d315      	bcc.n	800c2e0 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800c2b4:	6a3b      	ldr	r3, [r7, #32]
 800c2b6:	1e5a      	subs	r2, r3, #1
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	425b      	negs	r3, r3
 800c2bc:	4013      	ands	r3, r2
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c2c4:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2de:	e031      	b.n	800c344 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d123      	bne.n	800c338 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fd fa3a 	bl	8009774 <create_chain>
 800c300:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c304:	2b01      	cmp	r3, #1
 800c306:	d106      	bne.n	800c316 <f_lseek+0x37e>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c30e:	2202      	movs	r2, #2
 800c310:	71da      	strb	r2, [r3, #7]
 800c312:	2302      	movs	r3, #2
 800c314:	e12d      	b.n	800c572 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c31c:	d106      	bne.n	800c32c <f_lseek+0x394>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c324:	2201      	movs	r2, #1
 800c326:	71da      	strb	r2, [r3, #7]
 800c328:	2301      	movs	r3, #1
 800c32a:	e122      	b.n	800c572 <f_lseek+0x5da>
					fp->sclust = clst;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c332:	461a      	mov	r2, r3
 800c334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c336:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c33e:	461a      	mov	r2, r3
 800c340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c342:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 8093 	beq.w	800c472 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800c34c:	e052      	b.n	800c3f4 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c354:	799b      	ldrb	r3, [r3, #6]
 800c356:	f003 0302 	and.w	r3, r3, #2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00e      	beq.n	800c37c <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fd fa03 	bl	8009774 <create_chain>
 800c36e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10b      	bne.n	800c38e <f_lseek+0x3f6>
							ofs = bcs; break;
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	603b      	str	r3, [r7, #0]
 800c37a:	e03f      	b.n	800c3fc <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c386:	4618      	mov	r0, r3
 800c388:	f7fc ff44 	bl	8009214 <get_fat>
 800c38c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c394:	d106      	bne.n	800c3a4 <f_lseek+0x40c>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c39c:	2201      	movs	r2, #1
 800c39e:	71da      	strb	r2, [r3, #7]
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e0e6      	b.n	800c572 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d909      	bls.n	800c3be <f_lseek+0x426>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d306      	bcc.n	800c3cc <f_lseek+0x434>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3c4:	2202      	movs	r2, #2
 800c3c6:	71da      	strb	r2, [r3, #7]
 800c3c8:	2302      	movs	r3, #2
 800c3ca:	e0d2      	b.n	800c572 <f_lseek+0x5da>
					fp->clust = clst;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d6:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3de:	689a      	ldr	r2, [r3, #8]
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c3ea:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d8a8      	bhi.n	800c34e <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c402:	689a      	ldr	r2, [r3, #8]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	4413      	add	r3, r2
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c40e:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c41c:	895b      	ldrh	r3, [r3, #10]
 800c41e:	461a      	mov	r2, r3
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	fbb3 f1f2 	udiv	r1, r3, r2
 800c426:	fb01 f202 	mul.w	r2, r1, r2
 800c42a:	1a9b      	subs	r3, r3, r2
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d020      	beq.n	800c472 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fc fec5 	bl	80091ca <clust2sect>
 800c440:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800c442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c444:	2b00      	cmp	r3, #0
 800c446:	d106      	bne.n	800c456 <f_lseek+0x4be>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c44e:	2202      	movs	r2, #2
 800c450:	71da      	strb	r2, [r3, #7]
 800c452:	2302      	movs	r3, #2
 800c454:	e08d      	b.n	800c572 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c462:	895b      	ldrh	r3, [r3, #10]
 800c464:	461a      	mov	r2, r3
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	fbb3 f3f2 	udiv	r3, r3, r2
 800c46c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c46e:	4413      	add	r3, r2
 800c470:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c480:	6812      	ldr	r2, [r2, #0]
 800c482:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c486:	8952      	ldrh	r2, [r2, #10]
 800c488:	fbb3 f1f2 	udiv	r1, r3, r2
 800c48c:	fb01 f202 	mul.w	r2, r1, r2
 800c490:	1a9b      	subs	r3, r3, r2
 800c492:	2b00      	cmp	r3, #0
 800c494:	d04e      	beq.n	800c534 <f_lseek+0x59c>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c49c:	699b      	ldr	r3, [r3, #24]
 800c49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d047      	beq.n	800c534 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4aa:	799b      	ldrb	r3, [r3, #6]
 800c4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d023      	beq.n	800c4fc <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4c0:	7858      	ldrb	r0, [r3, #1]
 800c4c2:	6879      	ldr	r1, [r7, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ca:	699a      	ldr	r2, [r3, #24]
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	f7fc fabf 	bl	8008a50 <disk_write>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d006      	beq.n	800c4e6 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4de:	2201      	movs	r2, #1
 800c4e0:	71da      	strb	r2, [r3, #7]
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e045      	b.n	800c572 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ec:	799b      	ldrb	r3, [r3, #6]
 800c4ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4f2:	b2da      	uxtb	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4fa:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c508:	7858      	ldrb	r0, [r3, #1]
 800c50a:	6879      	ldr	r1, [r7, #4]
 800c50c:	2301      	movs	r3, #1
 800c50e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c510:	f7fc fa7e 	bl	8008a10 <disk_read>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d006      	beq.n	800c528 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c520:	2201      	movs	r2, #1
 800c522:	71da      	strb	r2, [r3, #7]
 800c524:	2301      	movs	r3, #1
 800c526:	e024      	b.n	800c572 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c52e:	461a      	mov	r2, r3
 800c530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c532:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c53a:	689a      	ldr	r2, [r3, #8]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	429a      	cmp	r2, r3
 800c546:	d912      	bls.n	800c56e <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c556:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c55e:	799b      	ldrb	r3, [r3, #6]
 800c560:	f043 0320 	orr.w	r3, r3, #32
 800c564:	b2da      	uxtb	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c56c:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800c56e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c572:	4618      	mov	r0, r3
 800c574:	3740      	adds	r7, #64	; 0x40
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b084      	sub	sp, #16
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
 800c582:	460b      	mov	r3, r1
 800c584:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800c586:	78fb      	ldrb	r3, [r7, #3]
 800c588:	2b0a      	cmp	r3, #10
 800c58a:	d103      	bne.n	800c594 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c58c:	210d      	movs	r1, #13
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7ff fff3 	bl	800c57a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	db25      	blt.n	800c5ec <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	1c5a      	adds	r2, r3, #1
 800c5a4:	60fa      	str	r2, [r7, #12]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	78fa      	ldrb	r2, [r7, #3]
 800c5ac:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2b3c      	cmp	r3, #60	; 0x3c
 800c5b2:	dd12      	ble.n	800c5da <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6818      	ldr	r0, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f103 010c 	add.w	r1, r3, #12
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	f107 0308 	add.w	r3, r7, #8
 800c5c4:	f7ff f9b6 	bl	800b934 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d101      	bne.n	800c5d4 <putc_bfd+0x5a>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e001      	b.n	800c5d8 <putc_bfd+0x5e>
 800c5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	1c5a      	adds	r2, r3, #1
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	609a      	str	r2, [r3, #8]
 800c5ea:	e000      	b.n	800c5ee <putc_bfd+0x74>
	if (i < 0) return;
 800c5ec:	bf00      	nop
}
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c5f4:	b590      	push	{r4, r7, lr}
 800c5f6:	b097      	sub	sp, #92	; 0x5c
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	613b      	str	r3, [r7, #16]
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800c60a:	e009      	b.n	800c620 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	1c5a      	adds	r2, r3, #1
 800c610:	607a      	str	r2, [r7, #4]
 800c612:	781a      	ldrb	r2, [r3, #0]
 800c614:	f107 030c 	add.w	r3, r7, #12
 800c618:	4611      	mov	r1, r2
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff ffad 	bl	800c57a <putc_bfd>
	while (*str)			/* Put the string */
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1f1      	bne.n	800c60c <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	db15      	blt.n	800c65a <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800c62e:	68f8      	ldr	r0, [r7, #12]
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	461c      	mov	r4, r3
 800c634:	f107 0208 	add.w	r2, r7, #8
 800c638:	f107 030c 	add.w	r3, r7, #12
 800c63c:	f103 010c 	add.w	r1, r3, #12
 800c640:	4613      	mov	r3, r2
 800c642:	4622      	mov	r2, r4
 800c644:	f7ff f976 	bl	800b934 <f_write>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d105      	bne.n	800c65a <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	4293      	cmp	r3, r2
 800c654:	d101      	bne.n	800c65a <f_puts+0x66>
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	e001      	b.n	800c65e <f_puts+0x6a>
	return EOF;
 800c65a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c65e:	4618      	mov	r0, r3
 800c660:	375c      	adds	r7, #92	; 0x5c
 800c662:	46bd      	mov	sp, r7
 800c664:	bd90      	pop	{r4, r7, pc}
	...

0800c668 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c668:	b480      	push	{r7}
 800c66a:	b087      	sub	sp, #28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	4613      	mov	r3, r2
 800c674:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c676:	2301      	movs	r3, #1
 800c678:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c67e:	4b1f      	ldr	r3, [pc, #124]	; (800c6fc <FATFS_LinkDriverEx+0x94>)
 800c680:	7a5b      	ldrb	r3, [r3, #9]
 800c682:	b2db      	uxtb	r3, r3
 800c684:	2b01      	cmp	r3, #1
 800c686:	d831      	bhi.n	800c6ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c688:	4b1c      	ldr	r3, [pc, #112]	; (800c6fc <FATFS_LinkDriverEx+0x94>)
 800c68a:	7a5b      	ldrb	r3, [r3, #9]
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	461a      	mov	r2, r3
 800c690:	4b1a      	ldr	r3, [pc, #104]	; (800c6fc <FATFS_LinkDriverEx+0x94>)
 800c692:	2100      	movs	r1, #0
 800c694:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c696:	4b19      	ldr	r3, [pc, #100]	; (800c6fc <FATFS_LinkDriverEx+0x94>)
 800c698:	7a5b      	ldrb	r3, [r3, #9]
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	4a17      	ldr	r2, [pc, #92]	; (800c6fc <FATFS_LinkDriverEx+0x94>)
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c6a6:	4b15      	ldr	r3, [pc, #84]	; (800c6fc <FATFS_LinkDriverEx+0x94>)
 800c6a8:	7a5b      	ldrb	r3, [r3, #9]
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	4b13      	ldr	r3, [pc, #76]	; (800c6fc <FATFS_LinkDriverEx+0x94>)
 800c6b0:	4413      	add	r3, r2
 800c6b2:	79fa      	ldrb	r2, [r7, #7]
 800c6b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c6b6:	4b11      	ldr	r3, [pc, #68]	; (800c6fc <FATFS_LinkDriverEx+0x94>)
 800c6b8:	7a5b      	ldrb	r3, [r3, #9]
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	1c5a      	adds	r2, r3, #1
 800c6be:	b2d1      	uxtb	r1, r2
 800c6c0:	4a0e      	ldr	r2, [pc, #56]	; (800c6fc <FATFS_LinkDriverEx+0x94>)
 800c6c2:	7251      	strb	r1, [r2, #9]
 800c6c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c6c6:	7dbb      	ldrb	r3, [r7, #22]
 800c6c8:	3330      	adds	r3, #48	; 0x30
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	223a      	movs	r2, #58	; 0x3a
 800c6d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	3302      	adds	r3, #2
 800c6dc:	222f      	movs	r2, #47	; 0x2f
 800c6de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	3303      	adds	r3, #3
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	371c      	adds	r7, #28
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	20002f54 	.word	0x20002f54

0800c700 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c70a:	2200      	movs	r2, #0
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7ff ffaa 	bl	800c668 <FATFS_LinkDriverEx>
 800c714:	4603      	mov	r3, r0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
	...

0800c720 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	6039      	str	r1, [r7, #0]
 800c72a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c72c:	88fb      	ldrh	r3, [r7, #6]
 800c72e:	2b7f      	cmp	r3, #127	; 0x7f
 800c730:	d802      	bhi.n	800c738 <ff_convert+0x18>
		c = chr;
 800c732:	88fb      	ldrh	r3, [r7, #6]
 800c734:	81fb      	strh	r3, [r7, #14]
 800c736:	e025      	b.n	800c784 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00b      	beq.n	800c756 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c73e:	88fb      	ldrh	r3, [r7, #6]
 800c740:	2bff      	cmp	r3, #255	; 0xff
 800c742:	d805      	bhi.n	800c750 <ff_convert+0x30>
 800c744:	88fb      	ldrh	r3, [r7, #6]
 800c746:	3b80      	subs	r3, #128	; 0x80
 800c748:	4a12      	ldr	r2, [pc, #72]	; (800c794 <ff_convert+0x74>)
 800c74a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c74e:	e000      	b.n	800c752 <ff_convert+0x32>
 800c750:	2300      	movs	r3, #0
 800c752:	81fb      	strh	r3, [r7, #14]
 800c754:	e016      	b.n	800c784 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800c756:	2300      	movs	r3, #0
 800c758:	81fb      	strh	r3, [r7, #14]
 800c75a:	e009      	b.n	800c770 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c75c:	89fb      	ldrh	r3, [r7, #14]
 800c75e:	4a0d      	ldr	r2, [pc, #52]	; (800c794 <ff_convert+0x74>)
 800c760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c764:	88fa      	ldrh	r2, [r7, #6]
 800c766:	429a      	cmp	r2, r3
 800c768:	d006      	beq.n	800c778 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c76a:	89fb      	ldrh	r3, [r7, #14]
 800c76c:	3301      	adds	r3, #1
 800c76e:	81fb      	strh	r3, [r7, #14]
 800c770:	89fb      	ldrh	r3, [r7, #14]
 800c772:	2b7f      	cmp	r3, #127	; 0x7f
 800c774:	d9f2      	bls.n	800c75c <ff_convert+0x3c>
 800c776:	e000      	b.n	800c77a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c778:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c77a:	89fb      	ldrh	r3, [r7, #14]
 800c77c:	3380      	adds	r3, #128	; 0x80
 800c77e:	b29b      	uxth	r3, r3
 800c780:	b2db      	uxtb	r3, r3
 800c782:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c784:	89fb      	ldrh	r3, [r7, #14]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	0800fd64 	.word	0x0800fd64

0800c798 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	60fb      	str	r3, [r7, #12]
 800c7a6:	e002      	b.n	800c7ae <ff_wtoupper+0x16>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	60fb      	str	r3, [r7, #12]
 800c7ae:	4a0f      	ldr	r2, [pc, #60]	; (800c7ec <ff_wtoupper+0x54>)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d006      	beq.n	800c7c8 <ff_wtoupper+0x30>
 800c7ba:	4a0c      	ldr	r2, [pc, #48]	; (800c7ec <ff_wtoupper+0x54>)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7c2:	88fa      	ldrh	r2, [r7, #6]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d1ef      	bne.n	800c7a8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800c7c8:	4a08      	ldr	r2, [pc, #32]	; (800c7ec <ff_wtoupper+0x54>)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d004      	beq.n	800c7de <ff_wtoupper+0x46>
 800c7d4:	4a06      	ldr	r2, [pc, #24]	; (800c7f0 <ff_wtoupper+0x58>)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7dc:	e000      	b.n	800c7e0 <ff_wtoupper+0x48>
 800c7de:	88fb      	ldrh	r3, [r7, #6]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	0800fe64 	.word	0x0800fe64
 800c7f0:	08010044 	.word	0x08010044

0800c7f4 <__errno>:
 800c7f4:	4b01      	ldr	r3, [pc, #4]	; (800c7fc <__errno+0x8>)
 800c7f6:	6818      	ldr	r0, [r3, #0]
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	20000024 	.word	0x20000024

0800c800 <__libc_init_array>:
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	4d0d      	ldr	r5, [pc, #52]	; (800c838 <__libc_init_array+0x38>)
 800c804:	4c0d      	ldr	r4, [pc, #52]	; (800c83c <__libc_init_array+0x3c>)
 800c806:	1b64      	subs	r4, r4, r5
 800c808:	10a4      	asrs	r4, r4, #2
 800c80a:	2600      	movs	r6, #0
 800c80c:	42a6      	cmp	r6, r4
 800c80e:	d109      	bne.n	800c824 <__libc_init_array+0x24>
 800c810:	4d0b      	ldr	r5, [pc, #44]	; (800c840 <__libc_init_array+0x40>)
 800c812:	4c0c      	ldr	r4, [pc, #48]	; (800c844 <__libc_init_array+0x44>)
 800c814:	f002 ff04 	bl	800f620 <_init>
 800c818:	1b64      	subs	r4, r4, r5
 800c81a:	10a4      	asrs	r4, r4, #2
 800c81c:	2600      	movs	r6, #0
 800c81e:	42a6      	cmp	r6, r4
 800c820:	d105      	bne.n	800c82e <__libc_init_array+0x2e>
 800c822:	bd70      	pop	{r4, r5, r6, pc}
 800c824:	f855 3b04 	ldr.w	r3, [r5], #4
 800c828:	4798      	blx	r3
 800c82a:	3601      	adds	r6, #1
 800c82c:	e7ee      	b.n	800c80c <__libc_init_array+0xc>
 800c82e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c832:	4798      	blx	r3
 800c834:	3601      	adds	r6, #1
 800c836:	e7f2      	b.n	800c81e <__libc_init_array+0x1e>
 800c838:	080105fc 	.word	0x080105fc
 800c83c:	080105fc 	.word	0x080105fc
 800c840:	080105fc 	.word	0x080105fc
 800c844:	08010600 	.word	0x08010600

0800c848 <memset>:
 800c848:	4402      	add	r2, r0
 800c84a:	4603      	mov	r3, r0
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d100      	bne.n	800c852 <memset+0xa>
 800c850:	4770      	bx	lr
 800c852:	f803 1b01 	strb.w	r1, [r3], #1
 800c856:	e7f9      	b.n	800c84c <memset+0x4>

0800c858 <__cvt>:
 800c858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c85c:	ec55 4b10 	vmov	r4, r5, d0
 800c860:	2d00      	cmp	r5, #0
 800c862:	460e      	mov	r6, r1
 800c864:	4619      	mov	r1, r3
 800c866:	462b      	mov	r3, r5
 800c868:	bfbb      	ittet	lt
 800c86a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c86e:	461d      	movlt	r5, r3
 800c870:	2300      	movge	r3, #0
 800c872:	232d      	movlt	r3, #45	; 0x2d
 800c874:	700b      	strb	r3, [r1, #0]
 800c876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c878:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c87c:	4691      	mov	r9, r2
 800c87e:	f023 0820 	bic.w	r8, r3, #32
 800c882:	bfbc      	itt	lt
 800c884:	4622      	movlt	r2, r4
 800c886:	4614      	movlt	r4, r2
 800c888:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c88c:	d005      	beq.n	800c89a <__cvt+0x42>
 800c88e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c892:	d100      	bne.n	800c896 <__cvt+0x3e>
 800c894:	3601      	adds	r6, #1
 800c896:	2102      	movs	r1, #2
 800c898:	e000      	b.n	800c89c <__cvt+0x44>
 800c89a:	2103      	movs	r1, #3
 800c89c:	ab03      	add	r3, sp, #12
 800c89e:	9301      	str	r3, [sp, #4]
 800c8a0:	ab02      	add	r3, sp, #8
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	ec45 4b10 	vmov	d0, r4, r5
 800c8a8:	4653      	mov	r3, sl
 800c8aa:	4632      	mov	r2, r6
 800c8ac:	f000 fcec 	bl	800d288 <_dtoa_r>
 800c8b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c8b4:	4607      	mov	r7, r0
 800c8b6:	d102      	bne.n	800c8be <__cvt+0x66>
 800c8b8:	f019 0f01 	tst.w	r9, #1
 800c8bc:	d022      	beq.n	800c904 <__cvt+0xac>
 800c8be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c8c2:	eb07 0906 	add.w	r9, r7, r6
 800c8c6:	d110      	bne.n	800c8ea <__cvt+0x92>
 800c8c8:	783b      	ldrb	r3, [r7, #0]
 800c8ca:	2b30      	cmp	r3, #48	; 0x30
 800c8cc:	d10a      	bne.n	800c8e4 <__cvt+0x8c>
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	f7f4 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8da:	b918      	cbnz	r0, 800c8e4 <__cvt+0x8c>
 800c8dc:	f1c6 0601 	rsb	r6, r6, #1
 800c8e0:	f8ca 6000 	str.w	r6, [sl]
 800c8e4:	f8da 3000 	ldr.w	r3, [sl]
 800c8e8:	4499      	add	r9, r3
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	f7f4 f8f1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8f6:	b108      	cbz	r0, 800c8fc <__cvt+0xa4>
 800c8f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c8fc:	2230      	movs	r2, #48	; 0x30
 800c8fe:	9b03      	ldr	r3, [sp, #12]
 800c900:	454b      	cmp	r3, r9
 800c902:	d307      	bcc.n	800c914 <__cvt+0xbc>
 800c904:	9b03      	ldr	r3, [sp, #12]
 800c906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c908:	1bdb      	subs	r3, r3, r7
 800c90a:	4638      	mov	r0, r7
 800c90c:	6013      	str	r3, [r2, #0]
 800c90e:	b004      	add	sp, #16
 800c910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c914:	1c59      	adds	r1, r3, #1
 800c916:	9103      	str	r1, [sp, #12]
 800c918:	701a      	strb	r2, [r3, #0]
 800c91a:	e7f0      	b.n	800c8fe <__cvt+0xa6>

0800c91c <__exponent>:
 800c91c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c91e:	4603      	mov	r3, r0
 800c920:	2900      	cmp	r1, #0
 800c922:	bfb8      	it	lt
 800c924:	4249      	neglt	r1, r1
 800c926:	f803 2b02 	strb.w	r2, [r3], #2
 800c92a:	bfb4      	ite	lt
 800c92c:	222d      	movlt	r2, #45	; 0x2d
 800c92e:	222b      	movge	r2, #43	; 0x2b
 800c930:	2909      	cmp	r1, #9
 800c932:	7042      	strb	r2, [r0, #1]
 800c934:	dd2a      	ble.n	800c98c <__exponent+0x70>
 800c936:	f10d 0407 	add.w	r4, sp, #7
 800c93a:	46a4      	mov	ip, r4
 800c93c:	270a      	movs	r7, #10
 800c93e:	46a6      	mov	lr, r4
 800c940:	460a      	mov	r2, r1
 800c942:	fb91 f6f7 	sdiv	r6, r1, r7
 800c946:	fb07 1516 	mls	r5, r7, r6, r1
 800c94a:	3530      	adds	r5, #48	; 0x30
 800c94c:	2a63      	cmp	r2, #99	; 0x63
 800c94e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c952:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c956:	4631      	mov	r1, r6
 800c958:	dcf1      	bgt.n	800c93e <__exponent+0x22>
 800c95a:	3130      	adds	r1, #48	; 0x30
 800c95c:	f1ae 0502 	sub.w	r5, lr, #2
 800c960:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c964:	1c44      	adds	r4, r0, #1
 800c966:	4629      	mov	r1, r5
 800c968:	4561      	cmp	r1, ip
 800c96a:	d30a      	bcc.n	800c982 <__exponent+0x66>
 800c96c:	f10d 0209 	add.w	r2, sp, #9
 800c970:	eba2 020e 	sub.w	r2, r2, lr
 800c974:	4565      	cmp	r5, ip
 800c976:	bf88      	it	hi
 800c978:	2200      	movhi	r2, #0
 800c97a:	4413      	add	r3, r2
 800c97c:	1a18      	subs	r0, r3, r0
 800c97e:	b003      	add	sp, #12
 800c980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c982:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c986:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c98a:	e7ed      	b.n	800c968 <__exponent+0x4c>
 800c98c:	2330      	movs	r3, #48	; 0x30
 800c98e:	3130      	adds	r1, #48	; 0x30
 800c990:	7083      	strb	r3, [r0, #2]
 800c992:	70c1      	strb	r1, [r0, #3]
 800c994:	1d03      	adds	r3, r0, #4
 800c996:	e7f1      	b.n	800c97c <__exponent+0x60>

0800c998 <_printf_float>:
 800c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99c:	ed2d 8b02 	vpush	{d8}
 800c9a0:	b08d      	sub	sp, #52	; 0x34
 800c9a2:	460c      	mov	r4, r1
 800c9a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c9a8:	4616      	mov	r6, r2
 800c9aa:	461f      	mov	r7, r3
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	f001 fa59 	bl	800de64 <_localeconv_r>
 800c9b2:	f8d0 a000 	ldr.w	sl, [r0]
 800c9b6:	4650      	mov	r0, sl
 800c9b8:	f7f3 fc12 	bl	80001e0 <strlen>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	930a      	str	r3, [sp, #40]	; 0x28
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	9305      	str	r3, [sp, #20]
 800c9c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c9c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c9cc:	3307      	adds	r3, #7
 800c9ce:	f023 0307 	bic.w	r3, r3, #7
 800c9d2:	f103 0208 	add.w	r2, r3, #8
 800c9d6:	f8c8 2000 	str.w	r2, [r8]
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c9e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c9e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9ea:	9307      	str	r3, [sp, #28]
 800c9ec:	f8cd 8018 	str.w	r8, [sp, #24]
 800c9f0:	ee08 0a10 	vmov	s16, r0
 800c9f4:	4b9f      	ldr	r3, [pc, #636]	; (800cc74 <_printf_float+0x2dc>)
 800c9f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c9fe:	f7f4 f89d 	bl	8000b3c <__aeabi_dcmpun>
 800ca02:	bb88      	cbnz	r0, 800ca68 <_printf_float+0xd0>
 800ca04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca08:	4b9a      	ldr	r3, [pc, #616]	; (800cc74 <_printf_float+0x2dc>)
 800ca0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca0e:	f7f4 f877 	bl	8000b00 <__aeabi_dcmple>
 800ca12:	bb48      	cbnz	r0, 800ca68 <_printf_float+0xd0>
 800ca14:	2200      	movs	r2, #0
 800ca16:	2300      	movs	r3, #0
 800ca18:	4640      	mov	r0, r8
 800ca1a:	4649      	mov	r1, r9
 800ca1c:	f7f4 f866 	bl	8000aec <__aeabi_dcmplt>
 800ca20:	b110      	cbz	r0, 800ca28 <_printf_float+0x90>
 800ca22:	232d      	movs	r3, #45	; 0x2d
 800ca24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca28:	4b93      	ldr	r3, [pc, #588]	; (800cc78 <_printf_float+0x2e0>)
 800ca2a:	4894      	ldr	r0, [pc, #592]	; (800cc7c <_printf_float+0x2e4>)
 800ca2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ca30:	bf94      	ite	ls
 800ca32:	4698      	movls	r8, r3
 800ca34:	4680      	movhi	r8, r0
 800ca36:	2303      	movs	r3, #3
 800ca38:	6123      	str	r3, [r4, #16]
 800ca3a:	9b05      	ldr	r3, [sp, #20]
 800ca3c:	f023 0204 	bic.w	r2, r3, #4
 800ca40:	6022      	str	r2, [r4, #0]
 800ca42:	f04f 0900 	mov.w	r9, #0
 800ca46:	9700      	str	r7, [sp, #0]
 800ca48:	4633      	mov	r3, r6
 800ca4a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	4628      	mov	r0, r5
 800ca50:	f000 f9d8 	bl	800ce04 <_printf_common>
 800ca54:	3001      	adds	r0, #1
 800ca56:	f040 8090 	bne.w	800cb7a <_printf_float+0x1e2>
 800ca5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5e:	b00d      	add	sp, #52	; 0x34
 800ca60:	ecbd 8b02 	vpop	{d8}
 800ca64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca68:	4642      	mov	r2, r8
 800ca6a:	464b      	mov	r3, r9
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	4649      	mov	r1, r9
 800ca70:	f7f4 f864 	bl	8000b3c <__aeabi_dcmpun>
 800ca74:	b140      	cbz	r0, 800ca88 <_printf_float+0xf0>
 800ca76:	464b      	mov	r3, r9
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	bfbc      	itt	lt
 800ca7c:	232d      	movlt	r3, #45	; 0x2d
 800ca7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ca82:	487f      	ldr	r0, [pc, #508]	; (800cc80 <_printf_float+0x2e8>)
 800ca84:	4b7f      	ldr	r3, [pc, #508]	; (800cc84 <_printf_float+0x2ec>)
 800ca86:	e7d1      	b.n	800ca2c <_printf_float+0x94>
 800ca88:	6863      	ldr	r3, [r4, #4]
 800ca8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ca8e:	9206      	str	r2, [sp, #24]
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	d13f      	bne.n	800cb14 <_printf_float+0x17c>
 800ca94:	2306      	movs	r3, #6
 800ca96:	6063      	str	r3, [r4, #4]
 800ca98:	9b05      	ldr	r3, [sp, #20]
 800ca9a:	6861      	ldr	r1, [r4, #4]
 800ca9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800caa0:	2300      	movs	r3, #0
 800caa2:	9303      	str	r3, [sp, #12]
 800caa4:	ab0a      	add	r3, sp, #40	; 0x28
 800caa6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800caaa:	ab09      	add	r3, sp, #36	; 0x24
 800caac:	ec49 8b10 	vmov	d0, r8, r9
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	6022      	str	r2, [r4, #0]
 800cab4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cab8:	4628      	mov	r0, r5
 800caba:	f7ff fecd 	bl	800c858 <__cvt>
 800cabe:	9b06      	ldr	r3, [sp, #24]
 800cac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cac2:	2b47      	cmp	r3, #71	; 0x47
 800cac4:	4680      	mov	r8, r0
 800cac6:	d108      	bne.n	800cada <_printf_float+0x142>
 800cac8:	1cc8      	adds	r0, r1, #3
 800caca:	db02      	blt.n	800cad2 <_printf_float+0x13a>
 800cacc:	6863      	ldr	r3, [r4, #4]
 800cace:	4299      	cmp	r1, r3
 800cad0:	dd41      	ble.n	800cb56 <_printf_float+0x1be>
 800cad2:	f1ab 0b02 	sub.w	fp, fp, #2
 800cad6:	fa5f fb8b 	uxtb.w	fp, fp
 800cada:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cade:	d820      	bhi.n	800cb22 <_printf_float+0x18a>
 800cae0:	3901      	subs	r1, #1
 800cae2:	465a      	mov	r2, fp
 800cae4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cae8:	9109      	str	r1, [sp, #36]	; 0x24
 800caea:	f7ff ff17 	bl	800c91c <__exponent>
 800caee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caf0:	1813      	adds	r3, r2, r0
 800caf2:	2a01      	cmp	r2, #1
 800caf4:	4681      	mov	r9, r0
 800caf6:	6123      	str	r3, [r4, #16]
 800caf8:	dc02      	bgt.n	800cb00 <_printf_float+0x168>
 800cafa:	6822      	ldr	r2, [r4, #0]
 800cafc:	07d2      	lsls	r2, r2, #31
 800cafe:	d501      	bpl.n	800cb04 <_printf_float+0x16c>
 800cb00:	3301      	adds	r3, #1
 800cb02:	6123      	str	r3, [r4, #16]
 800cb04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d09c      	beq.n	800ca46 <_printf_float+0xae>
 800cb0c:	232d      	movs	r3, #45	; 0x2d
 800cb0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb12:	e798      	b.n	800ca46 <_printf_float+0xae>
 800cb14:	9a06      	ldr	r2, [sp, #24]
 800cb16:	2a47      	cmp	r2, #71	; 0x47
 800cb18:	d1be      	bne.n	800ca98 <_printf_float+0x100>
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1bc      	bne.n	800ca98 <_printf_float+0x100>
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e7b9      	b.n	800ca96 <_printf_float+0xfe>
 800cb22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cb26:	d118      	bne.n	800cb5a <_printf_float+0x1c2>
 800cb28:	2900      	cmp	r1, #0
 800cb2a:	6863      	ldr	r3, [r4, #4]
 800cb2c:	dd0b      	ble.n	800cb46 <_printf_float+0x1ae>
 800cb2e:	6121      	str	r1, [r4, #16]
 800cb30:	b913      	cbnz	r3, 800cb38 <_printf_float+0x1a0>
 800cb32:	6822      	ldr	r2, [r4, #0]
 800cb34:	07d0      	lsls	r0, r2, #31
 800cb36:	d502      	bpl.n	800cb3e <_printf_float+0x1a6>
 800cb38:	3301      	adds	r3, #1
 800cb3a:	440b      	add	r3, r1
 800cb3c:	6123      	str	r3, [r4, #16]
 800cb3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cb40:	f04f 0900 	mov.w	r9, #0
 800cb44:	e7de      	b.n	800cb04 <_printf_float+0x16c>
 800cb46:	b913      	cbnz	r3, 800cb4e <_printf_float+0x1b6>
 800cb48:	6822      	ldr	r2, [r4, #0]
 800cb4a:	07d2      	lsls	r2, r2, #31
 800cb4c:	d501      	bpl.n	800cb52 <_printf_float+0x1ba>
 800cb4e:	3302      	adds	r3, #2
 800cb50:	e7f4      	b.n	800cb3c <_printf_float+0x1a4>
 800cb52:	2301      	movs	r3, #1
 800cb54:	e7f2      	b.n	800cb3c <_printf_float+0x1a4>
 800cb56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cb5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb5c:	4299      	cmp	r1, r3
 800cb5e:	db05      	blt.n	800cb6c <_printf_float+0x1d4>
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	6121      	str	r1, [r4, #16]
 800cb64:	07d8      	lsls	r0, r3, #31
 800cb66:	d5ea      	bpl.n	800cb3e <_printf_float+0x1a6>
 800cb68:	1c4b      	adds	r3, r1, #1
 800cb6a:	e7e7      	b.n	800cb3c <_printf_float+0x1a4>
 800cb6c:	2900      	cmp	r1, #0
 800cb6e:	bfd4      	ite	le
 800cb70:	f1c1 0202 	rsble	r2, r1, #2
 800cb74:	2201      	movgt	r2, #1
 800cb76:	4413      	add	r3, r2
 800cb78:	e7e0      	b.n	800cb3c <_printf_float+0x1a4>
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	055a      	lsls	r2, r3, #21
 800cb7e:	d407      	bmi.n	800cb90 <_printf_float+0x1f8>
 800cb80:	6923      	ldr	r3, [r4, #16]
 800cb82:	4642      	mov	r2, r8
 800cb84:	4631      	mov	r1, r6
 800cb86:	4628      	mov	r0, r5
 800cb88:	47b8      	blx	r7
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	d12c      	bne.n	800cbe8 <_printf_float+0x250>
 800cb8e:	e764      	b.n	800ca5a <_printf_float+0xc2>
 800cb90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb94:	f240 80e0 	bls.w	800cd58 <_printf_float+0x3c0>
 800cb98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2300      	movs	r3, #0
 800cba0:	f7f3 ff9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d034      	beq.n	800cc12 <_printf_float+0x27a>
 800cba8:	4a37      	ldr	r2, [pc, #220]	; (800cc88 <_printf_float+0x2f0>)
 800cbaa:	2301      	movs	r3, #1
 800cbac:	4631      	mov	r1, r6
 800cbae:	4628      	mov	r0, r5
 800cbb0:	47b8      	blx	r7
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	f43f af51 	beq.w	800ca5a <_printf_float+0xc2>
 800cbb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	db02      	blt.n	800cbc6 <_printf_float+0x22e>
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	07d8      	lsls	r0, r3, #31
 800cbc4:	d510      	bpl.n	800cbe8 <_printf_float+0x250>
 800cbc6:	ee18 3a10 	vmov	r3, s16
 800cbca:	4652      	mov	r2, sl
 800cbcc:	4631      	mov	r1, r6
 800cbce:	4628      	mov	r0, r5
 800cbd0:	47b8      	blx	r7
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	f43f af41 	beq.w	800ca5a <_printf_float+0xc2>
 800cbd8:	f04f 0800 	mov.w	r8, #0
 800cbdc:	f104 091a 	add.w	r9, r4, #26
 800cbe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbe2:	3b01      	subs	r3, #1
 800cbe4:	4543      	cmp	r3, r8
 800cbe6:	dc09      	bgt.n	800cbfc <_printf_float+0x264>
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	079b      	lsls	r3, r3, #30
 800cbec:	f100 8105 	bmi.w	800cdfa <_printf_float+0x462>
 800cbf0:	68e0      	ldr	r0, [r4, #12]
 800cbf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbf4:	4298      	cmp	r0, r3
 800cbf6:	bfb8      	it	lt
 800cbf8:	4618      	movlt	r0, r3
 800cbfa:	e730      	b.n	800ca5e <_printf_float+0xc6>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	464a      	mov	r2, r9
 800cc00:	4631      	mov	r1, r6
 800cc02:	4628      	mov	r0, r5
 800cc04:	47b8      	blx	r7
 800cc06:	3001      	adds	r0, #1
 800cc08:	f43f af27 	beq.w	800ca5a <_printf_float+0xc2>
 800cc0c:	f108 0801 	add.w	r8, r8, #1
 800cc10:	e7e6      	b.n	800cbe0 <_printf_float+0x248>
 800cc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	dc39      	bgt.n	800cc8c <_printf_float+0x2f4>
 800cc18:	4a1b      	ldr	r2, [pc, #108]	; (800cc88 <_printf_float+0x2f0>)
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	4631      	mov	r1, r6
 800cc1e:	4628      	mov	r0, r5
 800cc20:	47b8      	blx	r7
 800cc22:	3001      	adds	r0, #1
 800cc24:	f43f af19 	beq.w	800ca5a <_printf_float+0xc2>
 800cc28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	d102      	bne.n	800cc36 <_printf_float+0x29e>
 800cc30:	6823      	ldr	r3, [r4, #0]
 800cc32:	07d9      	lsls	r1, r3, #31
 800cc34:	d5d8      	bpl.n	800cbe8 <_printf_float+0x250>
 800cc36:	ee18 3a10 	vmov	r3, s16
 800cc3a:	4652      	mov	r2, sl
 800cc3c:	4631      	mov	r1, r6
 800cc3e:	4628      	mov	r0, r5
 800cc40:	47b8      	blx	r7
 800cc42:	3001      	adds	r0, #1
 800cc44:	f43f af09 	beq.w	800ca5a <_printf_float+0xc2>
 800cc48:	f04f 0900 	mov.w	r9, #0
 800cc4c:	f104 0a1a 	add.w	sl, r4, #26
 800cc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc52:	425b      	negs	r3, r3
 800cc54:	454b      	cmp	r3, r9
 800cc56:	dc01      	bgt.n	800cc5c <_printf_float+0x2c4>
 800cc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5a:	e792      	b.n	800cb82 <_printf_float+0x1ea>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	4652      	mov	r2, sl
 800cc60:	4631      	mov	r1, r6
 800cc62:	4628      	mov	r0, r5
 800cc64:	47b8      	blx	r7
 800cc66:	3001      	adds	r0, #1
 800cc68:	f43f aef7 	beq.w	800ca5a <_printf_float+0xc2>
 800cc6c:	f109 0901 	add.w	r9, r9, #1
 800cc70:	e7ee      	b.n	800cc50 <_printf_float+0x2b8>
 800cc72:	bf00      	nop
 800cc74:	7fefffff 	.word	0x7fefffff
 800cc78:	08010228 	.word	0x08010228
 800cc7c:	0801022c 	.word	0x0801022c
 800cc80:	08010234 	.word	0x08010234
 800cc84:	08010230 	.word	0x08010230
 800cc88:	08010238 	.word	0x08010238
 800cc8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc90:	429a      	cmp	r2, r3
 800cc92:	bfa8      	it	ge
 800cc94:	461a      	movge	r2, r3
 800cc96:	2a00      	cmp	r2, #0
 800cc98:	4691      	mov	r9, r2
 800cc9a:	dc37      	bgt.n	800cd0c <_printf_float+0x374>
 800cc9c:	f04f 0b00 	mov.w	fp, #0
 800cca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cca4:	f104 021a 	add.w	r2, r4, #26
 800cca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ccaa:	9305      	str	r3, [sp, #20]
 800ccac:	eba3 0309 	sub.w	r3, r3, r9
 800ccb0:	455b      	cmp	r3, fp
 800ccb2:	dc33      	bgt.n	800cd1c <_printf_float+0x384>
 800ccb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	db3b      	blt.n	800cd34 <_printf_float+0x39c>
 800ccbc:	6823      	ldr	r3, [r4, #0]
 800ccbe:	07da      	lsls	r2, r3, #31
 800ccc0:	d438      	bmi.n	800cd34 <_printf_float+0x39c>
 800ccc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccc4:	9a05      	ldr	r2, [sp, #20]
 800ccc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccc8:	1a9a      	subs	r2, r3, r2
 800ccca:	eba3 0901 	sub.w	r9, r3, r1
 800ccce:	4591      	cmp	r9, r2
 800ccd0:	bfa8      	it	ge
 800ccd2:	4691      	movge	r9, r2
 800ccd4:	f1b9 0f00 	cmp.w	r9, #0
 800ccd8:	dc35      	bgt.n	800cd46 <_printf_float+0x3ae>
 800ccda:	f04f 0800 	mov.w	r8, #0
 800ccde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cce2:	f104 0a1a 	add.w	sl, r4, #26
 800cce6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccea:	1a9b      	subs	r3, r3, r2
 800ccec:	eba3 0309 	sub.w	r3, r3, r9
 800ccf0:	4543      	cmp	r3, r8
 800ccf2:	f77f af79 	ble.w	800cbe8 <_printf_float+0x250>
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	4652      	mov	r2, sl
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	47b8      	blx	r7
 800cd00:	3001      	adds	r0, #1
 800cd02:	f43f aeaa 	beq.w	800ca5a <_printf_float+0xc2>
 800cd06:	f108 0801 	add.w	r8, r8, #1
 800cd0a:	e7ec      	b.n	800cce6 <_printf_float+0x34e>
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	4631      	mov	r1, r6
 800cd10:	4642      	mov	r2, r8
 800cd12:	4628      	mov	r0, r5
 800cd14:	47b8      	blx	r7
 800cd16:	3001      	adds	r0, #1
 800cd18:	d1c0      	bne.n	800cc9c <_printf_float+0x304>
 800cd1a:	e69e      	b.n	800ca5a <_printf_float+0xc2>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	4631      	mov	r1, r6
 800cd20:	4628      	mov	r0, r5
 800cd22:	9205      	str	r2, [sp, #20]
 800cd24:	47b8      	blx	r7
 800cd26:	3001      	adds	r0, #1
 800cd28:	f43f ae97 	beq.w	800ca5a <_printf_float+0xc2>
 800cd2c:	9a05      	ldr	r2, [sp, #20]
 800cd2e:	f10b 0b01 	add.w	fp, fp, #1
 800cd32:	e7b9      	b.n	800cca8 <_printf_float+0x310>
 800cd34:	ee18 3a10 	vmov	r3, s16
 800cd38:	4652      	mov	r2, sl
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	47b8      	blx	r7
 800cd40:	3001      	adds	r0, #1
 800cd42:	d1be      	bne.n	800ccc2 <_printf_float+0x32a>
 800cd44:	e689      	b.n	800ca5a <_printf_float+0xc2>
 800cd46:	9a05      	ldr	r2, [sp, #20]
 800cd48:	464b      	mov	r3, r9
 800cd4a:	4442      	add	r2, r8
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4628      	mov	r0, r5
 800cd50:	47b8      	blx	r7
 800cd52:	3001      	adds	r0, #1
 800cd54:	d1c1      	bne.n	800ccda <_printf_float+0x342>
 800cd56:	e680      	b.n	800ca5a <_printf_float+0xc2>
 800cd58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd5a:	2a01      	cmp	r2, #1
 800cd5c:	dc01      	bgt.n	800cd62 <_printf_float+0x3ca>
 800cd5e:	07db      	lsls	r3, r3, #31
 800cd60:	d538      	bpl.n	800cdd4 <_printf_float+0x43c>
 800cd62:	2301      	movs	r3, #1
 800cd64:	4642      	mov	r2, r8
 800cd66:	4631      	mov	r1, r6
 800cd68:	4628      	mov	r0, r5
 800cd6a:	47b8      	blx	r7
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	f43f ae74 	beq.w	800ca5a <_printf_float+0xc2>
 800cd72:	ee18 3a10 	vmov	r3, s16
 800cd76:	4652      	mov	r2, sl
 800cd78:	4631      	mov	r1, r6
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	47b8      	blx	r7
 800cd7e:	3001      	adds	r0, #1
 800cd80:	f43f ae6b 	beq.w	800ca5a <_printf_float+0xc2>
 800cd84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd88:	2200      	movs	r2, #0
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	f7f3 fea4 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd90:	b9d8      	cbnz	r0, 800cdca <_printf_float+0x432>
 800cd92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd94:	f108 0201 	add.w	r2, r8, #1
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	4631      	mov	r1, r6
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	47b8      	blx	r7
 800cda0:	3001      	adds	r0, #1
 800cda2:	d10e      	bne.n	800cdc2 <_printf_float+0x42a>
 800cda4:	e659      	b.n	800ca5a <_printf_float+0xc2>
 800cda6:	2301      	movs	r3, #1
 800cda8:	4652      	mov	r2, sl
 800cdaa:	4631      	mov	r1, r6
 800cdac:	4628      	mov	r0, r5
 800cdae:	47b8      	blx	r7
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	f43f ae52 	beq.w	800ca5a <_printf_float+0xc2>
 800cdb6:	f108 0801 	add.w	r8, r8, #1
 800cdba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	4543      	cmp	r3, r8
 800cdc0:	dcf1      	bgt.n	800cda6 <_printf_float+0x40e>
 800cdc2:	464b      	mov	r3, r9
 800cdc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cdc8:	e6dc      	b.n	800cb84 <_printf_float+0x1ec>
 800cdca:	f04f 0800 	mov.w	r8, #0
 800cdce:	f104 0a1a 	add.w	sl, r4, #26
 800cdd2:	e7f2      	b.n	800cdba <_printf_float+0x422>
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	4642      	mov	r2, r8
 800cdd8:	e7df      	b.n	800cd9a <_printf_float+0x402>
 800cdda:	2301      	movs	r3, #1
 800cddc:	464a      	mov	r2, r9
 800cdde:	4631      	mov	r1, r6
 800cde0:	4628      	mov	r0, r5
 800cde2:	47b8      	blx	r7
 800cde4:	3001      	adds	r0, #1
 800cde6:	f43f ae38 	beq.w	800ca5a <_printf_float+0xc2>
 800cdea:	f108 0801 	add.w	r8, r8, #1
 800cdee:	68e3      	ldr	r3, [r4, #12]
 800cdf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cdf2:	1a5b      	subs	r3, r3, r1
 800cdf4:	4543      	cmp	r3, r8
 800cdf6:	dcf0      	bgt.n	800cdda <_printf_float+0x442>
 800cdf8:	e6fa      	b.n	800cbf0 <_printf_float+0x258>
 800cdfa:	f04f 0800 	mov.w	r8, #0
 800cdfe:	f104 0919 	add.w	r9, r4, #25
 800ce02:	e7f4      	b.n	800cdee <_printf_float+0x456>

0800ce04 <_printf_common>:
 800ce04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce08:	4616      	mov	r6, r2
 800ce0a:	4699      	mov	r9, r3
 800ce0c:	688a      	ldr	r2, [r1, #8]
 800ce0e:	690b      	ldr	r3, [r1, #16]
 800ce10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce14:	4293      	cmp	r3, r2
 800ce16:	bfb8      	it	lt
 800ce18:	4613      	movlt	r3, r2
 800ce1a:	6033      	str	r3, [r6, #0]
 800ce1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce20:	4607      	mov	r7, r0
 800ce22:	460c      	mov	r4, r1
 800ce24:	b10a      	cbz	r2, 800ce2a <_printf_common+0x26>
 800ce26:	3301      	adds	r3, #1
 800ce28:	6033      	str	r3, [r6, #0]
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	0699      	lsls	r1, r3, #26
 800ce2e:	bf42      	ittt	mi
 800ce30:	6833      	ldrmi	r3, [r6, #0]
 800ce32:	3302      	addmi	r3, #2
 800ce34:	6033      	strmi	r3, [r6, #0]
 800ce36:	6825      	ldr	r5, [r4, #0]
 800ce38:	f015 0506 	ands.w	r5, r5, #6
 800ce3c:	d106      	bne.n	800ce4c <_printf_common+0x48>
 800ce3e:	f104 0a19 	add.w	sl, r4, #25
 800ce42:	68e3      	ldr	r3, [r4, #12]
 800ce44:	6832      	ldr	r2, [r6, #0]
 800ce46:	1a9b      	subs	r3, r3, r2
 800ce48:	42ab      	cmp	r3, r5
 800ce4a:	dc26      	bgt.n	800ce9a <_printf_common+0x96>
 800ce4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce50:	1e13      	subs	r3, r2, #0
 800ce52:	6822      	ldr	r2, [r4, #0]
 800ce54:	bf18      	it	ne
 800ce56:	2301      	movne	r3, #1
 800ce58:	0692      	lsls	r2, r2, #26
 800ce5a:	d42b      	bmi.n	800ceb4 <_printf_common+0xb0>
 800ce5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce60:	4649      	mov	r1, r9
 800ce62:	4638      	mov	r0, r7
 800ce64:	47c0      	blx	r8
 800ce66:	3001      	adds	r0, #1
 800ce68:	d01e      	beq.n	800cea8 <_printf_common+0xa4>
 800ce6a:	6823      	ldr	r3, [r4, #0]
 800ce6c:	68e5      	ldr	r5, [r4, #12]
 800ce6e:	6832      	ldr	r2, [r6, #0]
 800ce70:	f003 0306 	and.w	r3, r3, #6
 800ce74:	2b04      	cmp	r3, #4
 800ce76:	bf08      	it	eq
 800ce78:	1aad      	subeq	r5, r5, r2
 800ce7a:	68a3      	ldr	r3, [r4, #8]
 800ce7c:	6922      	ldr	r2, [r4, #16]
 800ce7e:	bf0c      	ite	eq
 800ce80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce84:	2500      	movne	r5, #0
 800ce86:	4293      	cmp	r3, r2
 800ce88:	bfc4      	itt	gt
 800ce8a:	1a9b      	subgt	r3, r3, r2
 800ce8c:	18ed      	addgt	r5, r5, r3
 800ce8e:	2600      	movs	r6, #0
 800ce90:	341a      	adds	r4, #26
 800ce92:	42b5      	cmp	r5, r6
 800ce94:	d11a      	bne.n	800cecc <_printf_common+0xc8>
 800ce96:	2000      	movs	r0, #0
 800ce98:	e008      	b.n	800ceac <_printf_common+0xa8>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	4652      	mov	r2, sl
 800ce9e:	4649      	mov	r1, r9
 800cea0:	4638      	mov	r0, r7
 800cea2:	47c0      	blx	r8
 800cea4:	3001      	adds	r0, #1
 800cea6:	d103      	bne.n	800ceb0 <_printf_common+0xac>
 800cea8:	f04f 30ff 	mov.w	r0, #4294967295
 800ceac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb0:	3501      	adds	r5, #1
 800ceb2:	e7c6      	b.n	800ce42 <_printf_common+0x3e>
 800ceb4:	18e1      	adds	r1, r4, r3
 800ceb6:	1c5a      	adds	r2, r3, #1
 800ceb8:	2030      	movs	r0, #48	; 0x30
 800ceba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cebe:	4422      	add	r2, r4
 800cec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cec8:	3302      	adds	r3, #2
 800ceca:	e7c7      	b.n	800ce5c <_printf_common+0x58>
 800cecc:	2301      	movs	r3, #1
 800cece:	4622      	mov	r2, r4
 800ced0:	4649      	mov	r1, r9
 800ced2:	4638      	mov	r0, r7
 800ced4:	47c0      	blx	r8
 800ced6:	3001      	adds	r0, #1
 800ced8:	d0e6      	beq.n	800cea8 <_printf_common+0xa4>
 800ceda:	3601      	adds	r6, #1
 800cedc:	e7d9      	b.n	800ce92 <_printf_common+0x8e>
	...

0800cee0 <_printf_i>:
 800cee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cee4:	7e0f      	ldrb	r7, [r1, #24]
 800cee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cee8:	2f78      	cmp	r7, #120	; 0x78
 800ceea:	4691      	mov	r9, r2
 800ceec:	4680      	mov	r8, r0
 800ceee:	460c      	mov	r4, r1
 800cef0:	469a      	mov	sl, r3
 800cef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cef6:	d807      	bhi.n	800cf08 <_printf_i+0x28>
 800cef8:	2f62      	cmp	r7, #98	; 0x62
 800cefa:	d80a      	bhi.n	800cf12 <_printf_i+0x32>
 800cefc:	2f00      	cmp	r7, #0
 800cefe:	f000 80d8 	beq.w	800d0b2 <_printf_i+0x1d2>
 800cf02:	2f58      	cmp	r7, #88	; 0x58
 800cf04:	f000 80a3 	beq.w	800d04e <_printf_i+0x16e>
 800cf08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf10:	e03a      	b.n	800cf88 <_printf_i+0xa8>
 800cf12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf16:	2b15      	cmp	r3, #21
 800cf18:	d8f6      	bhi.n	800cf08 <_printf_i+0x28>
 800cf1a:	a101      	add	r1, pc, #4	; (adr r1, 800cf20 <_printf_i+0x40>)
 800cf1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf20:	0800cf79 	.word	0x0800cf79
 800cf24:	0800cf8d 	.word	0x0800cf8d
 800cf28:	0800cf09 	.word	0x0800cf09
 800cf2c:	0800cf09 	.word	0x0800cf09
 800cf30:	0800cf09 	.word	0x0800cf09
 800cf34:	0800cf09 	.word	0x0800cf09
 800cf38:	0800cf8d 	.word	0x0800cf8d
 800cf3c:	0800cf09 	.word	0x0800cf09
 800cf40:	0800cf09 	.word	0x0800cf09
 800cf44:	0800cf09 	.word	0x0800cf09
 800cf48:	0800cf09 	.word	0x0800cf09
 800cf4c:	0800d099 	.word	0x0800d099
 800cf50:	0800cfbd 	.word	0x0800cfbd
 800cf54:	0800d07b 	.word	0x0800d07b
 800cf58:	0800cf09 	.word	0x0800cf09
 800cf5c:	0800cf09 	.word	0x0800cf09
 800cf60:	0800d0bb 	.word	0x0800d0bb
 800cf64:	0800cf09 	.word	0x0800cf09
 800cf68:	0800cfbd 	.word	0x0800cfbd
 800cf6c:	0800cf09 	.word	0x0800cf09
 800cf70:	0800cf09 	.word	0x0800cf09
 800cf74:	0800d083 	.word	0x0800d083
 800cf78:	682b      	ldr	r3, [r5, #0]
 800cf7a:	1d1a      	adds	r2, r3, #4
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	602a      	str	r2, [r5, #0]
 800cf80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e0a3      	b.n	800d0d4 <_printf_i+0x1f4>
 800cf8c:	6820      	ldr	r0, [r4, #0]
 800cf8e:	6829      	ldr	r1, [r5, #0]
 800cf90:	0606      	lsls	r6, r0, #24
 800cf92:	f101 0304 	add.w	r3, r1, #4
 800cf96:	d50a      	bpl.n	800cfae <_printf_i+0xce>
 800cf98:	680e      	ldr	r6, [r1, #0]
 800cf9a:	602b      	str	r3, [r5, #0]
 800cf9c:	2e00      	cmp	r6, #0
 800cf9e:	da03      	bge.n	800cfa8 <_printf_i+0xc8>
 800cfa0:	232d      	movs	r3, #45	; 0x2d
 800cfa2:	4276      	negs	r6, r6
 800cfa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfa8:	485e      	ldr	r0, [pc, #376]	; (800d124 <_printf_i+0x244>)
 800cfaa:	230a      	movs	r3, #10
 800cfac:	e019      	b.n	800cfe2 <_printf_i+0x102>
 800cfae:	680e      	ldr	r6, [r1, #0]
 800cfb0:	602b      	str	r3, [r5, #0]
 800cfb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cfb6:	bf18      	it	ne
 800cfb8:	b236      	sxthne	r6, r6
 800cfba:	e7ef      	b.n	800cf9c <_printf_i+0xbc>
 800cfbc:	682b      	ldr	r3, [r5, #0]
 800cfbe:	6820      	ldr	r0, [r4, #0]
 800cfc0:	1d19      	adds	r1, r3, #4
 800cfc2:	6029      	str	r1, [r5, #0]
 800cfc4:	0601      	lsls	r1, r0, #24
 800cfc6:	d501      	bpl.n	800cfcc <_printf_i+0xec>
 800cfc8:	681e      	ldr	r6, [r3, #0]
 800cfca:	e002      	b.n	800cfd2 <_printf_i+0xf2>
 800cfcc:	0646      	lsls	r6, r0, #25
 800cfce:	d5fb      	bpl.n	800cfc8 <_printf_i+0xe8>
 800cfd0:	881e      	ldrh	r6, [r3, #0]
 800cfd2:	4854      	ldr	r0, [pc, #336]	; (800d124 <_printf_i+0x244>)
 800cfd4:	2f6f      	cmp	r7, #111	; 0x6f
 800cfd6:	bf0c      	ite	eq
 800cfd8:	2308      	moveq	r3, #8
 800cfda:	230a      	movne	r3, #10
 800cfdc:	2100      	movs	r1, #0
 800cfde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cfe2:	6865      	ldr	r5, [r4, #4]
 800cfe4:	60a5      	str	r5, [r4, #8]
 800cfe6:	2d00      	cmp	r5, #0
 800cfe8:	bfa2      	ittt	ge
 800cfea:	6821      	ldrge	r1, [r4, #0]
 800cfec:	f021 0104 	bicge.w	r1, r1, #4
 800cff0:	6021      	strge	r1, [r4, #0]
 800cff2:	b90e      	cbnz	r6, 800cff8 <_printf_i+0x118>
 800cff4:	2d00      	cmp	r5, #0
 800cff6:	d04d      	beq.n	800d094 <_printf_i+0x1b4>
 800cff8:	4615      	mov	r5, r2
 800cffa:	fbb6 f1f3 	udiv	r1, r6, r3
 800cffe:	fb03 6711 	mls	r7, r3, r1, r6
 800d002:	5dc7      	ldrb	r7, [r0, r7]
 800d004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d008:	4637      	mov	r7, r6
 800d00a:	42bb      	cmp	r3, r7
 800d00c:	460e      	mov	r6, r1
 800d00e:	d9f4      	bls.n	800cffa <_printf_i+0x11a>
 800d010:	2b08      	cmp	r3, #8
 800d012:	d10b      	bne.n	800d02c <_printf_i+0x14c>
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	07de      	lsls	r6, r3, #31
 800d018:	d508      	bpl.n	800d02c <_printf_i+0x14c>
 800d01a:	6923      	ldr	r3, [r4, #16]
 800d01c:	6861      	ldr	r1, [r4, #4]
 800d01e:	4299      	cmp	r1, r3
 800d020:	bfde      	ittt	le
 800d022:	2330      	movle	r3, #48	; 0x30
 800d024:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d02c:	1b52      	subs	r2, r2, r5
 800d02e:	6122      	str	r2, [r4, #16]
 800d030:	f8cd a000 	str.w	sl, [sp]
 800d034:	464b      	mov	r3, r9
 800d036:	aa03      	add	r2, sp, #12
 800d038:	4621      	mov	r1, r4
 800d03a:	4640      	mov	r0, r8
 800d03c:	f7ff fee2 	bl	800ce04 <_printf_common>
 800d040:	3001      	adds	r0, #1
 800d042:	d14c      	bne.n	800d0de <_printf_i+0x1fe>
 800d044:	f04f 30ff 	mov.w	r0, #4294967295
 800d048:	b004      	add	sp, #16
 800d04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04e:	4835      	ldr	r0, [pc, #212]	; (800d124 <_printf_i+0x244>)
 800d050:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d054:	6829      	ldr	r1, [r5, #0]
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	f851 6b04 	ldr.w	r6, [r1], #4
 800d05c:	6029      	str	r1, [r5, #0]
 800d05e:	061d      	lsls	r5, r3, #24
 800d060:	d514      	bpl.n	800d08c <_printf_i+0x1ac>
 800d062:	07df      	lsls	r7, r3, #31
 800d064:	bf44      	itt	mi
 800d066:	f043 0320 	orrmi.w	r3, r3, #32
 800d06a:	6023      	strmi	r3, [r4, #0]
 800d06c:	b91e      	cbnz	r6, 800d076 <_printf_i+0x196>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	f023 0320 	bic.w	r3, r3, #32
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	2310      	movs	r3, #16
 800d078:	e7b0      	b.n	800cfdc <_printf_i+0xfc>
 800d07a:	6823      	ldr	r3, [r4, #0]
 800d07c:	f043 0320 	orr.w	r3, r3, #32
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	2378      	movs	r3, #120	; 0x78
 800d084:	4828      	ldr	r0, [pc, #160]	; (800d128 <_printf_i+0x248>)
 800d086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d08a:	e7e3      	b.n	800d054 <_printf_i+0x174>
 800d08c:	0659      	lsls	r1, r3, #25
 800d08e:	bf48      	it	mi
 800d090:	b2b6      	uxthmi	r6, r6
 800d092:	e7e6      	b.n	800d062 <_printf_i+0x182>
 800d094:	4615      	mov	r5, r2
 800d096:	e7bb      	b.n	800d010 <_printf_i+0x130>
 800d098:	682b      	ldr	r3, [r5, #0]
 800d09a:	6826      	ldr	r6, [r4, #0]
 800d09c:	6961      	ldr	r1, [r4, #20]
 800d09e:	1d18      	adds	r0, r3, #4
 800d0a0:	6028      	str	r0, [r5, #0]
 800d0a2:	0635      	lsls	r5, r6, #24
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	d501      	bpl.n	800d0ac <_printf_i+0x1cc>
 800d0a8:	6019      	str	r1, [r3, #0]
 800d0aa:	e002      	b.n	800d0b2 <_printf_i+0x1d2>
 800d0ac:	0670      	lsls	r0, r6, #25
 800d0ae:	d5fb      	bpl.n	800d0a8 <_printf_i+0x1c8>
 800d0b0:	8019      	strh	r1, [r3, #0]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	6123      	str	r3, [r4, #16]
 800d0b6:	4615      	mov	r5, r2
 800d0b8:	e7ba      	b.n	800d030 <_printf_i+0x150>
 800d0ba:	682b      	ldr	r3, [r5, #0]
 800d0bc:	1d1a      	adds	r2, r3, #4
 800d0be:	602a      	str	r2, [r5, #0]
 800d0c0:	681d      	ldr	r5, [r3, #0]
 800d0c2:	6862      	ldr	r2, [r4, #4]
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	f7f3 f892 	bl	80001f0 <memchr>
 800d0cc:	b108      	cbz	r0, 800d0d2 <_printf_i+0x1f2>
 800d0ce:	1b40      	subs	r0, r0, r5
 800d0d0:	6060      	str	r0, [r4, #4]
 800d0d2:	6863      	ldr	r3, [r4, #4]
 800d0d4:	6123      	str	r3, [r4, #16]
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0dc:	e7a8      	b.n	800d030 <_printf_i+0x150>
 800d0de:	6923      	ldr	r3, [r4, #16]
 800d0e0:	462a      	mov	r2, r5
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	4640      	mov	r0, r8
 800d0e6:	47d0      	blx	sl
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d0ab      	beq.n	800d044 <_printf_i+0x164>
 800d0ec:	6823      	ldr	r3, [r4, #0]
 800d0ee:	079b      	lsls	r3, r3, #30
 800d0f0:	d413      	bmi.n	800d11a <_printf_i+0x23a>
 800d0f2:	68e0      	ldr	r0, [r4, #12]
 800d0f4:	9b03      	ldr	r3, [sp, #12]
 800d0f6:	4298      	cmp	r0, r3
 800d0f8:	bfb8      	it	lt
 800d0fa:	4618      	movlt	r0, r3
 800d0fc:	e7a4      	b.n	800d048 <_printf_i+0x168>
 800d0fe:	2301      	movs	r3, #1
 800d100:	4632      	mov	r2, r6
 800d102:	4649      	mov	r1, r9
 800d104:	4640      	mov	r0, r8
 800d106:	47d0      	blx	sl
 800d108:	3001      	adds	r0, #1
 800d10a:	d09b      	beq.n	800d044 <_printf_i+0x164>
 800d10c:	3501      	adds	r5, #1
 800d10e:	68e3      	ldr	r3, [r4, #12]
 800d110:	9903      	ldr	r1, [sp, #12]
 800d112:	1a5b      	subs	r3, r3, r1
 800d114:	42ab      	cmp	r3, r5
 800d116:	dcf2      	bgt.n	800d0fe <_printf_i+0x21e>
 800d118:	e7eb      	b.n	800d0f2 <_printf_i+0x212>
 800d11a:	2500      	movs	r5, #0
 800d11c:	f104 0619 	add.w	r6, r4, #25
 800d120:	e7f5      	b.n	800d10e <_printf_i+0x22e>
 800d122:	bf00      	nop
 800d124:	0801023a 	.word	0x0801023a
 800d128:	0801024b 	.word	0x0801024b

0800d12c <siprintf>:
 800d12c:	b40e      	push	{r1, r2, r3}
 800d12e:	b500      	push	{lr}
 800d130:	b09c      	sub	sp, #112	; 0x70
 800d132:	ab1d      	add	r3, sp, #116	; 0x74
 800d134:	9002      	str	r0, [sp, #8]
 800d136:	9006      	str	r0, [sp, #24]
 800d138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d13c:	4809      	ldr	r0, [pc, #36]	; (800d164 <siprintf+0x38>)
 800d13e:	9107      	str	r1, [sp, #28]
 800d140:	9104      	str	r1, [sp, #16]
 800d142:	4909      	ldr	r1, [pc, #36]	; (800d168 <siprintf+0x3c>)
 800d144:	f853 2b04 	ldr.w	r2, [r3], #4
 800d148:	9105      	str	r1, [sp, #20]
 800d14a:	6800      	ldr	r0, [r0, #0]
 800d14c:	9301      	str	r3, [sp, #4]
 800d14e:	a902      	add	r1, sp, #8
 800d150:	f001 fb78 	bl	800e844 <_svfiprintf_r>
 800d154:	9b02      	ldr	r3, [sp, #8]
 800d156:	2200      	movs	r2, #0
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	b01c      	add	sp, #112	; 0x70
 800d15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d160:	b003      	add	sp, #12
 800d162:	4770      	bx	lr
 800d164:	20000024 	.word	0x20000024
 800d168:	ffff0208 	.word	0xffff0208

0800d16c <quorem>:
 800d16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d170:	6903      	ldr	r3, [r0, #16]
 800d172:	690c      	ldr	r4, [r1, #16]
 800d174:	42a3      	cmp	r3, r4
 800d176:	4607      	mov	r7, r0
 800d178:	f2c0 8081 	blt.w	800d27e <quorem+0x112>
 800d17c:	3c01      	subs	r4, #1
 800d17e:	f101 0814 	add.w	r8, r1, #20
 800d182:	f100 0514 	add.w	r5, r0, #20
 800d186:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d18a:	9301      	str	r3, [sp, #4]
 800d18c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d194:	3301      	adds	r3, #1
 800d196:	429a      	cmp	r2, r3
 800d198:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d19c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1a4:	d331      	bcc.n	800d20a <quorem+0x9e>
 800d1a6:	f04f 0e00 	mov.w	lr, #0
 800d1aa:	4640      	mov	r0, r8
 800d1ac:	46ac      	mov	ip, r5
 800d1ae:	46f2      	mov	sl, lr
 800d1b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d1b4:	b293      	uxth	r3, r2
 800d1b6:	fb06 e303 	mla	r3, r6, r3, lr
 800d1ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	ebaa 0303 	sub.w	r3, sl, r3
 800d1c4:	f8dc a000 	ldr.w	sl, [ip]
 800d1c8:	0c12      	lsrs	r2, r2, #16
 800d1ca:	fa13 f38a 	uxtah	r3, r3, sl
 800d1ce:	fb06 e202 	mla	r2, r6, r2, lr
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	9b00      	ldr	r3, [sp, #0]
 800d1d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1da:	b292      	uxth	r2, r2
 800d1dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d1e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1e4:	f8bd 3000 	ldrh.w	r3, [sp]
 800d1e8:	4581      	cmp	r9, r0
 800d1ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1ee:	f84c 3b04 	str.w	r3, [ip], #4
 800d1f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d1f6:	d2db      	bcs.n	800d1b0 <quorem+0x44>
 800d1f8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d1fc:	b92b      	cbnz	r3, 800d20a <quorem+0x9e>
 800d1fe:	9b01      	ldr	r3, [sp, #4]
 800d200:	3b04      	subs	r3, #4
 800d202:	429d      	cmp	r5, r3
 800d204:	461a      	mov	r2, r3
 800d206:	d32e      	bcc.n	800d266 <quorem+0xfa>
 800d208:	613c      	str	r4, [r7, #16]
 800d20a:	4638      	mov	r0, r7
 800d20c:	f001 f8c6 	bl	800e39c <__mcmp>
 800d210:	2800      	cmp	r0, #0
 800d212:	db24      	blt.n	800d25e <quorem+0xf2>
 800d214:	3601      	adds	r6, #1
 800d216:	4628      	mov	r0, r5
 800d218:	f04f 0c00 	mov.w	ip, #0
 800d21c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d220:	f8d0 e000 	ldr.w	lr, [r0]
 800d224:	b293      	uxth	r3, r2
 800d226:	ebac 0303 	sub.w	r3, ip, r3
 800d22a:	0c12      	lsrs	r2, r2, #16
 800d22c:	fa13 f38e 	uxtah	r3, r3, lr
 800d230:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d238:	b29b      	uxth	r3, r3
 800d23a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d23e:	45c1      	cmp	r9, r8
 800d240:	f840 3b04 	str.w	r3, [r0], #4
 800d244:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d248:	d2e8      	bcs.n	800d21c <quorem+0xb0>
 800d24a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d24e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d252:	b922      	cbnz	r2, 800d25e <quorem+0xf2>
 800d254:	3b04      	subs	r3, #4
 800d256:	429d      	cmp	r5, r3
 800d258:	461a      	mov	r2, r3
 800d25a:	d30a      	bcc.n	800d272 <quorem+0x106>
 800d25c:	613c      	str	r4, [r7, #16]
 800d25e:	4630      	mov	r0, r6
 800d260:	b003      	add	sp, #12
 800d262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d266:	6812      	ldr	r2, [r2, #0]
 800d268:	3b04      	subs	r3, #4
 800d26a:	2a00      	cmp	r2, #0
 800d26c:	d1cc      	bne.n	800d208 <quorem+0x9c>
 800d26e:	3c01      	subs	r4, #1
 800d270:	e7c7      	b.n	800d202 <quorem+0x96>
 800d272:	6812      	ldr	r2, [r2, #0]
 800d274:	3b04      	subs	r3, #4
 800d276:	2a00      	cmp	r2, #0
 800d278:	d1f0      	bne.n	800d25c <quorem+0xf0>
 800d27a:	3c01      	subs	r4, #1
 800d27c:	e7eb      	b.n	800d256 <quorem+0xea>
 800d27e:	2000      	movs	r0, #0
 800d280:	e7ee      	b.n	800d260 <quorem+0xf4>
 800d282:	0000      	movs	r0, r0
 800d284:	0000      	movs	r0, r0
	...

0800d288 <_dtoa_r>:
 800d288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28c:	ed2d 8b04 	vpush	{d8-d9}
 800d290:	ec57 6b10 	vmov	r6, r7, d0
 800d294:	b093      	sub	sp, #76	; 0x4c
 800d296:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d298:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d29c:	9106      	str	r1, [sp, #24]
 800d29e:	ee10 aa10 	vmov	sl, s0
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	9209      	str	r2, [sp, #36]	; 0x24
 800d2a6:	930c      	str	r3, [sp, #48]	; 0x30
 800d2a8:	46bb      	mov	fp, r7
 800d2aa:	b975      	cbnz	r5, 800d2ca <_dtoa_r+0x42>
 800d2ac:	2010      	movs	r0, #16
 800d2ae:	f000 fddd 	bl	800de6c <malloc>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	6260      	str	r0, [r4, #36]	; 0x24
 800d2b6:	b920      	cbnz	r0, 800d2c2 <_dtoa_r+0x3a>
 800d2b8:	4ba7      	ldr	r3, [pc, #668]	; (800d558 <_dtoa_r+0x2d0>)
 800d2ba:	21ea      	movs	r1, #234	; 0xea
 800d2bc:	48a7      	ldr	r0, [pc, #668]	; (800d55c <_dtoa_r+0x2d4>)
 800d2be:	f001 fbd1 	bl	800ea64 <__assert_func>
 800d2c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d2c6:	6005      	str	r5, [r0, #0]
 800d2c8:	60c5      	str	r5, [r0, #12]
 800d2ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2cc:	6819      	ldr	r1, [r3, #0]
 800d2ce:	b151      	cbz	r1, 800d2e6 <_dtoa_r+0x5e>
 800d2d0:	685a      	ldr	r2, [r3, #4]
 800d2d2:	604a      	str	r2, [r1, #4]
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	4093      	lsls	r3, r2
 800d2d8:	608b      	str	r3, [r1, #8]
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f000 fe1c 	bl	800df18 <_Bfree>
 800d2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	1e3b      	subs	r3, r7, #0
 800d2e8:	bfaa      	itet	ge
 800d2ea:	2300      	movge	r3, #0
 800d2ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d2f0:	f8c8 3000 	strge.w	r3, [r8]
 800d2f4:	4b9a      	ldr	r3, [pc, #616]	; (800d560 <_dtoa_r+0x2d8>)
 800d2f6:	bfbc      	itt	lt
 800d2f8:	2201      	movlt	r2, #1
 800d2fa:	f8c8 2000 	strlt.w	r2, [r8]
 800d2fe:	ea33 030b 	bics.w	r3, r3, fp
 800d302:	d11b      	bne.n	800d33c <_dtoa_r+0xb4>
 800d304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d306:	f242 730f 	movw	r3, #9999	; 0x270f
 800d30a:	6013      	str	r3, [r2, #0]
 800d30c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d310:	4333      	orrs	r3, r6
 800d312:	f000 8592 	beq.w	800de3a <_dtoa_r+0xbb2>
 800d316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d318:	b963      	cbnz	r3, 800d334 <_dtoa_r+0xac>
 800d31a:	4b92      	ldr	r3, [pc, #584]	; (800d564 <_dtoa_r+0x2dc>)
 800d31c:	e022      	b.n	800d364 <_dtoa_r+0xdc>
 800d31e:	4b92      	ldr	r3, [pc, #584]	; (800d568 <_dtoa_r+0x2e0>)
 800d320:	9301      	str	r3, [sp, #4]
 800d322:	3308      	adds	r3, #8
 800d324:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d326:	6013      	str	r3, [r2, #0]
 800d328:	9801      	ldr	r0, [sp, #4]
 800d32a:	b013      	add	sp, #76	; 0x4c
 800d32c:	ecbd 8b04 	vpop	{d8-d9}
 800d330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d334:	4b8b      	ldr	r3, [pc, #556]	; (800d564 <_dtoa_r+0x2dc>)
 800d336:	9301      	str	r3, [sp, #4]
 800d338:	3303      	adds	r3, #3
 800d33a:	e7f3      	b.n	800d324 <_dtoa_r+0x9c>
 800d33c:	2200      	movs	r2, #0
 800d33e:	2300      	movs	r3, #0
 800d340:	4650      	mov	r0, sl
 800d342:	4659      	mov	r1, fp
 800d344:	f7f3 fbc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800d348:	ec4b ab19 	vmov	d9, sl, fp
 800d34c:	4680      	mov	r8, r0
 800d34e:	b158      	cbz	r0, 800d368 <_dtoa_r+0xe0>
 800d350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d352:	2301      	movs	r3, #1
 800d354:	6013      	str	r3, [r2, #0]
 800d356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d358:	2b00      	cmp	r3, #0
 800d35a:	f000 856b 	beq.w	800de34 <_dtoa_r+0xbac>
 800d35e:	4883      	ldr	r0, [pc, #524]	; (800d56c <_dtoa_r+0x2e4>)
 800d360:	6018      	str	r0, [r3, #0]
 800d362:	1e43      	subs	r3, r0, #1
 800d364:	9301      	str	r3, [sp, #4]
 800d366:	e7df      	b.n	800d328 <_dtoa_r+0xa0>
 800d368:	ec4b ab10 	vmov	d0, sl, fp
 800d36c:	aa10      	add	r2, sp, #64	; 0x40
 800d36e:	a911      	add	r1, sp, #68	; 0x44
 800d370:	4620      	mov	r0, r4
 800d372:	f001 f8b9 	bl	800e4e8 <__d2b>
 800d376:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d37a:	ee08 0a10 	vmov	s16, r0
 800d37e:	2d00      	cmp	r5, #0
 800d380:	f000 8084 	beq.w	800d48c <_dtoa_r+0x204>
 800d384:	ee19 3a90 	vmov	r3, s19
 800d388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d38c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d390:	4656      	mov	r6, sl
 800d392:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d396:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d39a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d39e:	4b74      	ldr	r3, [pc, #464]	; (800d570 <_dtoa_r+0x2e8>)
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	4639      	mov	r1, r7
 800d3a6:	f7f2 ff77 	bl	8000298 <__aeabi_dsub>
 800d3aa:	a365      	add	r3, pc, #404	; (adr r3, 800d540 <_dtoa_r+0x2b8>)
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	f7f3 f92a 	bl	8000608 <__aeabi_dmul>
 800d3b4:	a364      	add	r3, pc, #400	; (adr r3, 800d548 <_dtoa_r+0x2c0>)
 800d3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ba:	f7f2 ff6f 	bl	800029c <__adddf3>
 800d3be:	4606      	mov	r6, r0
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	460f      	mov	r7, r1
 800d3c4:	f7f3 f8b6 	bl	8000534 <__aeabi_i2d>
 800d3c8:	a361      	add	r3, pc, #388	; (adr r3, 800d550 <_dtoa_r+0x2c8>)
 800d3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ce:	f7f3 f91b 	bl	8000608 <__aeabi_dmul>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	4639      	mov	r1, r7
 800d3da:	f7f2 ff5f 	bl	800029c <__adddf3>
 800d3de:	4606      	mov	r6, r0
 800d3e0:	460f      	mov	r7, r1
 800d3e2:	f7f3 fbc1 	bl	8000b68 <__aeabi_d2iz>
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	9000      	str	r0, [sp, #0]
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	4639      	mov	r1, r7
 800d3f0:	f7f3 fb7c 	bl	8000aec <__aeabi_dcmplt>
 800d3f4:	b150      	cbz	r0, 800d40c <_dtoa_r+0x184>
 800d3f6:	9800      	ldr	r0, [sp, #0]
 800d3f8:	f7f3 f89c 	bl	8000534 <__aeabi_i2d>
 800d3fc:	4632      	mov	r2, r6
 800d3fe:	463b      	mov	r3, r7
 800d400:	f7f3 fb6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800d404:	b910      	cbnz	r0, 800d40c <_dtoa_r+0x184>
 800d406:	9b00      	ldr	r3, [sp, #0]
 800d408:	3b01      	subs	r3, #1
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	9b00      	ldr	r3, [sp, #0]
 800d40e:	2b16      	cmp	r3, #22
 800d410:	d85a      	bhi.n	800d4c8 <_dtoa_r+0x240>
 800d412:	9a00      	ldr	r2, [sp, #0]
 800d414:	4b57      	ldr	r3, [pc, #348]	; (800d574 <_dtoa_r+0x2ec>)
 800d416:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41e:	ec51 0b19 	vmov	r0, r1, d9
 800d422:	f7f3 fb63 	bl	8000aec <__aeabi_dcmplt>
 800d426:	2800      	cmp	r0, #0
 800d428:	d050      	beq.n	800d4cc <_dtoa_r+0x244>
 800d42a:	9b00      	ldr	r3, [sp, #0]
 800d42c:	3b01      	subs	r3, #1
 800d42e:	9300      	str	r3, [sp, #0]
 800d430:	2300      	movs	r3, #0
 800d432:	930b      	str	r3, [sp, #44]	; 0x2c
 800d434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d436:	1b5d      	subs	r5, r3, r5
 800d438:	1e6b      	subs	r3, r5, #1
 800d43a:	9305      	str	r3, [sp, #20]
 800d43c:	bf45      	ittet	mi
 800d43e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d442:	9304      	strmi	r3, [sp, #16]
 800d444:	2300      	movpl	r3, #0
 800d446:	2300      	movmi	r3, #0
 800d448:	bf4c      	ite	mi
 800d44a:	9305      	strmi	r3, [sp, #20]
 800d44c:	9304      	strpl	r3, [sp, #16]
 800d44e:	9b00      	ldr	r3, [sp, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	db3d      	blt.n	800d4d0 <_dtoa_r+0x248>
 800d454:	9b05      	ldr	r3, [sp, #20]
 800d456:	9a00      	ldr	r2, [sp, #0]
 800d458:	920a      	str	r2, [sp, #40]	; 0x28
 800d45a:	4413      	add	r3, r2
 800d45c:	9305      	str	r3, [sp, #20]
 800d45e:	2300      	movs	r3, #0
 800d460:	9307      	str	r3, [sp, #28]
 800d462:	9b06      	ldr	r3, [sp, #24]
 800d464:	2b09      	cmp	r3, #9
 800d466:	f200 8089 	bhi.w	800d57c <_dtoa_r+0x2f4>
 800d46a:	2b05      	cmp	r3, #5
 800d46c:	bfc4      	itt	gt
 800d46e:	3b04      	subgt	r3, #4
 800d470:	9306      	strgt	r3, [sp, #24]
 800d472:	9b06      	ldr	r3, [sp, #24]
 800d474:	f1a3 0302 	sub.w	r3, r3, #2
 800d478:	bfcc      	ite	gt
 800d47a:	2500      	movgt	r5, #0
 800d47c:	2501      	movle	r5, #1
 800d47e:	2b03      	cmp	r3, #3
 800d480:	f200 8087 	bhi.w	800d592 <_dtoa_r+0x30a>
 800d484:	e8df f003 	tbb	[pc, r3]
 800d488:	59383a2d 	.word	0x59383a2d
 800d48c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d490:	441d      	add	r5, r3
 800d492:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d496:	2b20      	cmp	r3, #32
 800d498:	bfc1      	itttt	gt
 800d49a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d49e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d4a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800d4a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d4aa:	bfda      	itte	le
 800d4ac:	f1c3 0320 	rsble	r3, r3, #32
 800d4b0:	fa06 f003 	lslle.w	r0, r6, r3
 800d4b4:	4318      	orrgt	r0, r3
 800d4b6:	f7f3 f82d 	bl	8000514 <__aeabi_ui2d>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	4606      	mov	r6, r0
 800d4be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d4c2:	3d01      	subs	r5, #1
 800d4c4:	930e      	str	r3, [sp, #56]	; 0x38
 800d4c6:	e76a      	b.n	800d39e <_dtoa_r+0x116>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e7b2      	b.n	800d432 <_dtoa_r+0x1aa>
 800d4cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4ce:	e7b1      	b.n	800d434 <_dtoa_r+0x1ac>
 800d4d0:	9b04      	ldr	r3, [sp, #16]
 800d4d2:	9a00      	ldr	r2, [sp, #0]
 800d4d4:	1a9b      	subs	r3, r3, r2
 800d4d6:	9304      	str	r3, [sp, #16]
 800d4d8:	4253      	negs	r3, r2
 800d4da:	9307      	str	r3, [sp, #28]
 800d4dc:	2300      	movs	r3, #0
 800d4de:	930a      	str	r3, [sp, #40]	; 0x28
 800d4e0:	e7bf      	b.n	800d462 <_dtoa_r+0x1da>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	9308      	str	r3, [sp, #32]
 800d4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	dc55      	bgt.n	800d598 <_dtoa_r+0x310>
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	9209      	str	r2, [sp, #36]	; 0x24
 800d4f6:	e00c      	b.n	800d512 <_dtoa_r+0x28a>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e7f3      	b.n	800d4e4 <_dtoa_r+0x25c>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d500:	9308      	str	r3, [sp, #32]
 800d502:	9b00      	ldr	r3, [sp, #0]
 800d504:	4413      	add	r3, r2
 800d506:	9302      	str	r3, [sp, #8]
 800d508:	3301      	adds	r3, #1
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	9303      	str	r3, [sp, #12]
 800d50e:	bfb8      	it	lt
 800d510:	2301      	movlt	r3, #1
 800d512:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d514:	2200      	movs	r2, #0
 800d516:	6042      	str	r2, [r0, #4]
 800d518:	2204      	movs	r2, #4
 800d51a:	f102 0614 	add.w	r6, r2, #20
 800d51e:	429e      	cmp	r6, r3
 800d520:	6841      	ldr	r1, [r0, #4]
 800d522:	d93d      	bls.n	800d5a0 <_dtoa_r+0x318>
 800d524:	4620      	mov	r0, r4
 800d526:	f000 fcb7 	bl	800de98 <_Balloc>
 800d52a:	9001      	str	r0, [sp, #4]
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d13b      	bne.n	800d5a8 <_dtoa_r+0x320>
 800d530:	4b11      	ldr	r3, [pc, #68]	; (800d578 <_dtoa_r+0x2f0>)
 800d532:	4602      	mov	r2, r0
 800d534:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d538:	e6c0      	b.n	800d2bc <_dtoa_r+0x34>
 800d53a:	2301      	movs	r3, #1
 800d53c:	e7df      	b.n	800d4fe <_dtoa_r+0x276>
 800d53e:	bf00      	nop
 800d540:	636f4361 	.word	0x636f4361
 800d544:	3fd287a7 	.word	0x3fd287a7
 800d548:	8b60c8b3 	.word	0x8b60c8b3
 800d54c:	3fc68a28 	.word	0x3fc68a28
 800d550:	509f79fb 	.word	0x509f79fb
 800d554:	3fd34413 	.word	0x3fd34413
 800d558:	08010269 	.word	0x08010269
 800d55c:	08010280 	.word	0x08010280
 800d560:	7ff00000 	.word	0x7ff00000
 800d564:	08010265 	.word	0x08010265
 800d568:	0801025c 	.word	0x0801025c
 800d56c:	08010239 	.word	0x08010239
 800d570:	3ff80000 	.word	0x3ff80000
 800d574:	08010370 	.word	0x08010370
 800d578:	080102db 	.word	0x080102db
 800d57c:	2501      	movs	r5, #1
 800d57e:	2300      	movs	r3, #0
 800d580:	9306      	str	r3, [sp, #24]
 800d582:	9508      	str	r5, [sp, #32]
 800d584:	f04f 33ff 	mov.w	r3, #4294967295
 800d588:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d58c:	2200      	movs	r2, #0
 800d58e:	2312      	movs	r3, #18
 800d590:	e7b0      	b.n	800d4f4 <_dtoa_r+0x26c>
 800d592:	2301      	movs	r3, #1
 800d594:	9308      	str	r3, [sp, #32]
 800d596:	e7f5      	b.n	800d584 <_dtoa_r+0x2fc>
 800d598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d59a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d59e:	e7b8      	b.n	800d512 <_dtoa_r+0x28a>
 800d5a0:	3101      	adds	r1, #1
 800d5a2:	6041      	str	r1, [r0, #4]
 800d5a4:	0052      	lsls	r2, r2, #1
 800d5a6:	e7b8      	b.n	800d51a <_dtoa_r+0x292>
 800d5a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5aa:	9a01      	ldr	r2, [sp, #4]
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	2b0e      	cmp	r3, #14
 800d5b2:	f200 809d 	bhi.w	800d6f0 <_dtoa_r+0x468>
 800d5b6:	2d00      	cmp	r5, #0
 800d5b8:	f000 809a 	beq.w	800d6f0 <_dtoa_r+0x468>
 800d5bc:	9b00      	ldr	r3, [sp, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	dd32      	ble.n	800d628 <_dtoa_r+0x3a0>
 800d5c2:	4ab7      	ldr	r2, [pc, #732]	; (800d8a0 <_dtoa_r+0x618>)
 800d5c4:	f003 030f 	and.w	r3, r3, #15
 800d5c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5d0:	9b00      	ldr	r3, [sp, #0]
 800d5d2:	05d8      	lsls	r0, r3, #23
 800d5d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d5d8:	d516      	bpl.n	800d608 <_dtoa_r+0x380>
 800d5da:	4bb2      	ldr	r3, [pc, #712]	; (800d8a4 <_dtoa_r+0x61c>)
 800d5dc:	ec51 0b19 	vmov	r0, r1, d9
 800d5e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5e4:	f7f3 f93a 	bl	800085c <__aeabi_ddiv>
 800d5e8:	f007 070f 	and.w	r7, r7, #15
 800d5ec:	4682      	mov	sl, r0
 800d5ee:	468b      	mov	fp, r1
 800d5f0:	2503      	movs	r5, #3
 800d5f2:	4eac      	ldr	r6, [pc, #688]	; (800d8a4 <_dtoa_r+0x61c>)
 800d5f4:	b957      	cbnz	r7, 800d60c <_dtoa_r+0x384>
 800d5f6:	4642      	mov	r2, r8
 800d5f8:	464b      	mov	r3, r9
 800d5fa:	4650      	mov	r0, sl
 800d5fc:	4659      	mov	r1, fp
 800d5fe:	f7f3 f92d 	bl	800085c <__aeabi_ddiv>
 800d602:	4682      	mov	sl, r0
 800d604:	468b      	mov	fp, r1
 800d606:	e028      	b.n	800d65a <_dtoa_r+0x3d2>
 800d608:	2502      	movs	r5, #2
 800d60a:	e7f2      	b.n	800d5f2 <_dtoa_r+0x36a>
 800d60c:	07f9      	lsls	r1, r7, #31
 800d60e:	d508      	bpl.n	800d622 <_dtoa_r+0x39a>
 800d610:	4640      	mov	r0, r8
 800d612:	4649      	mov	r1, r9
 800d614:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d618:	f7f2 fff6 	bl	8000608 <__aeabi_dmul>
 800d61c:	3501      	adds	r5, #1
 800d61e:	4680      	mov	r8, r0
 800d620:	4689      	mov	r9, r1
 800d622:	107f      	asrs	r7, r7, #1
 800d624:	3608      	adds	r6, #8
 800d626:	e7e5      	b.n	800d5f4 <_dtoa_r+0x36c>
 800d628:	f000 809b 	beq.w	800d762 <_dtoa_r+0x4da>
 800d62c:	9b00      	ldr	r3, [sp, #0]
 800d62e:	4f9d      	ldr	r7, [pc, #628]	; (800d8a4 <_dtoa_r+0x61c>)
 800d630:	425e      	negs	r6, r3
 800d632:	4b9b      	ldr	r3, [pc, #620]	; (800d8a0 <_dtoa_r+0x618>)
 800d634:	f006 020f 	and.w	r2, r6, #15
 800d638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d640:	ec51 0b19 	vmov	r0, r1, d9
 800d644:	f7f2 ffe0 	bl	8000608 <__aeabi_dmul>
 800d648:	1136      	asrs	r6, r6, #4
 800d64a:	4682      	mov	sl, r0
 800d64c:	468b      	mov	fp, r1
 800d64e:	2300      	movs	r3, #0
 800d650:	2502      	movs	r5, #2
 800d652:	2e00      	cmp	r6, #0
 800d654:	d17a      	bne.n	800d74c <_dtoa_r+0x4c4>
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1d3      	bne.n	800d602 <_dtoa_r+0x37a>
 800d65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f000 8082 	beq.w	800d766 <_dtoa_r+0x4de>
 800d662:	4b91      	ldr	r3, [pc, #580]	; (800d8a8 <_dtoa_r+0x620>)
 800d664:	2200      	movs	r2, #0
 800d666:	4650      	mov	r0, sl
 800d668:	4659      	mov	r1, fp
 800d66a:	f7f3 fa3f 	bl	8000aec <__aeabi_dcmplt>
 800d66e:	2800      	cmp	r0, #0
 800d670:	d079      	beq.n	800d766 <_dtoa_r+0x4de>
 800d672:	9b03      	ldr	r3, [sp, #12]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d076      	beq.n	800d766 <_dtoa_r+0x4de>
 800d678:	9b02      	ldr	r3, [sp, #8]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	dd36      	ble.n	800d6ec <_dtoa_r+0x464>
 800d67e:	9b00      	ldr	r3, [sp, #0]
 800d680:	4650      	mov	r0, sl
 800d682:	4659      	mov	r1, fp
 800d684:	1e5f      	subs	r7, r3, #1
 800d686:	2200      	movs	r2, #0
 800d688:	4b88      	ldr	r3, [pc, #544]	; (800d8ac <_dtoa_r+0x624>)
 800d68a:	f7f2 ffbd 	bl	8000608 <__aeabi_dmul>
 800d68e:	9e02      	ldr	r6, [sp, #8]
 800d690:	4682      	mov	sl, r0
 800d692:	468b      	mov	fp, r1
 800d694:	3501      	adds	r5, #1
 800d696:	4628      	mov	r0, r5
 800d698:	f7f2 ff4c 	bl	8000534 <__aeabi_i2d>
 800d69c:	4652      	mov	r2, sl
 800d69e:	465b      	mov	r3, fp
 800d6a0:	f7f2 ffb2 	bl	8000608 <__aeabi_dmul>
 800d6a4:	4b82      	ldr	r3, [pc, #520]	; (800d8b0 <_dtoa_r+0x628>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f7f2 fdf8 	bl	800029c <__adddf3>
 800d6ac:	46d0      	mov	r8, sl
 800d6ae:	46d9      	mov	r9, fp
 800d6b0:	4682      	mov	sl, r0
 800d6b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d6b6:	2e00      	cmp	r6, #0
 800d6b8:	d158      	bne.n	800d76c <_dtoa_r+0x4e4>
 800d6ba:	4b7e      	ldr	r3, [pc, #504]	; (800d8b4 <_dtoa_r+0x62c>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	4640      	mov	r0, r8
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	f7f2 fde9 	bl	8000298 <__aeabi_dsub>
 800d6c6:	4652      	mov	r2, sl
 800d6c8:	465b      	mov	r3, fp
 800d6ca:	4680      	mov	r8, r0
 800d6cc:	4689      	mov	r9, r1
 800d6ce:	f7f3 fa2b 	bl	8000b28 <__aeabi_dcmpgt>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	f040 8295 	bne.w	800dc02 <_dtoa_r+0x97a>
 800d6d8:	4652      	mov	r2, sl
 800d6da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d6de:	4640      	mov	r0, r8
 800d6e0:	4649      	mov	r1, r9
 800d6e2:	f7f3 fa03 	bl	8000aec <__aeabi_dcmplt>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	f040 8289 	bne.w	800dbfe <_dtoa_r+0x976>
 800d6ec:	ec5b ab19 	vmov	sl, fp, d9
 800d6f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f2c0 8148 	blt.w	800d988 <_dtoa_r+0x700>
 800d6f8:	9a00      	ldr	r2, [sp, #0]
 800d6fa:	2a0e      	cmp	r2, #14
 800d6fc:	f300 8144 	bgt.w	800d988 <_dtoa_r+0x700>
 800d700:	4b67      	ldr	r3, [pc, #412]	; (800d8a0 <_dtoa_r+0x618>)
 800d702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d706:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f280 80d5 	bge.w	800d8bc <_dtoa_r+0x634>
 800d712:	9b03      	ldr	r3, [sp, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	f300 80d1 	bgt.w	800d8bc <_dtoa_r+0x634>
 800d71a:	f040 826f 	bne.w	800dbfc <_dtoa_r+0x974>
 800d71e:	4b65      	ldr	r3, [pc, #404]	; (800d8b4 <_dtoa_r+0x62c>)
 800d720:	2200      	movs	r2, #0
 800d722:	4640      	mov	r0, r8
 800d724:	4649      	mov	r1, r9
 800d726:	f7f2 ff6f 	bl	8000608 <__aeabi_dmul>
 800d72a:	4652      	mov	r2, sl
 800d72c:	465b      	mov	r3, fp
 800d72e:	f7f3 f9f1 	bl	8000b14 <__aeabi_dcmpge>
 800d732:	9e03      	ldr	r6, [sp, #12]
 800d734:	4637      	mov	r7, r6
 800d736:	2800      	cmp	r0, #0
 800d738:	f040 8245 	bne.w	800dbc6 <_dtoa_r+0x93e>
 800d73c:	9d01      	ldr	r5, [sp, #4]
 800d73e:	2331      	movs	r3, #49	; 0x31
 800d740:	f805 3b01 	strb.w	r3, [r5], #1
 800d744:	9b00      	ldr	r3, [sp, #0]
 800d746:	3301      	adds	r3, #1
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	e240      	b.n	800dbce <_dtoa_r+0x946>
 800d74c:	07f2      	lsls	r2, r6, #31
 800d74e:	d505      	bpl.n	800d75c <_dtoa_r+0x4d4>
 800d750:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d754:	f7f2 ff58 	bl	8000608 <__aeabi_dmul>
 800d758:	3501      	adds	r5, #1
 800d75a:	2301      	movs	r3, #1
 800d75c:	1076      	asrs	r6, r6, #1
 800d75e:	3708      	adds	r7, #8
 800d760:	e777      	b.n	800d652 <_dtoa_r+0x3ca>
 800d762:	2502      	movs	r5, #2
 800d764:	e779      	b.n	800d65a <_dtoa_r+0x3d2>
 800d766:	9f00      	ldr	r7, [sp, #0]
 800d768:	9e03      	ldr	r6, [sp, #12]
 800d76a:	e794      	b.n	800d696 <_dtoa_r+0x40e>
 800d76c:	9901      	ldr	r1, [sp, #4]
 800d76e:	4b4c      	ldr	r3, [pc, #304]	; (800d8a0 <_dtoa_r+0x618>)
 800d770:	4431      	add	r1, r6
 800d772:	910d      	str	r1, [sp, #52]	; 0x34
 800d774:	9908      	ldr	r1, [sp, #32]
 800d776:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d77a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d77e:	2900      	cmp	r1, #0
 800d780:	d043      	beq.n	800d80a <_dtoa_r+0x582>
 800d782:	494d      	ldr	r1, [pc, #308]	; (800d8b8 <_dtoa_r+0x630>)
 800d784:	2000      	movs	r0, #0
 800d786:	f7f3 f869 	bl	800085c <__aeabi_ddiv>
 800d78a:	4652      	mov	r2, sl
 800d78c:	465b      	mov	r3, fp
 800d78e:	f7f2 fd83 	bl	8000298 <__aeabi_dsub>
 800d792:	9d01      	ldr	r5, [sp, #4]
 800d794:	4682      	mov	sl, r0
 800d796:	468b      	mov	fp, r1
 800d798:	4649      	mov	r1, r9
 800d79a:	4640      	mov	r0, r8
 800d79c:	f7f3 f9e4 	bl	8000b68 <__aeabi_d2iz>
 800d7a0:	4606      	mov	r6, r0
 800d7a2:	f7f2 fec7 	bl	8000534 <__aeabi_i2d>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	4649      	mov	r1, r9
 800d7ae:	f7f2 fd73 	bl	8000298 <__aeabi_dsub>
 800d7b2:	3630      	adds	r6, #48	; 0x30
 800d7b4:	f805 6b01 	strb.w	r6, [r5], #1
 800d7b8:	4652      	mov	r2, sl
 800d7ba:	465b      	mov	r3, fp
 800d7bc:	4680      	mov	r8, r0
 800d7be:	4689      	mov	r9, r1
 800d7c0:	f7f3 f994 	bl	8000aec <__aeabi_dcmplt>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d163      	bne.n	800d890 <_dtoa_r+0x608>
 800d7c8:	4642      	mov	r2, r8
 800d7ca:	464b      	mov	r3, r9
 800d7cc:	4936      	ldr	r1, [pc, #216]	; (800d8a8 <_dtoa_r+0x620>)
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	f7f2 fd62 	bl	8000298 <__aeabi_dsub>
 800d7d4:	4652      	mov	r2, sl
 800d7d6:	465b      	mov	r3, fp
 800d7d8:	f7f3 f988 	bl	8000aec <__aeabi_dcmplt>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	f040 80b5 	bne.w	800d94c <_dtoa_r+0x6c4>
 800d7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7e4:	429d      	cmp	r5, r3
 800d7e6:	d081      	beq.n	800d6ec <_dtoa_r+0x464>
 800d7e8:	4b30      	ldr	r3, [pc, #192]	; (800d8ac <_dtoa_r+0x624>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	4650      	mov	r0, sl
 800d7ee:	4659      	mov	r1, fp
 800d7f0:	f7f2 ff0a 	bl	8000608 <__aeabi_dmul>
 800d7f4:	4b2d      	ldr	r3, [pc, #180]	; (800d8ac <_dtoa_r+0x624>)
 800d7f6:	4682      	mov	sl, r0
 800d7f8:	468b      	mov	fp, r1
 800d7fa:	4640      	mov	r0, r8
 800d7fc:	4649      	mov	r1, r9
 800d7fe:	2200      	movs	r2, #0
 800d800:	f7f2 ff02 	bl	8000608 <__aeabi_dmul>
 800d804:	4680      	mov	r8, r0
 800d806:	4689      	mov	r9, r1
 800d808:	e7c6      	b.n	800d798 <_dtoa_r+0x510>
 800d80a:	4650      	mov	r0, sl
 800d80c:	4659      	mov	r1, fp
 800d80e:	f7f2 fefb 	bl	8000608 <__aeabi_dmul>
 800d812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d814:	9d01      	ldr	r5, [sp, #4]
 800d816:	930f      	str	r3, [sp, #60]	; 0x3c
 800d818:	4682      	mov	sl, r0
 800d81a:	468b      	mov	fp, r1
 800d81c:	4649      	mov	r1, r9
 800d81e:	4640      	mov	r0, r8
 800d820:	f7f3 f9a2 	bl	8000b68 <__aeabi_d2iz>
 800d824:	4606      	mov	r6, r0
 800d826:	f7f2 fe85 	bl	8000534 <__aeabi_i2d>
 800d82a:	3630      	adds	r6, #48	; 0x30
 800d82c:	4602      	mov	r2, r0
 800d82e:	460b      	mov	r3, r1
 800d830:	4640      	mov	r0, r8
 800d832:	4649      	mov	r1, r9
 800d834:	f7f2 fd30 	bl	8000298 <__aeabi_dsub>
 800d838:	f805 6b01 	strb.w	r6, [r5], #1
 800d83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d83e:	429d      	cmp	r5, r3
 800d840:	4680      	mov	r8, r0
 800d842:	4689      	mov	r9, r1
 800d844:	f04f 0200 	mov.w	r2, #0
 800d848:	d124      	bne.n	800d894 <_dtoa_r+0x60c>
 800d84a:	4b1b      	ldr	r3, [pc, #108]	; (800d8b8 <_dtoa_r+0x630>)
 800d84c:	4650      	mov	r0, sl
 800d84e:	4659      	mov	r1, fp
 800d850:	f7f2 fd24 	bl	800029c <__adddf3>
 800d854:	4602      	mov	r2, r0
 800d856:	460b      	mov	r3, r1
 800d858:	4640      	mov	r0, r8
 800d85a:	4649      	mov	r1, r9
 800d85c:	f7f3 f964 	bl	8000b28 <__aeabi_dcmpgt>
 800d860:	2800      	cmp	r0, #0
 800d862:	d173      	bne.n	800d94c <_dtoa_r+0x6c4>
 800d864:	4652      	mov	r2, sl
 800d866:	465b      	mov	r3, fp
 800d868:	4913      	ldr	r1, [pc, #76]	; (800d8b8 <_dtoa_r+0x630>)
 800d86a:	2000      	movs	r0, #0
 800d86c:	f7f2 fd14 	bl	8000298 <__aeabi_dsub>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	4640      	mov	r0, r8
 800d876:	4649      	mov	r1, r9
 800d878:	f7f3 f938 	bl	8000aec <__aeabi_dcmplt>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	f43f af35 	beq.w	800d6ec <_dtoa_r+0x464>
 800d882:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d884:	1e6b      	subs	r3, r5, #1
 800d886:	930f      	str	r3, [sp, #60]	; 0x3c
 800d888:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d88c:	2b30      	cmp	r3, #48	; 0x30
 800d88e:	d0f8      	beq.n	800d882 <_dtoa_r+0x5fa>
 800d890:	9700      	str	r7, [sp, #0]
 800d892:	e049      	b.n	800d928 <_dtoa_r+0x6a0>
 800d894:	4b05      	ldr	r3, [pc, #20]	; (800d8ac <_dtoa_r+0x624>)
 800d896:	f7f2 feb7 	bl	8000608 <__aeabi_dmul>
 800d89a:	4680      	mov	r8, r0
 800d89c:	4689      	mov	r9, r1
 800d89e:	e7bd      	b.n	800d81c <_dtoa_r+0x594>
 800d8a0:	08010370 	.word	0x08010370
 800d8a4:	08010348 	.word	0x08010348
 800d8a8:	3ff00000 	.word	0x3ff00000
 800d8ac:	40240000 	.word	0x40240000
 800d8b0:	401c0000 	.word	0x401c0000
 800d8b4:	40140000 	.word	0x40140000
 800d8b8:	3fe00000 	.word	0x3fe00000
 800d8bc:	9d01      	ldr	r5, [sp, #4]
 800d8be:	4656      	mov	r6, sl
 800d8c0:	465f      	mov	r7, fp
 800d8c2:	4642      	mov	r2, r8
 800d8c4:	464b      	mov	r3, r9
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	4639      	mov	r1, r7
 800d8ca:	f7f2 ffc7 	bl	800085c <__aeabi_ddiv>
 800d8ce:	f7f3 f94b 	bl	8000b68 <__aeabi_d2iz>
 800d8d2:	4682      	mov	sl, r0
 800d8d4:	f7f2 fe2e 	bl	8000534 <__aeabi_i2d>
 800d8d8:	4642      	mov	r2, r8
 800d8da:	464b      	mov	r3, r9
 800d8dc:	f7f2 fe94 	bl	8000608 <__aeabi_dmul>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	4639      	mov	r1, r7
 800d8e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d8ec:	f7f2 fcd4 	bl	8000298 <__aeabi_dsub>
 800d8f0:	f805 6b01 	strb.w	r6, [r5], #1
 800d8f4:	9e01      	ldr	r6, [sp, #4]
 800d8f6:	9f03      	ldr	r7, [sp, #12]
 800d8f8:	1bae      	subs	r6, r5, r6
 800d8fa:	42b7      	cmp	r7, r6
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	460b      	mov	r3, r1
 800d900:	d135      	bne.n	800d96e <_dtoa_r+0x6e6>
 800d902:	f7f2 fccb 	bl	800029c <__adddf3>
 800d906:	4642      	mov	r2, r8
 800d908:	464b      	mov	r3, r9
 800d90a:	4606      	mov	r6, r0
 800d90c:	460f      	mov	r7, r1
 800d90e:	f7f3 f90b 	bl	8000b28 <__aeabi_dcmpgt>
 800d912:	b9d0      	cbnz	r0, 800d94a <_dtoa_r+0x6c2>
 800d914:	4642      	mov	r2, r8
 800d916:	464b      	mov	r3, r9
 800d918:	4630      	mov	r0, r6
 800d91a:	4639      	mov	r1, r7
 800d91c:	f7f3 f8dc 	bl	8000ad8 <__aeabi_dcmpeq>
 800d920:	b110      	cbz	r0, 800d928 <_dtoa_r+0x6a0>
 800d922:	f01a 0f01 	tst.w	sl, #1
 800d926:	d110      	bne.n	800d94a <_dtoa_r+0x6c2>
 800d928:	4620      	mov	r0, r4
 800d92a:	ee18 1a10 	vmov	r1, s16
 800d92e:	f000 faf3 	bl	800df18 <_Bfree>
 800d932:	2300      	movs	r3, #0
 800d934:	9800      	ldr	r0, [sp, #0]
 800d936:	702b      	strb	r3, [r5, #0]
 800d938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d93a:	3001      	adds	r0, #1
 800d93c:	6018      	str	r0, [r3, #0]
 800d93e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d940:	2b00      	cmp	r3, #0
 800d942:	f43f acf1 	beq.w	800d328 <_dtoa_r+0xa0>
 800d946:	601d      	str	r5, [r3, #0]
 800d948:	e4ee      	b.n	800d328 <_dtoa_r+0xa0>
 800d94a:	9f00      	ldr	r7, [sp, #0]
 800d94c:	462b      	mov	r3, r5
 800d94e:	461d      	mov	r5, r3
 800d950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d954:	2a39      	cmp	r2, #57	; 0x39
 800d956:	d106      	bne.n	800d966 <_dtoa_r+0x6de>
 800d958:	9a01      	ldr	r2, [sp, #4]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d1f7      	bne.n	800d94e <_dtoa_r+0x6c6>
 800d95e:	9901      	ldr	r1, [sp, #4]
 800d960:	2230      	movs	r2, #48	; 0x30
 800d962:	3701      	adds	r7, #1
 800d964:	700a      	strb	r2, [r1, #0]
 800d966:	781a      	ldrb	r2, [r3, #0]
 800d968:	3201      	adds	r2, #1
 800d96a:	701a      	strb	r2, [r3, #0]
 800d96c:	e790      	b.n	800d890 <_dtoa_r+0x608>
 800d96e:	4ba6      	ldr	r3, [pc, #664]	; (800dc08 <_dtoa_r+0x980>)
 800d970:	2200      	movs	r2, #0
 800d972:	f7f2 fe49 	bl	8000608 <__aeabi_dmul>
 800d976:	2200      	movs	r2, #0
 800d978:	2300      	movs	r3, #0
 800d97a:	4606      	mov	r6, r0
 800d97c:	460f      	mov	r7, r1
 800d97e:	f7f3 f8ab 	bl	8000ad8 <__aeabi_dcmpeq>
 800d982:	2800      	cmp	r0, #0
 800d984:	d09d      	beq.n	800d8c2 <_dtoa_r+0x63a>
 800d986:	e7cf      	b.n	800d928 <_dtoa_r+0x6a0>
 800d988:	9a08      	ldr	r2, [sp, #32]
 800d98a:	2a00      	cmp	r2, #0
 800d98c:	f000 80d7 	beq.w	800db3e <_dtoa_r+0x8b6>
 800d990:	9a06      	ldr	r2, [sp, #24]
 800d992:	2a01      	cmp	r2, #1
 800d994:	f300 80ba 	bgt.w	800db0c <_dtoa_r+0x884>
 800d998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d99a:	2a00      	cmp	r2, #0
 800d99c:	f000 80b2 	beq.w	800db04 <_dtoa_r+0x87c>
 800d9a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d9a4:	9e07      	ldr	r6, [sp, #28]
 800d9a6:	9d04      	ldr	r5, [sp, #16]
 800d9a8:	9a04      	ldr	r2, [sp, #16]
 800d9aa:	441a      	add	r2, r3
 800d9ac:	9204      	str	r2, [sp, #16]
 800d9ae:	9a05      	ldr	r2, [sp, #20]
 800d9b0:	2101      	movs	r1, #1
 800d9b2:	441a      	add	r2, r3
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	9205      	str	r2, [sp, #20]
 800d9b8:	f000 fb66 	bl	800e088 <__i2b>
 800d9bc:	4607      	mov	r7, r0
 800d9be:	2d00      	cmp	r5, #0
 800d9c0:	dd0c      	ble.n	800d9dc <_dtoa_r+0x754>
 800d9c2:	9b05      	ldr	r3, [sp, #20]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	dd09      	ble.n	800d9dc <_dtoa_r+0x754>
 800d9c8:	42ab      	cmp	r3, r5
 800d9ca:	9a04      	ldr	r2, [sp, #16]
 800d9cc:	bfa8      	it	ge
 800d9ce:	462b      	movge	r3, r5
 800d9d0:	1ad2      	subs	r2, r2, r3
 800d9d2:	9204      	str	r2, [sp, #16]
 800d9d4:	9a05      	ldr	r2, [sp, #20]
 800d9d6:	1aed      	subs	r5, r5, r3
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	9305      	str	r3, [sp, #20]
 800d9dc:	9b07      	ldr	r3, [sp, #28]
 800d9de:	b31b      	cbz	r3, 800da28 <_dtoa_r+0x7a0>
 800d9e0:	9b08      	ldr	r3, [sp, #32]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	f000 80af 	beq.w	800db46 <_dtoa_r+0x8be>
 800d9e8:	2e00      	cmp	r6, #0
 800d9ea:	dd13      	ble.n	800da14 <_dtoa_r+0x78c>
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	4632      	mov	r2, r6
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f000 fc09 	bl	800e208 <__pow5mult>
 800d9f6:	ee18 2a10 	vmov	r2, s16
 800d9fa:	4601      	mov	r1, r0
 800d9fc:	4607      	mov	r7, r0
 800d9fe:	4620      	mov	r0, r4
 800da00:	f000 fb58 	bl	800e0b4 <__multiply>
 800da04:	ee18 1a10 	vmov	r1, s16
 800da08:	4680      	mov	r8, r0
 800da0a:	4620      	mov	r0, r4
 800da0c:	f000 fa84 	bl	800df18 <_Bfree>
 800da10:	ee08 8a10 	vmov	s16, r8
 800da14:	9b07      	ldr	r3, [sp, #28]
 800da16:	1b9a      	subs	r2, r3, r6
 800da18:	d006      	beq.n	800da28 <_dtoa_r+0x7a0>
 800da1a:	ee18 1a10 	vmov	r1, s16
 800da1e:	4620      	mov	r0, r4
 800da20:	f000 fbf2 	bl	800e208 <__pow5mult>
 800da24:	ee08 0a10 	vmov	s16, r0
 800da28:	2101      	movs	r1, #1
 800da2a:	4620      	mov	r0, r4
 800da2c:	f000 fb2c 	bl	800e088 <__i2b>
 800da30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da32:	2b00      	cmp	r3, #0
 800da34:	4606      	mov	r6, r0
 800da36:	f340 8088 	ble.w	800db4a <_dtoa_r+0x8c2>
 800da3a:	461a      	mov	r2, r3
 800da3c:	4601      	mov	r1, r0
 800da3e:	4620      	mov	r0, r4
 800da40:	f000 fbe2 	bl	800e208 <__pow5mult>
 800da44:	9b06      	ldr	r3, [sp, #24]
 800da46:	2b01      	cmp	r3, #1
 800da48:	4606      	mov	r6, r0
 800da4a:	f340 8081 	ble.w	800db50 <_dtoa_r+0x8c8>
 800da4e:	f04f 0800 	mov.w	r8, #0
 800da52:	6933      	ldr	r3, [r6, #16]
 800da54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800da58:	6918      	ldr	r0, [r3, #16]
 800da5a:	f000 fac5 	bl	800dfe8 <__hi0bits>
 800da5e:	f1c0 0020 	rsb	r0, r0, #32
 800da62:	9b05      	ldr	r3, [sp, #20]
 800da64:	4418      	add	r0, r3
 800da66:	f010 001f 	ands.w	r0, r0, #31
 800da6a:	f000 8092 	beq.w	800db92 <_dtoa_r+0x90a>
 800da6e:	f1c0 0320 	rsb	r3, r0, #32
 800da72:	2b04      	cmp	r3, #4
 800da74:	f340 808a 	ble.w	800db8c <_dtoa_r+0x904>
 800da78:	f1c0 001c 	rsb	r0, r0, #28
 800da7c:	9b04      	ldr	r3, [sp, #16]
 800da7e:	4403      	add	r3, r0
 800da80:	9304      	str	r3, [sp, #16]
 800da82:	9b05      	ldr	r3, [sp, #20]
 800da84:	4403      	add	r3, r0
 800da86:	4405      	add	r5, r0
 800da88:	9305      	str	r3, [sp, #20]
 800da8a:	9b04      	ldr	r3, [sp, #16]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	dd07      	ble.n	800daa0 <_dtoa_r+0x818>
 800da90:	ee18 1a10 	vmov	r1, s16
 800da94:	461a      	mov	r2, r3
 800da96:	4620      	mov	r0, r4
 800da98:	f000 fc10 	bl	800e2bc <__lshift>
 800da9c:	ee08 0a10 	vmov	s16, r0
 800daa0:	9b05      	ldr	r3, [sp, #20]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	dd05      	ble.n	800dab2 <_dtoa_r+0x82a>
 800daa6:	4631      	mov	r1, r6
 800daa8:	461a      	mov	r2, r3
 800daaa:	4620      	mov	r0, r4
 800daac:	f000 fc06 	bl	800e2bc <__lshift>
 800dab0:	4606      	mov	r6, r0
 800dab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d06e      	beq.n	800db96 <_dtoa_r+0x90e>
 800dab8:	ee18 0a10 	vmov	r0, s16
 800dabc:	4631      	mov	r1, r6
 800dabe:	f000 fc6d 	bl	800e39c <__mcmp>
 800dac2:	2800      	cmp	r0, #0
 800dac4:	da67      	bge.n	800db96 <_dtoa_r+0x90e>
 800dac6:	9b00      	ldr	r3, [sp, #0]
 800dac8:	3b01      	subs	r3, #1
 800daca:	ee18 1a10 	vmov	r1, s16
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	220a      	movs	r2, #10
 800dad2:	2300      	movs	r3, #0
 800dad4:	4620      	mov	r0, r4
 800dad6:	f000 fa41 	bl	800df5c <__multadd>
 800dada:	9b08      	ldr	r3, [sp, #32]
 800dadc:	ee08 0a10 	vmov	s16, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	f000 81b1 	beq.w	800de48 <_dtoa_r+0xbc0>
 800dae6:	2300      	movs	r3, #0
 800dae8:	4639      	mov	r1, r7
 800daea:	220a      	movs	r2, #10
 800daec:	4620      	mov	r0, r4
 800daee:	f000 fa35 	bl	800df5c <__multadd>
 800daf2:	9b02      	ldr	r3, [sp, #8]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	4607      	mov	r7, r0
 800daf8:	f300 808e 	bgt.w	800dc18 <_dtoa_r+0x990>
 800dafc:	9b06      	ldr	r3, [sp, #24]
 800dafe:	2b02      	cmp	r3, #2
 800db00:	dc51      	bgt.n	800dba6 <_dtoa_r+0x91e>
 800db02:	e089      	b.n	800dc18 <_dtoa_r+0x990>
 800db04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800db0a:	e74b      	b.n	800d9a4 <_dtoa_r+0x71c>
 800db0c:	9b03      	ldr	r3, [sp, #12]
 800db0e:	1e5e      	subs	r6, r3, #1
 800db10:	9b07      	ldr	r3, [sp, #28]
 800db12:	42b3      	cmp	r3, r6
 800db14:	bfbf      	itttt	lt
 800db16:	9b07      	ldrlt	r3, [sp, #28]
 800db18:	9607      	strlt	r6, [sp, #28]
 800db1a:	1af2      	sublt	r2, r6, r3
 800db1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800db1e:	bfb6      	itet	lt
 800db20:	189b      	addlt	r3, r3, r2
 800db22:	1b9e      	subge	r6, r3, r6
 800db24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800db26:	9b03      	ldr	r3, [sp, #12]
 800db28:	bfb8      	it	lt
 800db2a:	2600      	movlt	r6, #0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	bfb7      	itett	lt
 800db30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800db34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800db38:	1a9d      	sublt	r5, r3, r2
 800db3a:	2300      	movlt	r3, #0
 800db3c:	e734      	b.n	800d9a8 <_dtoa_r+0x720>
 800db3e:	9e07      	ldr	r6, [sp, #28]
 800db40:	9d04      	ldr	r5, [sp, #16]
 800db42:	9f08      	ldr	r7, [sp, #32]
 800db44:	e73b      	b.n	800d9be <_dtoa_r+0x736>
 800db46:	9a07      	ldr	r2, [sp, #28]
 800db48:	e767      	b.n	800da1a <_dtoa_r+0x792>
 800db4a:	9b06      	ldr	r3, [sp, #24]
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	dc18      	bgt.n	800db82 <_dtoa_r+0x8fa>
 800db50:	f1ba 0f00 	cmp.w	sl, #0
 800db54:	d115      	bne.n	800db82 <_dtoa_r+0x8fa>
 800db56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db5a:	b993      	cbnz	r3, 800db82 <_dtoa_r+0x8fa>
 800db5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db60:	0d1b      	lsrs	r3, r3, #20
 800db62:	051b      	lsls	r3, r3, #20
 800db64:	b183      	cbz	r3, 800db88 <_dtoa_r+0x900>
 800db66:	9b04      	ldr	r3, [sp, #16]
 800db68:	3301      	adds	r3, #1
 800db6a:	9304      	str	r3, [sp, #16]
 800db6c:	9b05      	ldr	r3, [sp, #20]
 800db6e:	3301      	adds	r3, #1
 800db70:	9305      	str	r3, [sp, #20]
 800db72:	f04f 0801 	mov.w	r8, #1
 800db76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f47f af6a 	bne.w	800da52 <_dtoa_r+0x7ca>
 800db7e:	2001      	movs	r0, #1
 800db80:	e76f      	b.n	800da62 <_dtoa_r+0x7da>
 800db82:	f04f 0800 	mov.w	r8, #0
 800db86:	e7f6      	b.n	800db76 <_dtoa_r+0x8ee>
 800db88:	4698      	mov	r8, r3
 800db8a:	e7f4      	b.n	800db76 <_dtoa_r+0x8ee>
 800db8c:	f43f af7d 	beq.w	800da8a <_dtoa_r+0x802>
 800db90:	4618      	mov	r0, r3
 800db92:	301c      	adds	r0, #28
 800db94:	e772      	b.n	800da7c <_dtoa_r+0x7f4>
 800db96:	9b03      	ldr	r3, [sp, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	dc37      	bgt.n	800dc0c <_dtoa_r+0x984>
 800db9c:	9b06      	ldr	r3, [sp, #24]
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	dd34      	ble.n	800dc0c <_dtoa_r+0x984>
 800dba2:	9b03      	ldr	r3, [sp, #12]
 800dba4:	9302      	str	r3, [sp, #8]
 800dba6:	9b02      	ldr	r3, [sp, #8]
 800dba8:	b96b      	cbnz	r3, 800dbc6 <_dtoa_r+0x93e>
 800dbaa:	4631      	mov	r1, r6
 800dbac:	2205      	movs	r2, #5
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f000 f9d4 	bl	800df5c <__multadd>
 800dbb4:	4601      	mov	r1, r0
 800dbb6:	4606      	mov	r6, r0
 800dbb8:	ee18 0a10 	vmov	r0, s16
 800dbbc:	f000 fbee 	bl	800e39c <__mcmp>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	f73f adbb 	bgt.w	800d73c <_dtoa_r+0x4b4>
 800dbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc8:	9d01      	ldr	r5, [sp, #4]
 800dbca:	43db      	mvns	r3, r3
 800dbcc:	9300      	str	r3, [sp, #0]
 800dbce:	f04f 0800 	mov.w	r8, #0
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f000 f99f 	bl	800df18 <_Bfree>
 800dbda:	2f00      	cmp	r7, #0
 800dbdc:	f43f aea4 	beq.w	800d928 <_dtoa_r+0x6a0>
 800dbe0:	f1b8 0f00 	cmp.w	r8, #0
 800dbe4:	d005      	beq.n	800dbf2 <_dtoa_r+0x96a>
 800dbe6:	45b8      	cmp	r8, r7
 800dbe8:	d003      	beq.n	800dbf2 <_dtoa_r+0x96a>
 800dbea:	4641      	mov	r1, r8
 800dbec:	4620      	mov	r0, r4
 800dbee:	f000 f993 	bl	800df18 <_Bfree>
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f000 f98f 	bl	800df18 <_Bfree>
 800dbfa:	e695      	b.n	800d928 <_dtoa_r+0x6a0>
 800dbfc:	2600      	movs	r6, #0
 800dbfe:	4637      	mov	r7, r6
 800dc00:	e7e1      	b.n	800dbc6 <_dtoa_r+0x93e>
 800dc02:	9700      	str	r7, [sp, #0]
 800dc04:	4637      	mov	r7, r6
 800dc06:	e599      	b.n	800d73c <_dtoa_r+0x4b4>
 800dc08:	40240000 	.word	0x40240000
 800dc0c:	9b08      	ldr	r3, [sp, #32]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f000 80ca 	beq.w	800dda8 <_dtoa_r+0xb20>
 800dc14:	9b03      	ldr	r3, [sp, #12]
 800dc16:	9302      	str	r3, [sp, #8]
 800dc18:	2d00      	cmp	r5, #0
 800dc1a:	dd05      	ble.n	800dc28 <_dtoa_r+0x9a0>
 800dc1c:	4639      	mov	r1, r7
 800dc1e:	462a      	mov	r2, r5
 800dc20:	4620      	mov	r0, r4
 800dc22:	f000 fb4b 	bl	800e2bc <__lshift>
 800dc26:	4607      	mov	r7, r0
 800dc28:	f1b8 0f00 	cmp.w	r8, #0
 800dc2c:	d05b      	beq.n	800dce6 <_dtoa_r+0xa5e>
 800dc2e:	6879      	ldr	r1, [r7, #4]
 800dc30:	4620      	mov	r0, r4
 800dc32:	f000 f931 	bl	800de98 <_Balloc>
 800dc36:	4605      	mov	r5, r0
 800dc38:	b928      	cbnz	r0, 800dc46 <_dtoa_r+0x9be>
 800dc3a:	4b87      	ldr	r3, [pc, #540]	; (800de58 <_dtoa_r+0xbd0>)
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc42:	f7ff bb3b 	b.w	800d2bc <_dtoa_r+0x34>
 800dc46:	693a      	ldr	r2, [r7, #16]
 800dc48:	3202      	adds	r2, #2
 800dc4a:	0092      	lsls	r2, r2, #2
 800dc4c:	f107 010c 	add.w	r1, r7, #12
 800dc50:	300c      	adds	r0, #12
 800dc52:	f000 f913 	bl	800de7c <memcpy>
 800dc56:	2201      	movs	r2, #1
 800dc58:	4629      	mov	r1, r5
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f000 fb2e 	bl	800e2bc <__lshift>
 800dc60:	9b01      	ldr	r3, [sp, #4]
 800dc62:	f103 0901 	add.w	r9, r3, #1
 800dc66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	9305      	str	r3, [sp, #20]
 800dc6e:	f00a 0301 	and.w	r3, sl, #1
 800dc72:	46b8      	mov	r8, r7
 800dc74:	9304      	str	r3, [sp, #16]
 800dc76:	4607      	mov	r7, r0
 800dc78:	4631      	mov	r1, r6
 800dc7a:	ee18 0a10 	vmov	r0, s16
 800dc7e:	f7ff fa75 	bl	800d16c <quorem>
 800dc82:	4641      	mov	r1, r8
 800dc84:	9002      	str	r0, [sp, #8]
 800dc86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dc8a:	ee18 0a10 	vmov	r0, s16
 800dc8e:	f000 fb85 	bl	800e39c <__mcmp>
 800dc92:	463a      	mov	r2, r7
 800dc94:	9003      	str	r0, [sp, #12]
 800dc96:	4631      	mov	r1, r6
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f000 fb9b 	bl	800e3d4 <__mdiff>
 800dc9e:	68c2      	ldr	r2, [r0, #12]
 800dca0:	f109 3bff 	add.w	fp, r9, #4294967295
 800dca4:	4605      	mov	r5, r0
 800dca6:	bb02      	cbnz	r2, 800dcea <_dtoa_r+0xa62>
 800dca8:	4601      	mov	r1, r0
 800dcaa:	ee18 0a10 	vmov	r0, s16
 800dcae:	f000 fb75 	bl	800e39c <__mcmp>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	9207      	str	r2, [sp, #28]
 800dcba:	f000 f92d 	bl	800df18 <_Bfree>
 800dcbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dcc2:	ea43 0102 	orr.w	r1, r3, r2
 800dcc6:	9b04      	ldr	r3, [sp, #16]
 800dcc8:	430b      	orrs	r3, r1
 800dcca:	464d      	mov	r5, r9
 800dccc:	d10f      	bne.n	800dcee <_dtoa_r+0xa66>
 800dcce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dcd2:	d02a      	beq.n	800dd2a <_dtoa_r+0xaa2>
 800dcd4:	9b03      	ldr	r3, [sp, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	dd02      	ble.n	800dce0 <_dtoa_r+0xa58>
 800dcda:	9b02      	ldr	r3, [sp, #8]
 800dcdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dce0:	f88b a000 	strb.w	sl, [fp]
 800dce4:	e775      	b.n	800dbd2 <_dtoa_r+0x94a>
 800dce6:	4638      	mov	r0, r7
 800dce8:	e7ba      	b.n	800dc60 <_dtoa_r+0x9d8>
 800dcea:	2201      	movs	r2, #1
 800dcec:	e7e2      	b.n	800dcb4 <_dtoa_r+0xa2c>
 800dcee:	9b03      	ldr	r3, [sp, #12]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	db04      	blt.n	800dcfe <_dtoa_r+0xa76>
 800dcf4:	9906      	ldr	r1, [sp, #24]
 800dcf6:	430b      	orrs	r3, r1
 800dcf8:	9904      	ldr	r1, [sp, #16]
 800dcfa:	430b      	orrs	r3, r1
 800dcfc:	d122      	bne.n	800dd44 <_dtoa_r+0xabc>
 800dcfe:	2a00      	cmp	r2, #0
 800dd00:	ddee      	ble.n	800dce0 <_dtoa_r+0xa58>
 800dd02:	ee18 1a10 	vmov	r1, s16
 800dd06:	2201      	movs	r2, #1
 800dd08:	4620      	mov	r0, r4
 800dd0a:	f000 fad7 	bl	800e2bc <__lshift>
 800dd0e:	4631      	mov	r1, r6
 800dd10:	ee08 0a10 	vmov	s16, r0
 800dd14:	f000 fb42 	bl	800e39c <__mcmp>
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	dc03      	bgt.n	800dd24 <_dtoa_r+0xa9c>
 800dd1c:	d1e0      	bne.n	800dce0 <_dtoa_r+0xa58>
 800dd1e:	f01a 0f01 	tst.w	sl, #1
 800dd22:	d0dd      	beq.n	800dce0 <_dtoa_r+0xa58>
 800dd24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd28:	d1d7      	bne.n	800dcda <_dtoa_r+0xa52>
 800dd2a:	2339      	movs	r3, #57	; 0x39
 800dd2c:	f88b 3000 	strb.w	r3, [fp]
 800dd30:	462b      	mov	r3, r5
 800dd32:	461d      	mov	r5, r3
 800dd34:	3b01      	subs	r3, #1
 800dd36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd3a:	2a39      	cmp	r2, #57	; 0x39
 800dd3c:	d071      	beq.n	800de22 <_dtoa_r+0xb9a>
 800dd3e:	3201      	adds	r2, #1
 800dd40:	701a      	strb	r2, [r3, #0]
 800dd42:	e746      	b.n	800dbd2 <_dtoa_r+0x94a>
 800dd44:	2a00      	cmp	r2, #0
 800dd46:	dd07      	ble.n	800dd58 <_dtoa_r+0xad0>
 800dd48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd4c:	d0ed      	beq.n	800dd2a <_dtoa_r+0xaa2>
 800dd4e:	f10a 0301 	add.w	r3, sl, #1
 800dd52:	f88b 3000 	strb.w	r3, [fp]
 800dd56:	e73c      	b.n	800dbd2 <_dtoa_r+0x94a>
 800dd58:	9b05      	ldr	r3, [sp, #20]
 800dd5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dd5e:	4599      	cmp	r9, r3
 800dd60:	d047      	beq.n	800ddf2 <_dtoa_r+0xb6a>
 800dd62:	ee18 1a10 	vmov	r1, s16
 800dd66:	2300      	movs	r3, #0
 800dd68:	220a      	movs	r2, #10
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f000 f8f6 	bl	800df5c <__multadd>
 800dd70:	45b8      	cmp	r8, r7
 800dd72:	ee08 0a10 	vmov	s16, r0
 800dd76:	f04f 0300 	mov.w	r3, #0
 800dd7a:	f04f 020a 	mov.w	r2, #10
 800dd7e:	4641      	mov	r1, r8
 800dd80:	4620      	mov	r0, r4
 800dd82:	d106      	bne.n	800dd92 <_dtoa_r+0xb0a>
 800dd84:	f000 f8ea 	bl	800df5c <__multadd>
 800dd88:	4680      	mov	r8, r0
 800dd8a:	4607      	mov	r7, r0
 800dd8c:	f109 0901 	add.w	r9, r9, #1
 800dd90:	e772      	b.n	800dc78 <_dtoa_r+0x9f0>
 800dd92:	f000 f8e3 	bl	800df5c <__multadd>
 800dd96:	4639      	mov	r1, r7
 800dd98:	4680      	mov	r8, r0
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	220a      	movs	r2, #10
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f000 f8dc 	bl	800df5c <__multadd>
 800dda4:	4607      	mov	r7, r0
 800dda6:	e7f1      	b.n	800dd8c <_dtoa_r+0xb04>
 800dda8:	9b03      	ldr	r3, [sp, #12]
 800ddaa:	9302      	str	r3, [sp, #8]
 800ddac:	9d01      	ldr	r5, [sp, #4]
 800ddae:	ee18 0a10 	vmov	r0, s16
 800ddb2:	4631      	mov	r1, r6
 800ddb4:	f7ff f9da 	bl	800d16c <quorem>
 800ddb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ddbc:	9b01      	ldr	r3, [sp, #4]
 800ddbe:	f805 ab01 	strb.w	sl, [r5], #1
 800ddc2:	1aea      	subs	r2, r5, r3
 800ddc4:	9b02      	ldr	r3, [sp, #8]
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	dd09      	ble.n	800ddde <_dtoa_r+0xb56>
 800ddca:	ee18 1a10 	vmov	r1, s16
 800ddce:	2300      	movs	r3, #0
 800ddd0:	220a      	movs	r2, #10
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 f8c2 	bl	800df5c <__multadd>
 800ddd8:	ee08 0a10 	vmov	s16, r0
 800dddc:	e7e7      	b.n	800ddae <_dtoa_r+0xb26>
 800ddde:	9b02      	ldr	r3, [sp, #8]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	bfc8      	it	gt
 800dde4:	461d      	movgt	r5, r3
 800dde6:	9b01      	ldr	r3, [sp, #4]
 800dde8:	bfd8      	it	le
 800ddea:	2501      	movle	r5, #1
 800ddec:	441d      	add	r5, r3
 800ddee:	f04f 0800 	mov.w	r8, #0
 800ddf2:	ee18 1a10 	vmov	r1, s16
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f000 fa5f 	bl	800e2bc <__lshift>
 800ddfe:	4631      	mov	r1, r6
 800de00:	ee08 0a10 	vmov	s16, r0
 800de04:	f000 faca 	bl	800e39c <__mcmp>
 800de08:	2800      	cmp	r0, #0
 800de0a:	dc91      	bgt.n	800dd30 <_dtoa_r+0xaa8>
 800de0c:	d102      	bne.n	800de14 <_dtoa_r+0xb8c>
 800de0e:	f01a 0f01 	tst.w	sl, #1
 800de12:	d18d      	bne.n	800dd30 <_dtoa_r+0xaa8>
 800de14:	462b      	mov	r3, r5
 800de16:	461d      	mov	r5, r3
 800de18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de1c:	2a30      	cmp	r2, #48	; 0x30
 800de1e:	d0fa      	beq.n	800de16 <_dtoa_r+0xb8e>
 800de20:	e6d7      	b.n	800dbd2 <_dtoa_r+0x94a>
 800de22:	9a01      	ldr	r2, [sp, #4]
 800de24:	429a      	cmp	r2, r3
 800de26:	d184      	bne.n	800dd32 <_dtoa_r+0xaaa>
 800de28:	9b00      	ldr	r3, [sp, #0]
 800de2a:	3301      	adds	r3, #1
 800de2c:	9300      	str	r3, [sp, #0]
 800de2e:	2331      	movs	r3, #49	; 0x31
 800de30:	7013      	strb	r3, [r2, #0]
 800de32:	e6ce      	b.n	800dbd2 <_dtoa_r+0x94a>
 800de34:	4b09      	ldr	r3, [pc, #36]	; (800de5c <_dtoa_r+0xbd4>)
 800de36:	f7ff ba95 	b.w	800d364 <_dtoa_r+0xdc>
 800de3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f47f aa6e 	bne.w	800d31e <_dtoa_r+0x96>
 800de42:	4b07      	ldr	r3, [pc, #28]	; (800de60 <_dtoa_r+0xbd8>)
 800de44:	f7ff ba8e 	b.w	800d364 <_dtoa_r+0xdc>
 800de48:	9b02      	ldr	r3, [sp, #8]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	dcae      	bgt.n	800ddac <_dtoa_r+0xb24>
 800de4e:	9b06      	ldr	r3, [sp, #24]
 800de50:	2b02      	cmp	r3, #2
 800de52:	f73f aea8 	bgt.w	800dba6 <_dtoa_r+0x91e>
 800de56:	e7a9      	b.n	800ddac <_dtoa_r+0xb24>
 800de58:	080102db 	.word	0x080102db
 800de5c:	08010238 	.word	0x08010238
 800de60:	0801025c 	.word	0x0801025c

0800de64 <_localeconv_r>:
 800de64:	4800      	ldr	r0, [pc, #0]	; (800de68 <_localeconv_r+0x4>)
 800de66:	4770      	bx	lr
 800de68:	20000178 	.word	0x20000178

0800de6c <malloc>:
 800de6c:	4b02      	ldr	r3, [pc, #8]	; (800de78 <malloc+0xc>)
 800de6e:	4601      	mov	r1, r0
 800de70:	6818      	ldr	r0, [r3, #0]
 800de72:	f000 bc17 	b.w	800e6a4 <_malloc_r>
 800de76:	bf00      	nop
 800de78:	20000024 	.word	0x20000024

0800de7c <memcpy>:
 800de7c:	440a      	add	r2, r1
 800de7e:	4291      	cmp	r1, r2
 800de80:	f100 33ff 	add.w	r3, r0, #4294967295
 800de84:	d100      	bne.n	800de88 <memcpy+0xc>
 800de86:	4770      	bx	lr
 800de88:	b510      	push	{r4, lr}
 800de8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de92:	4291      	cmp	r1, r2
 800de94:	d1f9      	bne.n	800de8a <memcpy+0xe>
 800de96:	bd10      	pop	{r4, pc}

0800de98 <_Balloc>:
 800de98:	b570      	push	{r4, r5, r6, lr}
 800de9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de9c:	4604      	mov	r4, r0
 800de9e:	460d      	mov	r5, r1
 800dea0:	b976      	cbnz	r6, 800dec0 <_Balloc+0x28>
 800dea2:	2010      	movs	r0, #16
 800dea4:	f7ff ffe2 	bl	800de6c <malloc>
 800dea8:	4602      	mov	r2, r0
 800deaa:	6260      	str	r0, [r4, #36]	; 0x24
 800deac:	b920      	cbnz	r0, 800deb8 <_Balloc+0x20>
 800deae:	4b18      	ldr	r3, [pc, #96]	; (800df10 <_Balloc+0x78>)
 800deb0:	4818      	ldr	r0, [pc, #96]	; (800df14 <_Balloc+0x7c>)
 800deb2:	2166      	movs	r1, #102	; 0x66
 800deb4:	f000 fdd6 	bl	800ea64 <__assert_func>
 800deb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800debc:	6006      	str	r6, [r0, #0]
 800debe:	60c6      	str	r6, [r0, #12]
 800dec0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dec2:	68f3      	ldr	r3, [r6, #12]
 800dec4:	b183      	cbz	r3, 800dee8 <_Balloc+0x50>
 800dec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dece:	b9b8      	cbnz	r0, 800df00 <_Balloc+0x68>
 800ded0:	2101      	movs	r1, #1
 800ded2:	fa01 f605 	lsl.w	r6, r1, r5
 800ded6:	1d72      	adds	r2, r6, #5
 800ded8:	0092      	lsls	r2, r2, #2
 800deda:	4620      	mov	r0, r4
 800dedc:	f000 fb60 	bl	800e5a0 <_calloc_r>
 800dee0:	b160      	cbz	r0, 800defc <_Balloc+0x64>
 800dee2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dee6:	e00e      	b.n	800df06 <_Balloc+0x6e>
 800dee8:	2221      	movs	r2, #33	; 0x21
 800deea:	2104      	movs	r1, #4
 800deec:	4620      	mov	r0, r4
 800deee:	f000 fb57 	bl	800e5a0 <_calloc_r>
 800def2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800def4:	60f0      	str	r0, [r6, #12]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d1e4      	bne.n	800dec6 <_Balloc+0x2e>
 800defc:	2000      	movs	r0, #0
 800defe:	bd70      	pop	{r4, r5, r6, pc}
 800df00:	6802      	ldr	r2, [r0, #0]
 800df02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df06:	2300      	movs	r3, #0
 800df08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df0c:	e7f7      	b.n	800defe <_Balloc+0x66>
 800df0e:	bf00      	nop
 800df10:	08010269 	.word	0x08010269
 800df14:	080102ec 	.word	0x080102ec

0800df18 <_Bfree>:
 800df18:	b570      	push	{r4, r5, r6, lr}
 800df1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df1c:	4605      	mov	r5, r0
 800df1e:	460c      	mov	r4, r1
 800df20:	b976      	cbnz	r6, 800df40 <_Bfree+0x28>
 800df22:	2010      	movs	r0, #16
 800df24:	f7ff ffa2 	bl	800de6c <malloc>
 800df28:	4602      	mov	r2, r0
 800df2a:	6268      	str	r0, [r5, #36]	; 0x24
 800df2c:	b920      	cbnz	r0, 800df38 <_Bfree+0x20>
 800df2e:	4b09      	ldr	r3, [pc, #36]	; (800df54 <_Bfree+0x3c>)
 800df30:	4809      	ldr	r0, [pc, #36]	; (800df58 <_Bfree+0x40>)
 800df32:	218a      	movs	r1, #138	; 0x8a
 800df34:	f000 fd96 	bl	800ea64 <__assert_func>
 800df38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df3c:	6006      	str	r6, [r0, #0]
 800df3e:	60c6      	str	r6, [r0, #12]
 800df40:	b13c      	cbz	r4, 800df52 <_Bfree+0x3a>
 800df42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df44:	6862      	ldr	r2, [r4, #4]
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df4c:	6021      	str	r1, [r4, #0]
 800df4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df52:	bd70      	pop	{r4, r5, r6, pc}
 800df54:	08010269 	.word	0x08010269
 800df58:	080102ec 	.word	0x080102ec

0800df5c <__multadd>:
 800df5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df60:	690d      	ldr	r5, [r1, #16]
 800df62:	4607      	mov	r7, r0
 800df64:	460c      	mov	r4, r1
 800df66:	461e      	mov	r6, r3
 800df68:	f101 0c14 	add.w	ip, r1, #20
 800df6c:	2000      	movs	r0, #0
 800df6e:	f8dc 3000 	ldr.w	r3, [ip]
 800df72:	b299      	uxth	r1, r3
 800df74:	fb02 6101 	mla	r1, r2, r1, r6
 800df78:	0c1e      	lsrs	r6, r3, #16
 800df7a:	0c0b      	lsrs	r3, r1, #16
 800df7c:	fb02 3306 	mla	r3, r2, r6, r3
 800df80:	b289      	uxth	r1, r1
 800df82:	3001      	adds	r0, #1
 800df84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df88:	4285      	cmp	r5, r0
 800df8a:	f84c 1b04 	str.w	r1, [ip], #4
 800df8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df92:	dcec      	bgt.n	800df6e <__multadd+0x12>
 800df94:	b30e      	cbz	r6, 800dfda <__multadd+0x7e>
 800df96:	68a3      	ldr	r3, [r4, #8]
 800df98:	42ab      	cmp	r3, r5
 800df9a:	dc19      	bgt.n	800dfd0 <__multadd+0x74>
 800df9c:	6861      	ldr	r1, [r4, #4]
 800df9e:	4638      	mov	r0, r7
 800dfa0:	3101      	adds	r1, #1
 800dfa2:	f7ff ff79 	bl	800de98 <_Balloc>
 800dfa6:	4680      	mov	r8, r0
 800dfa8:	b928      	cbnz	r0, 800dfb6 <__multadd+0x5a>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	4b0c      	ldr	r3, [pc, #48]	; (800dfe0 <__multadd+0x84>)
 800dfae:	480d      	ldr	r0, [pc, #52]	; (800dfe4 <__multadd+0x88>)
 800dfb0:	21b5      	movs	r1, #181	; 0xb5
 800dfb2:	f000 fd57 	bl	800ea64 <__assert_func>
 800dfb6:	6922      	ldr	r2, [r4, #16]
 800dfb8:	3202      	adds	r2, #2
 800dfba:	f104 010c 	add.w	r1, r4, #12
 800dfbe:	0092      	lsls	r2, r2, #2
 800dfc0:	300c      	adds	r0, #12
 800dfc2:	f7ff ff5b 	bl	800de7c <memcpy>
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	4638      	mov	r0, r7
 800dfca:	f7ff ffa5 	bl	800df18 <_Bfree>
 800dfce:	4644      	mov	r4, r8
 800dfd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dfd4:	3501      	adds	r5, #1
 800dfd6:	615e      	str	r6, [r3, #20]
 800dfd8:	6125      	str	r5, [r4, #16]
 800dfda:	4620      	mov	r0, r4
 800dfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfe0:	080102db 	.word	0x080102db
 800dfe4:	080102ec 	.word	0x080102ec

0800dfe8 <__hi0bits>:
 800dfe8:	0c03      	lsrs	r3, r0, #16
 800dfea:	041b      	lsls	r3, r3, #16
 800dfec:	b9d3      	cbnz	r3, 800e024 <__hi0bits+0x3c>
 800dfee:	0400      	lsls	r0, r0, #16
 800dff0:	2310      	movs	r3, #16
 800dff2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dff6:	bf04      	itt	eq
 800dff8:	0200      	lsleq	r0, r0, #8
 800dffa:	3308      	addeq	r3, #8
 800dffc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e000:	bf04      	itt	eq
 800e002:	0100      	lsleq	r0, r0, #4
 800e004:	3304      	addeq	r3, #4
 800e006:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e00a:	bf04      	itt	eq
 800e00c:	0080      	lsleq	r0, r0, #2
 800e00e:	3302      	addeq	r3, #2
 800e010:	2800      	cmp	r0, #0
 800e012:	db05      	blt.n	800e020 <__hi0bits+0x38>
 800e014:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e018:	f103 0301 	add.w	r3, r3, #1
 800e01c:	bf08      	it	eq
 800e01e:	2320      	moveq	r3, #32
 800e020:	4618      	mov	r0, r3
 800e022:	4770      	bx	lr
 800e024:	2300      	movs	r3, #0
 800e026:	e7e4      	b.n	800dff2 <__hi0bits+0xa>

0800e028 <__lo0bits>:
 800e028:	6803      	ldr	r3, [r0, #0]
 800e02a:	f013 0207 	ands.w	r2, r3, #7
 800e02e:	4601      	mov	r1, r0
 800e030:	d00b      	beq.n	800e04a <__lo0bits+0x22>
 800e032:	07da      	lsls	r2, r3, #31
 800e034:	d423      	bmi.n	800e07e <__lo0bits+0x56>
 800e036:	0798      	lsls	r0, r3, #30
 800e038:	bf49      	itett	mi
 800e03a:	085b      	lsrmi	r3, r3, #1
 800e03c:	089b      	lsrpl	r3, r3, #2
 800e03e:	2001      	movmi	r0, #1
 800e040:	600b      	strmi	r3, [r1, #0]
 800e042:	bf5c      	itt	pl
 800e044:	600b      	strpl	r3, [r1, #0]
 800e046:	2002      	movpl	r0, #2
 800e048:	4770      	bx	lr
 800e04a:	b298      	uxth	r0, r3
 800e04c:	b9a8      	cbnz	r0, 800e07a <__lo0bits+0x52>
 800e04e:	0c1b      	lsrs	r3, r3, #16
 800e050:	2010      	movs	r0, #16
 800e052:	b2da      	uxtb	r2, r3
 800e054:	b90a      	cbnz	r2, 800e05a <__lo0bits+0x32>
 800e056:	3008      	adds	r0, #8
 800e058:	0a1b      	lsrs	r3, r3, #8
 800e05a:	071a      	lsls	r2, r3, #28
 800e05c:	bf04      	itt	eq
 800e05e:	091b      	lsreq	r3, r3, #4
 800e060:	3004      	addeq	r0, #4
 800e062:	079a      	lsls	r2, r3, #30
 800e064:	bf04      	itt	eq
 800e066:	089b      	lsreq	r3, r3, #2
 800e068:	3002      	addeq	r0, #2
 800e06a:	07da      	lsls	r2, r3, #31
 800e06c:	d403      	bmi.n	800e076 <__lo0bits+0x4e>
 800e06e:	085b      	lsrs	r3, r3, #1
 800e070:	f100 0001 	add.w	r0, r0, #1
 800e074:	d005      	beq.n	800e082 <__lo0bits+0x5a>
 800e076:	600b      	str	r3, [r1, #0]
 800e078:	4770      	bx	lr
 800e07a:	4610      	mov	r0, r2
 800e07c:	e7e9      	b.n	800e052 <__lo0bits+0x2a>
 800e07e:	2000      	movs	r0, #0
 800e080:	4770      	bx	lr
 800e082:	2020      	movs	r0, #32
 800e084:	4770      	bx	lr
	...

0800e088 <__i2b>:
 800e088:	b510      	push	{r4, lr}
 800e08a:	460c      	mov	r4, r1
 800e08c:	2101      	movs	r1, #1
 800e08e:	f7ff ff03 	bl	800de98 <_Balloc>
 800e092:	4602      	mov	r2, r0
 800e094:	b928      	cbnz	r0, 800e0a2 <__i2b+0x1a>
 800e096:	4b05      	ldr	r3, [pc, #20]	; (800e0ac <__i2b+0x24>)
 800e098:	4805      	ldr	r0, [pc, #20]	; (800e0b0 <__i2b+0x28>)
 800e09a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e09e:	f000 fce1 	bl	800ea64 <__assert_func>
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	6144      	str	r4, [r0, #20]
 800e0a6:	6103      	str	r3, [r0, #16]
 800e0a8:	bd10      	pop	{r4, pc}
 800e0aa:	bf00      	nop
 800e0ac:	080102db 	.word	0x080102db
 800e0b0:	080102ec 	.word	0x080102ec

0800e0b4 <__multiply>:
 800e0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b8:	4691      	mov	r9, r2
 800e0ba:	690a      	ldr	r2, [r1, #16]
 800e0bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	bfb8      	it	lt
 800e0c4:	460b      	movlt	r3, r1
 800e0c6:	460c      	mov	r4, r1
 800e0c8:	bfbc      	itt	lt
 800e0ca:	464c      	movlt	r4, r9
 800e0cc:	4699      	movlt	r9, r3
 800e0ce:	6927      	ldr	r7, [r4, #16]
 800e0d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e0d4:	68a3      	ldr	r3, [r4, #8]
 800e0d6:	6861      	ldr	r1, [r4, #4]
 800e0d8:	eb07 060a 	add.w	r6, r7, sl
 800e0dc:	42b3      	cmp	r3, r6
 800e0de:	b085      	sub	sp, #20
 800e0e0:	bfb8      	it	lt
 800e0e2:	3101      	addlt	r1, #1
 800e0e4:	f7ff fed8 	bl	800de98 <_Balloc>
 800e0e8:	b930      	cbnz	r0, 800e0f8 <__multiply+0x44>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	4b44      	ldr	r3, [pc, #272]	; (800e200 <__multiply+0x14c>)
 800e0ee:	4845      	ldr	r0, [pc, #276]	; (800e204 <__multiply+0x150>)
 800e0f0:	f240 115d 	movw	r1, #349	; 0x15d
 800e0f4:	f000 fcb6 	bl	800ea64 <__assert_func>
 800e0f8:	f100 0514 	add.w	r5, r0, #20
 800e0fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e100:	462b      	mov	r3, r5
 800e102:	2200      	movs	r2, #0
 800e104:	4543      	cmp	r3, r8
 800e106:	d321      	bcc.n	800e14c <__multiply+0x98>
 800e108:	f104 0314 	add.w	r3, r4, #20
 800e10c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e110:	f109 0314 	add.w	r3, r9, #20
 800e114:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e118:	9202      	str	r2, [sp, #8]
 800e11a:	1b3a      	subs	r2, r7, r4
 800e11c:	3a15      	subs	r2, #21
 800e11e:	f022 0203 	bic.w	r2, r2, #3
 800e122:	3204      	adds	r2, #4
 800e124:	f104 0115 	add.w	r1, r4, #21
 800e128:	428f      	cmp	r7, r1
 800e12a:	bf38      	it	cc
 800e12c:	2204      	movcc	r2, #4
 800e12e:	9201      	str	r2, [sp, #4]
 800e130:	9a02      	ldr	r2, [sp, #8]
 800e132:	9303      	str	r3, [sp, #12]
 800e134:	429a      	cmp	r2, r3
 800e136:	d80c      	bhi.n	800e152 <__multiply+0x9e>
 800e138:	2e00      	cmp	r6, #0
 800e13a:	dd03      	ble.n	800e144 <__multiply+0x90>
 800e13c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e140:	2b00      	cmp	r3, #0
 800e142:	d05a      	beq.n	800e1fa <__multiply+0x146>
 800e144:	6106      	str	r6, [r0, #16]
 800e146:	b005      	add	sp, #20
 800e148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14c:	f843 2b04 	str.w	r2, [r3], #4
 800e150:	e7d8      	b.n	800e104 <__multiply+0x50>
 800e152:	f8b3 a000 	ldrh.w	sl, [r3]
 800e156:	f1ba 0f00 	cmp.w	sl, #0
 800e15a:	d024      	beq.n	800e1a6 <__multiply+0xf2>
 800e15c:	f104 0e14 	add.w	lr, r4, #20
 800e160:	46a9      	mov	r9, r5
 800e162:	f04f 0c00 	mov.w	ip, #0
 800e166:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e16a:	f8d9 1000 	ldr.w	r1, [r9]
 800e16e:	fa1f fb82 	uxth.w	fp, r2
 800e172:	b289      	uxth	r1, r1
 800e174:	fb0a 110b 	mla	r1, sl, fp, r1
 800e178:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e17c:	f8d9 2000 	ldr.w	r2, [r9]
 800e180:	4461      	add	r1, ip
 800e182:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e186:	fb0a c20b 	mla	r2, sl, fp, ip
 800e18a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e18e:	b289      	uxth	r1, r1
 800e190:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e194:	4577      	cmp	r7, lr
 800e196:	f849 1b04 	str.w	r1, [r9], #4
 800e19a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e19e:	d8e2      	bhi.n	800e166 <__multiply+0xb2>
 800e1a0:	9a01      	ldr	r2, [sp, #4]
 800e1a2:	f845 c002 	str.w	ip, [r5, r2]
 800e1a6:	9a03      	ldr	r2, [sp, #12]
 800e1a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	f1b9 0f00 	cmp.w	r9, #0
 800e1b2:	d020      	beq.n	800e1f6 <__multiply+0x142>
 800e1b4:	6829      	ldr	r1, [r5, #0]
 800e1b6:	f104 0c14 	add.w	ip, r4, #20
 800e1ba:	46ae      	mov	lr, r5
 800e1bc:	f04f 0a00 	mov.w	sl, #0
 800e1c0:	f8bc b000 	ldrh.w	fp, [ip]
 800e1c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e1c8:	fb09 220b 	mla	r2, r9, fp, r2
 800e1cc:	4492      	add	sl, r2
 800e1ce:	b289      	uxth	r1, r1
 800e1d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e1d4:	f84e 1b04 	str.w	r1, [lr], #4
 800e1d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e1dc:	f8be 1000 	ldrh.w	r1, [lr]
 800e1e0:	0c12      	lsrs	r2, r2, #16
 800e1e2:	fb09 1102 	mla	r1, r9, r2, r1
 800e1e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e1ea:	4567      	cmp	r7, ip
 800e1ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e1f0:	d8e6      	bhi.n	800e1c0 <__multiply+0x10c>
 800e1f2:	9a01      	ldr	r2, [sp, #4]
 800e1f4:	50a9      	str	r1, [r5, r2]
 800e1f6:	3504      	adds	r5, #4
 800e1f8:	e79a      	b.n	800e130 <__multiply+0x7c>
 800e1fa:	3e01      	subs	r6, #1
 800e1fc:	e79c      	b.n	800e138 <__multiply+0x84>
 800e1fe:	bf00      	nop
 800e200:	080102db 	.word	0x080102db
 800e204:	080102ec 	.word	0x080102ec

0800e208 <__pow5mult>:
 800e208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e20c:	4615      	mov	r5, r2
 800e20e:	f012 0203 	ands.w	r2, r2, #3
 800e212:	4606      	mov	r6, r0
 800e214:	460f      	mov	r7, r1
 800e216:	d007      	beq.n	800e228 <__pow5mult+0x20>
 800e218:	4c25      	ldr	r4, [pc, #148]	; (800e2b0 <__pow5mult+0xa8>)
 800e21a:	3a01      	subs	r2, #1
 800e21c:	2300      	movs	r3, #0
 800e21e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e222:	f7ff fe9b 	bl	800df5c <__multadd>
 800e226:	4607      	mov	r7, r0
 800e228:	10ad      	asrs	r5, r5, #2
 800e22a:	d03d      	beq.n	800e2a8 <__pow5mult+0xa0>
 800e22c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e22e:	b97c      	cbnz	r4, 800e250 <__pow5mult+0x48>
 800e230:	2010      	movs	r0, #16
 800e232:	f7ff fe1b 	bl	800de6c <malloc>
 800e236:	4602      	mov	r2, r0
 800e238:	6270      	str	r0, [r6, #36]	; 0x24
 800e23a:	b928      	cbnz	r0, 800e248 <__pow5mult+0x40>
 800e23c:	4b1d      	ldr	r3, [pc, #116]	; (800e2b4 <__pow5mult+0xac>)
 800e23e:	481e      	ldr	r0, [pc, #120]	; (800e2b8 <__pow5mult+0xb0>)
 800e240:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e244:	f000 fc0e 	bl	800ea64 <__assert_func>
 800e248:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e24c:	6004      	str	r4, [r0, #0]
 800e24e:	60c4      	str	r4, [r0, #12]
 800e250:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e254:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e258:	b94c      	cbnz	r4, 800e26e <__pow5mult+0x66>
 800e25a:	f240 2171 	movw	r1, #625	; 0x271
 800e25e:	4630      	mov	r0, r6
 800e260:	f7ff ff12 	bl	800e088 <__i2b>
 800e264:	2300      	movs	r3, #0
 800e266:	f8c8 0008 	str.w	r0, [r8, #8]
 800e26a:	4604      	mov	r4, r0
 800e26c:	6003      	str	r3, [r0, #0]
 800e26e:	f04f 0900 	mov.w	r9, #0
 800e272:	07eb      	lsls	r3, r5, #31
 800e274:	d50a      	bpl.n	800e28c <__pow5mult+0x84>
 800e276:	4639      	mov	r1, r7
 800e278:	4622      	mov	r2, r4
 800e27a:	4630      	mov	r0, r6
 800e27c:	f7ff ff1a 	bl	800e0b4 <__multiply>
 800e280:	4639      	mov	r1, r7
 800e282:	4680      	mov	r8, r0
 800e284:	4630      	mov	r0, r6
 800e286:	f7ff fe47 	bl	800df18 <_Bfree>
 800e28a:	4647      	mov	r7, r8
 800e28c:	106d      	asrs	r5, r5, #1
 800e28e:	d00b      	beq.n	800e2a8 <__pow5mult+0xa0>
 800e290:	6820      	ldr	r0, [r4, #0]
 800e292:	b938      	cbnz	r0, 800e2a4 <__pow5mult+0x9c>
 800e294:	4622      	mov	r2, r4
 800e296:	4621      	mov	r1, r4
 800e298:	4630      	mov	r0, r6
 800e29a:	f7ff ff0b 	bl	800e0b4 <__multiply>
 800e29e:	6020      	str	r0, [r4, #0]
 800e2a0:	f8c0 9000 	str.w	r9, [r0]
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	e7e4      	b.n	800e272 <__pow5mult+0x6a>
 800e2a8:	4638      	mov	r0, r7
 800e2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ae:	bf00      	nop
 800e2b0:	08010438 	.word	0x08010438
 800e2b4:	08010269 	.word	0x08010269
 800e2b8:	080102ec 	.word	0x080102ec

0800e2bc <__lshift>:
 800e2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c0:	460c      	mov	r4, r1
 800e2c2:	6849      	ldr	r1, [r1, #4]
 800e2c4:	6923      	ldr	r3, [r4, #16]
 800e2c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e2ca:	68a3      	ldr	r3, [r4, #8]
 800e2cc:	4607      	mov	r7, r0
 800e2ce:	4691      	mov	r9, r2
 800e2d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e2d4:	f108 0601 	add.w	r6, r8, #1
 800e2d8:	42b3      	cmp	r3, r6
 800e2da:	db0b      	blt.n	800e2f4 <__lshift+0x38>
 800e2dc:	4638      	mov	r0, r7
 800e2de:	f7ff fddb 	bl	800de98 <_Balloc>
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	b948      	cbnz	r0, 800e2fa <__lshift+0x3e>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	4b2a      	ldr	r3, [pc, #168]	; (800e394 <__lshift+0xd8>)
 800e2ea:	482b      	ldr	r0, [pc, #172]	; (800e398 <__lshift+0xdc>)
 800e2ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e2f0:	f000 fbb8 	bl	800ea64 <__assert_func>
 800e2f4:	3101      	adds	r1, #1
 800e2f6:	005b      	lsls	r3, r3, #1
 800e2f8:	e7ee      	b.n	800e2d8 <__lshift+0x1c>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	f100 0114 	add.w	r1, r0, #20
 800e300:	f100 0210 	add.w	r2, r0, #16
 800e304:	4618      	mov	r0, r3
 800e306:	4553      	cmp	r3, sl
 800e308:	db37      	blt.n	800e37a <__lshift+0xbe>
 800e30a:	6920      	ldr	r0, [r4, #16]
 800e30c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e310:	f104 0314 	add.w	r3, r4, #20
 800e314:	f019 091f 	ands.w	r9, r9, #31
 800e318:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e31c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e320:	d02f      	beq.n	800e382 <__lshift+0xc6>
 800e322:	f1c9 0e20 	rsb	lr, r9, #32
 800e326:	468a      	mov	sl, r1
 800e328:	f04f 0c00 	mov.w	ip, #0
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	fa02 f209 	lsl.w	r2, r2, r9
 800e332:	ea42 020c 	orr.w	r2, r2, ip
 800e336:	f84a 2b04 	str.w	r2, [sl], #4
 800e33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e33e:	4298      	cmp	r0, r3
 800e340:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e344:	d8f2      	bhi.n	800e32c <__lshift+0x70>
 800e346:	1b03      	subs	r3, r0, r4
 800e348:	3b15      	subs	r3, #21
 800e34a:	f023 0303 	bic.w	r3, r3, #3
 800e34e:	3304      	adds	r3, #4
 800e350:	f104 0215 	add.w	r2, r4, #21
 800e354:	4290      	cmp	r0, r2
 800e356:	bf38      	it	cc
 800e358:	2304      	movcc	r3, #4
 800e35a:	f841 c003 	str.w	ip, [r1, r3]
 800e35e:	f1bc 0f00 	cmp.w	ip, #0
 800e362:	d001      	beq.n	800e368 <__lshift+0xac>
 800e364:	f108 0602 	add.w	r6, r8, #2
 800e368:	3e01      	subs	r6, #1
 800e36a:	4638      	mov	r0, r7
 800e36c:	612e      	str	r6, [r5, #16]
 800e36e:	4621      	mov	r1, r4
 800e370:	f7ff fdd2 	bl	800df18 <_Bfree>
 800e374:	4628      	mov	r0, r5
 800e376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e37a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e37e:	3301      	adds	r3, #1
 800e380:	e7c1      	b.n	800e306 <__lshift+0x4a>
 800e382:	3904      	subs	r1, #4
 800e384:	f853 2b04 	ldr.w	r2, [r3], #4
 800e388:	f841 2f04 	str.w	r2, [r1, #4]!
 800e38c:	4298      	cmp	r0, r3
 800e38e:	d8f9      	bhi.n	800e384 <__lshift+0xc8>
 800e390:	e7ea      	b.n	800e368 <__lshift+0xac>
 800e392:	bf00      	nop
 800e394:	080102db 	.word	0x080102db
 800e398:	080102ec 	.word	0x080102ec

0800e39c <__mcmp>:
 800e39c:	b530      	push	{r4, r5, lr}
 800e39e:	6902      	ldr	r2, [r0, #16]
 800e3a0:	690c      	ldr	r4, [r1, #16]
 800e3a2:	1b12      	subs	r2, r2, r4
 800e3a4:	d10e      	bne.n	800e3c4 <__mcmp+0x28>
 800e3a6:	f100 0314 	add.w	r3, r0, #20
 800e3aa:	3114      	adds	r1, #20
 800e3ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e3b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e3b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e3b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e3bc:	42a5      	cmp	r5, r4
 800e3be:	d003      	beq.n	800e3c8 <__mcmp+0x2c>
 800e3c0:	d305      	bcc.n	800e3ce <__mcmp+0x32>
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	4610      	mov	r0, r2
 800e3c6:	bd30      	pop	{r4, r5, pc}
 800e3c8:	4283      	cmp	r3, r0
 800e3ca:	d3f3      	bcc.n	800e3b4 <__mcmp+0x18>
 800e3cc:	e7fa      	b.n	800e3c4 <__mcmp+0x28>
 800e3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d2:	e7f7      	b.n	800e3c4 <__mcmp+0x28>

0800e3d4 <__mdiff>:
 800e3d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3d8:	460c      	mov	r4, r1
 800e3da:	4606      	mov	r6, r0
 800e3dc:	4611      	mov	r1, r2
 800e3de:	4620      	mov	r0, r4
 800e3e0:	4690      	mov	r8, r2
 800e3e2:	f7ff ffdb 	bl	800e39c <__mcmp>
 800e3e6:	1e05      	subs	r5, r0, #0
 800e3e8:	d110      	bne.n	800e40c <__mdiff+0x38>
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	f7ff fd53 	bl	800de98 <_Balloc>
 800e3f2:	b930      	cbnz	r0, 800e402 <__mdiff+0x2e>
 800e3f4:	4b3a      	ldr	r3, [pc, #232]	; (800e4e0 <__mdiff+0x10c>)
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	f240 2132 	movw	r1, #562	; 0x232
 800e3fc:	4839      	ldr	r0, [pc, #228]	; (800e4e4 <__mdiff+0x110>)
 800e3fe:	f000 fb31 	bl	800ea64 <__assert_func>
 800e402:	2301      	movs	r3, #1
 800e404:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40c:	bfa4      	itt	ge
 800e40e:	4643      	movge	r3, r8
 800e410:	46a0      	movge	r8, r4
 800e412:	4630      	mov	r0, r6
 800e414:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e418:	bfa6      	itte	ge
 800e41a:	461c      	movge	r4, r3
 800e41c:	2500      	movge	r5, #0
 800e41e:	2501      	movlt	r5, #1
 800e420:	f7ff fd3a 	bl	800de98 <_Balloc>
 800e424:	b920      	cbnz	r0, 800e430 <__mdiff+0x5c>
 800e426:	4b2e      	ldr	r3, [pc, #184]	; (800e4e0 <__mdiff+0x10c>)
 800e428:	4602      	mov	r2, r0
 800e42a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e42e:	e7e5      	b.n	800e3fc <__mdiff+0x28>
 800e430:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e434:	6926      	ldr	r6, [r4, #16]
 800e436:	60c5      	str	r5, [r0, #12]
 800e438:	f104 0914 	add.w	r9, r4, #20
 800e43c:	f108 0514 	add.w	r5, r8, #20
 800e440:	f100 0e14 	add.w	lr, r0, #20
 800e444:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e448:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e44c:	f108 0210 	add.w	r2, r8, #16
 800e450:	46f2      	mov	sl, lr
 800e452:	2100      	movs	r1, #0
 800e454:	f859 3b04 	ldr.w	r3, [r9], #4
 800e458:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e45c:	fa1f f883 	uxth.w	r8, r3
 800e460:	fa11 f18b 	uxtah	r1, r1, fp
 800e464:	0c1b      	lsrs	r3, r3, #16
 800e466:	eba1 0808 	sub.w	r8, r1, r8
 800e46a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e46e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e472:	fa1f f888 	uxth.w	r8, r8
 800e476:	1419      	asrs	r1, r3, #16
 800e478:	454e      	cmp	r6, r9
 800e47a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e47e:	f84a 3b04 	str.w	r3, [sl], #4
 800e482:	d8e7      	bhi.n	800e454 <__mdiff+0x80>
 800e484:	1b33      	subs	r3, r6, r4
 800e486:	3b15      	subs	r3, #21
 800e488:	f023 0303 	bic.w	r3, r3, #3
 800e48c:	3304      	adds	r3, #4
 800e48e:	3415      	adds	r4, #21
 800e490:	42a6      	cmp	r6, r4
 800e492:	bf38      	it	cc
 800e494:	2304      	movcc	r3, #4
 800e496:	441d      	add	r5, r3
 800e498:	4473      	add	r3, lr
 800e49a:	469e      	mov	lr, r3
 800e49c:	462e      	mov	r6, r5
 800e49e:	4566      	cmp	r6, ip
 800e4a0:	d30e      	bcc.n	800e4c0 <__mdiff+0xec>
 800e4a2:	f10c 0203 	add.w	r2, ip, #3
 800e4a6:	1b52      	subs	r2, r2, r5
 800e4a8:	f022 0203 	bic.w	r2, r2, #3
 800e4ac:	3d03      	subs	r5, #3
 800e4ae:	45ac      	cmp	ip, r5
 800e4b0:	bf38      	it	cc
 800e4b2:	2200      	movcc	r2, #0
 800e4b4:	441a      	add	r2, r3
 800e4b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e4ba:	b17b      	cbz	r3, 800e4dc <__mdiff+0x108>
 800e4bc:	6107      	str	r7, [r0, #16]
 800e4be:	e7a3      	b.n	800e408 <__mdiff+0x34>
 800e4c0:	f856 8b04 	ldr.w	r8, [r6], #4
 800e4c4:	fa11 f288 	uxtah	r2, r1, r8
 800e4c8:	1414      	asrs	r4, r2, #16
 800e4ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e4ce:	b292      	uxth	r2, r2
 800e4d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e4d4:	f84e 2b04 	str.w	r2, [lr], #4
 800e4d8:	1421      	asrs	r1, r4, #16
 800e4da:	e7e0      	b.n	800e49e <__mdiff+0xca>
 800e4dc:	3f01      	subs	r7, #1
 800e4de:	e7ea      	b.n	800e4b6 <__mdiff+0xe2>
 800e4e0:	080102db 	.word	0x080102db
 800e4e4:	080102ec 	.word	0x080102ec

0800e4e8 <__d2b>:
 800e4e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4ec:	4689      	mov	r9, r1
 800e4ee:	2101      	movs	r1, #1
 800e4f0:	ec57 6b10 	vmov	r6, r7, d0
 800e4f4:	4690      	mov	r8, r2
 800e4f6:	f7ff fccf 	bl	800de98 <_Balloc>
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	b930      	cbnz	r0, 800e50c <__d2b+0x24>
 800e4fe:	4602      	mov	r2, r0
 800e500:	4b25      	ldr	r3, [pc, #148]	; (800e598 <__d2b+0xb0>)
 800e502:	4826      	ldr	r0, [pc, #152]	; (800e59c <__d2b+0xb4>)
 800e504:	f240 310a 	movw	r1, #778	; 0x30a
 800e508:	f000 faac 	bl	800ea64 <__assert_func>
 800e50c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e514:	bb35      	cbnz	r5, 800e564 <__d2b+0x7c>
 800e516:	2e00      	cmp	r6, #0
 800e518:	9301      	str	r3, [sp, #4]
 800e51a:	d028      	beq.n	800e56e <__d2b+0x86>
 800e51c:	4668      	mov	r0, sp
 800e51e:	9600      	str	r6, [sp, #0]
 800e520:	f7ff fd82 	bl	800e028 <__lo0bits>
 800e524:	9900      	ldr	r1, [sp, #0]
 800e526:	b300      	cbz	r0, 800e56a <__d2b+0x82>
 800e528:	9a01      	ldr	r2, [sp, #4]
 800e52a:	f1c0 0320 	rsb	r3, r0, #32
 800e52e:	fa02 f303 	lsl.w	r3, r2, r3
 800e532:	430b      	orrs	r3, r1
 800e534:	40c2      	lsrs	r2, r0
 800e536:	6163      	str	r3, [r4, #20]
 800e538:	9201      	str	r2, [sp, #4]
 800e53a:	9b01      	ldr	r3, [sp, #4]
 800e53c:	61a3      	str	r3, [r4, #24]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	bf14      	ite	ne
 800e542:	2202      	movne	r2, #2
 800e544:	2201      	moveq	r2, #1
 800e546:	6122      	str	r2, [r4, #16]
 800e548:	b1d5      	cbz	r5, 800e580 <__d2b+0x98>
 800e54a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e54e:	4405      	add	r5, r0
 800e550:	f8c9 5000 	str.w	r5, [r9]
 800e554:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e558:	f8c8 0000 	str.w	r0, [r8]
 800e55c:	4620      	mov	r0, r4
 800e55e:	b003      	add	sp, #12
 800e560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e568:	e7d5      	b.n	800e516 <__d2b+0x2e>
 800e56a:	6161      	str	r1, [r4, #20]
 800e56c:	e7e5      	b.n	800e53a <__d2b+0x52>
 800e56e:	a801      	add	r0, sp, #4
 800e570:	f7ff fd5a 	bl	800e028 <__lo0bits>
 800e574:	9b01      	ldr	r3, [sp, #4]
 800e576:	6163      	str	r3, [r4, #20]
 800e578:	2201      	movs	r2, #1
 800e57a:	6122      	str	r2, [r4, #16]
 800e57c:	3020      	adds	r0, #32
 800e57e:	e7e3      	b.n	800e548 <__d2b+0x60>
 800e580:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e584:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e588:	f8c9 0000 	str.w	r0, [r9]
 800e58c:	6918      	ldr	r0, [r3, #16]
 800e58e:	f7ff fd2b 	bl	800dfe8 <__hi0bits>
 800e592:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e596:	e7df      	b.n	800e558 <__d2b+0x70>
 800e598:	080102db 	.word	0x080102db
 800e59c:	080102ec 	.word	0x080102ec

0800e5a0 <_calloc_r>:
 800e5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5a2:	fba1 2402 	umull	r2, r4, r1, r2
 800e5a6:	b94c      	cbnz	r4, 800e5bc <_calloc_r+0x1c>
 800e5a8:	4611      	mov	r1, r2
 800e5aa:	9201      	str	r2, [sp, #4]
 800e5ac:	f000 f87a 	bl	800e6a4 <_malloc_r>
 800e5b0:	9a01      	ldr	r2, [sp, #4]
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	b930      	cbnz	r0, 800e5c4 <_calloc_r+0x24>
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	b003      	add	sp, #12
 800e5ba:	bd30      	pop	{r4, r5, pc}
 800e5bc:	220c      	movs	r2, #12
 800e5be:	6002      	str	r2, [r0, #0]
 800e5c0:	2500      	movs	r5, #0
 800e5c2:	e7f8      	b.n	800e5b6 <_calloc_r+0x16>
 800e5c4:	4621      	mov	r1, r4
 800e5c6:	f7fe f93f 	bl	800c848 <memset>
 800e5ca:	e7f4      	b.n	800e5b6 <_calloc_r+0x16>

0800e5cc <_free_r>:
 800e5cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5ce:	2900      	cmp	r1, #0
 800e5d0:	d044      	beq.n	800e65c <_free_r+0x90>
 800e5d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5d6:	9001      	str	r0, [sp, #4]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f1a1 0404 	sub.w	r4, r1, #4
 800e5de:	bfb8      	it	lt
 800e5e0:	18e4      	addlt	r4, r4, r3
 800e5e2:	f000 fa9b 	bl	800eb1c <__malloc_lock>
 800e5e6:	4a1e      	ldr	r2, [pc, #120]	; (800e660 <_free_r+0x94>)
 800e5e8:	9801      	ldr	r0, [sp, #4]
 800e5ea:	6813      	ldr	r3, [r2, #0]
 800e5ec:	b933      	cbnz	r3, 800e5fc <_free_r+0x30>
 800e5ee:	6063      	str	r3, [r4, #4]
 800e5f0:	6014      	str	r4, [r2, #0]
 800e5f2:	b003      	add	sp, #12
 800e5f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5f8:	f000 ba96 	b.w	800eb28 <__malloc_unlock>
 800e5fc:	42a3      	cmp	r3, r4
 800e5fe:	d908      	bls.n	800e612 <_free_r+0x46>
 800e600:	6825      	ldr	r5, [r4, #0]
 800e602:	1961      	adds	r1, r4, r5
 800e604:	428b      	cmp	r3, r1
 800e606:	bf01      	itttt	eq
 800e608:	6819      	ldreq	r1, [r3, #0]
 800e60a:	685b      	ldreq	r3, [r3, #4]
 800e60c:	1949      	addeq	r1, r1, r5
 800e60e:	6021      	streq	r1, [r4, #0]
 800e610:	e7ed      	b.n	800e5ee <_free_r+0x22>
 800e612:	461a      	mov	r2, r3
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	b10b      	cbz	r3, 800e61c <_free_r+0x50>
 800e618:	42a3      	cmp	r3, r4
 800e61a:	d9fa      	bls.n	800e612 <_free_r+0x46>
 800e61c:	6811      	ldr	r1, [r2, #0]
 800e61e:	1855      	adds	r5, r2, r1
 800e620:	42a5      	cmp	r5, r4
 800e622:	d10b      	bne.n	800e63c <_free_r+0x70>
 800e624:	6824      	ldr	r4, [r4, #0]
 800e626:	4421      	add	r1, r4
 800e628:	1854      	adds	r4, r2, r1
 800e62a:	42a3      	cmp	r3, r4
 800e62c:	6011      	str	r1, [r2, #0]
 800e62e:	d1e0      	bne.n	800e5f2 <_free_r+0x26>
 800e630:	681c      	ldr	r4, [r3, #0]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	6053      	str	r3, [r2, #4]
 800e636:	4421      	add	r1, r4
 800e638:	6011      	str	r1, [r2, #0]
 800e63a:	e7da      	b.n	800e5f2 <_free_r+0x26>
 800e63c:	d902      	bls.n	800e644 <_free_r+0x78>
 800e63e:	230c      	movs	r3, #12
 800e640:	6003      	str	r3, [r0, #0]
 800e642:	e7d6      	b.n	800e5f2 <_free_r+0x26>
 800e644:	6825      	ldr	r5, [r4, #0]
 800e646:	1961      	adds	r1, r4, r5
 800e648:	428b      	cmp	r3, r1
 800e64a:	bf04      	itt	eq
 800e64c:	6819      	ldreq	r1, [r3, #0]
 800e64e:	685b      	ldreq	r3, [r3, #4]
 800e650:	6063      	str	r3, [r4, #4]
 800e652:	bf04      	itt	eq
 800e654:	1949      	addeq	r1, r1, r5
 800e656:	6021      	streq	r1, [r4, #0]
 800e658:	6054      	str	r4, [r2, #4]
 800e65a:	e7ca      	b.n	800e5f2 <_free_r+0x26>
 800e65c:	b003      	add	sp, #12
 800e65e:	bd30      	pop	{r4, r5, pc}
 800e660:	20002f60 	.word	0x20002f60

0800e664 <sbrk_aligned>:
 800e664:	b570      	push	{r4, r5, r6, lr}
 800e666:	4e0e      	ldr	r6, [pc, #56]	; (800e6a0 <sbrk_aligned+0x3c>)
 800e668:	460c      	mov	r4, r1
 800e66a:	6831      	ldr	r1, [r6, #0]
 800e66c:	4605      	mov	r5, r0
 800e66e:	b911      	cbnz	r1, 800e676 <sbrk_aligned+0x12>
 800e670:	f000 f9e8 	bl	800ea44 <_sbrk_r>
 800e674:	6030      	str	r0, [r6, #0]
 800e676:	4621      	mov	r1, r4
 800e678:	4628      	mov	r0, r5
 800e67a:	f000 f9e3 	bl	800ea44 <_sbrk_r>
 800e67e:	1c43      	adds	r3, r0, #1
 800e680:	d00a      	beq.n	800e698 <sbrk_aligned+0x34>
 800e682:	1cc4      	adds	r4, r0, #3
 800e684:	f024 0403 	bic.w	r4, r4, #3
 800e688:	42a0      	cmp	r0, r4
 800e68a:	d007      	beq.n	800e69c <sbrk_aligned+0x38>
 800e68c:	1a21      	subs	r1, r4, r0
 800e68e:	4628      	mov	r0, r5
 800e690:	f000 f9d8 	bl	800ea44 <_sbrk_r>
 800e694:	3001      	adds	r0, #1
 800e696:	d101      	bne.n	800e69c <sbrk_aligned+0x38>
 800e698:	f04f 34ff 	mov.w	r4, #4294967295
 800e69c:	4620      	mov	r0, r4
 800e69e:	bd70      	pop	{r4, r5, r6, pc}
 800e6a0:	20002f64 	.word	0x20002f64

0800e6a4 <_malloc_r>:
 800e6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a8:	1ccd      	adds	r5, r1, #3
 800e6aa:	f025 0503 	bic.w	r5, r5, #3
 800e6ae:	3508      	adds	r5, #8
 800e6b0:	2d0c      	cmp	r5, #12
 800e6b2:	bf38      	it	cc
 800e6b4:	250c      	movcc	r5, #12
 800e6b6:	2d00      	cmp	r5, #0
 800e6b8:	4607      	mov	r7, r0
 800e6ba:	db01      	blt.n	800e6c0 <_malloc_r+0x1c>
 800e6bc:	42a9      	cmp	r1, r5
 800e6be:	d905      	bls.n	800e6cc <_malloc_r+0x28>
 800e6c0:	230c      	movs	r3, #12
 800e6c2:	603b      	str	r3, [r7, #0]
 800e6c4:	2600      	movs	r6, #0
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6cc:	4e2e      	ldr	r6, [pc, #184]	; (800e788 <_malloc_r+0xe4>)
 800e6ce:	f000 fa25 	bl	800eb1c <__malloc_lock>
 800e6d2:	6833      	ldr	r3, [r6, #0]
 800e6d4:	461c      	mov	r4, r3
 800e6d6:	bb34      	cbnz	r4, 800e726 <_malloc_r+0x82>
 800e6d8:	4629      	mov	r1, r5
 800e6da:	4638      	mov	r0, r7
 800e6dc:	f7ff ffc2 	bl	800e664 <sbrk_aligned>
 800e6e0:	1c43      	adds	r3, r0, #1
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	d14d      	bne.n	800e782 <_malloc_r+0xde>
 800e6e6:	6834      	ldr	r4, [r6, #0]
 800e6e8:	4626      	mov	r6, r4
 800e6ea:	2e00      	cmp	r6, #0
 800e6ec:	d140      	bne.n	800e770 <_malloc_r+0xcc>
 800e6ee:	6823      	ldr	r3, [r4, #0]
 800e6f0:	4631      	mov	r1, r6
 800e6f2:	4638      	mov	r0, r7
 800e6f4:	eb04 0803 	add.w	r8, r4, r3
 800e6f8:	f000 f9a4 	bl	800ea44 <_sbrk_r>
 800e6fc:	4580      	cmp	r8, r0
 800e6fe:	d13a      	bne.n	800e776 <_malloc_r+0xd2>
 800e700:	6821      	ldr	r1, [r4, #0]
 800e702:	3503      	adds	r5, #3
 800e704:	1a6d      	subs	r5, r5, r1
 800e706:	f025 0503 	bic.w	r5, r5, #3
 800e70a:	3508      	adds	r5, #8
 800e70c:	2d0c      	cmp	r5, #12
 800e70e:	bf38      	it	cc
 800e710:	250c      	movcc	r5, #12
 800e712:	4629      	mov	r1, r5
 800e714:	4638      	mov	r0, r7
 800e716:	f7ff ffa5 	bl	800e664 <sbrk_aligned>
 800e71a:	3001      	adds	r0, #1
 800e71c:	d02b      	beq.n	800e776 <_malloc_r+0xd2>
 800e71e:	6823      	ldr	r3, [r4, #0]
 800e720:	442b      	add	r3, r5
 800e722:	6023      	str	r3, [r4, #0]
 800e724:	e00e      	b.n	800e744 <_malloc_r+0xa0>
 800e726:	6822      	ldr	r2, [r4, #0]
 800e728:	1b52      	subs	r2, r2, r5
 800e72a:	d41e      	bmi.n	800e76a <_malloc_r+0xc6>
 800e72c:	2a0b      	cmp	r2, #11
 800e72e:	d916      	bls.n	800e75e <_malloc_r+0xba>
 800e730:	1961      	adds	r1, r4, r5
 800e732:	42a3      	cmp	r3, r4
 800e734:	6025      	str	r5, [r4, #0]
 800e736:	bf18      	it	ne
 800e738:	6059      	strne	r1, [r3, #4]
 800e73a:	6863      	ldr	r3, [r4, #4]
 800e73c:	bf08      	it	eq
 800e73e:	6031      	streq	r1, [r6, #0]
 800e740:	5162      	str	r2, [r4, r5]
 800e742:	604b      	str	r3, [r1, #4]
 800e744:	4638      	mov	r0, r7
 800e746:	f104 060b 	add.w	r6, r4, #11
 800e74a:	f000 f9ed 	bl	800eb28 <__malloc_unlock>
 800e74e:	f026 0607 	bic.w	r6, r6, #7
 800e752:	1d23      	adds	r3, r4, #4
 800e754:	1af2      	subs	r2, r6, r3
 800e756:	d0b6      	beq.n	800e6c6 <_malloc_r+0x22>
 800e758:	1b9b      	subs	r3, r3, r6
 800e75a:	50a3      	str	r3, [r4, r2]
 800e75c:	e7b3      	b.n	800e6c6 <_malloc_r+0x22>
 800e75e:	6862      	ldr	r2, [r4, #4]
 800e760:	42a3      	cmp	r3, r4
 800e762:	bf0c      	ite	eq
 800e764:	6032      	streq	r2, [r6, #0]
 800e766:	605a      	strne	r2, [r3, #4]
 800e768:	e7ec      	b.n	800e744 <_malloc_r+0xa0>
 800e76a:	4623      	mov	r3, r4
 800e76c:	6864      	ldr	r4, [r4, #4]
 800e76e:	e7b2      	b.n	800e6d6 <_malloc_r+0x32>
 800e770:	4634      	mov	r4, r6
 800e772:	6876      	ldr	r6, [r6, #4]
 800e774:	e7b9      	b.n	800e6ea <_malloc_r+0x46>
 800e776:	230c      	movs	r3, #12
 800e778:	603b      	str	r3, [r7, #0]
 800e77a:	4638      	mov	r0, r7
 800e77c:	f000 f9d4 	bl	800eb28 <__malloc_unlock>
 800e780:	e7a1      	b.n	800e6c6 <_malloc_r+0x22>
 800e782:	6025      	str	r5, [r4, #0]
 800e784:	e7de      	b.n	800e744 <_malloc_r+0xa0>
 800e786:	bf00      	nop
 800e788:	20002f60 	.word	0x20002f60

0800e78c <__ssputs_r>:
 800e78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e790:	688e      	ldr	r6, [r1, #8]
 800e792:	429e      	cmp	r6, r3
 800e794:	4682      	mov	sl, r0
 800e796:	460c      	mov	r4, r1
 800e798:	4690      	mov	r8, r2
 800e79a:	461f      	mov	r7, r3
 800e79c:	d838      	bhi.n	800e810 <__ssputs_r+0x84>
 800e79e:	898a      	ldrh	r2, [r1, #12]
 800e7a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e7a4:	d032      	beq.n	800e80c <__ssputs_r+0x80>
 800e7a6:	6825      	ldr	r5, [r4, #0]
 800e7a8:	6909      	ldr	r1, [r1, #16]
 800e7aa:	eba5 0901 	sub.w	r9, r5, r1
 800e7ae:	6965      	ldr	r5, [r4, #20]
 800e7b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	444b      	add	r3, r9
 800e7bc:	106d      	asrs	r5, r5, #1
 800e7be:	429d      	cmp	r5, r3
 800e7c0:	bf38      	it	cc
 800e7c2:	461d      	movcc	r5, r3
 800e7c4:	0553      	lsls	r3, r2, #21
 800e7c6:	d531      	bpl.n	800e82c <__ssputs_r+0xa0>
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	f7ff ff6b 	bl	800e6a4 <_malloc_r>
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	b950      	cbnz	r0, 800e7e8 <__ssputs_r+0x5c>
 800e7d2:	230c      	movs	r3, #12
 800e7d4:	f8ca 3000 	str.w	r3, [sl]
 800e7d8:	89a3      	ldrh	r3, [r4, #12]
 800e7da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7de:	81a3      	strh	r3, [r4, #12]
 800e7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7e8:	6921      	ldr	r1, [r4, #16]
 800e7ea:	464a      	mov	r2, r9
 800e7ec:	f7ff fb46 	bl	800de7c <memcpy>
 800e7f0:	89a3      	ldrh	r3, [r4, #12]
 800e7f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7fa:	81a3      	strh	r3, [r4, #12]
 800e7fc:	6126      	str	r6, [r4, #16]
 800e7fe:	6165      	str	r5, [r4, #20]
 800e800:	444e      	add	r6, r9
 800e802:	eba5 0509 	sub.w	r5, r5, r9
 800e806:	6026      	str	r6, [r4, #0]
 800e808:	60a5      	str	r5, [r4, #8]
 800e80a:	463e      	mov	r6, r7
 800e80c:	42be      	cmp	r6, r7
 800e80e:	d900      	bls.n	800e812 <__ssputs_r+0x86>
 800e810:	463e      	mov	r6, r7
 800e812:	6820      	ldr	r0, [r4, #0]
 800e814:	4632      	mov	r2, r6
 800e816:	4641      	mov	r1, r8
 800e818:	f000 f966 	bl	800eae8 <memmove>
 800e81c:	68a3      	ldr	r3, [r4, #8]
 800e81e:	1b9b      	subs	r3, r3, r6
 800e820:	60a3      	str	r3, [r4, #8]
 800e822:	6823      	ldr	r3, [r4, #0]
 800e824:	4433      	add	r3, r6
 800e826:	6023      	str	r3, [r4, #0]
 800e828:	2000      	movs	r0, #0
 800e82a:	e7db      	b.n	800e7e4 <__ssputs_r+0x58>
 800e82c:	462a      	mov	r2, r5
 800e82e:	f000 f981 	bl	800eb34 <_realloc_r>
 800e832:	4606      	mov	r6, r0
 800e834:	2800      	cmp	r0, #0
 800e836:	d1e1      	bne.n	800e7fc <__ssputs_r+0x70>
 800e838:	6921      	ldr	r1, [r4, #16]
 800e83a:	4650      	mov	r0, sl
 800e83c:	f7ff fec6 	bl	800e5cc <_free_r>
 800e840:	e7c7      	b.n	800e7d2 <__ssputs_r+0x46>
	...

0800e844 <_svfiprintf_r>:
 800e844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e848:	4698      	mov	r8, r3
 800e84a:	898b      	ldrh	r3, [r1, #12]
 800e84c:	061b      	lsls	r3, r3, #24
 800e84e:	b09d      	sub	sp, #116	; 0x74
 800e850:	4607      	mov	r7, r0
 800e852:	460d      	mov	r5, r1
 800e854:	4614      	mov	r4, r2
 800e856:	d50e      	bpl.n	800e876 <_svfiprintf_r+0x32>
 800e858:	690b      	ldr	r3, [r1, #16]
 800e85a:	b963      	cbnz	r3, 800e876 <_svfiprintf_r+0x32>
 800e85c:	2140      	movs	r1, #64	; 0x40
 800e85e:	f7ff ff21 	bl	800e6a4 <_malloc_r>
 800e862:	6028      	str	r0, [r5, #0]
 800e864:	6128      	str	r0, [r5, #16]
 800e866:	b920      	cbnz	r0, 800e872 <_svfiprintf_r+0x2e>
 800e868:	230c      	movs	r3, #12
 800e86a:	603b      	str	r3, [r7, #0]
 800e86c:	f04f 30ff 	mov.w	r0, #4294967295
 800e870:	e0d1      	b.n	800ea16 <_svfiprintf_r+0x1d2>
 800e872:	2340      	movs	r3, #64	; 0x40
 800e874:	616b      	str	r3, [r5, #20]
 800e876:	2300      	movs	r3, #0
 800e878:	9309      	str	r3, [sp, #36]	; 0x24
 800e87a:	2320      	movs	r3, #32
 800e87c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e880:	f8cd 800c 	str.w	r8, [sp, #12]
 800e884:	2330      	movs	r3, #48	; 0x30
 800e886:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ea30 <_svfiprintf_r+0x1ec>
 800e88a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e88e:	f04f 0901 	mov.w	r9, #1
 800e892:	4623      	mov	r3, r4
 800e894:	469a      	mov	sl, r3
 800e896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e89a:	b10a      	cbz	r2, 800e8a0 <_svfiprintf_r+0x5c>
 800e89c:	2a25      	cmp	r2, #37	; 0x25
 800e89e:	d1f9      	bne.n	800e894 <_svfiprintf_r+0x50>
 800e8a0:	ebba 0b04 	subs.w	fp, sl, r4
 800e8a4:	d00b      	beq.n	800e8be <_svfiprintf_r+0x7a>
 800e8a6:	465b      	mov	r3, fp
 800e8a8:	4622      	mov	r2, r4
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	4638      	mov	r0, r7
 800e8ae:	f7ff ff6d 	bl	800e78c <__ssputs_r>
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	f000 80aa 	beq.w	800ea0c <_svfiprintf_r+0x1c8>
 800e8b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8ba:	445a      	add	r2, fp
 800e8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800e8be:	f89a 3000 	ldrb.w	r3, [sl]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	f000 80a2 	beq.w	800ea0c <_svfiprintf_r+0x1c8>
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8d2:	f10a 0a01 	add.w	sl, sl, #1
 800e8d6:	9304      	str	r3, [sp, #16]
 800e8d8:	9307      	str	r3, [sp, #28]
 800e8da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8de:	931a      	str	r3, [sp, #104]	; 0x68
 800e8e0:	4654      	mov	r4, sl
 800e8e2:	2205      	movs	r2, #5
 800e8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8e8:	4851      	ldr	r0, [pc, #324]	; (800ea30 <_svfiprintf_r+0x1ec>)
 800e8ea:	f7f1 fc81 	bl	80001f0 <memchr>
 800e8ee:	9a04      	ldr	r2, [sp, #16]
 800e8f0:	b9d8      	cbnz	r0, 800e92a <_svfiprintf_r+0xe6>
 800e8f2:	06d0      	lsls	r0, r2, #27
 800e8f4:	bf44      	itt	mi
 800e8f6:	2320      	movmi	r3, #32
 800e8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8fc:	0711      	lsls	r1, r2, #28
 800e8fe:	bf44      	itt	mi
 800e900:	232b      	movmi	r3, #43	; 0x2b
 800e902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e906:	f89a 3000 	ldrb.w	r3, [sl]
 800e90a:	2b2a      	cmp	r3, #42	; 0x2a
 800e90c:	d015      	beq.n	800e93a <_svfiprintf_r+0xf6>
 800e90e:	9a07      	ldr	r2, [sp, #28]
 800e910:	4654      	mov	r4, sl
 800e912:	2000      	movs	r0, #0
 800e914:	f04f 0c0a 	mov.w	ip, #10
 800e918:	4621      	mov	r1, r4
 800e91a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e91e:	3b30      	subs	r3, #48	; 0x30
 800e920:	2b09      	cmp	r3, #9
 800e922:	d94e      	bls.n	800e9c2 <_svfiprintf_r+0x17e>
 800e924:	b1b0      	cbz	r0, 800e954 <_svfiprintf_r+0x110>
 800e926:	9207      	str	r2, [sp, #28]
 800e928:	e014      	b.n	800e954 <_svfiprintf_r+0x110>
 800e92a:	eba0 0308 	sub.w	r3, r0, r8
 800e92e:	fa09 f303 	lsl.w	r3, r9, r3
 800e932:	4313      	orrs	r3, r2
 800e934:	9304      	str	r3, [sp, #16]
 800e936:	46a2      	mov	sl, r4
 800e938:	e7d2      	b.n	800e8e0 <_svfiprintf_r+0x9c>
 800e93a:	9b03      	ldr	r3, [sp, #12]
 800e93c:	1d19      	adds	r1, r3, #4
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	9103      	str	r1, [sp, #12]
 800e942:	2b00      	cmp	r3, #0
 800e944:	bfbb      	ittet	lt
 800e946:	425b      	neglt	r3, r3
 800e948:	f042 0202 	orrlt.w	r2, r2, #2
 800e94c:	9307      	strge	r3, [sp, #28]
 800e94e:	9307      	strlt	r3, [sp, #28]
 800e950:	bfb8      	it	lt
 800e952:	9204      	strlt	r2, [sp, #16]
 800e954:	7823      	ldrb	r3, [r4, #0]
 800e956:	2b2e      	cmp	r3, #46	; 0x2e
 800e958:	d10c      	bne.n	800e974 <_svfiprintf_r+0x130>
 800e95a:	7863      	ldrb	r3, [r4, #1]
 800e95c:	2b2a      	cmp	r3, #42	; 0x2a
 800e95e:	d135      	bne.n	800e9cc <_svfiprintf_r+0x188>
 800e960:	9b03      	ldr	r3, [sp, #12]
 800e962:	1d1a      	adds	r2, r3, #4
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	9203      	str	r2, [sp, #12]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	bfb8      	it	lt
 800e96c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e970:	3402      	adds	r4, #2
 800e972:	9305      	str	r3, [sp, #20]
 800e974:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ea40 <_svfiprintf_r+0x1fc>
 800e978:	7821      	ldrb	r1, [r4, #0]
 800e97a:	2203      	movs	r2, #3
 800e97c:	4650      	mov	r0, sl
 800e97e:	f7f1 fc37 	bl	80001f0 <memchr>
 800e982:	b140      	cbz	r0, 800e996 <_svfiprintf_r+0x152>
 800e984:	2340      	movs	r3, #64	; 0x40
 800e986:	eba0 000a 	sub.w	r0, r0, sl
 800e98a:	fa03 f000 	lsl.w	r0, r3, r0
 800e98e:	9b04      	ldr	r3, [sp, #16]
 800e990:	4303      	orrs	r3, r0
 800e992:	3401      	adds	r4, #1
 800e994:	9304      	str	r3, [sp, #16]
 800e996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e99a:	4826      	ldr	r0, [pc, #152]	; (800ea34 <_svfiprintf_r+0x1f0>)
 800e99c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9a0:	2206      	movs	r2, #6
 800e9a2:	f7f1 fc25 	bl	80001f0 <memchr>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d038      	beq.n	800ea1c <_svfiprintf_r+0x1d8>
 800e9aa:	4b23      	ldr	r3, [pc, #140]	; (800ea38 <_svfiprintf_r+0x1f4>)
 800e9ac:	bb1b      	cbnz	r3, 800e9f6 <_svfiprintf_r+0x1b2>
 800e9ae:	9b03      	ldr	r3, [sp, #12]
 800e9b0:	3307      	adds	r3, #7
 800e9b2:	f023 0307 	bic.w	r3, r3, #7
 800e9b6:	3308      	adds	r3, #8
 800e9b8:	9303      	str	r3, [sp, #12]
 800e9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9bc:	4433      	add	r3, r6
 800e9be:	9309      	str	r3, [sp, #36]	; 0x24
 800e9c0:	e767      	b.n	800e892 <_svfiprintf_r+0x4e>
 800e9c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	2001      	movs	r0, #1
 800e9ca:	e7a5      	b.n	800e918 <_svfiprintf_r+0xd4>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	3401      	adds	r4, #1
 800e9d0:	9305      	str	r3, [sp, #20]
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	f04f 0c0a 	mov.w	ip, #10
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9de:	3a30      	subs	r2, #48	; 0x30
 800e9e0:	2a09      	cmp	r2, #9
 800e9e2:	d903      	bls.n	800e9ec <_svfiprintf_r+0x1a8>
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d0c5      	beq.n	800e974 <_svfiprintf_r+0x130>
 800e9e8:	9105      	str	r1, [sp, #20]
 800e9ea:	e7c3      	b.n	800e974 <_svfiprintf_r+0x130>
 800e9ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e7f0      	b.n	800e9d8 <_svfiprintf_r+0x194>
 800e9f6:	ab03      	add	r3, sp, #12
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	462a      	mov	r2, r5
 800e9fc:	4b0f      	ldr	r3, [pc, #60]	; (800ea3c <_svfiprintf_r+0x1f8>)
 800e9fe:	a904      	add	r1, sp, #16
 800ea00:	4638      	mov	r0, r7
 800ea02:	f7fd ffc9 	bl	800c998 <_printf_float>
 800ea06:	1c42      	adds	r2, r0, #1
 800ea08:	4606      	mov	r6, r0
 800ea0a:	d1d6      	bne.n	800e9ba <_svfiprintf_r+0x176>
 800ea0c:	89ab      	ldrh	r3, [r5, #12]
 800ea0e:	065b      	lsls	r3, r3, #25
 800ea10:	f53f af2c 	bmi.w	800e86c <_svfiprintf_r+0x28>
 800ea14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea16:	b01d      	add	sp, #116	; 0x74
 800ea18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1c:	ab03      	add	r3, sp, #12
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	462a      	mov	r2, r5
 800ea22:	4b06      	ldr	r3, [pc, #24]	; (800ea3c <_svfiprintf_r+0x1f8>)
 800ea24:	a904      	add	r1, sp, #16
 800ea26:	4638      	mov	r0, r7
 800ea28:	f7fe fa5a 	bl	800cee0 <_printf_i>
 800ea2c:	e7eb      	b.n	800ea06 <_svfiprintf_r+0x1c2>
 800ea2e:	bf00      	nop
 800ea30:	08010444 	.word	0x08010444
 800ea34:	0801044e 	.word	0x0801044e
 800ea38:	0800c999 	.word	0x0800c999
 800ea3c:	0800e78d 	.word	0x0800e78d
 800ea40:	0801044a 	.word	0x0801044a

0800ea44 <_sbrk_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	4d06      	ldr	r5, [pc, #24]	; (800ea60 <_sbrk_r+0x1c>)
 800ea48:	2300      	movs	r3, #0
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	4608      	mov	r0, r1
 800ea4e:	602b      	str	r3, [r5, #0]
 800ea50:	f7f4 feaa 	bl	80037a8 <_sbrk>
 800ea54:	1c43      	adds	r3, r0, #1
 800ea56:	d102      	bne.n	800ea5e <_sbrk_r+0x1a>
 800ea58:	682b      	ldr	r3, [r5, #0]
 800ea5a:	b103      	cbz	r3, 800ea5e <_sbrk_r+0x1a>
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	bd38      	pop	{r3, r4, r5, pc}
 800ea60:	20002f68 	.word	0x20002f68

0800ea64 <__assert_func>:
 800ea64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea66:	4614      	mov	r4, r2
 800ea68:	461a      	mov	r2, r3
 800ea6a:	4b09      	ldr	r3, [pc, #36]	; (800ea90 <__assert_func+0x2c>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4605      	mov	r5, r0
 800ea70:	68d8      	ldr	r0, [r3, #12]
 800ea72:	b14c      	cbz	r4, 800ea88 <__assert_func+0x24>
 800ea74:	4b07      	ldr	r3, [pc, #28]	; (800ea94 <__assert_func+0x30>)
 800ea76:	9100      	str	r1, [sp, #0]
 800ea78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea7c:	4906      	ldr	r1, [pc, #24]	; (800ea98 <__assert_func+0x34>)
 800ea7e:	462b      	mov	r3, r5
 800ea80:	f000 f80e 	bl	800eaa0 <fiprintf>
 800ea84:	f000 faac 	bl	800efe0 <abort>
 800ea88:	4b04      	ldr	r3, [pc, #16]	; (800ea9c <__assert_func+0x38>)
 800ea8a:	461c      	mov	r4, r3
 800ea8c:	e7f3      	b.n	800ea76 <__assert_func+0x12>
 800ea8e:	bf00      	nop
 800ea90:	20000024 	.word	0x20000024
 800ea94:	08010455 	.word	0x08010455
 800ea98:	08010462 	.word	0x08010462
 800ea9c:	08010490 	.word	0x08010490

0800eaa0 <fiprintf>:
 800eaa0:	b40e      	push	{r1, r2, r3}
 800eaa2:	b503      	push	{r0, r1, lr}
 800eaa4:	4601      	mov	r1, r0
 800eaa6:	ab03      	add	r3, sp, #12
 800eaa8:	4805      	ldr	r0, [pc, #20]	; (800eac0 <fiprintf+0x20>)
 800eaaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaae:	6800      	ldr	r0, [r0, #0]
 800eab0:	9301      	str	r3, [sp, #4]
 800eab2:	f000 f897 	bl	800ebe4 <_vfiprintf_r>
 800eab6:	b002      	add	sp, #8
 800eab8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eabc:	b003      	add	sp, #12
 800eabe:	4770      	bx	lr
 800eac0:	20000024 	.word	0x20000024

0800eac4 <__ascii_mbtowc>:
 800eac4:	b082      	sub	sp, #8
 800eac6:	b901      	cbnz	r1, 800eaca <__ascii_mbtowc+0x6>
 800eac8:	a901      	add	r1, sp, #4
 800eaca:	b142      	cbz	r2, 800eade <__ascii_mbtowc+0x1a>
 800eacc:	b14b      	cbz	r3, 800eae2 <__ascii_mbtowc+0x1e>
 800eace:	7813      	ldrb	r3, [r2, #0]
 800ead0:	600b      	str	r3, [r1, #0]
 800ead2:	7812      	ldrb	r2, [r2, #0]
 800ead4:	1e10      	subs	r0, r2, #0
 800ead6:	bf18      	it	ne
 800ead8:	2001      	movne	r0, #1
 800eada:	b002      	add	sp, #8
 800eadc:	4770      	bx	lr
 800eade:	4610      	mov	r0, r2
 800eae0:	e7fb      	b.n	800eada <__ascii_mbtowc+0x16>
 800eae2:	f06f 0001 	mvn.w	r0, #1
 800eae6:	e7f8      	b.n	800eada <__ascii_mbtowc+0x16>

0800eae8 <memmove>:
 800eae8:	4288      	cmp	r0, r1
 800eaea:	b510      	push	{r4, lr}
 800eaec:	eb01 0402 	add.w	r4, r1, r2
 800eaf0:	d902      	bls.n	800eaf8 <memmove+0x10>
 800eaf2:	4284      	cmp	r4, r0
 800eaf4:	4623      	mov	r3, r4
 800eaf6:	d807      	bhi.n	800eb08 <memmove+0x20>
 800eaf8:	1e43      	subs	r3, r0, #1
 800eafa:	42a1      	cmp	r1, r4
 800eafc:	d008      	beq.n	800eb10 <memmove+0x28>
 800eafe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb06:	e7f8      	b.n	800eafa <memmove+0x12>
 800eb08:	4402      	add	r2, r0
 800eb0a:	4601      	mov	r1, r0
 800eb0c:	428a      	cmp	r2, r1
 800eb0e:	d100      	bne.n	800eb12 <memmove+0x2a>
 800eb10:	bd10      	pop	{r4, pc}
 800eb12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb1a:	e7f7      	b.n	800eb0c <memmove+0x24>

0800eb1c <__malloc_lock>:
 800eb1c:	4801      	ldr	r0, [pc, #4]	; (800eb24 <__malloc_lock+0x8>)
 800eb1e:	f000 bc1f 	b.w	800f360 <__retarget_lock_acquire_recursive>
 800eb22:	bf00      	nop
 800eb24:	20002f6c 	.word	0x20002f6c

0800eb28 <__malloc_unlock>:
 800eb28:	4801      	ldr	r0, [pc, #4]	; (800eb30 <__malloc_unlock+0x8>)
 800eb2a:	f000 bc1a 	b.w	800f362 <__retarget_lock_release_recursive>
 800eb2e:	bf00      	nop
 800eb30:	20002f6c 	.word	0x20002f6c

0800eb34 <_realloc_r>:
 800eb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb38:	4680      	mov	r8, r0
 800eb3a:	4614      	mov	r4, r2
 800eb3c:	460e      	mov	r6, r1
 800eb3e:	b921      	cbnz	r1, 800eb4a <_realloc_r+0x16>
 800eb40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb44:	4611      	mov	r1, r2
 800eb46:	f7ff bdad 	b.w	800e6a4 <_malloc_r>
 800eb4a:	b92a      	cbnz	r2, 800eb58 <_realloc_r+0x24>
 800eb4c:	f7ff fd3e 	bl	800e5cc <_free_r>
 800eb50:	4625      	mov	r5, r4
 800eb52:	4628      	mov	r0, r5
 800eb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb58:	f000 fc6a 	bl	800f430 <_malloc_usable_size_r>
 800eb5c:	4284      	cmp	r4, r0
 800eb5e:	4607      	mov	r7, r0
 800eb60:	d802      	bhi.n	800eb68 <_realloc_r+0x34>
 800eb62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb66:	d812      	bhi.n	800eb8e <_realloc_r+0x5a>
 800eb68:	4621      	mov	r1, r4
 800eb6a:	4640      	mov	r0, r8
 800eb6c:	f7ff fd9a 	bl	800e6a4 <_malloc_r>
 800eb70:	4605      	mov	r5, r0
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d0ed      	beq.n	800eb52 <_realloc_r+0x1e>
 800eb76:	42bc      	cmp	r4, r7
 800eb78:	4622      	mov	r2, r4
 800eb7a:	4631      	mov	r1, r6
 800eb7c:	bf28      	it	cs
 800eb7e:	463a      	movcs	r2, r7
 800eb80:	f7ff f97c 	bl	800de7c <memcpy>
 800eb84:	4631      	mov	r1, r6
 800eb86:	4640      	mov	r0, r8
 800eb88:	f7ff fd20 	bl	800e5cc <_free_r>
 800eb8c:	e7e1      	b.n	800eb52 <_realloc_r+0x1e>
 800eb8e:	4635      	mov	r5, r6
 800eb90:	e7df      	b.n	800eb52 <_realloc_r+0x1e>

0800eb92 <__sfputc_r>:
 800eb92:	6893      	ldr	r3, [r2, #8]
 800eb94:	3b01      	subs	r3, #1
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	b410      	push	{r4}
 800eb9a:	6093      	str	r3, [r2, #8]
 800eb9c:	da08      	bge.n	800ebb0 <__sfputc_r+0x1e>
 800eb9e:	6994      	ldr	r4, [r2, #24]
 800eba0:	42a3      	cmp	r3, r4
 800eba2:	db01      	blt.n	800eba8 <__sfputc_r+0x16>
 800eba4:	290a      	cmp	r1, #10
 800eba6:	d103      	bne.n	800ebb0 <__sfputc_r+0x1e>
 800eba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebac:	f000 b94a 	b.w	800ee44 <__swbuf_r>
 800ebb0:	6813      	ldr	r3, [r2, #0]
 800ebb2:	1c58      	adds	r0, r3, #1
 800ebb4:	6010      	str	r0, [r2, #0]
 800ebb6:	7019      	strb	r1, [r3, #0]
 800ebb8:	4608      	mov	r0, r1
 800ebba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <__sfputs_r>:
 800ebc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	460f      	mov	r7, r1
 800ebc6:	4614      	mov	r4, r2
 800ebc8:	18d5      	adds	r5, r2, r3
 800ebca:	42ac      	cmp	r4, r5
 800ebcc:	d101      	bne.n	800ebd2 <__sfputs_r+0x12>
 800ebce:	2000      	movs	r0, #0
 800ebd0:	e007      	b.n	800ebe2 <__sfputs_r+0x22>
 800ebd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebd6:	463a      	mov	r2, r7
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f7ff ffda 	bl	800eb92 <__sfputc_r>
 800ebde:	1c43      	adds	r3, r0, #1
 800ebe0:	d1f3      	bne.n	800ebca <__sfputs_r+0xa>
 800ebe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebe4 <_vfiprintf_r>:
 800ebe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe8:	460d      	mov	r5, r1
 800ebea:	b09d      	sub	sp, #116	; 0x74
 800ebec:	4614      	mov	r4, r2
 800ebee:	4698      	mov	r8, r3
 800ebf0:	4606      	mov	r6, r0
 800ebf2:	b118      	cbz	r0, 800ebfc <_vfiprintf_r+0x18>
 800ebf4:	6983      	ldr	r3, [r0, #24]
 800ebf6:	b90b      	cbnz	r3, 800ebfc <_vfiprintf_r+0x18>
 800ebf8:	f000 fb14 	bl	800f224 <__sinit>
 800ebfc:	4b89      	ldr	r3, [pc, #548]	; (800ee24 <_vfiprintf_r+0x240>)
 800ebfe:	429d      	cmp	r5, r3
 800ec00:	d11b      	bne.n	800ec3a <_vfiprintf_r+0x56>
 800ec02:	6875      	ldr	r5, [r6, #4]
 800ec04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec06:	07d9      	lsls	r1, r3, #31
 800ec08:	d405      	bmi.n	800ec16 <_vfiprintf_r+0x32>
 800ec0a:	89ab      	ldrh	r3, [r5, #12]
 800ec0c:	059a      	lsls	r2, r3, #22
 800ec0e:	d402      	bmi.n	800ec16 <_vfiprintf_r+0x32>
 800ec10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec12:	f000 fba5 	bl	800f360 <__retarget_lock_acquire_recursive>
 800ec16:	89ab      	ldrh	r3, [r5, #12]
 800ec18:	071b      	lsls	r3, r3, #28
 800ec1a:	d501      	bpl.n	800ec20 <_vfiprintf_r+0x3c>
 800ec1c:	692b      	ldr	r3, [r5, #16]
 800ec1e:	b9eb      	cbnz	r3, 800ec5c <_vfiprintf_r+0x78>
 800ec20:	4629      	mov	r1, r5
 800ec22:	4630      	mov	r0, r6
 800ec24:	f000 f96e 	bl	800ef04 <__swsetup_r>
 800ec28:	b1c0      	cbz	r0, 800ec5c <_vfiprintf_r+0x78>
 800ec2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec2c:	07dc      	lsls	r4, r3, #31
 800ec2e:	d50e      	bpl.n	800ec4e <_vfiprintf_r+0x6a>
 800ec30:	f04f 30ff 	mov.w	r0, #4294967295
 800ec34:	b01d      	add	sp, #116	; 0x74
 800ec36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec3a:	4b7b      	ldr	r3, [pc, #492]	; (800ee28 <_vfiprintf_r+0x244>)
 800ec3c:	429d      	cmp	r5, r3
 800ec3e:	d101      	bne.n	800ec44 <_vfiprintf_r+0x60>
 800ec40:	68b5      	ldr	r5, [r6, #8]
 800ec42:	e7df      	b.n	800ec04 <_vfiprintf_r+0x20>
 800ec44:	4b79      	ldr	r3, [pc, #484]	; (800ee2c <_vfiprintf_r+0x248>)
 800ec46:	429d      	cmp	r5, r3
 800ec48:	bf08      	it	eq
 800ec4a:	68f5      	ldreq	r5, [r6, #12]
 800ec4c:	e7da      	b.n	800ec04 <_vfiprintf_r+0x20>
 800ec4e:	89ab      	ldrh	r3, [r5, #12]
 800ec50:	0598      	lsls	r0, r3, #22
 800ec52:	d4ed      	bmi.n	800ec30 <_vfiprintf_r+0x4c>
 800ec54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec56:	f000 fb84 	bl	800f362 <__retarget_lock_release_recursive>
 800ec5a:	e7e9      	b.n	800ec30 <_vfiprintf_r+0x4c>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec60:	2320      	movs	r3, #32
 800ec62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec6a:	2330      	movs	r3, #48	; 0x30
 800ec6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ee30 <_vfiprintf_r+0x24c>
 800ec70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec74:	f04f 0901 	mov.w	r9, #1
 800ec78:	4623      	mov	r3, r4
 800ec7a:	469a      	mov	sl, r3
 800ec7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec80:	b10a      	cbz	r2, 800ec86 <_vfiprintf_r+0xa2>
 800ec82:	2a25      	cmp	r2, #37	; 0x25
 800ec84:	d1f9      	bne.n	800ec7a <_vfiprintf_r+0x96>
 800ec86:	ebba 0b04 	subs.w	fp, sl, r4
 800ec8a:	d00b      	beq.n	800eca4 <_vfiprintf_r+0xc0>
 800ec8c:	465b      	mov	r3, fp
 800ec8e:	4622      	mov	r2, r4
 800ec90:	4629      	mov	r1, r5
 800ec92:	4630      	mov	r0, r6
 800ec94:	f7ff ff94 	bl	800ebc0 <__sfputs_r>
 800ec98:	3001      	adds	r0, #1
 800ec9a:	f000 80aa 	beq.w	800edf2 <_vfiprintf_r+0x20e>
 800ec9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eca0:	445a      	add	r2, fp
 800eca2:	9209      	str	r2, [sp, #36]	; 0x24
 800eca4:	f89a 3000 	ldrb.w	r3, [sl]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f000 80a2 	beq.w	800edf2 <_vfiprintf_r+0x20e>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ecb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecb8:	f10a 0a01 	add.w	sl, sl, #1
 800ecbc:	9304      	str	r3, [sp, #16]
 800ecbe:	9307      	str	r3, [sp, #28]
 800ecc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecc4:	931a      	str	r3, [sp, #104]	; 0x68
 800ecc6:	4654      	mov	r4, sl
 800ecc8:	2205      	movs	r2, #5
 800ecca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecce:	4858      	ldr	r0, [pc, #352]	; (800ee30 <_vfiprintf_r+0x24c>)
 800ecd0:	f7f1 fa8e 	bl	80001f0 <memchr>
 800ecd4:	9a04      	ldr	r2, [sp, #16]
 800ecd6:	b9d8      	cbnz	r0, 800ed10 <_vfiprintf_r+0x12c>
 800ecd8:	06d1      	lsls	r1, r2, #27
 800ecda:	bf44      	itt	mi
 800ecdc:	2320      	movmi	r3, #32
 800ecde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ece2:	0713      	lsls	r3, r2, #28
 800ece4:	bf44      	itt	mi
 800ece6:	232b      	movmi	r3, #43	; 0x2b
 800ece8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecec:	f89a 3000 	ldrb.w	r3, [sl]
 800ecf0:	2b2a      	cmp	r3, #42	; 0x2a
 800ecf2:	d015      	beq.n	800ed20 <_vfiprintf_r+0x13c>
 800ecf4:	9a07      	ldr	r2, [sp, #28]
 800ecf6:	4654      	mov	r4, sl
 800ecf8:	2000      	movs	r0, #0
 800ecfa:	f04f 0c0a 	mov.w	ip, #10
 800ecfe:	4621      	mov	r1, r4
 800ed00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed04:	3b30      	subs	r3, #48	; 0x30
 800ed06:	2b09      	cmp	r3, #9
 800ed08:	d94e      	bls.n	800eda8 <_vfiprintf_r+0x1c4>
 800ed0a:	b1b0      	cbz	r0, 800ed3a <_vfiprintf_r+0x156>
 800ed0c:	9207      	str	r2, [sp, #28]
 800ed0e:	e014      	b.n	800ed3a <_vfiprintf_r+0x156>
 800ed10:	eba0 0308 	sub.w	r3, r0, r8
 800ed14:	fa09 f303 	lsl.w	r3, r9, r3
 800ed18:	4313      	orrs	r3, r2
 800ed1a:	9304      	str	r3, [sp, #16]
 800ed1c:	46a2      	mov	sl, r4
 800ed1e:	e7d2      	b.n	800ecc6 <_vfiprintf_r+0xe2>
 800ed20:	9b03      	ldr	r3, [sp, #12]
 800ed22:	1d19      	adds	r1, r3, #4
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	9103      	str	r1, [sp, #12]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	bfbb      	ittet	lt
 800ed2c:	425b      	neglt	r3, r3
 800ed2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ed32:	9307      	strge	r3, [sp, #28]
 800ed34:	9307      	strlt	r3, [sp, #28]
 800ed36:	bfb8      	it	lt
 800ed38:	9204      	strlt	r2, [sp, #16]
 800ed3a:	7823      	ldrb	r3, [r4, #0]
 800ed3c:	2b2e      	cmp	r3, #46	; 0x2e
 800ed3e:	d10c      	bne.n	800ed5a <_vfiprintf_r+0x176>
 800ed40:	7863      	ldrb	r3, [r4, #1]
 800ed42:	2b2a      	cmp	r3, #42	; 0x2a
 800ed44:	d135      	bne.n	800edb2 <_vfiprintf_r+0x1ce>
 800ed46:	9b03      	ldr	r3, [sp, #12]
 800ed48:	1d1a      	adds	r2, r3, #4
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	9203      	str	r2, [sp, #12]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	bfb8      	it	lt
 800ed52:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed56:	3402      	adds	r4, #2
 800ed58:	9305      	str	r3, [sp, #20]
 800ed5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee40 <_vfiprintf_r+0x25c>
 800ed5e:	7821      	ldrb	r1, [r4, #0]
 800ed60:	2203      	movs	r2, #3
 800ed62:	4650      	mov	r0, sl
 800ed64:	f7f1 fa44 	bl	80001f0 <memchr>
 800ed68:	b140      	cbz	r0, 800ed7c <_vfiprintf_r+0x198>
 800ed6a:	2340      	movs	r3, #64	; 0x40
 800ed6c:	eba0 000a 	sub.w	r0, r0, sl
 800ed70:	fa03 f000 	lsl.w	r0, r3, r0
 800ed74:	9b04      	ldr	r3, [sp, #16]
 800ed76:	4303      	orrs	r3, r0
 800ed78:	3401      	adds	r4, #1
 800ed7a:	9304      	str	r3, [sp, #16]
 800ed7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed80:	482c      	ldr	r0, [pc, #176]	; (800ee34 <_vfiprintf_r+0x250>)
 800ed82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed86:	2206      	movs	r2, #6
 800ed88:	f7f1 fa32 	bl	80001f0 <memchr>
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	d03f      	beq.n	800ee10 <_vfiprintf_r+0x22c>
 800ed90:	4b29      	ldr	r3, [pc, #164]	; (800ee38 <_vfiprintf_r+0x254>)
 800ed92:	bb1b      	cbnz	r3, 800eddc <_vfiprintf_r+0x1f8>
 800ed94:	9b03      	ldr	r3, [sp, #12]
 800ed96:	3307      	adds	r3, #7
 800ed98:	f023 0307 	bic.w	r3, r3, #7
 800ed9c:	3308      	adds	r3, #8
 800ed9e:	9303      	str	r3, [sp, #12]
 800eda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eda2:	443b      	add	r3, r7
 800eda4:	9309      	str	r3, [sp, #36]	; 0x24
 800eda6:	e767      	b.n	800ec78 <_vfiprintf_r+0x94>
 800eda8:	fb0c 3202 	mla	r2, ip, r2, r3
 800edac:	460c      	mov	r4, r1
 800edae:	2001      	movs	r0, #1
 800edb0:	e7a5      	b.n	800ecfe <_vfiprintf_r+0x11a>
 800edb2:	2300      	movs	r3, #0
 800edb4:	3401      	adds	r4, #1
 800edb6:	9305      	str	r3, [sp, #20]
 800edb8:	4619      	mov	r1, r3
 800edba:	f04f 0c0a 	mov.w	ip, #10
 800edbe:	4620      	mov	r0, r4
 800edc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edc4:	3a30      	subs	r2, #48	; 0x30
 800edc6:	2a09      	cmp	r2, #9
 800edc8:	d903      	bls.n	800edd2 <_vfiprintf_r+0x1ee>
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d0c5      	beq.n	800ed5a <_vfiprintf_r+0x176>
 800edce:	9105      	str	r1, [sp, #20]
 800edd0:	e7c3      	b.n	800ed5a <_vfiprintf_r+0x176>
 800edd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800edd6:	4604      	mov	r4, r0
 800edd8:	2301      	movs	r3, #1
 800edda:	e7f0      	b.n	800edbe <_vfiprintf_r+0x1da>
 800eddc:	ab03      	add	r3, sp, #12
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	462a      	mov	r2, r5
 800ede2:	4b16      	ldr	r3, [pc, #88]	; (800ee3c <_vfiprintf_r+0x258>)
 800ede4:	a904      	add	r1, sp, #16
 800ede6:	4630      	mov	r0, r6
 800ede8:	f7fd fdd6 	bl	800c998 <_printf_float>
 800edec:	4607      	mov	r7, r0
 800edee:	1c78      	adds	r0, r7, #1
 800edf0:	d1d6      	bne.n	800eda0 <_vfiprintf_r+0x1bc>
 800edf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edf4:	07d9      	lsls	r1, r3, #31
 800edf6:	d405      	bmi.n	800ee04 <_vfiprintf_r+0x220>
 800edf8:	89ab      	ldrh	r3, [r5, #12]
 800edfa:	059a      	lsls	r2, r3, #22
 800edfc:	d402      	bmi.n	800ee04 <_vfiprintf_r+0x220>
 800edfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee00:	f000 faaf 	bl	800f362 <__retarget_lock_release_recursive>
 800ee04:	89ab      	ldrh	r3, [r5, #12]
 800ee06:	065b      	lsls	r3, r3, #25
 800ee08:	f53f af12 	bmi.w	800ec30 <_vfiprintf_r+0x4c>
 800ee0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee0e:	e711      	b.n	800ec34 <_vfiprintf_r+0x50>
 800ee10:	ab03      	add	r3, sp, #12
 800ee12:	9300      	str	r3, [sp, #0]
 800ee14:	462a      	mov	r2, r5
 800ee16:	4b09      	ldr	r3, [pc, #36]	; (800ee3c <_vfiprintf_r+0x258>)
 800ee18:	a904      	add	r1, sp, #16
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f7fe f860 	bl	800cee0 <_printf_i>
 800ee20:	e7e4      	b.n	800edec <_vfiprintf_r+0x208>
 800ee22:	bf00      	nop
 800ee24:	080105bc 	.word	0x080105bc
 800ee28:	080105dc 	.word	0x080105dc
 800ee2c:	0801059c 	.word	0x0801059c
 800ee30:	08010444 	.word	0x08010444
 800ee34:	0801044e 	.word	0x0801044e
 800ee38:	0800c999 	.word	0x0800c999
 800ee3c:	0800ebc1 	.word	0x0800ebc1
 800ee40:	0801044a 	.word	0x0801044a

0800ee44 <__swbuf_r>:
 800ee44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee46:	460e      	mov	r6, r1
 800ee48:	4614      	mov	r4, r2
 800ee4a:	4605      	mov	r5, r0
 800ee4c:	b118      	cbz	r0, 800ee56 <__swbuf_r+0x12>
 800ee4e:	6983      	ldr	r3, [r0, #24]
 800ee50:	b90b      	cbnz	r3, 800ee56 <__swbuf_r+0x12>
 800ee52:	f000 f9e7 	bl	800f224 <__sinit>
 800ee56:	4b21      	ldr	r3, [pc, #132]	; (800eedc <__swbuf_r+0x98>)
 800ee58:	429c      	cmp	r4, r3
 800ee5a:	d12b      	bne.n	800eeb4 <__swbuf_r+0x70>
 800ee5c:	686c      	ldr	r4, [r5, #4]
 800ee5e:	69a3      	ldr	r3, [r4, #24]
 800ee60:	60a3      	str	r3, [r4, #8]
 800ee62:	89a3      	ldrh	r3, [r4, #12]
 800ee64:	071a      	lsls	r2, r3, #28
 800ee66:	d52f      	bpl.n	800eec8 <__swbuf_r+0x84>
 800ee68:	6923      	ldr	r3, [r4, #16]
 800ee6a:	b36b      	cbz	r3, 800eec8 <__swbuf_r+0x84>
 800ee6c:	6923      	ldr	r3, [r4, #16]
 800ee6e:	6820      	ldr	r0, [r4, #0]
 800ee70:	1ac0      	subs	r0, r0, r3
 800ee72:	6963      	ldr	r3, [r4, #20]
 800ee74:	b2f6      	uxtb	r6, r6
 800ee76:	4283      	cmp	r3, r0
 800ee78:	4637      	mov	r7, r6
 800ee7a:	dc04      	bgt.n	800ee86 <__swbuf_r+0x42>
 800ee7c:	4621      	mov	r1, r4
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f000 f93c 	bl	800f0fc <_fflush_r>
 800ee84:	bb30      	cbnz	r0, 800eed4 <__swbuf_r+0x90>
 800ee86:	68a3      	ldr	r3, [r4, #8]
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	60a3      	str	r3, [r4, #8]
 800ee8c:	6823      	ldr	r3, [r4, #0]
 800ee8e:	1c5a      	adds	r2, r3, #1
 800ee90:	6022      	str	r2, [r4, #0]
 800ee92:	701e      	strb	r6, [r3, #0]
 800ee94:	6963      	ldr	r3, [r4, #20]
 800ee96:	3001      	adds	r0, #1
 800ee98:	4283      	cmp	r3, r0
 800ee9a:	d004      	beq.n	800eea6 <__swbuf_r+0x62>
 800ee9c:	89a3      	ldrh	r3, [r4, #12]
 800ee9e:	07db      	lsls	r3, r3, #31
 800eea0:	d506      	bpl.n	800eeb0 <__swbuf_r+0x6c>
 800eea2:	2e0a      	cmp	r6, #10
 800eea4:	d104      	bne.n	800eeb0 <__swbuf_r+0x6c>
 800eea6:	4621      	mov	r1, r4
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f000 f927 	bl	800f0fc <_fflush_r>
 800eeae:	b988      	cbnz	r0, 800eed4 <__swbuf_r+0x90>
 800eeb0:	4638      	mov	r0, r7
 800eeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeb4:	4b0a      	ldr	r3, [pc, #40]	; (800eee0 <__swbuf_r+0x9c>)
 800eeb6:	429c      	cmp	r4, r3
 800eeb8:	d101      	bne.n	800eebe <__swbuf_r+0x7a>
 800eeba:	68ac      	ldr	r4, [r5, #8]
 800eebc:	e7cf      	b.n	800ee5e <__swbuf_r+0x1a>
 800eebe:	4b09      	ldr	r3, [pc, #36]	; (800eee4 <__swbuf_r+0xa0>)
 800eec0:	429c      	cmp	r4, r3
 800eec2:	bf08      	it	eq
 800eec4:	68ec      	ldreq	r4, [r5, #12]
 800eec6:	e7ca      	b.n	800ee5e <__swbuf_r+0x1a>
 800eec8:	4621      	mov	r1, r4
 800eeca:	4628      	mov	r0, r5
 800eecc:	f000 f81a 	bl	800ef04 <__swsetup_r>
 800eed0:	2800      	cmp	r0, #0
 800eed2:	d0cb      	beq.n	800ee6c <__swbuf_r+0x28>
 800eed4:	f04f 37ff 	mov.w	r7, #4294967295
 800eed8:	e7ea      	b.n	800eeb0 <__swbuf_r+0x6c>
 800eeda:	bf00      	nop
 800eedc:	080105bc 	.word	0x080105bc
 800eee0:	080105dc 	.word	0x080105dc
 800eee4:	0801059c 	.word	0x0801059c

0800eee8 <__ascii_wctomb>:
 800eee8:	b149      	cbz	r1, 800eefe <__ascii_wctomb+0x16>
 800eeea:	2aff      	cmp	r2, #255	; 0xff
 800eeec:	bf85      	ittet	hi
 800eeee:	238a      	movhi	r3, #138	; 0x8a
 800eef0:	6003      	strhi	r3, [r0, #0]
 800eef2:	700a      	strbls	r2, [r1, #0]
 800eef4:	f04f 30ff 	movhi.w	r0, #4294967295
 800eef8:	bf98      	it	ls
 800eefa:	2001      	movls	r0, #1
 800eefc:	4770      	bx	lr
 800eefe:	4608      	mov	r0, r1
 800ef00:	4770      	bx	lr
	...

0800ef04 <__swsetup_r>:
 800ef04:	4b32      	ldr	r3, [pc, #200]	; (800efd0 <__swsetup_r+0xcc>)
 800ef06:	b570      	push	{r4, r5, r6, lr}
 800ef08:	681d      	ldr	r5, [r3, #0]
 800ef0a:	4606      	mov	r6, r0
 800ef0c:	460c      	mov	r4, r1
 800ef0e:	b125      	cbz	r5, 800ef1a <__swsetup_r+0x16>
 800ef10:	69ab      	ldr	r3, [r5, #24]
 800ef12:	b913      	cbnz	r3, 800ef1a <__swsetup_r+0x16>
 800ef14:	4628      	mov	r0, r5
 800ef16:	f000 f985 	bl	800f224 <__sinit>
 800ef1a:	4b2e      	ldr	r3, [pc, #184]	; (800efd4 <__swsetup_r+0xd0>)
 800ef1c:	429c      	cmp	r4, r3
 800ef1e:	d10f      	bne.n	800ef40 <__swsetup_r+0x3c>
 800ef20:	686c      	ldr	r4, [r5, #4]
 800ef22:	89a3      	ldrh	r3, [r4, #12]
 800ef24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef28:	0719      	lsls	r1, r3, #28
 800ef2a:	d42c      	bmi.n	800ef86 <__swsetup_r+0x82>
 800ef2c:	06dd      	lsls	r5, r3, #27
 800ef2e:	d411      	bmi.n	800ef54 <__swsetup_r+0x50>
 800ef30:	2309      	movs	r3, #9
 800ef32:	6033      	str	r3, [r6, #0]
 800ef34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef38:	81a3      	strh	r3, [r4, #12]
 800ef3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3e:	e03e      	b.n	800efbe <__swsetup_r+0xba>
 800ef40:	4b25      	ldr	r3, [pc, #148]	; (800efd8 <__swsetup_r+0xd4>)
 800ef42:	429c      	cmp	r4, r3
 800ef44:	d101      	bne.n	800ef4a <__swsetup_r+0x46>
 800ef46:	68ac      	ldr	r4, [r5, #8]
 800ef48:	e7eb      	b.n	800ef22 <__swsetup_r+0x1e>
 800ef4a:	4b24      	ldr	r3, [pc, #144]	; (800efdc <__swsetup_r+0xd8>)
 800ef4c:	429c      	cmp	r4, r3
 800ef4e:	bf08      	it	eq
 800ef50:	68ec      	ldreq	r4, [r5, #12]
 800ef52:	e7e6      	b.n	800ef22 <__swsetup_r+0x1e>
 800ef54:	0758      	lsls	r0, r3, #29
 800ef56:	d512      	bpl.n	800ef7e <__swsetup_r+0x7a>
 800ef58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef5a:	b141      	cbz	r1, 800ef6e <__swsetup_r+0x6a>
 800ef5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef60:	4299      	cmp	r1, r3
 800ef62:	d002      	beq.n	800ef6a <__swsetup_r+0x66>
 800ef64:	4630      	mov	r0, r6
 800ef66:	f7ff fb31 	bl	800e5cc <_free_r>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	6363      	str	r3, [r4, #52]	; 0x34
 800ef6e:	89a3      	ldrh	r3, [r4, #12]
 800ef70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef74:	81a3      	strh	r3, [r4, #12]
 800ef76:	2300      	movs	r3, #0
 800ef78:	6063      	str	r3, [r4, #4]
 800ef7a:	6923      	ldr	r3, [r4, #16]
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	89a3      	ldrh	r3, [r4, #12]
 800ef80:	f043 0308 	orr.w	r3, r3, #8
 800ef84:	81a3      	strh	r3, [r4, #12]
 800ef86:	6923      	ldr	r3, [r4, #16]
 800ef88:	b94b      	cbnz	r3, 800ef9e <__swsetup_r+0x9a>
 800ef8a:	89a3      	ldrh	r3, [r4, #12]
 800ef8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef94:	d003      	beq.n	800ef9e <__swsetup_r+0x9a>
 800ef96:	4621      	mov	r1, r4
 800ef98:	4630      	mov	r0, r6
 800ef9a:	f000 fa09 	bl	800f3b0 <__smakebuf_r>
 800ef9e:	89a0      	ldrh	r0, [r4, #12]
 800efa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800efa4:	f010 0301 	ands.w	r3, r0, #1
 800efa8:	d00a      	beq.n	800efc0 <__swsetup_r+0xbc>
 800efaa:	2300      	movs	r3, #0
 800efac:	60a3      	str	r3, [r4, #8]
 800efae:	6963      	ldr	r3, [r4, #20]
 800efb0:	425b      	negs	r3, r3
 800efb2:	61a3      	str	r3, [r4, #24]
 800efb4:	6923      	ldr	r3, [r4, #16]
 800efb6:	b943      	cbnz	r3, 800efca <__swsetup_r+0xc6>
 800efb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800efbc:	d1ba      	bne.n	800ef34 <__swsetup_r+0x30>
 800efbe:	bd70      	pop	{r4, r5, r6, pc}
 800efc0:	0781      	lsls	r1, r0, #30
 800efc2:	bf58      	it	pl
 800efc4:	6963      	ldrpl	r3, [r4, #20]
 800efc6:	60a3      	str	r3, [r4, #8]
 800efc8:	e7f4      	b.n	800efb4 <__swsetup_r+0xb0>
 800efca:	2000      	movs	r0, #0
 800efcc:	e7f7      	b.n	800efbe <__swsetup_r+0xba>
 800efce:	bf00      	nop
 800efd0:	20000024 	.word	0x20000024
 800efd4:	080105bc 	.word	0x080105bc
 800efd8:	080105dc 	.word	0x080105dc
 800efdc:	0801059c 	.word	0x0801059c

0800efe0 <abort>:
 800efe0:	b508      	push	{r3, lr}
 800efe2:	2006      	movs	r0, #6
 800efe4:	f000 fa54 	bl	800f490 <raise>
 800efe8:	2001      	movs	r0, #1
 800efea:	f7f4 fb65 	bl	80036b8 <_exit>
	...

0800eff0 <__sflush_r>:
 800eff0:	898a      	ldrh	r2, [r1, #12]
 800eff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff6:	4605      	mov	r5, r0
 800eff8:	0710      	lsls	r0, r2, #28
 800effa:	460c      	mov	r4, r1
 800effc:	d458      	bmi.n	800f0b0 <__sflush_r+0xc0>
 800effe:	684b      	ldr	r3, [r1, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	dc05      	bgt.n	800f010 <__sflush_r+0x20>
 800f004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f006:	2b00      	cmp	r3, #0
 800f008:	dc02      	bgt.n	800f010 <__sflush_r+0x20>
 800f00a:	2000      	movs	r0, #0
 800f00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f012:	2e00      	cmp	r6, #0
 800f014:	d0f9      	beq.n	800f00a <__sflush_r+0x1a>
 800f016:	2300      	movs	r3, #0
 800f018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f01c:	682f      	ldr	r7, [r5, #0]
 800f01e:	602b      	str	r3, [r5, #0]
 800f020:	d032      	beq.n	800f088 <__sflush_r+0x98>
 800f022:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f024:	89a3      	ldrh	r3, [r4, #12]
 800f026:	075a      	lsls	r2, r3, #29
 800f028:	d505      	bpl.n	800f036 <__sflush_r+0x46>
 800f02a:	6863      	ldr	r3, [r4, #4]
 800f02c:	1ac0      	subs	r0, r0, r3
 800f02e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f030:	b10b      	cbz	r3, 800f036 <__sflush_r+0x46>
 800f032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f034:	1ac0      	subs	r0, r0, r3
 800f036:	2300      	movs	r3, #0
 800f038:	4602      	mov	r2, r0
 800f03a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f03c:	6a21      	ldr	r1, [r4, #32]
 800f03e:	4628      	mov	r0, r5
 800f040:	47b0      	blx	r6
 800f042:	1c43      	adds	r3, r0, #1
 800f044:	89a3      	ldrh	r3, [r4, #12]
 800f046:	d106      	bne.n	800f056 <__sflush_r+0x66>
 800f048:	6829      	ldr	r1, [r5, #0]
 800f04a:	291d      	cmp	r1, #29
 800f04c:	d82c      	bhi.n	800f0a8 <__sflush_r+0xb8>
 800f04e:	4a2a      	ldr	r2, [pc, #168]	; (800f0f8 <__sflush_r+0x108>)
 800f050:	40ca      	lsrs	r2, r1
 800f052:	07d6      	lsls	r6, r2, #31
 800f054:	d528      	bpl.n	800f0a8 <__sflush_r+0xb8>
 800f056:	2200      	movs	r2, #0
 800f058:	6062      	str	r2, [r4, #4]
 800f05a:	04d9      	lsls	r1, r3, #19
 800f05c:	6922      	ldr	r2, [r4, #16]
 800f05e:	6022      	str	r2, [r4, #0]
 800f060:	d504      	bpl.n	800f06c <__sflush_r+0x7c>
 800f062:	1c42      	adds	r2, r0, #1
 800f064:	d101      	bne.n	800f06a <__sflush_r+0x7a>
 800f066:	682b      	ldr	r3, [r5, #0]
 800f068:	b903      	cbnz	r3, 800f06c <__sflush_r+0x7c>
 800f06a:	6560      	str	r0, [r4, #84]	; 0x54
 800f06c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f06e:	602f      	str	r7, [r5, #0]
 800f070:	2900      	cmp	r1, #0
 800f072:	d0ca      	beq.n	800f00a <__sflush_r+0x1a>
 800f074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f078:	4299      	cmp	r1, r3
 800f07a:	d002      	beq.n	800f082 <__sflush_r+0x92>
 800f07c:	4628      	mov	r0, r5
 800f07e:	f7ff faa5 	bl	800e5cc <_free_r>
 800f082:	2000      	movs	r0, #0
 800f084:	6360      	str	r0, [r4, #52]	; 0x34
 800f086:	e7c1      	b.n	800f00c <__sflush_r+0x1c>
 800f088:	6a21      	ldr	r1, [r4, #32]
 800f08a:	2301      	movs	r3, #1
 800f08c:	4628      	mov	r0, r5
 800f08e:	47b0      	blx	r6
 800f090:	1c41      	adds	r1, r0, #1
 800f092:	d1c7      	bne.n	800f024 <__sflush_r+0x34>
 800f094:	682b      	ldr	r3, [r5, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d0c4      	beq.n	800f024 <__sflush_r+0x34>
 800f09a:	2b1d      	cmp	r3, #29
 800f09c:	d001      	beq.n	800f0a2 <__sflush_r+0xb2>
 800f09e:	2b16      	cmp	r3, #22
 800f0a0:	d101      	bne.n	800f0a6 <__sflush_r+0xb6>
 800f0a2:	602f      	str	r7, [r5, #0]
 800f0a4:	e7b1      	b.n	800f00a <__sflush_r+0x1a>
 800f0a6:	89a3      	ldrh	r3, [r4, #12]
 800f0a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0ac:	81a3      	strh	r3, [r4, #12]
 800f0ae:	e7ad      	b.n	800f00c <__sflush_r+0x1c>
 800f0b0:	690f      	ldr	r7, [r1, #16]
 800f0b2:	2f00      	cmp	r7, #0
 800f0b4:	d0a9      	beq.n	800f00a <__sflush_r+0x1a>
 800f0b6:	0793      	lsls	r3, r2, #30
 800f0b8:	680e      	ldr	r6, [r1, #0]
 800f0ba:	bf08      	it	eq
 800f0bc:	694b      	ldreq	r3, [r1, #20]
 800f0be:	600f      	str	r7, [r1, #0]
 800f0c0:	bf18      	it	ne
 800f0c2:	2300      	movne	r3, #0
 800f0c4:	eba6 0807 	sub.w	r8, r6, r7
 800f0c8:	608b      	str	r3, [r1, #8]
 800f0ca:	f1b8 0f00 	cmp.w	r8, #0
 800f0ce:	dd9c      	ble.n	800f00a <__sflush_r+0x1a>
 800f0d0:	6a21      	ldr	r1, [r4, #32]
 800f0d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0d4:	4643      	mov	r3, r8
 800f0d6:	463a      	mov	r2, r7
 800f0d8:	4628      	mov	r0, r5
 800f0da:	47b0      	blx	r6
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	dc06      	bgt.n	800f0ee <__sflush_r+0xfe>
 800f0e0:	89a3      	ldrh	r3, [r4, #12]
 800f0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0e6:	81a3      	strh	r3, [r4, #12]
 800f0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ec:	e78e      	b.n	800f00c <__sflush_r+0x1c>
 800f0ee:	4407      	add	r7, r0
 800f0f0:	eba8 0800 	sub.w	r8, r8, r0
 800f0f4:	e7e9      	b.n	800f0ca <__sflush_r+0xda>
 800f0f6:	bf00      	nop
 800f0f8:	20400001 	.word	0x20400001

0800f0fc <_fflush_r>:
 800f0fc:	b538      	push	{r3, r4, r5, lr}
 800f0fe:	690b      	ldr	r3, [r1, #16]
 800f100:	4605      	mov	r5, r0
 800f102:	460c      	mov	r4, r1
 800f104:	b913      	cbnz	r3, 800f10c <_fflush_r+0x10>
 800f106:	2500      	movs	r5, #0
 800f108:	4628      	mov	r0, r5
 800f10a:	bd38      	pop	{r3, r4, r5, pc}
 800f10c:	b118      	cbz	r0, 800f116 <_fflush_r+0x1a>
 800f10e:	6983      	ldr	r3, [r0, #24]
 800f110:	b90b      	cbnz	r3, 800f116 <_fflush_r+0x1a>
 800f112:	f000 f887 	bl	800f224 <__sinit>
 800f116:	4b14      	ldr	r3, [pc, #80]	; (800f168 <_fflush_r+0x6c>)
 800f118:	429c      	cmp	r4, r3
 800f11a:	d11b      	bne.n	800f154 <_fflush_r+0x58>
 800f11c:	686c      	ldr	r4, [r5, #4]
 800f11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d0ef      	beq.n	800f106 <_fflush_r+0xa>
 800f126:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f128:	07d0      	lsls	r0, r2, #31
 800f12a:	d404      	bmi.n	800f136 <_fflush_r+0x3a>
 800f12c:	0599      	lsls	r1, r3, #22
 800f12e:	d402      	bmi.n	800f136 <_fflush_r+0x3a>
 800f130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f132:	f000 f915 	bl	800f360 <__retarget_lock_acquire_recursive>
 800f136:	4628      	mov	r0, r5
 800f138:	4621      	mov	r1, r4
 800f13a:	f7ff ff59 	bl	800eff0 <__sflush_r>
 800f13e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f140:	07da      	lsls	r2, r3, #31
 800f142:	4605      	mov	r5, r0
 800f144:	d4e0      	bmi.n	800f108 <_fflush_r+0xc>
 800f146:	89a3      	ldrh	r3, [r4, #12]
 800f148:	059b      	lsls	r3, r3, #22
 800f14a:	d4dd      	bmi.n	800f108 <_fflush_r+0xc>
 800f14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f14e:	f000 f908 	bl	800f362 <__retarget_lock_release_recursive>
 800f152:	e7d9      	b.n	800f108 <_fflush_r+0xc>
 800f154:	4b05      	ldr	r3, [pc, #20]	; (800f16c <_fflush_r+0x70>)
 800f156:	429c      	cmp	r4, r3
 800f158:	d101      	bne.n	800f15e <_fflush_r+0x62>
 800f15a:	68ac      	ldr	r4, [r5, #8]
 800f15c:	e7df      	b.n	800f11e <_fflush_r+0x22>
 800f15e:	4b04      	ldr	r3, [pc, #16]	; (800f170 <_fflush_r+0x74>)
 800f160:	429c      	cmp	r4, r3
 800f162:	bf08      	it	eq
 800f164:	68ec      	ldreq	r4, [r5, #12]
 800f166:	e7da      	b.n	800f11e <_fflush_r+0x22>
 800f168:	080105bc 	.word	0x080105bc
 800f16c:	080105dc 	.word	0x080105dc
 800f170:	0801059c 	.word	0x0801059c

0800f174 <std>:
 800f174:	2300      	movs	r3, #0
 800f176:	b510      	push	{r4, lr}
 800f178:	4604      	mov	r4, r0
 800f17a:	e9c0 3300 	strd	r3, r3, [r0]
 800f17e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f182:	6083      	str	r3, [r0, #8]
 800f184:	8181      	strh	r1, [r0, #12]
 800f186:	6643      	str	r3, [r0, #100]	; 0x64
 800f188:	81c2      	strh	r2, [r0, #14]
 800f18a:	6183      	str	r3, [r0, #24]
 800f18c:	4619      	mov	r1, r3
 800f18e:	2208      	movs	r2, #8
 800f190:	305c      	adds	r0, #92	; 0x5c
 800f192:	f7fd fb59 	bl	800c848 <memset>
 800f196:	4b05      	ldr	r3, [pc, #20]	; (800f1ac <std+0x38>)
 800f198:	6263      	str	r3, [r4, #36]	; 0x24
 800f19a:	4b05      	ldr	r3, [pc, #20]	; (800f1b0 <std+0x3c>)
 800f19c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f19e:	4b05      	ldr	r3, [pc, #20]	; (800f1b4 <std+0x40>)
 800f1a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f1a2:	4b05      	ldr	r3, [pc, #20]	; (800f1b8 <std+0x44>)
 800f1a4:	6224      	str	r4, [r4, #32]
 800f1a6:	6323      	str	r3, [r4, #48]	; 0x30
 800f1a8:	bd10      	pop	{r4, pc}
 800f1aa:	bf00      	nop
 800f1ac:	0800f4c9 	.word	0x0800f4c9
 800f1b0:	0800f4eb 	.word	0x0800f4eb
 800f1b4:	0800f523 	.word	0x0800f523
 800f1b8:	0800f547 	.word	0x0800f547

0800f1bc <_cleanup_r>:
 800f1bc:	4901      	ldr	r1, [pc, #4]	; (800f1c4 <_cleanup_r+0x8>)
 800f1be:	f000 b8af 	b.w	800f320 <_fwalk_reent>
 800f1c2:	bf00      	nop
 800f1c4:	0800f0fd 	.word	0x0800f0fd

0800f1c8 <__sfmoreglue>:
 800f1c8:	b570      	push	{r4, r5, r6, lr}
 800f1ca:	2268      	movs	r2, #104	; 0x68
 800f1cc:	1e4d      	subs	r5, r1, #1
 800f1ce:	4355      	muls	r5, r2
 800f1d0:	460e      	mov	r6, r1
 800f1d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f1d6:	f7ff fa65 	bl	800e6a4 <_malloc_r>
 800f1da:	4604      	mov	r4, r0
 800f1dc:	b140      	cbz	r0, 800f1f0 <__sfmoreglue+0x28>
 800f1de:	2100      	movs	r1, #0
 800f1e0:	e9c0 1600 	strd	r1, r6, [r0]
 800f1e4:	300c      	adds	r0, #12
 800f1e6:	60a0      	str	r0, [r4, #8]
 800f1e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f1ec:	f7fd fb2c 	bl	800c848 <memset>
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	bd70      	pop	{r4, r5, r6, pc}

0800f1f4 <__sfp_lock_acquire>:
 800f1f4:	4801      	ldr	r0, [pc, #4]	; (800f1fc <__sfp_lock_acquire+0x8>)
 800f1f6:	f000 b8b3 	b.w	800f360 <__retarget_lock_acquire_recursive>
 800f1fa:	bf00      	nop
 800f1fc:	20002f6d 	.word	0x20002f6d

0800f200 <__sfp_lock_release>:
 800f200:	4801      	ldr	r0, [pc, #4]	; (800f208 <__sfp_lock_release+0x8>)
 800f202:	f000 b8ae 	b.w	800f362 <__retarget_lock_release_recursive>
 800f206:	bf00      	nop
 800f208:	20002f6d 	.word	0x20002f6d

0800f20c <__sinit_lock_acquire>:
 800f20c:	4801      	ldr	r0, [pc, #4]	; (800f214 <__sinit_lock_acquire+0x8>)
 800f20e:	f000 b8a7 	b.w	800f360 <__retarget_lock_acquire_recursive>
 800f212:	bf00      	nop
 800f214:	20002f6e 	.word	0x20002f6e

0800f218 <__sinit_lock_release>:
 800f218:	4801      	ldr	r0, [pc, #4]	; (800f220 <__sinit_lock_release+0x8>)
 800f21a:	f000 b8a2 	b.w	800f362 <__retarget_lock_release_recursive>
 800f21e:	bf00      	nop
 800f220:	20002f6e 	.word	0x20002f6e

0800f224 <__sinit>:
 800f224:	b510      	push	{r4, lr}
 800f226:	4604      	mov	r4, r0
 800f228:	f7ff fff0 	bl	800f20c <__sinit_lock_acquire>
 800f22c:	69a3      	ldr	r3, [r4, #24]
 800f22e:	b11b      	cbz	r3, 800f238 <__sinit+0x14>
 800f230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f234:	f7ff bff0 	b.w	800f218 <__sinit_lock_release>
 800f238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f23c:	6523      	str	r3, [r4, #80]	; 0x50
 800f23e:	4b13      	ldr	r3, [pc, #76]	; (800f28c <__sinit+0x68>)
 800f240:	4a13      	ldr	r2, [pc, #76]	; (800f290 <__sinit+0x6c>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	62a2      	str	r2, [r4, #40]	; 0x28
 800f246:	42a3      	cmp	r3, r4
 800f248:	bf04      	itt	eq
 800f24a:	2301      	moveq	r3, #1
 800f24c:	61a3      	streq	r3, [r4, #24]
 800f24e:	4620      	mov	r0, r4
 800f250:	f000 f820 	bl	800f294 <__sfp>
 800f254:	6060      	str	r0, [r4, #4]
 800f256:	4620      	mov	r0, r4
 800f258:	f000 f81c 	bl	800f294 <__sfp>
 800f25c:	60a0      	str	r0, [r4, #8]
 800f25e:	4620      	mov	r0, r4
 800f260:	f000 f818 	bl	800f294 <__sfp>
 800f264:	2200      	movs	r2, #0
 800f266:	60e0      	str	r0, [r4, #12]
 800f268:	2104      	movs	r1, #4
 800f26a:	6860      	ldr	r0, [r4, #4]
 800f26c:	f7ff ff82 	bl	800f174 <std>
 800f270:	68a0      	ldr	r0, [r4, #8]
 800f272:	2201      	movs	r2, #1
 800f274:	2109      	movs	r1, #9
 800f276:	f7ff ff7d 	bl	800f174 <std>
 800f27a:	68e0      	ldr	r0, [r4, #12]
 800f27c:	2202      	movs	r2, #2
 800f27e:	2112      	movs	r1, #18
 800f280:	f7ff ff78 	bl	800f174 <std>
 800f284:	2301      	movs	r3, #1
 800f286:	61a3      	str	r3, [r4, #24]
 800f288:	e7d2      	b.n	800f230 <__sinit+0xc>
 800f28a:	bf00      	nop
 800f28c:	08010224 	.word	0x08010224
 800f290:	0800f1bd 	.word	0x0800f1bd

0800f294 <__sfp>:
 800f294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f296:	4607      	mov	r7, r0
 800f298:	f7ff ffac 	bl	800f1f4 <__sfp_lock_acquire>
 800f29c:	4b1e      	ldr	r3, [pc, #120]	; (800f318 <__sfp+0x84>)
 800f29e:	681e      	ldr	r6, [r3, #0]
 800f2a0:	69b3      	ldr	r3, [r6, #24]
 800f2a2:	b913      	cbnz	r3, 800f2aa <__sfp+0x16>
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	f7ff ffbd 	bl	800f224 <__sinit>
 800f2aa:	3648      	adds	r6, #72	; 0x48
 800f2ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f2b0:	3b01      	subs	r3, #1
 800f2b2:	d503      	bpl.n	800f2bc <__sfp+0x28>
 800f2b4:	6833      	ldr	r3, [r6, #0]
 800f2b6:	b30b      	cbz	r3, 800f2fc <__sfp+0x68>
 800f2b8:	6836      	ldr	r6, [r6, #0]
 800f2ba:	e7f7      	b.n	800f2ac <__sfp+0x18>
 800f2bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f2c0:	b9d5      	cbnz	r5, 800f2f8 <__sfp+0x64>
 800f2c2:	4b16      	ldr	r3, [pc, #88]	; (800f31c <__sfp+0x88>)
 800f2c4:	60e3      	str	r3, [r4, #12]
 800f2c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f2ca:	6665      	str	r5, [r4, #100]	; 0x64
 800f2cc:	f000 f847 	bl	800f35e <__retarget_lock_init_recursive>
 800f2d0:	f7ff ff96 	bl	800f200 <__sfp_lock_release>
 800f2d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f2d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f2dc:	6025      	str	r5, [r4, #0]
 800f2de:	61a5      	str	r5, [r4, #24]
 800f2e0:	2208      	movs	r2, #8
 800f2e2:	4629      	mov	r1, r5
 800f2e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f2e8:	f7fd faae 	bl	800c848 <memset>
 800f2ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f2f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2f8:	3468      	adds	r4, #104	; 0x68
 800f2fa:	e7d9      	b.n	800f2b0 <__sfp+0x1c>
 800f2fc:	2104      	movs	r1, #4
 800f2fe:	4638      	mov	r0, r7
 800f300:	f7ff ff62 	bl	800f1c8 <__sfmoreglue>
 800f304:	4604      	mov	r4, r0
 800f306:	6030      	str	r0, [r6, #0]
 800f308:	2800      	cmp	r0, #0
 800f30a:	d1d5      	bne.n	800f2b8 <__sfp+0x24>
 800f30c:	f7ff ff78 	bl	800f200 <__sfp_lock_release>
 800f310:	230c      	movs	r3, #12
 800f312:	603b      	str	r3, [r7, #0]
 800f314:	e7ee      	b.n	800f2f4 <__sfp+0x60>
 800f316:	bf00      	nop
 800f318:	08010224 	.word	0x08010224
 800f31c:	ffff0001 	.word	0xffff0001

0800f320 <_fwalk_reent>:
 800f320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f324:	4606      	mov	r6, r0
 800f326:	4688      	mov	r8, r1
 800f328:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f32c:	2700      	movs	r7, #0
 800f32e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f332:	f1b9 0901 	subs.w	r9, r9, #1
 800f336:	d505      	bpl.n	800f344 <_fwalk_reent+0x24>
 800f338:	6824      	ldr	r4, [r4, #0]
 800f33a:	2c00      	cmp	r4, #0
 800f33c:	d1f7      	bne.n	800f32e <_fwalk_reent+0xe>
 800f33e:	4638      	mov	r0, r7
 800f340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f344:	89ab      	ldrh	r3, [r5, #12]
 800f346:	2b01      	cmp	r3, #1
 800f348:	d907      	bls.n	800f35a <_fwalk_reent+0x3a>
 800f34a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f34e:	3301      	adds	r3, #1
 800f350:	d003      	beq.n	800f35a <_fwalk_reent+0x3a>
 800f352:	4629      	mov	r1, r5
 800f354:	4630      	mov	r0, r6
 800f356:	47c0      	blx	r8
 800f358:	4307      	orrs	r7, r0
 800f35a:	3568      	adds	r5, #104	; 0x68
 800f35c:	e7e9      	b.n	800f332 <_fwalk_reent+0x12>

0800f35e <__retarget_lock_init_recursive>:
 800f35e:	4770      	bx	lr

0800f360 <__retarget_lock_acquire_recursive>:
 800f360:	4770      	bx	lr

0800f362 <__retarget_lock_release_recursive>:
 800f362:	4770      	bx	lr

0800f364 <__swhatbuf_r>:
 800f364:	b570      	push	{r4, r5, r6, lr}
 800f366:	460e      	mov	r6, r1
 800f368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f36c:	2900      	cmp	r1, #0
 800f36e:	b096      	sub	sp, #88	; 0x58
 800f370:	4614      	mov	r4, r2
 800f372:	461d      	mov	r5, r3
 800f374:	da08      	bge.n	800f388 <__swhatbuf_r+0x24>
 800f376:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f37a:	2200      	movs	r2, #0
 800f37c:	602a      	str	r2, [r5, #0]
 800f37e:	061a      	lsls	r2, r3, #24
 800f380:	d410      	bmi.n	800f3a4 <__swhatbuf_r+0x40>
 800f382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f386:	e00e      	b.n	800f3a6 <__swhatbuf_r+0x42>
 800f388:	466a      	mov	r2, sp
 800f38a:	f000 f903 	bl	800f594 <_fstat_r>
 800f38e:	2800      	cmp	r0, #0
 800f390:	dbf1      	blt.n	800f376 <__swhatbuf_r+0x12>
 800f392:	9a01      	ldr	r2, [sp, #4]
 800f394:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f398:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f39c:	425a      	negs	r2, r3
 800f39e:	415a      	adcs	r2, r3
 800f3a0:	602a      	str	r2, [r5, #0]
 800f3a2:	e7ee      	b.n	800f382 <__swhatbuf_r+0x1e>
 800f3a4:	2340      	movs	r3, #64	; 0x40
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	6023      	str	r3, [r4, #0]
 800f3aa:	b016      	add	sp, #88	; 0x58
 800f3ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f3b0 <__smakebuf_r>:
 800f3b0:	898b      	ldrh	r3, [r1, #12]
 800f3b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3b4:	079d      	lsls	r5, r3, #30
 800f3b6:	4606      	mov	r6, r0
 800f3b8:	460c      	mov	r4, r1
 800f3ba:	d507      	bpl.n	800f3cc <__smakebuf_r+0x1c>
 800f3bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f3c0:	6023      	str	r3, [r4, #0]
 800f3c2:	6123      	str	r3, [r4, #16]
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	6163      	str	r3, [r4, #20]
 800f3c8:	b002      	add	sp, #8
 800f3ca:	bd70      	pop	{r4, r5, r6, pc}
 800f3cc:	ab01      	add	r3, sp, #4
 800f3ce:	466a      	mov	r2, sp
 800f3d0:	f7ff ffc8 	bl	800f364 <__swhatbuf_r>
 800f3d4:	9900      	ldr	r1, [sp, #0]
 800f3d6:	4605      	mov	r5, r0
 800f3d8:	4630      	mov	r0, r6
 800f3da:	f7ff f963 	bl	800e6a4 <_malloc_r>
 800f3de:	b948      	cbnz	r0, 800f3f4 <__smakebuf_r+0x44>
 800f3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3e4:	059a      	lsls	r2, r3, #22
 800f3e6:	d4ef      	bmi.n	800f3c8 <__smakebuf_r+0x18>
 800f3e8:	f023 0303 	bic.w	r3, r3, #3
 800f3ec:	f043 0302 	orr.w	r3, r3, #2
 800f3f0:	81a3      	strh	r3, [r4, #12]
 800f3f2:	e7e3      	b.n	800f3bc <__smakebuf_r+0xc>
 800f3f4:	4b0d      	ldr	r3, [pc, #52]	; (800f42c <__smakebuf_r+0x7c>)
 800f3f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	6020      	str	r0, [r4, #0]
 800f3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f400:	81a3      	strh	r3, [r4, #12]
 800f402:	9b00      	ldr	r3, [sp, #0]
 800f404:	6163      	str	r3, [r4, #20]
 800f406:	9b01      	ldr	r3, [sp, #4]
 800f408:	6120      	str	r0, [r4, #16]
 800f40a:	b15b      	cbz	r3, 800f424 <__smakebuf_r+0x74>
 800f40c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f410:	4630      	mov	r0, r6
 800f412:	f000 f8d1 	bl	800f5b8 <_isatty_r>
 800f416:	b128      	cbz	r0, 800f424 <__smakebuf_r+0x74>
 800f418:	89a3      	ldrh	r3, [r4, #12]
 800f41a:	f023 0303 	bic.w	r3, r3, #3
 800f41e:	f043 0301 	orr.w	r3, r3, #1
 800f422:	81a3      	strh	r3, [r4, #12]
 800f424:	89a0      	ldrh	r0, [r4, #12]
 800f426:	4305      	orrs	r5, r0
 800f428:	81a5      	strh	r5, [r4, #12]
 800f42a:	e7cd      	b.n	800f3c8 <__smakebuf_r+0x18>
 800f42c:	0800f1bd 	.word	0x0800f1bd

0800f430 <_malloc_usable_size_r>:
 800f430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f434:	1f18      	subs	r0, r3, #4
 800f436:	2b00      	cmp	r3, #0
 800f438:	bfbc      	itt	lt
 800f43a:	580b      	ldrlt	r3, [r1, r0]
 800f43c:	18c0      	addlt	r0, r0, r3
 800f43e:	4770      	bx	lr

0800f440 <_raise_r>:
 800f440:	291f      	cmp	r1, #31
 800f442:	b538      	push	{r3, r4, r5, lr}
 800f444:	4604      	mov	r4, r0
 800f446:	460d      	mov	r5, r1
 800f448:	d904      	bls.n	800f454 <_raise_r+0x14>
 800f44a:	2316      	movs	r3, #22
 800f44c:	6003      	str	r3, [r0, #0]
 800f44e:	f04f 30ff 	mov.w	r0, #4294967295
 800f452:	bd38      	pop	{r3, r4, r5, pc}
 800f454:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f456:	b112      	cbz	r2, 800f45e <_raise_r+0x1e>
 800f458:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f45c:	b94b      	cbnz	r3, 800f472 <_raise_r+0x32>
 800f45e:	4620      	mov	r0, r4
 800f460:	f000 f830 	bl	800f4c4 <_getpid_r>
 800f464:	462a      	mov	r2, r5
 800f466:	4601      	mov	r1, r0
 800f468:	4620      	mov	r0, r4
 800f46a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f46e:	f000 b817 	b.w	800f4a0 <_kill_r>
 800f472:	2b01      	cmp	r3, #1
 800f474:	d00a      	beq.n	800f48c <_raise_r+0x4c>
 800f476:	1c59      	adds	r1, r3, #1
 800f478:	d103      	bne.n	800f482 <_raise_r+0x42>
 800f47a:	2316      	movs	r3, #22
 800f47c:	6003      	str	r3, [r0, #0]
 800f47e:	2001      	movs	r0, #1
 800f480:	e7e7      	b.n	800f452 <_raise_r+0x12>
 800f482:	2400      	movs	r4, #0
 800f484:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f488:	4628      	mov	r0, r5
 800f48a:	4798      	blx	r3
 800f48c:	2000      	movs	r0, #0
 800f48e:	e7e0      	b.n	800f452 <_raise_r+0x12>

0800f490 <raise>:
 800f490:	4b02      	ldr	r3, [pc, #8]	; (800f49c <raise+0xc>)
 800f492:	4601      	mov	r1, r0
 800f494:	6818      	ldr	r0, [r3, #0]
 800f496:	f7ff bfd3 	b.w	800f440 <_raise_r>
 800f49a:	bf00      	nop
 800f49c:	20000024 	.word	0x20000024

0800f4a0 <_kill_r>:
 800f4a0:	b538      	push	{r3, r4, r5, lr}
 800f4a2:	4d07      	ldr	r5, [pc, #28]	; (800f4c0 <_kill_r+0x20>)
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	4604      	mov	r4, r0
 800f4a8:	4608      	mov	r0, r1
 800f4aa:	4611      	mov	r1, r2
 800f4ac:	602b      	str	r3, [r5, #0]
 800f4ae:	f7f4 f8f3 	bl	8003698 <_kill>
 800f4b2:	1c43      	adds	r3, r0, #1
 800f4b4:	d102      	bne.n	800f4bc <_kill_r+0x1c>
 800f4b6:	682b      	ldr	r3, [r5, #0]
 800f4b8:	b103      	cbz	r3, 800f4bc <_kill_r+0x1c>
 800f4ba:	6023      	str	r3, [r4, #0]
 800f4bc:	bd38      	pop	{r3, r4, r5, pc}
 800f4be:	bf00      	nop
 800f4c0:	20002f68 	.word	0x20002f68

0800f4c4 <_getpid_r>:
 800f4c4:	f7f4 b8e0 	b.w	8003688 <_getpid>

0800f4c8 <__sread>:
 800f4c8:	b510      	push	{r4, lr}
 800f4ca:	460c      	mov	r4, r1
 800f4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4d0:	f000 f894 	bl	800f5fc <_read_r>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	bfab      	itete	ge
 800f4d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f4da:	89a3      	ldrhlt	r3, [r4, #12]
 800f4dc:	181b      	addge	r3, r3, r0
 800f4de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f4e2:	bfac      	ite	ge
 800f4e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f4e6:	81a3      	strhlt	r3, [r4, #12]
 800f4e8:	bd10      	pop	{r4, pc}

0800f4ea <__swrite>:
 800f4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ee:	461f      	mov	r7, r3
 800f4f0:	898b      	ldrh	r3, [r1, #12]
 800f4f2:	05db      	lsls	r3, r3, #23
 800f4f4:	4605      	mov	r5, r0
 800f4f6:	460c      	mov	r4, r1
 800f4f8:	4616      	mov	r6, r2
 800f4fa:	d505      	bpl.n	800f508 <__swrite+0x1e>
 800f4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f500:	2302      	movs	r3, #2
 800f502:	2200      	movs	r2, #0
 800f504:	f000 f868 	bl	800f5d8 <_lseek_r>
 800f508:	89a3      	ldrh	r3, [r4, #12]
 800f50a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f50e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f512:	81a3      	strh	r3, [r4, #12]
 800f514:	4632      	mov	r2, r6
 800f516:	463b      	mov	r3, r7
 800f518:	4628      	mov	r0, r5
 800f51a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f51e:	f000 b817 	b.w	800f550 <_write_r>

0800f522 <__sseek>:
 800f522:	b510      	push	{r4, lr}
 800f524:	460c      	mov	r4, r1
 800f526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f52a:	f000 f855 	bl	800f5d8 <_lseek_r>
 800f52e:	1c43      	adds	r3, r0, #1
 800f530:	89a3      	ldrh	r3, [r4, #12]
 800f532:	bf15      	itete	ne
 800f534:	6560      	strne	r0, [r4, #84]	; 0x54
 800f536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f53a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f53e:	81a3      	strheq	r3, [r4, #12]
 800f540:	bf18      	it	ne
 800f542:	81a3      	strhne	r3, [r4, #12]
 800f544:	bd10      	pop	{r4, pc}

0800f546 <__sclose>:
 800f546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f54a:	f000 b813 	b.w	800f574 <_close_r>
	...

0800f550 <_write_r>:
 800f550:	b538      	push	{r3, r4, r5, lr}
 800f552:	4d07      	ldr	r5, [pc, #28]	; (800f570 <_write_r+0x20>)
 800f554:	4604      	mov	r4, r0
 800f556:	4608      	mov	r0, r1
 800f558:	4611      	mov	r1, r2
 800f55a:	2200      	movs	r2, #0
 800f55c:	602a      	str	r2, [r5, #0]
 800f55e:	461a      	mov	r2, r3
 800f560:	f7f4 f8d1 	bl	8003706 <_write>
 800f564:	1c43      	adds	r3, r0, #1
 800f566:	d102      	bne.n	800f56e <_write_r+0x1e>
 800f568:	682b      	ldr	r3, [r5, #0]
 800f56a:	b103      	cbz	r3, 800f56e <_write_r+0x1e>
 800f56c:	6023      	str	r3, [r4, #0]
 800f56e:	bd38      	pop	{r3, r4, r5, pc}
 800f570:	20002f68 	.word	0x20002f68

0800f574 <_close_r>:
 800f574:	b538      	push	{r3, r4, r5, lr}
 800f576:	4d06      	ldr	r5, [pc, #24]	; (800f590 <_close_r+0x1c>)
 800f578:	2300      	movs	r3, #0
 800f57a:	4604      	mov	r4, r0
 800f57c:	4608      	mov	r0, r1
 800f57e:	602b      	str	r3, [r5, #0]
 800f580:	f7f4 f8dd 	bl	800373e <_close>
 800f584:	1c43      	adds	r3, r0, #1
 800f586:	d102      	bne.n	800f58e <_close_r+0x1a>
 800f588:	682b      	ldr	r3, [r5, #0]
 800f58a:	b103      	cbz	r3, 800f58e <_close_r+0x1a>
 800f58c:	6023      	str	r3, [r4, #0]
 800f58e:	bd38      	pop	{r3, r4, r5, pc}
 800f590:	20002f68 	.word	0x20002f68

0800f594 <_fstat_r>:
 800f594:	b538      	push	{r3, r4, r5, lr}
 800f596:	4d07      	ldr	r5, [pc, #28]	; (800f5b4 <_fstat_r+0x20>)
 800f598:	2300      	movs	r3, #0
 800f59a:	4604      	mov	r4, r0
 800f59c:	4608      	mov	r0, r1
 800f59e:	4611      	mov	r1, r2
 800f5a0:	602b      	str	r3, [r5, #0]
 800f5a2:	f7f4 f8d8 	bl	8003756 <_fstat>
 800f5a6:	1c43      	adds	r3, r0, #1
 800f5a8:	d102      	bne.n	800f5b0 <_fstat_r+0x1c>
 800f5aa:	682b      	ldr	r3, [r5, #0]
 800f5ac:	b103      	cbz	r3, 800f5b0 <_fstat_r+0x1c>
 800f5ae:	6023      	str	r3, [r4, #0]
 800f5b0:	bd38      	pop	{r3, r4, r5, pc}
 800f5b2:	bf00      	nop
 800f5b4:	20002f68 	.word	0x20002f68

0800f5b8 <_isatty_r>:
 800f5b8:	b538      	push	{r3, r4, r5, lr}
 800f5ba:	4d06      	ldr	r5, [pc, #24]	; (800f5d4 <_isatty_r+0x1c>)
 800f5bc:	2300      	movs	r3, #0
 800f5be:	4604      	mov	r4, r0
 800f5c0:	4608      	mov	r0, r1
 800f5c2:	602b      	str	r3, [r5, #0]
 800f5c4:	f7f4 f8d7 	bl	8003776 <_isatty>
 800f5c8:	1c43      	adds	r3, r0, #1
 800f5ca:	d102      	bne.n	800f5d2 <_isatty_r+0x1a>
 800f5cc:	682b      	ldr	r3, [r5, #0]
 800f5ce:	b103      	cbz	r3, 800f5d2 <_isatty_r+0x1a>
 800f5d0:	6023      	str	r3, [r4, #0]
 800f5d2:	bd38      	pop	{r3, r4, r5, pc}
 800f5d4:	20002f68 	.word	0x20002f68

0800f5d8 <_lseek_r>:
 800f5d8:	b538      	push	{r3, r4, r5, lr}
 800f5da:	4d07      	ldr	r5, [pc, #28]	; (800f5f8 <_lseek_r+0x20>)
 800f5dc:	4604      	mov	r4, r0
 800f5de:	4608      	mov	r0, r1
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	602a      	str	r2, [r5, #0]
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	f7f4 f8d0 	bl	800378c <_lseek>
 800f5ec:	1c43      	adds	r3, r0, #1
 800f5ee:	d102      	bne.n	800f5f6 <_lseek_r+0x1e>
 800f5f0:	682b      	ldr	r3, [r5, #0]
 800f5f2:	b103      	cbz	r3, 800f5f6 <_lseek_r+0x1e>
 800f5f4:	6023      	str	r3, [r4, #0]
 800f5f6:	bd38      	pop	{r3, r4, r5, pc}
 800f5f8:	20002f68 	.word	0x20002f68

0800f5fc <_read_r>:
 800f5fc:	b538      	push	{r3, r4, r5, lr}
 800f5fe:	4d07      	ldr	r5, [pc, #28]	; (800f61c <_read_r+0x20>)
 800f600:	4604      	mov	r4, r0
 800f602:	4608      	mov	r0, r1
 800f604:	4611      	mov	r1, r2
 800f606:	2200      	movs	r2, #0
 800f608:	602a      	str	r2, [r5, #0]
 800f60a:	461a      	mov	r2, r3
 800f60c:	f7f4 f85e 	bl	80036cc <_read>
 800f610:	1c43      	adds	r3, r0, #1
 800f612:	d102      	bne.n	800f61a <_read_r+0x1e>
 800f614:	682b      	ldr	r3, [r5, #0]
 800f616:	b103      	cbz	r3, 800f61a <_read_r+0x1e>
 800f618:	6023      	str	r3, [r4, #0]
 800f61a:	bd38      	pop	{r3, r4, r5, pc}
 800f61c:	20002f68 	.word	0x20002f68

0800f620 <_init>:
 800f620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f622:	bf00      	nop
 800f624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f626:	bc08      	pop	{r3}
 800f628:	469e      	mov	lr, r3
 800f62a:	4770      	bx	lr

0800f62c <_fini>:
 800f62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f62e:	bf00      	nop
 800f630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f632:	bc08      	pop	{r3}
 800f634:	469e      	mov	lr, r3
 800f636:	4770      	bx	lr
