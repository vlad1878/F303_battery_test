
F303_battery_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b24c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  0800b3ec  0800b3ec  0001b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfb8  0800bfb8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800bfb8  0800bfb8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bfb8  0800bfb8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfb8  0800bfb8  0001bfb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfbc  0800bfbc  0001bfbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800bfc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00002910  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002998  20002998  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151fd  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e57  00000000  00000000  000352b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00038110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  00039210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002259b  00000000  00000000  0003a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184ec  00000000  00000000  0005c77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6551  00000000  00000000  00074c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b1b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ae4  00000000  00000000  0013b208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b3d4 	.word	0x0800b3d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800b3d4 	.word	0x0800b3d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <GMG12864_Send_command>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void GMG12864_Send_command(uint8_t Command) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Command - 8 бит данных.
	DC_set();
 80008a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008ae:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, &Command, 1, HAL_MAX_DELAY);
 80008b0:	1df9      	adds	r1, r7, #7
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	2201      	movs	r2, #1
 80008b8:	4808      	ldr	r0, [pc, #32]	; (80008dc <GMG12864_Send_command+0x40>)
 80008ba:	f005 f87e 	bl	80059ba <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80008be:	bf00      	nop
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <GMG12864_Send_command+0x40>)
 80008c2:	f005 fbfb 	bl	80060bc <HAL_SPI_GetState>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d1f9      	bne.n	80008c0 <GMG12864_Send_command+0x24>
	DC_reset();
 80008cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008d0:	2210      	movs	r2, #16
 80008d2:	619a      	str	r2, [r3, #24]
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000584 	.word	0x20000584

080008e0 <GMG12864_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных.
static void GMG12864_Send_data(uint8_t Dat) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &Dat, 1, HAL_MAX_DELAY);
 80008ea:	1df9      	adds	r1, r7, #7
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	2201      	movs	r2, #1
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <GMG12864_Send_data+0x30>)
 80008f4:	f005 f861 	bl	80059ba <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80008f8:	bf00      	nop
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <GMG12864_Send_data+0x30>)
 80008fc:	f005 fbde 	bl	80060bc <HAL_SPI_GetState>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d1f9      	bne.n	80008fa <GMG12864_Send_data+0x1a>
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000584 	.word	0x20000584

08000914 <GMG12864_Init>:
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
}
/*------------------------Функция очистки буфера кадра-------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void GMG12864_Init(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	cs_set();
 8000918:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800091c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000920:	619a      	str	r2, [r3, #24]
	RST_set();
 8000922:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800092a:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 800092c:	200a      	movs	r0, #10
 800092e:	f002 f977 	bl	8002c20 <HAL_Delay>
	RST_reset();
 8000932:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000936:	2202      	movs	r2, #2
 8000938:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 800093a:	200a      	movs	r0, #10
 800093c:	f002 f970 	bl	8002c20 <HAL_Delay>
	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея
	GMG12864_Send_command(0xA2);
 8000940:	20a2      	movs	r0, #162	; 0xa2
 8000942:	f7ff ffab 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 8000946:	2001      	movs	r0, #1
 8000948:	f002 f96a 	bl	8002c20 <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	GMG12864_Send_command(0xA0); //ADC selection(SEG0->SEG128)
 800094c:	20a0      	movs	r0, #160	; 0xa0
 800094e:	f7ff ffa5 	bl	800089c <GMG12864_Send_command>
	GMG12864_Send_command(0xC8); //SHL selection(COM0->COM64)
 8000952:	20c8      	movs	r0, #200	; 0xc8
 8000954:	f7ff ffa2 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f002 f961 	bl	8002c20 <HAL_Delay>
	// делитель внутреннего резистора установлен на 7 (от 0..7)
	GMG12864_Send_command(0x20 | 0x7);    //Regulator Resistor Selection
 800095e:	2027      	movs	r0, #39	; 0x27
 8000960:	f7ff ff9c 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f002 f95b 	bl	8002c20 <HAL_Delay>
	// управление питанием, все внутренние блоки включены	(от 0..7)
	GMG12864_Send_command(0x28 | 0x7);
 800096a:	202f      	movs	r0, #47	; 0x2f
 800096c:	f7ff ff96 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f002 f955 	bl	8002c20 <HAL_Delay>
	// войти в режим динамического контраста
	GMG12864_Send_command(0x81);    //Electronic Volume
 8000976:	2081      	movs	r0, #129	; 0x81
 8000978:	f7ff ff90 	bl	800089c <GMG12864_Send_command>
	GMG12864_Send_command(18);	// Настройка контраста. Отрегулируйте на своем дисплее. У меня на 15-19 норм. Максимум 63.
 800097c:	2012      	movs	r0, #18
 800097e:	f7ff ff8d 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 8000982:	2001      	movs	r0, #1
 8000984:	f002 f94c 	bl	8002c20 <HAL_Delay>
	GMG12864_Send_command(0x40);
 8000988:	2040      	movs	r0, #64	; 0x40
 800098a:	f7ff ff87 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 800098e:	2001      	movs	r0, #1
 8000990:	f002 f946 	bl	8002c20 <HAL_Delay>
	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	GMG12864_Send_command(0xAF);    		//Display on
 8000994:	20af      	movs	r0, #175	; 0xaf
 8000996:	f7ff ff81 	bl	800089c <GMG12864_Send_command>
	// Инвертирование экрана
	GMG12864_Send_command(0xA6); //0xA6 - nomal, 0xA7 - revers
 800099a:	20a6      	movs	r0, #166	; 0xa6
 800099c:	f7ff ff7e 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f002 f93d 	bl	8002c20 <HAL_Delay>
	cs_reset();
 80009a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009aa:	2201      	movs	r2, #1
 80009ac:	619a      	str	r2, [r3, #24]
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <GMG12864_Draw_pixel>:
	}
}
/*------------------------Функция вывода изображения с указаием его размера-------------------------*/

/*------------------------Функция рисования пикселя-------------------------*/
void GMG12864_Draw_pixel(int16_t x, int16_t y, uint8_t color) {
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	460b      	mov	r3, r1
 80009c0:	80bb      	strh	r3, [r7, #4]
 80009c2:	4613      	mov	r3, r2
 80009c4:	70fb      	strb	r3, [r7, #3]

	if (x >= GMG12864_width || x < 0 || y >= GMG12864_height || y < 0) {
 80009c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ca:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <GMG12864_Draw_pixel+0xd8>)
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	da55      	bge.n	8000a7e <GMG12864_Draw_pixel+0xca>
 80009d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db51      	blt.n	8000a7e <GMG12864_Draw_pixel+0xca>
 80009da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009de:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <GMG12864_Draw_pixel+0xdc>)
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	4293      	cmp	r3, r2
 80009e4:	da4b      	bge.n	8000a7e <GMG12864_Draw_pixel+0xca>
 80009e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db47      	blt.n	8000a7e <GMG12864_Draw_pixel+0xca>
		return;
	} else {
		uint16_t array_pos = x + ((y / 8) * GMG12864_width);
 80009ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da00      	bge.n	80009f8 <GMG12864_Draw_pixel+0x44>
 80009f6:	3307      	adds	r3, #7
 80009f8:	10db      	asrs	r3, r3, #3
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <GMG12864_Draw_pixel+0xd8>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	fb12 f303 	smulbb	r3, r2, r3
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	81fb      	strh	r3, [r7, #14]

		if (color) {
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d018      	beq.n	8000a48 <GMG12864_Draw_pixel+0x94>
			Frame_buffer[array_pos] |= 1 << (y % 8);
 8000a16:	89fb      	ldrh	r3, [r7, #14]
 8000a18:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <GMG12864_Draw_pixel+0xe0>)
 8000a1a:	5cd3      	ldrb	r3, [r2, r3]
 8000a1c:	b25a      	sxtb	r2, r3
 8000a1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a22:	4259      	negs	r1, r3
 8000a24:	f003 0307 	and.w	r3, r3, #7
 8000a28:	f001 0107 	and.w	r1, r1, #7
 8000a2c:	bf58      	it	pl
 8000a2e:	424b      	negpl	r3, r1
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	2301      	movs	r3, #1
 8000a36:	408b      	lsls	r3, r1
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b25a      	sxtb	r2, r3
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	b2d1      	uxtb	r1, r2
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <GMG12864_Draw_pixel+0xe0>)
 8000a44:	54d1      	strb	r1, [r2, r3]
 8000a46:	e01b      	b.n	8000a80 <GMG12864_Draw_pixel+0xcc>
		} else {
			Frame_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 8000a48:	89fb      	ldrh	r3, [r7, #14]
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <GMG12864_Draw_pixel+0xe0>)
 8000a4c:	5cd3      	ldrb	r3, [r2, r3]
 8000a4e:	b25a      	sxtb	r2, r3
 8000a50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a54:	4259      	negs	r1, r3
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	f001 0107 	and.w	r1, r1, #7
 8000a5e:	bf58      	it	pl
 8000a60:	424b      	negpl	r3, r1
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	4619      	mov	r1, r3
 8000a66:	2301      	movs	r3, #1
 8000a68:	408b      	lsls	r3, r1
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	4013      	ands	r3, r2
 8000a72:	b25a      	sxtb	r2, r3
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	b2d1      	uxtb	r1, r2
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <GMG12864_Draw_pixel+0xe0>)
 8000a7a:	54d1      	strb	r1, [r2, r3]
 8000a7c:	e000      	b.n	8000a80 <GMG12864_Draw_pixel+0xcc>
		return;
 8000a7e:	bf00      	nop
		}
	}

}
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000001 	.word	0x20000001
 8000a94:	20000124 	.word	0x20000124

08000a98 <GMG12864_Update>:
/*------------------------Функция рисования пикселя-------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void GMG12864_Update(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	cs_set();
 8000a9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000aa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aa6:	619a      	str	r2, [r3, #24]
	for (uint8_t y = 0; y < 8; y++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	e027      	b.n	8000afe <GMG12864_Update+0x66>
		ST7565_SetX(0);
 8000aae:	2010      	movs	r0, #16
 8000ab0:	f7ff fef4 	bl	800089c <GMG12864_Send_command>
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fef1 	bl	800089c <GMG12864_Send_command>
		ST7565_SetY((int16_t )y);
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fee5 	bl	800089c <GMG12864_Send_command>
		for (uint8_t x = 0; x < 128; x++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71bb      	strb	r3, [r7, #6]
 8000ad6:	e00b      	b.n	8000af0 <GMG12864_Update+0x58>
			GMG12864_Send_data(Frame_buffer[x + 128 * y]);
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	01db      	lsls	r3, r3, #7
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <GMG12864_Update+0x7c>)
 8000ae2:	5cd3      	ldrb	r3, [r2, r3]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fefb 	bl	80008e0 <GMG12864_Send_data>
		for (uint8_t x = 0; x < 128; x++) {
 8000aea:	79bb      	ldrb	r3, [r7, #6]
 8000aec:	3301      	adds	r3, #1
 8000aee:	71bb      	strb	r3, [r7, #6]
 8000af0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	daef      	bge.n	8000ad8 <GMG12864_Update+0x40>
	for (uint8_t y = 0; y < 8; y++) {
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	3301      	adds	r3, #1
 8000afc:	71fb      	strb	r3, [r7, #7]
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	d9d4      	bls.n	8000aae <GMG12864_Update+0x16>
		}
	}
	cs_reset();
 8000b04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b08:	2201      	movs	r2, #1
 8000b0a:	619a      	str	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000124 	.word	0x20000124

08000b18 <GMG12864_Print_symbol_5x7>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_5x7(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4604      	mov	r4, r0
 8000b20:	4608      	mov	r0, r1
 8000b22:	4611      	mov	r1, r2
 8000b24:	461a      	mov	r2, r3
 8000b26:	4623      	mov	r3, r4
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71bb      	strb	r3, [r7, #6]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	80bb      	strh	r3, [r7, #4]
 8000b32:	4613      	mov	r3, r2
 8000b34:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 5; //конечное положение по x с учетом межсимвольного интервала
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	3305      	adds	r3, #5
 8000b3e:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000b40:	7b3b      	ldrb	r3, [r7, #12]
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e086      	b.n	8000c54 <GMG12864_Print_symbol_5x7+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8000b46:	7bfa      	ldrb	r2, [r7, #15]
 8000b48:	7afb      	ldrb	r3, [r7, #11]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d127      	bne.n	8000b9e <GMG12864_Print_symbol_5x7+0x86>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73bb      	strb	r3, [r7, #14]
 8000b52:	e020      	b.n	8000b96 <GMG12864_Print_symbol_5x7+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00d      	beq.n	8000b76 <GMG12864_Print_symbol_5x7+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	b218      	sxth	r0, r3
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4413      	add	r3, r2
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff ff20 	bl	80009b4 <GMG12864_Draw_pixel>
 8000b74:	e00c      	b.n	8000b90 <GMG12864_Print_symbol_5x7+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	b218      	sxth	r0, r3
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	7bbb      	ldrb	r3, [r7, #14]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f7ff ff12 	bl	80009b4 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000b90:	7bbb      	ldrb	r3, [r7, #14]
 8000b92:	3301      	adds	r3, #1
 8000b94:	73bb      	strb	r3, [r7, #14]
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	2b06      	cmp	r3, #6
 8000b9a:	d9db      	bls.n	8000b54 <GMG12864_Print_symbol_5x7+0x3c>
 8000b9c:	e057      	b.n	8000c4e <GMG12864_Print_symbol_5x7+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	737b      	strb	r3, [r7, #13]
 8000ba2:	e051      	b.n	8000c48 <GMG12864_Print_symbol_5x7+0x130>
				if (Font_5x7[(symbol * 5) + x - x_start] & (1 << i)) {
 8000ba4:	88ba      	ldrh	r2, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	441a      	add	r2, r3
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	441a      	add	r2, r3
 8000bb0:	7b3b      	ldrb	r3, [r7, #12]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	4a2c      	ldr	r2, [pc, #176]	; (8000c68 <GMG12864_Print_symbol_5x7+0x150>)
 8000bb6:	5cd3      	ldrb	r3, [r2, r3]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	7b7b      	ldrb	r3, [r7, #13]
 8000bbc:	fa42 f303 	asr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d01e      	beq.n	8000c06 <GMG12864_Print_symbol_5x7+0xee>
					if (inversion) {
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00d      	beq.n	8000bea <GMG12864_Print_symbol_5x7+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	b218      	sxth	r0, r3
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	7b7b      	ldrb	r3, [r7, #13]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4413      	add	r3, r2
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	2200      	movs	r2, #0
 8000be2:	4619      	mov	r1, r3
 8000be4:	f7ff fee6 	bl	80009b4 <GMG12864_Draw_pixel>
 8000be8:	e02b      	b.n	8000c42 <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	b218      	sxth	r0, r3
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f7ff fed8 	bl	80009b4 <GMG12864_Draw_pixel>
 8000c04:	e01d      	b.n	8000c42 <GMG12864_Print_symbol_5x7+0x12a>
					}
				} else {
					if (inversion) {
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00d      	beq.n	8000c28 <GMG12864_Print_symbol_5x7+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	b218      	sxth	r0, r3
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4413      	add	r3, r2
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4619      	mov	r1, r3
 8000c22:	f7ff fec7 	bl	80009b4 <GMG12864_Draw_pixel>
 8000c26:	e00c      	b.n	8000c42 <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	b218      	sxth	r0, r3
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	7b7b      	ldrb	r3, [r7, #13]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4413      	add	r3, r2
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff feb9 	bl	80009b4 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000c42:	7b7b      	ldrb	r3, [r7, #13]
 8000c44:	3301      	adds	r3, #1
 8000c46:	737b      	strb	r3, [r7, #13]
 8000c48:	7b7b      	ldrb	r3, [r7, #13]
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d9aa      	bls.n	8000ba4 <GMG12864_Print_symbol_5x7+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	3301      	adds	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
 8000c54:	7bfa      	ldrb	r2, [r7, #15]
 8000c56:	7afb      	ldrb	r3, [r7, #11]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	f67f af74 	bls.w	8000b46 <GMG12864_Print_symbol_5x7+0x2e>
					}
				}
			}
		}
	}
}
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	0800b6d0 	.word	0x0800b6d0

08000c6c <GMG12864_Print_symbol_3x5>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_3x5(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4604      	mov	r4, r0
 8000c74:	4608      	mov	r0, r1
 8000c76:	4611      	mov	r1, r2
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4623      	mov	r3, r4
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71bb      	strb	r3, [r7, #6]
 8000c82:	460b      	mov	r3, r1
 8000c84:	80bb      	strh	r3, [r7, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 3; //конечное положение по x с учетом межсимвольного интервала
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	3303      	adds	r3, #3
 8000c92:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000c94:	7b3b      	ldrb	r3, [r7, #12]
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e086      	b.n	8000da8 <GMG12864_Print_symbol_3x5+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	7afb      	ldrb	r3, [r7, #11]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d127      	bne.n	8000cf2 <GMG12864_Print_symbol_3x5+0x86>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73bb      	strb	r3, [r7, #14]
 8000ca6:	e020      	b.n	8000cea <GMG12864_Print_symbol_3x5+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00d      	beq.n	8000cca <GMG12864_Print_symbol_3x5+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	b218      	sxth	r0, r3
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	7bbb      	ldrb	r3, [r7, #14]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff fe76 	bl	80009b4 <GMG12864_Draw_pixel>
 8000cc8:	e00c      	b.n	8000ce4 <GMG12864_Print_symbol_3x5+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	b218      	sxth	r0, r3
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	7bbb      	ldrb	r3, [r7, #14]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f7ff fe68 	bl	80009b4 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	73bb      	strb	r3, [r7, #14]
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d9db      	bls.n	8000ca8 <GMG12864_Print_symbol_3x5+0x3c>
 8000cf0:	e057      	b.n	8000da2 <GMG12864_Print_symbol_3x5+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	737b      	strb	r3, [r7, #13]
 8000cf6:	e051      	b.n	8000d9c <GMG12864_Print_symbol_3x5+0x130>
				if (Font_3x5[(symbol * 3) + x - x_start] & (1 << i)) {
 8000cf8:	88ba      	ldrh	r2, [r7, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	441a      	add	r2, r3
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	441a      	add	r2, r3
 8000d04:	7b3b      	ldrb	r3, [r7, #12]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	4a2c      	ldr	r2, [pc, #176]	; (8000dbc <GMG12864_Print_symbol_3x5+0x150>)
 8000d0a:	5cd3      	ldrb	r3, [r2, r3]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	7b7b      	ldrb	r3, [r7, #13]
 8000d10:	fa42 f303 	asr.w	r3, r2, r3
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d01e      	beq.n	8000d5a <GMG12864_Print_symbol_3x5+0xee>
					if (inversion) {
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00d      	beq.n	8000d3e <GMG12864_Print_symbol_3x5+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	b218      	sxth	r0, r3
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	7b7b      	ldrb	r3, [r7, #13]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4413      	add	r3, r2
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	f7ff fe3c 	bl	80009b4 <GMG12864_Draw_pixel>
 8000d3c:	e02b      	b.n	8000d96 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	b218      	sxth	r0, r3
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	2201      	movs	r2, #1
 8000d52:	4619      	mov	r1, r3
 8000d54:	f7ff fe2e 	bl	80009b4 <GMG12864_Draw_pixel>
 8000d58:	e01d      	b.n	8000d96 <GMG12864_Print_symbol_3x5+0x12a>
					}
				} else {
					if (inversion) {
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00d      	beq.n	8000d7c <GMG12864_Print_symbol_3x5+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	b218      	sxth	r0, r3
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	7b7b      	ldrb	r3, [r7, #13]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	2201      	movs	r2, #1
 8000d74:	4619      	mov	r1, r3
 8000d76:	f7ff fe1d 	bl	80009b4 <GMG12864_Draw_pixel>
 8000d7a:	e00c      	b.n	8000d96 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	b218      	sxth	r0, r3
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	7b7b      	ldrb	r3, [r7, #13]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4413      	add	r3, r2
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4619      	mov	r1, r3
 8000d92:	f7ff fe0f 	bl	80009b4 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	737b      	strb	r3, [r7, #13]
 8000d9c:	7b7b      	ldrb	r3, [r7, #13]
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d9aa      	bls.n	8000cf8 <GMG12864_Print_symbol_3x5+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3301      	adds	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	7bfa      	ldrb	r2, [r7, #15]
 8000daa:	7afb      	ldrb	r3, [r7, #11]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f67f af74 	bls.w	8000c9a <GMG12864_Print_symbol_3x5+0x2e>
					}
				}
			}
		}
	}
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	0800b4e8 	.word	0x0800b4e8

08000dc0 <GMG12864_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/
void GMG12864_Decode_UTF8(uint8_t x, uint8_t y, uint8_t font, bool inversion, char *tx_buffer) {
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	4608      	mov	r0, r1
 8000dca:	4611      	mov	r1, r2
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4623      	mov	r3, r4
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71bb      	strb	r3, [r7, #6]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	717b      	strb	r3, [r7, #5]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	713b      	strb	r3, [r7, #4]
/// Функция декодирования UTF-8 в набор символов и последующее занесение в буфер кадра
/// \param x - координата по х. От 0 до 127
/// \param y - координата по y. от 0 до 7
/// \param font - шрифт. 0 - 3x5, 1 - 5x7
	uint16_t symbol = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	e17e      	b.n	80010ea <GMG12864_Decode_UTF8+0x32a>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000df0:	4413      	add	r3, r2
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2bbf      	cmp	r3, #191	; 0xbf
 8000df6:	d841      	bhi.n	8000e7c <GMG12864_Decode_UTF8+0xbc>
			if (flag_block) {
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <GMG12864_Decode_UTF8+0x44>
				flag_block = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	75fb      	strb	r3, [r7, #23]
 8000e02:	e16f      	b.n	80010e4 <GMG12864_Decode_UTF8+0x324>
			} else {
				symbol = tx_buffer[i];
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	81fb      	strh	r3, [r7, #14]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000e0e:	797b      	ldrb	r3, [r7, #5]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d117      	bne.n	8000e44 <GMG12864_Decode_UTF8+0x84>
					if (inversion) {
 8000e14:	793b      	ldrb	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d008      	beq.n	8000e2c <GMG12864_Decode_UTF8+0x6c>
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	3b20      	subs	r3, #32
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	79b9      	ldrb	r1, [r7, #6]
 8000e22:	79f8      	ldrb	r0, [r7, #7]
 8000e24:	2301      	movs	r3, #1
 8000e26:	f7ff ff21 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 8000e2a:	e007      	b.n	8000e3c <GMG12864_Decode_UTF8+0x7c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 8000e2c:	89fb      	ldrh	r3, [r7, #14]
 8000e2e:	3b20      	subs	r3, #32
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	79b9      	ldrb	r1, [r7, #6]
 8000e34:	79f8      	ldrb	r0, [r7, #7]
 8000e36:	2300      	movs	r3, #0
 8000e38:	f7ff ff18 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	3304      	adds	r3, #4
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	e14f      	b.n	80010e4 <GMG12864_Decode_UTF8+0x324>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000e44:	797b      	ldrb	r3, [r7, #5]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	f040 814c 	bne.w	80010e4 <GMG12864_Decode_UTF8+0x324>
					if (inversion) {
 8000e4c:	793b      	ldrb	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d008      	beq.n	8000e64 <GMG12864_Decode_UTF8+0xa4>
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	3b20      	subs	r3, #32
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	79b9      	ldrb	r1, [r7, #6]
 8000e5a:	79f8      	ldrb	r0, [r7, #7]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f7ff fe5b 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 8000e62:	e007      	b.n	8000e74 <GMG12864_Decode_UTF8+0xb4>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	3b20      	subs	r3, #32
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	79b9      	ldrb	r1, [r7, #6]
 8000e6c:	79f8      	ldrb	r0, [r7, #7]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f7ff fe52 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	3306      	adds	r3, #6
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	e133      	b.n	80010e4 <GMG12864_Decode_UTF8+0x324>
				}
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e8e:	440b      	add	r3, r1
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d843      	bhi.n	8000f2c <GMG12864_Decode_UTF8+0x16c>
 8000ea4:	89fb      	ldrh	r3, [r7, #14]
 8000ea6:	f24d 0281 	movw	r2, #53377	; 0xd081
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d93e      	bls.n	8000f2c <GMG12864_Decode_UTF8+0x16c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000eae:	797b      	ldrb	r3, [r7, #5]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d11b      	bne.n	8000eec <GMG12864_Decode_UTF8+0x12c>
					if (inversion) {
 8000eb4:	793b      	ldrb	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00a      	beq.n	8000ed0 <GMG12864_Decode_UTF8+0x110>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8000eba:	89fb      	ldrh	r3, [r7, #14]
 8000ebc:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000ec0:	330f      	adds	r3, #15
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	79b9      	ldrb	r1, [r7, #6]
 8000ec6:	79f8      	ldrb	r0, [r7, #7]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f7ff fecf 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 8000ece:	e009      	b.n	8000ee4 <GMG12864_Decode_UTF8+0x124>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
 8000ed2:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000ed6:	330f      	adds	r3, #15
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	79b9      	ldrb	r1, [r7, #6]
 8000edc:	79f8      	ldrb	r0, [r7, #7]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f7ff fec4 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000eea:	e0f8      	b.n	80010de <GMG12864_Decode_UTF8+0x31e>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000eec:	797b      	ldrb	r3, [r7, #5]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	f040 80f5 	bne.w	80010de <GMG12864_Decode_UTF8+0x31e>
					if (inversion) {
 8000ef4:	793b      	ldrb	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00a      	beq.n	8000f10 <GMG12864_Decode_UTF8+0x150>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8000efa:	89fb      	ldrh	r3, [r7, #14]
 8000efc:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000f00:	330f      	adds	r3, #15
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	79b9      	ldrb	r1, [r7, #6]
 8000f06:	79f8      	ldrb	r0, [r7, #7]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f7ff fe05 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 8000f0e:	e009      	b.n	8000f24 <GMG12864_Decode_UTF8+0x164>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000f16:	330f      	adds	r3, #15
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	79b9      	ldrb	r1, [r7, #6]
 8000f1c:	79f8      	ldrb	r0, [r7, #7]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f7ff fdfa 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	3306      	adds	r3, #6
 8000f28:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000f2a:	e0d8      	b.n	80010de <GMG12864_Decode_UTF8+0x31e>
				}
			} else if (symbol == 0xD081) {
 8000f2c:	89fb      	ldrh	r3, [r7, #14]
 8000f2e:	f24d 0281 	movw	r2, #53377	; 0xd081
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12e      	bne.n	8000f94 <GMG12864_Decode_UTF8+0x1d4>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000f36:	797b      	ldrb	r3, [r7, #5]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d113      	bne.n	8000f64 <GMG12864_Decode_UTF8+0x1a4>
					if (inversion) {
 8000f3c:	793b      	ldrb	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <GMG12864_Decode_UTF8+0x190>
						GMG12864_Print_symbol_3x5(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8000f42:	79b9      	ldrb	r1, [r7, #6]
 8000f44:	79f8      	ldrb	r0, [r7, #7]
 8000f46:	2301      	movs	r3, #1
 8000f48:	229f      	movs	r2, #159	; 0x9f
 8000f4a:	f7ff fe8f 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 8000f4e:	e005      	b.n	8000f5c <GMG12864_Decode_UTF8+0x19c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8000f50:	79b9      	ldrb	r1, [r7, #6]
 8000f52:	79f8      	ldrb	r0, [r7, #7]
 8000f54:	2300      	movs	r3, #0
 8000f56:	229f      	movs	r2, #159	; 0x9f
 8000f58:	f7ff fe88 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	e0bd      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000f64:	797b      	ldrb	r3, [r7, #5]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	f040 80ba 	bne.w	80010e0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8000f6c:	793b      	ldrb	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <GMG12864_Decode_UTF8+0x1c0>
						GMG12864_Print_symbol_5x7(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8000f72:	79b9      	ldrb	r1, [r7, #6]
 8000f74:	79f8      	ldrb	r0, [r7, #7]
 8000f76:	2301      	movs	r3, #1
 8000f78:	229f      	movs	r2, #159	; 0x9f
 8000f7a:	f7ff fdcd 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 8000f7e:	e005      	b.n	8000f8c <GMG12864_Decode_UTF8+0x1cc>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8000f80:	79b9      	ldrb	r1, [r7, #6]
 8000f82:	79f8      	ldrb	r0, [r7, #7]
 8000f84:	2300      	movs	r3, #0
 8000f86:	229f      	movs	r2, #159	; 0x9f
 8000f88:	f7ff fdc6 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	3306      	adds	r3, #6
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	e0a5      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xD191) {
 8000f94:	89fb      	ldrh	r3, [r7, #14]
 8000f96:	f24d 1291 	movw	r2, #53649	; 0xd191
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12e      	bne.n	8000ffc <GMG12864_Decode_UTF8+0x23c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000f9e:	797b      	ldrb	r3, [r7, #5]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d113      	bne.n	8000fcc <GMG12864_Decode_UTF8+0x20c>
					if (inversion) {
 8000fa4:	793b      	ldrb	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <GMG12864_Decode_UTF8+0x1f8>
						GMG12864_Print_symbol_3x5(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8000faa:	79b9      	ldrb	r1, [r7, #6]
 8000fac:	79f8      	ldrb	r0, [r7, #7]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	22a0      	movs	r2, #160	; 0xa0
 8000fb2:	f7ff fe5b 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 8000fb6:	e005      	b.n	8000fc4 <GMG12864_Decode_UTF8+0x204>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8000fb8:	79b9      	ldrb	r1, [r7, #6]
 8000fba:	79f8      	ldrb	r0, [r7, #7]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	22a0      	movs	r2, #160	; 0xa0
 8000fc0:	f7ff fe54 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	e089      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000fcc:	797b      	ldrb	r3, [r7, #5]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	f040 8086 	bne.w	80010e0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8000fd4:	793b      	ldrb	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <GMG12864_Decode_UTF8+0x228>
						GMG12864_Print_symbol_5x7(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8000fda:	79b9      	ldrb	r1, [r7, #6]
 8000fdc:	79f8      	ldrb	r0, [r7, #7]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	22a0      	movs	r2, #160	; 0xa0
 8000fe2:	f7ff fd99 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 8000fe6:	e005      	b.n	8000ff4 <GMG12864_Decode_UTF8+0x234>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8000fe8:	79b9      	ldrb	r1, [r7, #6]
 8000fea:	79f8      	ldrb	r0, [r7, #7]
 8000fec:	2300      	movs	r3, #0
 8000fee:	22a0      	movs	r2, #160	; 0xa0
 8000ff0:	f7ff fd92 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	3306      	adds	r3, #6
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	e071      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xC2B0) {
 8000ffc:	89fb      	ldrh	r3, [r7, #14]
 8000ffe:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 8001002:	4293      	cmp	r3, r2
 8001004:	d12d      	bne.n	8001062 <GMG12864_Decode_UTF8+0x2a2>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d113      	bne.n	8001034 <GMG12864_Decode_UTF8+0x274>
					if (inversion) {
 800100c:	793b      	ldrb	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <GMG12864_Decode_UTF8+0x260>
						GMG12864_Print_symbol_3x5(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8001012:	79b9      	ldrb	r1, [r7, #6]
 8001014:	79f8      	ldrb	r0, [r7, #7]
 8001016:	2301      	movs	r3, #1
 8001018:	22a1      	movs	r2, #161	; 0xa1
 800101a:	f7ff fe27 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 800101e:	e005      	b.n	800102c <GMG12864_Decode_UTF8+0x26c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 8001020:	79b9      	ldrb	r1, [r7, #6]
 8001022:	79f8      	ldrb	r0, [r7, #7]
 8001024:	2300      	movs	r3, #0
 8001026:	22a1      	movs	r2, #161	; 0xa1
 8001028:	f7ff fe20 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	3304      	adds	r3, #4
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e055      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8001034:	797b      	ldrb	r3, [r7, #5]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d152      	bne.n	80010e0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 800103a:	793b      	ldrb	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <GMG12864_Decode_UTF8+0x28e>
						GMG12864_Print_symbol_5x7(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8001040:	79b9      	ldrb	r1, [r7, #6]
 8001042:	79f8      	ldrb	r0, [r7, #7]
 8001044:	2301      	movs	r3, #1
 8001046:	22a1      	movs	r2, #161	; 0xa1
 8001048:	f7ff fd66 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 800104c:	e005      	b.n	800105a <GMG12864_Decode_UTF8+0x29a>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 800104e:	79b9      	ldrb	r1, [r7, #6]
 8001050:	79f8      	ldrb	r0, [r7, #7]
 8001052:	2300      	movs	r3, #0
 8001054:	22a1      	movs	r2, #161	; 0xa1
 8001056:	f7ff fd5f 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	3306      	adds	r3, #6
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	e03e      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				}
			}

			else {
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d11b      	bne.n	80010a0 <GMG12864_Decode_UTF8+0x2e0>
					if (inversion) {
 8001068:	793b      	ldrb	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00a      	beq.n	8001084 <GMG12864_Decode_UTF8+0x2c4>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001074:	330f      	adds	r3, #15
 8001076:	b29a      	uxth	r2, r3
 8001078:	79b9      	ldrb	r1, [r7, #6]
 800107a:	79f8      	ldrb	r0, [r7, #7]
 800107c:	2301      	movs	r3, #1
 800107e:	f7ff fdf5 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 8001082:	e009      	b.n	8001098 <GMG12864_Decode_UTF8+0x2d8>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8001084:	89fb      	ldrh	r3, [r7, #14]
 8001086:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800108a:	330f      	adds	r3, #15
 800108c:	b29a      	uxth	r2, r3
 800108e:	79b9      	ldrb	r1, [r7, #6]
 8001090:	79f8      	ldrb	r0, [r7, #7]
 8001092:	2300      	movs	r3, #0
 8001094:	f7ff fdea 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	3304      	adds	r3, #4
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	e01f      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80010a0:	797b      	ldrb	r3, [r7, #5]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d11c      	bne.n	80010e0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 80010a6:	793b      	ldrb	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00a      	beq.n	80010c2 <GMG12864_Decode_UTF8+0x302>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 80010ac:	89fb      	ldrh	r3, [r7, #14]
 80010ae:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80010b2:	330f      	adds	r3, #15
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	79b9      	ldrb	r1, [r7, #6]
 80010b8:	79f8      	ldrb	r0, [r7, #7]
 80010ba:	2301      	movs	r3, #1
 80010bc:	f7ff fd2c 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 80010c0:	e009      	b.n	80010d6 <GMG12864_Decode_UTF8+0x316>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80010c8:	330f      	adds	r3, #15
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	79b9      	ldrb	r1, [r7, #6]
 80010ce:	79f8      	ldrb	r0, [r7, #7]
 80010d0:	2300      	movs	r3, #0
 80010d2:	f7ff fd21 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	3306      	adds	r3, #6
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	e000      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80010de:	bf00      	nop
				}
			}
			flag_block = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	3301      	adds	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010ec:	f7ff f878 	bl	80001e0 <strlen>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f63f ae79 	bhi.w	8000dec <GMG12864_Decode_UTF8+0x2c>
		}
	}
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}

08001104 <Read16>:
uint16_t ina219_calibrationValue;
float ina219_currentDivider_mA;
float ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af04      	add	r7, sp, #16
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	b29a      	uxth	r2, r3
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2302      	movs	r3, #2
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	f002 fa0c 	bl	8003548 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8001130:	7b3b      	ldrb	r3, [r7, #12]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	7b7b      	ldrb	r3, [r7, #13]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af04      	add	r7, sp, #16
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
 8001154:	4613      	mov	r3, r2
 8001156:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8001158:	883b      	ldrh	r3, [r7, #0]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	b29b      	uxth	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8001162:	883b      	ldrh	r3, [r7, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	b29a      	uxth	r2, r3
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2302      	movs	r3, #2
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	f002 f8cc 	bl	8003320 <HAL_I2C_Mem_Write>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001198:	2102      	movs	r1, #2
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffb2 	bl	8001104 <Read16>
 80011a0:	4603      	mov	r3, r0
 80011a2:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	08db      	lsrs	r3, r3, #3
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	b29b      	uxth	r3, r3

}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 80011be:	2104      	movs	r1, #4
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff9f 	bl	8001104 <Read16>
 80011c6:	4603      	mov	r3, r0
 80011c8:	81fb      	strh	r3, [r7, #14]

	return (result );
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ffe8 	bl	80011b6 <INA219_ReadCurrent_raw>
 80011e6:	4603      	mov	r3, r0
 80011e8:	81fb      	strh	r3, [r7, #14]

	return (result * ina219_currentDivider_mA * 1000 );
 80011ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <INA219_ReadCurrent+0x44>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001220 <INA219_ReadCurrent+0x48>
 8001204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120c:	ee17 3a90 	vmov	r3, s15
 8001210:	b21b      	sxth	r3, r3
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000528 	.word	0x20000528
 8001220:	447a0000 	.word	0x447a0000
 8001224:	00000000 	.word	0x00000000

08001228 <INA219_ReadShuntVoltage>:

uint16_t INA219_ReadShuntVoltage(INA219_t *ina219)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001230:	2101      	movs	r1, #1
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff66 	bl	8001104 <Read16>
 8001238:	4603      	mov	r3, r0
 800123a:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01);
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff faa2 	bl	8000788 <__aeabi_i2d>
 8001244:	a308      	add	r3, pc, #32	; (adr r3, 8001268 <INA219_ReadShuntVoltage+0x40>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f821 	bl	8000290 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fb01 	bl	800085c <__aeabi_d2uiz>
 800125a:	4603      	mov	r3, r0
 800125c:	b29b      	uxth	r3, r3
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	47ae147b 	.word	0x47ae147b
 800126c:	3f847ae1 	.word	0x3f847ae1

08001270 <INA219_Read_Power>:

uint16_t INA219_Read_Power(INA219_t *ina219)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_POWER);
 8001278:	2103      	movs	r1, #3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff42 	bl	8001104 <Read16>
 8001280:	4603      	mov	r3, r0
 8001282:	81fb      	strh	r3, [r7, #14]

	return (result * ina219_powerMultiplier_mW * 1000);
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <INA219_Read_Power+0x44>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012b8 <INA219_Read_Power+0x48>
 800129c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a4:	ee17 3a90 	vmov	r3, s15
 80012a8:	b29b      	uxth	r3, r3
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000052c 	.word	0x2000052c
 80012b8:	447a0000 	.word	0x447a0000

080012bc <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 80012c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012c8:	2100      	movs	r1, #0
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff3c 	bl	8001148 <Write16>
	HAL_Delay(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f001 fca5 	bl	8002c20 <HAL_Delay>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	461a      	mov	r2, r3
 80012ee:	2105      	movs	r1, #5
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff29 	bl	8001148 <Write16>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	461a      	mov	r2, r3
 800130e:	2100      	movs	r1, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff19 	bl	8001148 <Write16>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001328:	f643 139f 	movw	r3, #14751	; 0x399f
 800132c:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <INA219_setCalibration_32V_2A+0x40>)
 8001330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001334:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 0.0001; // Current LSB = 100uA per bit (1000/100 = 10)
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <INA219_setCalibration_32V_2A+0x44>)
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <INA219_setCalibration_32V_2A+0x48>)
 800133a:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0.002; // Power LSB = 1mW per bit (2/1)
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <INA219_setCalibration_32V_2A+0x4c>)
 800133e:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <INA219_setCalibration_32V_2A+0x50>)
 8001340:	601a      	str	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <INA219_setCalibration_32V_2A+0x40>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ffc8 	bl	80012de <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffd3 	bl	80012fe <INA219_setConfig>
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000524 	.word	0x20000524
 8001364:	20000528 	.word	0x20000528
 8001368:	38d1b717 	.word	0x38d1b717
 800136c:	2000052c 	.word	0x2000052c
 8001370:	3b03126f 	.word	0x3b03126f

08001374 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	4613      	mov	r3, r2
 8001380:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	79fa      	ldrb	r2, [r7, #7]
 800138c:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <INA219_Init+0x60>)
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <INA219_Init+0x64>)
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	601a      	str	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	b299      	uxth	r1, r3
 80013a6:	2302      	movs	r3, #2
 80013a8:	2203      	movs	r2, #3
 80013aa:	68b8      	ldr	r0, [r7, #8]
 80013ac:	f002 f9e6 	bl	800377c <HAL_I2C_IsDeviceReady>
 80013b0:	4603      	mov	r3, r0
 80013b2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d107      	bne.n	80013ca <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7ff ff7e 	bl	80012bc <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff ffad 	bl	8001320 <INA219_setCalibration_32V_2A>

		return 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <INA219_Init+0x58>
	}

	else
	{
		return 0;
 80013ca:	2300      	movs	r3, #0
	}
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000528 	.word	0x20000528
 80013d8:	2000052c 	.word	0x2000052c

080013dc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2140      	movs	r1, #64	; 0x40
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f001 feda 	bl	80031a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f001 fc17 	bl	8002c20 <HAL_Delay>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f001 fecd 	bl	80031a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001406:	2001      	movs	r0, #1
 8001408:	f001 fc0a 	bl	8002c20 <HAL_Delay>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800141a:	bf00      	nop
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <SPI_TxByte+0x30>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b02      	cmp	r3, #2
 8001428:	d1f8      	bne.n	800141c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800142a:	1df9      	adds	r1, r7, #7
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	2201      	movs	r2, #1
 8001430:	4803      	ldr	r0, [pc, #12]	; (8001440 <SPI_TxByte+0x30>)
 8001432:	f004 fac2 	bl	80059ba <HAL_SPI_Transmit>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200005e8 	.word	0x200005e8

08001444 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001450:	bf00      	nop
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <SPI_TxBuffer+0x30>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b02      	cmp	r3, #2
 800145e:	d1f8      	bne.n	8001452 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001460:	887a      	ldrh	r2, [r7, #2]
 8001462:	2364      	movs	r3, #100	; 0x64
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <SPI_TxBuffer+0x30>)
 8001468:	f004 faa7 	bl	80059ba <HAL_SPI_Transmit>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200005e8 	.word	0x200005e8

08001478 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800147e:	23ff      	movs	r3, #255	; 0xff
 8001480:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001482:	bf00      	nop
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <SPI_RxByte+0x34>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b02      	cmp	r3, #2
 8001490:	d1f8      	bne.n	8001484 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001492:	1dba      	adds	r2, r7, #6
 8001494:	1df9      	adds	r1, r7, #7
 8001496:	2364      	movs	r3, #100	; 0x64
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2301      	movs	r3, #1
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <SPI_RxByte+0x34>)
 800149e:	f004 fbfa 	bl	8005c96 <HAL_SPI_TransmitReceive>

	return data;
 80014a2:	79bb      	ldrb	r3, [r7, #6]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200005e8 	.word	0x200005e8

080014b0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80014b8:	f7ff ffde 	bl	8001478 <SPI_RxByte>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	701a      	strb	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <SD_ReadyWait+0x30>)
 80014d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014d8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80014da:	f7ff ffcd 	bl	8001478 <SPI_RxByte>
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2bff      	cmp	r3, #255	; 0xff
 80014e6:	d003      	beq.n	80014f0 <SD_ReadyWait+0x24>
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SD_ReadyWait+0x30>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f4      	bne.n	80014da <SD_ReadyWait+0xe>

	return res;
 80014f0:	79fb      	ldrb	r3, [r7, #7]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000532 	.word	0x20000532

08001500 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001506:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800150a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800150c:	f7ff ff73 	bl	80013f6 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	e005      	b.n	8001522 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001516:	20ff      	movs	r0, #255	; 0xff
 8001518:	f7ff ff7a 	bl	8001410 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3301      	adds	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b09      	cmp	r3, #9
 8001526:	ddf6      	ble.n	8001516 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001528:	f7ff ff58 	bl	80013dc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800152c:	2340      	movs	r3, #64	; 0x40
 800152e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001540:	2395      	movs	r3, #149	; 0x95
 8001542:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001544:	463b      	mov	r3, r7
 8001546:	2106      	movs	r1, #6
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff7b 	bl	8001444 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800154e:	e002      	b.n	8001556 <SD_PowerOn+0x56>
	{
		cnt--;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3b01      	subs	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001556:	f7ff ff8f 	bl	8001478 <SPI_RxByte>
 800155a:	4603      	mov	r3, r0
 800155c:	2b01      	cmp	r3, #1
 800155e:	d002      	beq.n	8001566 <SD_PowerOn+0x66>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f4      	bne.n	8001550 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001566:	f7ff ff46 	bl	80013f6 <DESELECT>
	SPI_TxByte(0XFF);
 800156a:	20ff      	movs	r0, #255	; 0xff
 800156c:	f7ff ff50 	bl	8001410 <SPI_TxByte>

	PowerFlag = 1;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <SD_PowerOn+0x80>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000535 	.word	0x20000535

08001584 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <SD_PowerOff+0x14>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	20000535 	.word	0x20000535

0800159c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	return PowerFlag;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <SD_CheckPower+0x14>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000535 	.word	0x20000535

080015b4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <SD_RxDataBlock+0x58>)
 80015c0:	22c8      	movs	r2, #200	; 0xc8
 80015c2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80015c4:	f7ff ff58 	bl	8001478 <SPI_RxByte>
 80015c8:	4603      	mov	r3, r0
 80015ca:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	2bff      	cmp	r3, #255	; 0xff
 80015d0:	d103      	bne.n	80015da <SD_RxDataBlock+0x26>
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <SD_RxDataBlock+0x58>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f4      	bne.n	80015c4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2bfe      	cmp	r3, #254	; 0xfe
 80015de:	d001      	beq.n	80015e4 <SD_RxDataBlock+0x30>
 80015e0:	2300      	movs	r3, #0
 80015e2:	e00f      	b.n	8001604 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff60 	bl	80014b0 <SPI_RxBytePtr>
	} while(len--);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	603a      	str	r2, [r7, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f4      	bne.n	80015e4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80015fa:	f7ff ff3d 	bl	8001478 <SPI_RxByte>
	SPI_RxByte();
 80015fe:	f7ff ff3b 	bl	8001478 <SPI_RxByte>

	return TRUE;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000530 	.word	0x20000530

08001610 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001620:	f7ff ff54 	bl	80014cc <SD_ReadyWait>
 8001624:	4603      	mov	r3, r0
 8001626:	2bff      	cmp	r3, #255	; 0xff
 8001628:	d001      	beq.n	800162e <SD_TxDataBlock+0x1e>
 800162a:	2300      	movs	r3, #0
 800162c:	e02f      	b.n	800168e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff feed 	bl	8001410 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	2bfd      	cmp	r3, #253	; 0xfd
 800163a:	d020      	beq.n	800167e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800163c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff feff 	bl	8001444 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001646:	f7ff ff17 	bl	8001478 <SPI_RxByte>
		SPI_RxByte();
 800164a:	f7ff ff15 	bl	8001478 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800164e:	e00b      	b.n	8001668 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001650:	f7ff ff12 	bl	8001478 <SPI_RxByte>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	2b05      	cmp	r3, #5
 8001660:	d006      	beq.n	8001670 <SD_TxDataBlock+0x60>
			i++;
 8001662:	7bbb      	ldrb	r3, [r7, #14]
 8001664:	3301      	adds	r3, #1
 8001666:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001668:	7bbb      	ldrb	r3, [r7, #14]
 800166a:	2b40      	cmp	r3, #64	; 0x40
 800166c:	d9f0      	bls.n	8001650 <SD_TxDataBlock+0x40>
 800166e:	e000      	b.n	8001672 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001670:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001672:	bf00      	nop
 8001674:	f7ff ff00 	bl	8001478 <SPI_RxByte>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0fa      	beq.n	8001674 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	2b05      	cmp	r3, #5
 8001686:	d101      	bne.n	800168c <SD_TxDataBlock+0x7c>
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <SD_TxDataBlock+0x7e>

	return FALSE;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	6039      	str	r1, [r7, #0]
 80016a0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80016a2:	f7ff ff13 	bl	80014cc <SD_ReadyWait>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2bff      	cmp	r3, #255	; 0xff
 80016aa:	d001      	beq.n	80016b0 <SD_SendCmd+0x1a>
 80016ac:	23ff      	movs	r3, #255	; 0xff
 80016ae:	e042      	b.n	8001736 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff feac 	bl	8001410 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	0e1b      	lsrs	r3, r3, #24
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fea6 	bl	8001410 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	0c1b      	lsrs	r3, r3, #16
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fea0 	bl	8001410 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fe9a 	bl	8001410 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fe95 	bl	8001410 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b40      	cmp	r3, #64	; 0x40
 80016ea:	d102      	bne.n	80016f2 <SD_SendCmd+0x5c>
 80016ec:	2395      	movs	r3, #149	; 0x95
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e007      	b.n	8001702 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b48      	cmp	r3, #72	; 0x48
 80016f6:	d102      	bne.n	80016fe <SD_SendCmd+0x68>
 80016f8:	2387      	movs	r3, #135	; 0x87
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e001      	b.n	8001702 <SD_SendCmd+0x6c>
	else crc = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fe83 	bl	8001410 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b4c      	cmp	r3, #76	; 0x4c
 800170e:	d101      	bne.n	8001714 <SD_SendCmd+0x7e>
 8001710:	f7ff feb2 	bl	8001478 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001714:	230a      	movs	r3, #10
 8001716:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001718:	f7ff feae 	bl	8001478 <SPI_RxByte>
 800171c:	4603      	mov	r3, r0
 800171e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001720:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da05      	bge.n	8001734 <SD_SendCmd+0x9e>
 8001728:	7bbb      	ldrb	r3, [r7, #14]
 800172a:	3b01      	subs	r3, #1
 800172c:	73bb      	strb	r3, [r7, #14]
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f1      	bne.n	8001718 <SD_SendCmd+0x82>

	return res;
 8001734:	7b7b      	ldrb	r3, [r7, #13]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SD_disk_initialize+0x14>
 8001750:	2301      	movs	r3, #1
 8001752:	e0d1      	b.n	80018f8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001754:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <SD_disk_initialize+0x1c0>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <SD_disk_initialize+0x2a>
 8001762:	4b67      	ldr	r3, [pc, #412]	; (8001900 <SD_disk_initialize+0x1c0>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	e0c6      	b.n	80018f8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800176a:	f7ff fec9 	bl	8001500 <SD_PowerOn>

	/* slave select */
	SELECT();
 800176e:	f7ff fe35 	bl	80013dc <SELECT>

	/* check disk type */
	type = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001776:	2100      	movs	r1, #0
 8001778:	2040      	movs	r0, #64	; 0x40
 800177a:	f7ff ff8c 	bl	8001696 <SD_SendCmd>
 800177e:	4603      	mov	r3, r0
 8001780:	2b01      	cmp	r3, #1
 8001782:	f040 80a1 	bne.w	80018c8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001786:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <SD_disk_initialize+0x1c4>)
 8001788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800178c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800178e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001792:	2048      	movs	r0, #72	; 0x48
 8001794:	f7ff ff7f 	bl	8001696 <SD_SendCmd>
 8001798:	4603      	mov	r3, r0
 800179a:	2b01      	cmp	r3, #1
 800179c:	d155      	bne.n	800184a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e00c      	b.n	80017be <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80017a4:	7bfc      	ldrb	r4, [r7, #15]
 80017a6:	f7ff fe67 	bl	8001478 <SPI_RxByte>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	f104 0310 	add.w	r3, r4, #16
 80017b2:	443b      	add	r3, r7
 80017b4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	3301      	adds	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d9ef      	bls.n	80017a4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80017c4:	7abb      	ldrb	r3, [r7, #10]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d17e      	bne.n	80018c8 <SD_disk_initialize+0x188>
 80017ca:	7afb      	ldrb	r3, [r7, #11]
 80017cc:	2baa      	cmp	r3, #170	; 0xaa
 80017ce:	d17b      	bne.n	80018c8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80017d0:	2100      	movs	r1, #0
 80017d2:	2077      	movs	r0, #119	; 0x77
 80017d4:	f7ff ff5f 	bl	8001696 <SD_SendCmd>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d807      	bhi.n	80017ee <SD_disk_initialize+0xae>
 80017de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017e2:	2069      	movs	r0, #105	; 0x69
 80017e4:	f7ff ff57 	bl	8001696 <SD_SendCmd>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80017ee:	4b45      	ldr	r3, [pc, #276]	; (8001904 <SD_disk_initialize+0x1c4>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ec      	bne.n	80017d0 <SD_disk_initialize+0x90>
 80017f6:	e000      	b.n	80017fa <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80017f8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80017fa:	4b42      	ldr	r3, [pc, #264]	; (8001904 <SD_disk_initialize+0x1c4>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d062      	beq.n	80018c8 <SD_disk_initialize+0x188>
 8001802:	2100      	movs	r1, #0
 8001804:	207a      	movs	r0, #122	; 0x7a
 8001806:	f7ff ff46 	bl	8001696 <SD_SendCmd>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d15b      	bne.n	80018c8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e00c      	b.n	8001830 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001816:	7bfc      	ldrb	r4, [r7, #15]
 8001818:	f7ff fe2e 	bl	8001478 <SPI_RxByte>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	f104 0310 	add.w	r3, r4, #16
 8001824:	443b      	add	r3, r7
 8001826:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	3301      	adds	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d9ef      	bls.n	8001816 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001836:	7a3b      	ldrb	r3, [r7, #8]
 8001838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SD_disk_initialize+0x104>
 8001840:	230c      	movs	r3, #12
 8001842:	e000      	b.n	8001846 <SD_disk_initialize+0x106>
 8001844:	2304      	movs	r3, #4
 8001846:	73bb      	strb	r3, [r7, #14]
 8001848:	e03e      	b.n	80018c8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800184a:	2100      	movs	r1, #0
 800184c:	2077      	movs	r0, #119	; 0x77
 800184e:	f7ff ff22 	bl	8001696 <SD_SendCmd>
 8001852:	4603      	mov	r3, r0
 8001854:	2b01      	cmp	r3, #1
 8001856:	d808      	bhi.n	800186a <SD_disk_initialize+0x12a>
 8001858:	2100      	movs	r1, #0
 800185a:	2069      	movs	r0, #105	; 0x69
 800185c:	f7ff ff1b 	bl	8001696 <SD_SendCmd>
 8001860:	4603      	mov	r3, r0
 8001862:	2b01      	cmp	r3, #1
 8001864:	d801      	bhi.n	800186a <SD_disk_initialize+0x12a>
 8001866:	2302      	movs	r3, #2
 8001868:	e000      	b.n	800186c <SD_disk_initialize+0x12c>
 800186a:	2301      	movs	r3, #1
 800186c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800186e:	7bbb      	ldrb	r3, [r7, #14]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d10e      	bne.n	8001892 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001874:	2100      	movs	r1, #0
 8001876:	2077      	movs	r0, #119	; 0x77
 8001878:	f7ff ff0d 	bl	8001696 <SD_SendCmd>
 800187c:	4603      	mov	r3, r0
 800187e:	2b01      	cmp	r3, #1
 8001880:	d80e      	bhi.n	80018a0 <SD_disk_initialize+0x160>
 8001882:	2100      	movs	r1, #0
 8001884:	2069      	movs	r0, #105	; 0x69
 8001886:	f7ff ff06 	bl	8001696 <SD_SendCmd>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d107      	bne.n	80018a0 <SD_disk_initialize+0x160>
 8001890:	e00c      	b.n	80018ac <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001892:	2100      	movs	r1, #0
 8001894:	2041      	movs	r0, #65	; 0x41
 8001896:	f7ff fefe 	bl	8001696 <SD_SendCmd>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <SD_disk_initialize+0x1c4>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1e2      	bne.n	800186e <SD_disk_initialize+0x12e>
 80018a8:	e000      	b.n	80018ac <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80018aa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <SD_disk_initialize+0x1c4>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <SD_disk_initialize+0x184>
 80018b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b8:	2050      	movs	r0, #80	; 0x50
 80018ba:	f7ff feec 	bl	8001696 <SD_SendCmd>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SD_disk_initialize+0x188>
 80018c4:	2300      	movs	r3, #0
 80018c6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80018c8:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <SD_disk_initialize+0x1c8>)
 80018ca:	7bbb      	ldrb	r3, [r7, #14]
 80018cc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80018ce:	f7ff fd92 	bl	80013f6 <DESELECT>
	SPI_RxByte();
 80018d2:	f7ff fdd1 	bl	8001478 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80018d6:	7bbb      	ldrb	r3, [r7, #14]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <SD_disk_initialize+0x1c0>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SD_disk_initialize+0x1c0>)
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e001      	b.n	80018f2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80018ee:	f7ff fe49 	bl	8001584 <SD_PowerOff>
	}

	return Stat;
 80018f2:	4b03      	ldr	r3, [pc, #12]	; (8001900 <SD_disk_initialize+0x1c0>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd90      	pop	{r4, r7, pc}
 8001900:	20000002 	.word	0x20000002
 8001904:	20000530 	.word	0x20000530
 8001908:	20000534 	.word	0x20000534

0800190c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SD_disk_status+0x14>
 800191c:	2301      	movs	r3, #1
 800191e:	e002      	b.n	8001926 <SD_disk_status+0x1a>
	return Stat;
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <SD_disk_status+0x28>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000002 	.word	0x20000002

08001938 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <SD_disk_read+0x1c>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <SD_disk_read+0x20>
 8001954:	2304      	movs	r3, #4
 8001956:	e051      	b.n	80019fc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <SD_disk_read+0xcc>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SD_disk_read+0x32>
 8001966:	2303      	movs	r3, #3
 8001968:	e048      	b.n	80019fc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <SD_disk_read+0xd0>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <SD_disk_read+0x44>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	025b      	lsls	r3, r3, #9
 800197a:	607b      	str	r3, [r7, #4]

	SELECT();
 800197c:	f7ff fd2e 	bl	80013dc <SELECT>

	if (count == 1)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d111      	bne.n	80019aa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	2051      	movs	r0, #81	; 0x51
 800198a:	f7ff fe84 	bl	8001696 <SD_SendCmd>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d129      	bne.n	80019e8 <SD_disk_read+0xb0>
 8001994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001998:	68b8      	ldr	r0, [r7, #8]
 800199a:	f7ff fe0b 	bl	80015b4 <SD_RxDataBlock>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d021      	beq.n	80019e8 <SD_disk_read+0xb0>
 80019a4:	2300      	movs	r3, #0
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	e01e      	b.n	80019e8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	2052      	movs	r0, #82	; 0x52
 80019ae:	f7ff fe72 	bl	8001696 <SD_SendCmd>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d117      	bne.n	80019e8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80019b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019bc:	68b8      	ldr	r0, [r7, #8]
 80019be:	f7ff fdf9 	bl	80015b4 <SD_RxDataBlock>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00a      	beq.n	80019de <SD_disk_read+0xa6>
				buff += 512;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019ce:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ed      	bne.n	80019b8 <SD_disk_read+0x80>
 80019dc:	e000      	b.n	80019e0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80019de:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80019e0:	2100      	movs	r1, #0
 80019e2:	204c      	movs	r0, #76	; 0x4c
 80019e4:	f7ff fe57 	bl	8001696 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80019e8:	f7ff fd05 	bl	80013f6 <DESELECT>
	SPI_RxByte();
 80019ec:	f7ff fd44 	bl	8001478 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf14      	ite	ne
 80019f6:	2301      	movne	r3, #1
 80019f8:	2300      	moveq	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000002 	.word	0x20000002
 8001a08:	20000534 	.word	0x20000534

08001a0c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <SD_disk_write+0x1c>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <SD_disk_write+0x20>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	e06b      	b.n	8001b04 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001a2c:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <SD_disk_write+0x100>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SD_disk_write+0x32>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e062      	b.n	8001b04 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001a3e:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <SD_disk_write+0x100>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SD_disk_write+0x44>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e059      	b.n	8001b04 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001a50:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <SD_disk_write+0x104>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <SD_disk_write+0x56>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	025b      	lsls	r3, r3, #9
 8001a60:	607b      	str	r3, [r7, #4]

	SELECT();
 8001a62:	f7ff fcbb 	bl	80013dc <SELECT>

	if (count == 1)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d110      	bne.n	8001a8e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	2058      	movs	r0, #88	; 0x58
 8001a70:	f7ff fe11 	bl	8001696 <SD_SendCmd>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d13a      	bne.n	8001af0 <SD_disk_write+0xe4>
 8001a7a:	21fe      	movs	r1, #254	; 0xfe
 8001a7c:	68b8      	ldr	r0, [r7, #8]
 8001a7e:	f7ff fdc7 	bl	8001610 <SD_TxDataBlock>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d033      	beq.n	8001af0 <SD_disk_write+0xe4>
			count = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	e030      	b.n	8001af0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <SD_disk_write+0x104>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2077      	movs	r0, #119	; 0x77
 8001a9e:	f7ff fdfa 	bl	8001696 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001aa2:	6839      	ldr	r1, [r7, #0]
 8001aa4:	2057      	movs	r0, #87	; 0x57
 8001aa6:	f7ff fdf6 	bl	8001696 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	2059      	movs	r0, #89	; 0x59
 8001aae:	f7ff fdf2 	bl	8001696 <SD_SendCmd>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d11b      	bne.n	8001af0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001ab8:	21fc      	movs	r1, #252	; 0xfc
 8001aba:	68b8      	ldr	r0, [r7, #8]
 8001abc:	f7ff fda8 	bl	8001610 <SD_TxDataBlock>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00a      	beq.n	8001adc <SD_disk_write+0xd0>
				buff += 512;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001acc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ee      	bne.n	8001ab8 <SD_disk_write+0xac>
 8001ada:	e000      	b.n	8001ade <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001adc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001ade:	21fd      	movs	r1, #253	; 0xfd
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff fd95 	bl	8001610 <SD_TxDataBlock>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <SD_disk_write+0xe4>
			{
				count = 1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001af0:	f7ff fc81 	bl	80013f6 <DESELECT>
	SPI_RxByte();
 8001af4:	f7ff fcc0 	bl	8001478 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf14      	ite	ne
 8001afe:	2301      	movne	r3, #1
 8001b00:	2300      	moveq	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000002 	.word	0x20000002
 8001b10:	20000534 	.word	0x20000534

08001b14 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b08b      	sub	sp, #44	; 0x2c
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	603a      	str	r2, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	460b      	mov	r3, r1
 8001b22:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SD_disk_ioctl+0x1e>
 8001b2e:	2304      	movs	r3, #4
 8001b30:	e115      	b.n	8001d5e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d124      	bne.n	8001b88 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d012      	beq.n	8001b6c <SD_disk_ioctl+0x58>
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	dc1a      	bgt.n	8001b80 <SD_disk_ioctl+0x6c>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <SD_disk_ioctl+0x40>
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d006      	beq.n	8001b60 <SD_disk_ioctl+0x4c>
 8001b52:	e015      	b.n	8001b80 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001b54:	f7ff fd16 	bl	8001584 <SD_PowerOff>
			res = RES_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b5e:	e0fc      	b.n	8001d5a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001b60:	f7ff fcce 	bl	8001500 <SD_PowerOn>
			res = RES_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b6a:	e0f6      	b.n	8001d5a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	1c5c      	adds	r4, r3, #1
 8001b70:	f7ff fd14 	bl	800159c <SD_CheckPower>
 8001b74:	4603      	mov	r3, r0
 8001b76:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b7e:	e0ec      	b.n	8001d5a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001b80:	2304      	movs	r3, #4
 8001b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b86:	e0e8      	b.n	8001d5a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b88:	4b77      	ldr	r3, [pc, #476]	; (8001d68 <SD_disk_ioctl+0x254>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SD_disk_ioctl+0x86>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0e1      	b.n	8001d5e <SD_disk_ioctl+0x24a>

		SELECT();
 8001b9a:	f7ff fc1f 	bl	80013dc <SELECT>

		switch (ctrl)
 8001b9e:	79bb      	ldrb	r3, [r7, #6]
 8001ba0:	2b0d      	cmp	r3, #13
 8001ba2:	f200 80cb 	bhi.w	8001d3c <SD_disk_ioctl+0x228>
 8001ba6:	a201      	add	r2, pc, #4	; (adr r2, 8001bac <SD_disk_ioctl+0x98>)
 8001ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bac:	08001ca7 	.word	0x08001ca7
 8001bb0:	08001be5 	.word	0x08001be5
 8001bb4:	08001c97 	.word	0x08001c97
 8001bb8:	08001d3d 	.word	0x08001d3d
 8001bbc:	08001d3d 	.word	0x08001d3d
 8001bc0:	08001d3d 	.word	0x08001d3d
 8001bc4:	08001d3d 	.word	0x08001d3d
 8001bc8:	08001d3d 	.word	0x08001d3d
 8001bcc:	08001d3d 	.word	0x08001d3d
 8001bd0:	08001d3d 	.word	0x08001d3d
 8001bd4:	08001d3d 	.word	0x08001d3d
 8001bd8:	08001cb9 	.word	0x08001cb9
 8001bdc:	08001cdd 	.word	0x08001cdd
 8001be0:	08001d01 	.word	0x08001d01
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001be4:	2100      	movs	r1, #0
 8001be6:	2049      	movs	r0, #73	; 0x49
 8001be8:	f7ff fd55 	bl	8001696 <SD_SendCmd>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 80a8 	bne.w	8001d44 <SD_disk_ioctl+0x230>
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fcda 	bl	80015b4 <SD_RxDataBlock>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 809e 	beq.w	8001d44 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001c08:	7b3b      	ldrb	r3, [r7, #12]
 8001c0a:	099b      	lsrs	r3, r3, #6
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d10e      	bne.n	8001c30 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001c12:	7d7b      	ldrb	r3, [r7, #21]
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	7d3b      	ldrb	r3, [r7, #20]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001c26:	8bfb      	ldrh	r3, [r7, #30]
 8001c28:	029a      	lsls	r2, r3, #10
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e02e      	b.n	8001c8e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001c30:	7c7b      	ldrb	r3, [r7, #17]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	7dbb      	ldrb	r3, [r7, #22]
 8001c3a:	09db      	lsrs	r3, r3, #7
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	7d7b      	ldrb	r3, [r7, #21]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f003 0306 	and.w	r3, r3, #6
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	3302      	adds	r3, #2
 8001c54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001c58:	7d3b      	ldrb	r3, [r7, #20]
 8001c5a:	099b      	lsrs	r3, r3, #6
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	7cfb      	ldrb	r3, [r7, #19]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	7cbb      	ldrb	r3, [r7, #18]
 8001c6e:	029b      	lsls	r3, r3, #10
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001c80:	8bfa      	ldrh	r2, [r7, #30]
 8001c82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c86:	3b09      	subs	r3, #9
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001c94:	e056      	b.n	8001d44 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ca4:	e055      	b.n	8001d52 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001ca6:	f7ff fc11 	bl	80014cc <SD_ReadyWait>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2bff      	cmp	r3, #255	; 0xff
 8001cae:	d14b      	bne.n	8001d48 <SD_disk_ioctl+0x234>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001cb6:	e047      	b.n	8001d48 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2049      	movs	r0, #73	; 0x49
 8001cbc:	f7ff fceb 	bl	8001696 <SD_SendCmd>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d142      	bne.n	8001d4c <SD_disk_ioctl+0x238>
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	6a38      	ldr	r0, [r7, #32]
 8001cca:	f7ff fc73 	bl	80015b4 <SD_RxDataBlock>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d03b      	beq.n	8001d4c <SD_disk_ioctl+0x238>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001cda:	e037      	b.n	8001d4c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001cdc:	2100      	movs	r1, #0
 8001cde:	204a      	movs	r0, #74	; 0x4a
 8001ce0:	f7ff fcd9 	bl	8001696 <SD_SendCmd>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d132      	bne.n	8001d50 <SD_disk_ioctl+0x23c>
 8001cea:	2110      	movs	r1, #16
 8001cec:	6a38      	ldr	r0, [r7, #32]
 8001cee:	f7ff fc61 	bl	80015b4 <SD_RxDataBlock>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d02b      	beq.n	8001d50 <SD_disk_ioctl+0x23c>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001cfe:	e027      	b.n	8001d50 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001d00:	2100      	movs	r1, #0
 8001d02:	207a      	movs	r0, #122	; 0x7a
 8001d04:	f7ff fcc7 	bl	8001696 <SD_SendCmd>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d116      	bne.n	8001d3c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d14:	e00b      	b.n	8001d2e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001d16:	6a3c      	ldr	r4, [r7, #32]
 8001d18:	1c63      	adds	r3, r4, #1
 8001d1a:	623b      	str	r3, [r7, #32]
 8001d1c:	f7ff fbac 	bl	8001478 <SPI_RxByte>
 8001d20:	4603      	mov	r3, r0
 8001d22:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001d24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d9ef      	bls.n	8001d16 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d42:	e006      	b.n	8001d52 <SD_disk_ioctl+0x23e>
			break;
 8001d44:	bf00      	nop
 8001d46:	e004      	b.n	8001d52 <SD_disk_ioctl+0x23e>
			break;
 8001d48:	bf00      	nop
 8001d4a:	e002      	b.n	8001d52 <SD_disk_ioctl+0x23e>
			break;
 8001d4c:	bf00      	nop
 8001d4e:	e000      	b.n	8001d52 <SD_disk_ioctl+0x23e>
			break;
 8001d50:	bf00      	nop
		}

		DESELECT();
 8001d52:	f7ff fb50 	bl	80013f6 <DESELECT>
		SPI_RxByte();
 8001d56:	f7ff fb8f 	bl	8001478 <SPI_RxByte>
	}

	return res;
 8001d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	372c      	adds	r7, #44	; 0x2c
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000002 	.word	0x20000002

08001d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d70:	f000 fef0 	bl	8002b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d74:	f000 f85a 	bl	8001e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d78:	f000 f9a8 	bl	80020cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d7c:	f000 f976 	bl	800206c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001d80:	f000 f8f8 	bl	8001f74 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001d84:	f000 f8b6 	bl	8001ef4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001d88:	f000 f932 	bl	8001ff0 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001d8c:	f004 fedc 	bl	8006b48 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  GMG12864_Init();
 8001d90:	f7fe fdc0 	bl	8000914 <GMG12864_Init>
  INA219_Init(&ina219, &hi2c1, INA219_ADDRESS);
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	491c      	ldr	r1, [pc, #112]	; (8001e08 <main+0x9c>)
 8001d98:	481c      	ldr	r0, [pc, #112]	; (8001e0c <main+0xa0>)
 8001d9a:	f7ff faeb 	bl	8001374 <INA219_Init>
  t_ina219 = HAL_GetTick();
 8001d9e:	f000 ff33 	bl	8002c08 <HAL_GetTick>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <main+0xa4>)
 8001da6:	6013      	str	r3, [r2, #0]
  t_gmg12864 = HAL_GetTick();
 8001da8:	f000 ff2e 	bl	8002c08 <HAL_GetTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <main+0xa8>)
 8001db0:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 8001db2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001db6:	f000 ff33 	bl	8002c20 <HAL_Delay>
  f_mount(&fs, "", 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	4916      	ldr	r1, [pc, #88]	; (8001e18 <main+0xac>)
 8001dbe:	4817      	ldr	r0, [pc, #92]	; (8001e1c <main+0xb0>)
 8001dc0:	f007 fba6 	bl	8009510 <f_mount>
  f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001dc4:	2213      	movs	r2, #19
 8001dc6:	4916      	ldr	r1, [pc, #88]	; (8001e20 <main+0xb4>)
 8001dc8:	4816      	ldr	r0, [pc, #88]	; (8001e24 <main+0xb8>)
 8001dca:	f007 fbeb 	bl	80095a4 <f_open>
  f_lseek(&fil, fil.fsize);
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <main+0xb8>)
 8001dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4812      	ldr	r0, [pc, #72]	; (8001e24 <main+0xb8>)
 8001dda:	f008 fa2d 	bl	800a238 <f_lseek>
  f_puts("Hello from Vladik\n", &fil);
 8001dde:	4911      	ldr	r1, [pc, #68]	; (8001e24 <main+0xb8>)
 8001de0:	4811      	ldr	r0, [pc, #68]	; (8001e28 <main+0xbc>)
 8001de2:	f008 fd57 	bl	800a894 <f_puts>
  f_close(&fil);
 8001de6:	480f      	ldr	r0, [pc, #60]	; (8001e24 <main+0xb8>)
 8001de8:	f008 f9fb 	bl	800a1e2 <f_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_state_of_relays();
 8001dec:	f000 fb62 	bl	80024b4 <read_state_of_relays>
	  get_param_from_ina219();
 8001df0:	f000 fada 	bl	80023a8 <get_param_from_ina219>
	  automatik_mode();
 8001df4:	f000 fa5a 	bl	80022ac <automatik_mode>
	  manual_mode_func();
 8001df8:	f000 f9ea 	bl	80021d0 <manual_mode_func>
	  mode_change_func();
 8001dfc:	f000 fb34 	bl	8002468 <mode_change_func>
	  print_gmg12864_level_1();
 8001e00:	f000 fb88 	bl	8002514 <print_gmg12864_level_1>
	  read_state_of_relays();
 8001e04:	e7f2      	b.n	8001dec <main+0x80>
 8001e06:	bf00      	nop
 8001e08:	20000538 	.word	0x20000538
 8001e0c:	2000272c 	.word	0x2000272c
 8001e10:	2000273c 	.word	0x2000273c
 8001e14:	20002740 	.word	0x20002740
 8001e18:	0800b3ec 	.word	0x0800b3ec
 8001e1c:	200006d0 	.word	0x200006d0
 8001e20:	0800b3f0 	.word	0x0800b3f0
 8001e24:	20001700 	.word	0x20001700
 8001e28:	0800b3fc 	.word	0x0800b3fc

08001e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b0a6      	sub	sp, #152	; 0x98
 8001e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e36:	2228      	movs	r2, #40	; 0x28
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f008 fe54 	bl	800aae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2258      	movs	r2, #88	; 0x58
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f008 fe46 	bl	800aae8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e64:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e66:	2301      	movs	r3, #1
 8001e68:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e70:	2302      	movs	r3, #2
 8001e72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e7e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 f83f 	bl	8003f14 <HAL_RCC_OscConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001e9c:	f000 fc3e 	bl	800271c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001eba:	2102      	movs	r1, #2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f87d 	bl	8004fbc <HAL_RCC_ClockConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001ec8:	f000 fc28 	bl	800271c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001ecc:	2322      	movs	r3, #34	; 0x22
 8001ece:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 faa4 	bl	8005428 <HAL_RCCEx_PeriphCLKConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001ee6:	f000 fc19 	bl	800271c <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3798      	adds	r7, #152	; 0x98
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001efa:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <MX_I2C1_Init+0x78>)
 8001efc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <MX_I2C1_Init+0x7c>)
 8001f02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f2e:	480e      	ldr	r0, [pc, #56]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f30:	f001 f966 	bl	8003200 <HAL_I2C_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f3a:	f000 fbef 	bl	800271c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4809      	ldr	r0, [pc, #36]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f42:	f001 ff4f 	bl	8003de4 <HAL_I2CEx_ConfigAnalogFilter>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f4c:	f000 fbe6 	bl	800271c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f50:	2100      	movs	r1, #0
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f54:	f001 ff91 	bl	8003e7a <HAL_I2CEx_ConfigDigitalFilter>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f5e:	f000 fbdd 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000538 	.word	0x20000538
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	2000090e 	.word	0x2000090e

08001f74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <MX_SPI1_Init+0x78>)
 8001f7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001f80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001f8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001faa:	2210      	movs	r2, #16
 8001fac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001fce:	2208      	movs	r2, #8
 8001fd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_SPI1_Init+0x74>)
 8001fd4:	f003 fc46 	bl	8005864 <HAL_SPI_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001fde:	f000 fb9d 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000584 	.word	0x20000584
 8001fec:	40013000 	.word	0x40013000

08001ff0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <MX_SPI2_Init+0x74>)
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <MX_SPI2_Init+0x78>)
 8001ff8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_SPI2_Init+0x74>)
 8001ffc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002000:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MX_SPI2_Init+0x74>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_SPI2_Init+0x74>)
 800200a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800200e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_SPI2_Init+0x74>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <MX_SPI2_Init+0x74>)
 8002018:	2200      	movs	r2, #0
 800201a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_SPI2_Init+0x74>)
 800201e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002022:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_SPI2_Init+0x74>)
 8002026:	2208      	movs	r2, #8
 8002028:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_SPI2_Init+0x74>)
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_SPI2_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_SPI2_Init+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_SPI2_Init+0x74>)
 800203e:	2207      	movs	r2, #7
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_SPI2_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_SPI2_Init+0x74>)
 800204a:	2208      	movs	r2, #8
 800204c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_SPI2_Init+0x74>)
 8002050:	f003 fc08 	bl	8005864 <HAL_SPI_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800205a:	f000 fb5f 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200005e8 	.word	0x200005e8
 8002068:	40003800 	.word	0x40003800

0800206c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_USART2_UART_Init+0x58>)
 8002072:	4a15      	ldr	r2, [pc, #84]	; (80020c8 <MX_USART2_UART_Init+0x5c>)
 8002074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <MX_USART2_UART_Init+0x58>)
 8002078:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800207c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_USART2_UART_Init+0x58>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_USART2_UART_Init+0x58>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_USART2_UART_Init+0x58>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_USART2_UART_Init+0x58>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_USART2_UART_Init+0x58>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_USART2_UART_Init+0x58>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <MX_USART2_UART_Init+0x58>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_USART2_UART_Init+0x58>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_USART2_UART_Init+0x58>)
 80020b0:	f004 f976 	bl	80063a0 <HAL_UART_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020ba:	f000 fb2f 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000064c 	.word	0x2000064c
 80020c8:	40004400 	.word	0x40004400

080020cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <MX_GPIO_Init+0xfc>)
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	4a38      	ldr	r2, [pc, #224]	; (80021c8 <MX_GPIO_Init+0xfc>)
 80020e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020ec:	6153      	str	r3, [r2, #20]
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <MX_GPIO_Init+0xfc>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020fa:	4b33      	ldr	r3, [pc, #204]	; (80021c8 <MX_GPIO_Init+0xfc>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4a32      	ldr	r2, [pc, #200]	; (80021c8 <MX_GPIO_Init+0xfc>)
 8002100:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002104:	6153      	str	r3, [r2, #20]
 8002106:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <MX_GPIO_Init+0xfc>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <MX_GPIO_Init+0xfc>)
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4a2c      	ldr	r2, [pc, #176]	; (80021c8 <MX_GPIO_Init+0xfc>)
 8002118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211c:	6153      	str	r3, [r2, #20]
 800211e:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <MX_GPIO_Init+0xfc>)
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <MX_GPIO_Init+0xfc>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	4a26      	ldr	r2, [pc, #152]	; (80021c8 <MX_GPIO_Init+0xfc>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6153      	str	r3, [r2, #20]
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <MX_GPIO_Init+0xfc>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, high_charge_relay_Pin|low_charge_relay_Pin|discharge_relay_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2107      	movs	r1, #7
 8002146:	4821      	ldr	r0, [pc, #132]	; (80021cc <MX_GPIO_Init+0x100>)
 8002148:	f001 f82a 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin|DC_Pin|user_led_Pin
 800214c:	2200      	movs	r2, #0
 800214e:	2173      	movs	r1, #115	; 0x73
 8002150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002154:	f001 f824 	bl	80031a0 <HAL_GPIO_WritePin>
                          |CS_SD_CARD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 8002158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800215c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800215e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	4817      	ldr	r0, [pc, #92]	; (80021cc <MX_GPIO_Init+0x100>)
 8002170:	f000 fe8c 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : high_charge_relay_Pin low_charge_relay_Pin discharge_relay_Pin */
  GPIO_InitStruct.Pin = high_charge_relay_Pin|low_charge_relay_Pin|discharge_relay_Pin;
 8002174:	2307      	movs	r3, #7
 8002176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002178:	2301      	movs	r3, #1
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	4810      	ldr	r0, [pc, #64]	; (80021cc <MX_GPIO_Init+0x100>)
 800218c:	f000 fe7e 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin RST_Pin DC_Pin user_led_Pin
                           CS_SD_CARD_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin|user_led_Pin
 8002190:	2373      	movs	r3, #115	; 0x73
 8002192:	617b      	str	r3, [r7, #20]
                          |CS_SD_CARD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021aa:	f000 fe6f 	bl	8002e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	2028      	movs	r0, #40	; 0x28
 80021b4:	f000 fe33 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021b8:	2028      	movs	r0, #40	; 0x28
 80021ba:	f000 fe4c 	bl	8002e56 <HAL_NVIC_EnableIRQ>

}
 80021be:	bf00      	nop
 80021c0:	3728      	adds	r7, #40	; 0x28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	48000800 	.word	0x48000800

080021d0 <manual_mode_func>:

/* USER CODE BEGIN 4 */
void manual_mode_func(){
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
	if(control_mode){
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <manual_mode_func+0xd0>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d05a      	beq.n	8002294 <manual_mode_func+0xc4>
		switch(manual_mode){
 80021de:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <manual_mode_func+0xd4>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d857      	bhi.n	8002296 <manual_mode_func+0xc6>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <manual_mode_func+0x1c>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	08002223 	.word	0x08002223
 80021f4:	08002249 	.word	0x08002249
 80021f8:	0800226f 	.word	0x0800226f
		case 0:
			high_charge_off();
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <manual_mode_func+0xd8>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a29      	ldr	r2, [pc, #164]	; (80022a8 <manual_mode_func+0xd8>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	6193      	str	r3, [r2, #24]
			low_charge_off();
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <manual_mode_func+0xd8>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <manual_mode_func+0xd8>)
 800220e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002212:	6193      	str	r3, [r2, #24]
			discharge_off();
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <manual_mode_func+0xd8>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <manual_mode_func+0xd8>)
 800221a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221e:	6193      	str	r3, [r2, #24]
			break;
 8002220:	e039      	b.n	8002296 <manual_mode_func+0xc6>
		case 1:
			high_charge_on();
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <manual_mode_func+0xd8>)
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <manual_mode_func+0xd8>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6193      	str	r3, [r2, #24]
			low_charge_off();
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <manual_mode_func+0xd8>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <manual_mode_func+0xd8>)
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	6193      	str	r3, [r2, #24]
			discharge_off();
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <manual_mode_func+0xd8>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	4a1a      	ldr	r2, [pc, #104]	; (80022a8 <manual_mode_func+0xd8>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002244:	6193      	str	r3, [r2, #24]
			break;
 8002246:	e026      	b.n	8002296 <manual_mode_func+0xc6>
		case 2:
			high_charge_off();
 8002248:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <manual_mode_func+0xd8>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <manual_mode_func+0xd8>)
 800224e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002252:	6193      	str	r3, [r2, #24]
			low_charge_on();
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <manual_mode_func+0xd8>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <manual_mode_func+0xd8>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	6193      	str	r3, [r2, #24]
			discharge_off();
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <manual_mode_func+0xd8>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <manual_mode_func+0xd8>)
 8002266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226a:	6193      	str	r3, [r2, #24]
			break;
 800226c:	e013      	b.n	8002296 <manual_mode_func+0xc6>
		case 3:
			high_charge_off();
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <manual_mode_func+0xd8>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <manual_mode_func+0xd8>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6193      	str	r3, [r2, #24]
			low_charge_off();
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <manual_mode_func+0xd8>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <manual_mode_func+0xd8>)
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	6193      	str	r3, [r2, #24]
			discharge_on();
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <manual_mode_func+0xd8>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <manual_mode_func+0xd8>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	6193      	str	r3, [r2, #24]
			break;
 8002292:	e000      	b.n	8002296 <manual_mode_func+0xc6>
		}
	}
 8002294:	bf00      	nop
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	20002748 	.word	0x20002748
 80022a4:	20002749 	.word	0x20002749
 80022a8:	48000800 	.word	0x48000800

080022ac <automatik_mode>:

void automatik_mode(){
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
	if(!control_mode){
 80022b0:	4b39      	ldr	r3, [pc, #228]	; (8002398 <automatik_mode+0xec>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d066      	beq.n	800238e <automatik_mode+0xe2>
		if(v_bus < 5100 && (discharge_enable == 0)){
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <automatik_mode+0xf0>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	f241 32eb 	movw	r2, #5099	; 0x13eb
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d819      	bhi.n	8002300 <automatik_mode+0x54>
 80022cc:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <automatik_mode+0xf4>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	f083 0301 	eor.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d012      	beq.n	8002300 <automatik_mode+0x54>
			low_charge_off();
 80022da:	4b32      	ldr	r3, [pc, #200]	; (80023a4 <automatik_mode+0xf8>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	4a31      	ldr	r2, [pc, #196]	; (80023a4 <automatik_mode+0xf8>)
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	6193      	str	r3, [r2, #24]
			discharge_off();
 80022e6:	4b2f      	ldr	r3, [pc, #188]	; (80023a4 <automatik_mode+0xf8>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	4a2e      	ldr	r2, [pc, #184]	; (80023a4 <automatik_mode+0xf8>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f0:	6193      	str	r3, [r2, #24]
			high_charge_on();
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <automatik_mode+0xf8>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	4a2b      	ldr	r2, [pc, #172]	; (80023a4 <automatik_mode+0xf8>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6193      	str	r3, [r2, #24]
 80022fe:	e027      	b.n	8002350 <automatik_mode+0xa4>
		}
		else if(v_bus > 7100 && (discharge_enable == 0)){
 8002300:	4b26      	ldr	r3, [pc, #152]	; (800239c <automatik_mode+0xf0>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 8002308:	4293      	cmp	r3, r2
 800230a:	d921      	bls.n	8002350 <automatik_mode+0xa4>
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <automatik_mode+0xf4>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	f083 0301 	eor.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01a      	beq.n	8002350 <automatik_mode+0xa4>
			high_charge_off();
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <automatik_mode+0xf8>)
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	4a21      	ldr	r2, [pc, #132]	; (80023a4 <automatik_mode+0xf8>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6193      	str	r3, [r2, #24]
			discharge_off();
 8002326:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <automatik_mode+0xf8>)
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <automatik_mode+0xf8>)
 800232c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002330:	6193      	str	r3, [r2, #24]
			low_charge_on();
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <automatik_mode+0xf8>)
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <automatik_mode+0xf8>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6193      	str	r3, [r2, #24]
			if(v_bus >= 7250){
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <automatik_mode+0xf0>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	f641 4251 	movw	r2, #7249	; 0x1c51
 8002346:	4293      	cmp	r3, r2
 8002348:	d902      	bls.n	8002350 <automatik_mode+0xa4>
				discharge_enable = 1;
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <automatik_mode+0xf4>)
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
			}
		}
		if(discharge_enable){
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <automatik_mode+0xf4>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01a      	beq.n	800238e <automatik_mode+0xe2>
			low_charge_off();
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <automatik_mode+0xf8>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <automatik_mode+0xf8>)
 800235e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002362:	6193      	str	r3, [r2, #24]
			high_charge_off();
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <automatik_mode+0xf8>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <automatik_mode+0xf8>)
 800236a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236e:	6193      	str	r3, [r2, #24]
			discharge_on();
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <automatik_mode+0xf8>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <automatik_mode+0xf8>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6193      	str	r3, [r2, #24]
			if(v_bus <= 5100){
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <automatik_mode+0xf0>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8002384:	4293      	cmp	r3, r2
 8002386:	d802      	bhi.n	800238e <automatik_mode+0xe2>
				discharge_enable = 0;
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <automatik_mode+0xf4>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	20002748 	.word	0x20002748
 800239c:	20002734 	.word	0x20002734
 80023a0:	20002747 	.word	0x20002747
 80023a4:	48000800 	.word	0x48000800

080023a8 <get_param_from_ina219>:

void get_param_from_ina219(){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
	if((HAL_GetTick() - t_ina219) > 100){
 80023ac:	f000 fc2c 	bl	8002c08 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <get_param_from_ina219+0x5c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	; 0x64
 80023ba:	d920      	bls.n	80023fe <get_param_from_ina219+0x56>
		t_ina219 = HAL_GetTick();
 80023bc:	f000 fc24 	bl	8002c08 <HAL_GetTick>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4a10      	ldr	r2, [pc, #64]	; (8002404 <get_param_from_ina219+0x5c>)
 80023c4:	6013      	str	r3, [r2, #0]
		v_bus = INA219_ReadBusVoltage(&ina219);
 80023c6:	4810      	ldr	r0, [pc, #64]	; (8002408 <get_param_from_ina219+0x60>)
 80023c8:	f7fe fee2 	bl	8001190 <INA219_ReadBusVoltage>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <get_param_from_ina219+0x64>)
 80023d2:	801a      	strh	r2, [r3, #0]
		v_shunt = INA219_ReadShuntVoltage(&ina219);
 80023d4:	480c      	ldr	r0, [pc, #48]	; (8002408 <get_param_from_ina219+0x60>)
 80023d6:	f7fe ff27 	bl	8001228 <INA219_ReadShuntVoltage>
 80023da:	4603      	mov	r3, r0
 80023dc:	461a      	mov	r2, r3
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <get_param_from_ina219+0x68>)
 80023e0:	801a      	strh	r2, [r3, #0]
		current = INA219_ReadCurrent(&ina219);
 80023e2:	4809      	ldr	r0, [pc, #36]	; (8002408 <get_param_from_ina219+0x60>)
 80023e4:	f7fe fef8 	bl	80011d8 <INA219_ReadCurrent>
 80023e8:	4603      	mov	r3, r0
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <get_param_from_ina219+0x6c>)
 80023ee:	801a      	strh	r2, [r3, #0]
		power = INA219_Read_Power(&ina219);
 80023f0:	4805      	ldr	r0, [pc, #20]	; (8002408 <get_param_from_ina219+0x60>)
 80023f2:	f7fe ff3d 	bl	8001270 <INA219_Read_Power>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <get_param_from_ina219+0x70>)
 80023fc:	801a      	strh	r2, [r3, #0]
	}
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2000273c 	.word	0x2000273c
 8002408:	2000272c 	.word	0x2000272c
 800240c:	20002734 	.word	0x20002734
 8002410:	20002736 	.word	0x20002736
 8002414:	20002738 	.word	0x20002738
 8002418:	2000273a 	.word	0x2000273a

0800241c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == (0x2000)){
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242c:	d112      	bne.n	8002454 <HAL_GPIO_EXTI_Callback+0x38>
		control_mode = !control_mode;
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_GPIO_EXTI_Callback+0x44>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_GPIO_EXTI_Callback+0x44>)
 800244c:	701a      	strb	r2, [r3, #0]
		flag_change_mode = 1;
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_GPIO_EXTI_Callback+0x48>)
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
	}
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	20002748 	.word	0x20002748
 8002464:	2000274a 	.word	0x2000274a

08002468 <mode_change_func>:

void mode_change_func(){
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
	if(flag_change_mode){
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <mode_change_func+0x44>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d014      	beq.n	80024a0 <mode_change_func+0x38>
		flag_change_mode = 0;
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <mode_change_func+0x44>)
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
		high_charge_off();
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <mode_change_func+0x48>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <mode_change_func+0x48>)
 8002482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002486:	6193      	str	r3, [r2, #24]
		low_charge_off();
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <mode_change_func+0x48>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <mode_change_func+0x48>)
 800248e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002492:	6193      	str	r3, [r2, #24]
		discharge_off();
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <mode_change_func+0x48>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <mode_change_func+0x48>)
 800249a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249e:	6193      	str	r3, [r2, #24]
	}
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	2000274a 	.word	0x2000274a
 80024b0:	48000800 	.word	0x48000800

080024b4 <read_state_of_relays>:

void read_state_of_relays(){
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	state_high_charge = read_state_of_high_charge();
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <read_state_of_relays+0x50>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <read_state_of_relays+0x54>)
 80024cc:	701a      	strb	r2, [r3, #0]
	state_low_charge = read_state_of_low_charge();
 80024ce:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <read_state_of_relays+0x50>)
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf14      	ite	ne
 80024da:	2301      	movne	r3, #1
 80024dc:	2300      	moveq	r3, #0
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <read_state_of_relays+0x58>)
 80024e2:	701a      	strb	r2, [r3, #0]
	state_discharge = read_state_of_discharge();
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <read_state_of_relays+0x50>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <read_state_of_relays+0x5c>)
 80024f8:	701a      	strb	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	48000800 	.word	0x48000800
 8002508:	20002744 	.word	0x20002744
 800250c:	20002745 	.word	0x20002745
 8002510:	20002746 	.word	0x20002746

08002514 <print_gmg12864_level_1>:

void print_gmg12864_level_1(){
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	if((HAL_GetTick() - t_gmg12864) > 200){
 8002518:	f000 fb76 	bl	8002c08 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <print_gmg12864_level_1+0x54>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2bc8      	cmp	r3, #200	; 0xc8
 8002526:	d91c      	bls.n	8002562 <print_gmg12864_level_1+0x4e>
		t_gmg12864 = HAL_GetTick();
 8002528:	f000 fb6e 	bl	8002c08 <HAL_GetTick>
 800252c:	4603      	mov	r3, r0
 800252e:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <print_gmg12864_level_1+0x54>)
 8002530:	6013      	str	r3, [r2, #0]
		GMG12864_first_line_level_1(0, 0);
 8002532:	2100      	movs	r1, #0
 8002534:	2000      	movs	r0, #0
 8002536:	f000 f819 	bl	800256c <GMG12864_first_line_level_1>
		GMG12864_second_line_level_1(0, 10);
 800253a:	210a      	movs	r1, #10
 800253c:	2000      	movs	r0, #0
 800253e:	f000 f839 	bl	80025b4 <GMG12864_second_line_level_1>
		GMG12864_third_line_level_1(0, 20);
 8002542:	2114      	movs	r1, #20
 8002544:	2000      	movs	r0, #0
 8002546:	f000 f859 	bl	80025fc <GMG12864_third_line_level_1>
		GMG12864_fourth_line_level_1(0, 30);
 800254a:	211e      	movs	r1, #30
 800254c:	2000      	movs	r0, #0
 800254e:	f000 f879 	bl	8002644 <GMG12864_fourth_line_level_1>
		GMG12864_fifth_line_level_1(0, 40);
 8002552:	2128      	movs	r1, #40	; 0x28
 8002554:	2000      	movs	r0, #0
 8002556:	f000 f899 	bl	800268c <GMG12864_fifth_line_level_1>
		GMG12864_sixth_line_level_1(0, 50);
 800255a:	2132      	movs	r1, #50	; 0x32
 800255c:	2000      	movs	r0, #0
 800255e:	f000 f8b9 	bl	80026d4 <GMG12864_sixth_line_level_1>
	}
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20002740 	.word	0x20002740

0800256c <GMG12864_first_line_level_1>:

void GMG12864_first_line_level_1(uint8_t x, uint8_t y){
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af02      	add	r7, sp, #8
 8002572:	4603      	mov	r3, r0
 8002574:	460a      	mov	r2, r1
 8002576:	71fb      	strb	r3, [r7, #7]
 8002578:	4613      	mov	r3, r2
 800257a:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Voltage is %d         ", v_bus);
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <GMG12864_first_line_level_1+0x3c>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	490a      	ldr	r1, [pc, #40]	; (80025ac <GMG12864_first_line_level_1+0x40>)
 8002584:	480a      	ldr	r0, [pc, #40]	; (80025b0 <GMG12864_first_line_level_1+0x44>)
 8002586:	f008 fab7 	bl	800aaf8 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 800258a:	79b9      	ldrb	r1, [r7, #6]
 800258c:	79f8      	ldrb	r0, [r7, #7]
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <GMG12864_first_line_level_1+0x44>)
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2300      	movs	r3, #0
 8002594:	2201      	movs	r2, #1
 8002596:	f7fe fc13 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 800259a:	f7fe fa7d 	bl	8000a98 <GMG12864_Update>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20002734 	.word	0x20002734
 80025ac:	0800b410 	.word	0x0800b410
 80025b0:	200000a4 	.word	0x200000a4

080025b4 <GMG12864_second_line_level_1>:

void GMG12864_second_line_level_1(uint8_t x, uint8_t y){
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	4603      	mov	r3, r0
 80025bc:	460a      	mov	r2, r1
 80025be:	71fb      	strb	r3, [r7, #7]
 80025c0:	4613      	mov	r3, r2
 80025c2:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Current is %d         ", current);
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <GMG12864_second_line_level_1+0x3c>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	490a      	ldr	r1, [pc, #40]	; (80025f4 <GMG12864_second_line_level_1+0x40>)
 80025cc:	480a      	ldr	r0, [pc, #40]	; (80025f8 <GMG12864_second_line_level_1+0x44>)
 80025ce:	f008 fa93 	bl	800aaf8 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 80025d2:	79b9      	ldrb	r1, [r7, #6]
 80025d4:	79f8      	ldrb	r0, [r7, #7]
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <GMG12864_second_line_level_1+0x44>)
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2300      	movs	r3, #0
 80025dc:	2201      	movs	r2, #1
 80025de:	f7fe fbef 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 80025e2:	f7fe fa59 	bl	8000a98 <GMG12864_Update>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20002738 	.word	0x20002738
 80025f4:	0800b428 	.word	0x0800b428
 80025f8:	200000a4 	.word	0x200000a4

080025fc <GMG12864_third_line_level_1>:

void GMG12864_third_line_level_1(uint8_t x, uint8_t y){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af02      	add	r7, sp, #8
 8002602:	4603      	mov	r3, r0
 8002604:	460a      	mov	r2, r1
 8002606:	71fb      	strb	r3, [r7, #7]
 8002608:	4613      	mov	r3, r2
 800260a:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Power is %d           ", power);
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <GMG12864_third_line_level_1+0x3c>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	490a      	ldr	r1, [pc, #40]	; (800263c <GMG12864_third_line_level_1+0x40>)
 8002614:	480a      	ldr	r0, [pc, #40]	; (8002640 <GMG12864_third_line_level_1+0x44>)
 8002616:	f008 fa6f 	bl	800aaf8 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 800261a:	79b9      	ldrb	r1, [r7, #6]
 800261c:	79f8      	ldrb	r0, [r7, #7]
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <GMG12864_third_line_level_1+0x44>)
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	2300      	movs	r3, #0
 8002624:	2201      	movs	r2, #1
 8002626:	f7fe fbcb 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 800262a:	f7fe fa35 	bl	8000a98 <GMG12864_Update>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000273a 	.word	0x2000273a
 800263c:	0800b440 	.word	0x0800b440
 8002640:	200000a4 	.word	0x200000a4

08002644 <GMG12864_fourth_line_level_1>:

void GMG12864_fourth_line_level_1(uint8_t x, uint8_t y){
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af02      	add	r7, sp, #8
 800264a:	4603      	mov	r3, r0
 800264c:	460a      	mov	r2, r1
 800264e:	71fb      	strb	r3, [r7, #7]
 8002650:	4613      	mov	r3, r2
 8002652:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "low charge %d         ", state_low_charge);
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <GMG12864_fourth_line_level_1+0x3c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <GMG12864_fourth_line_level_1+0x40>)
 800265c:	480a      	ldr	r0, [pc, #40]	; (8002688 <GMG12864_fourth_line_level_1+0x44>)
 800265e:	f008 fa4b 	bl	800aaf8 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8002662:	79b9      	ldrb	r1, [r7, #6]
 8002664:	79f8      	ldrb	r0, [r7, #7]
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <GMG12864_fourth_line_level_1+0x44>)
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2300      	movs	r3, #0
 800266c:	2201      	movs	r2, #1
 800266e:	f7fe fba7 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002672:	f7fe fa11 	bl	8000a98 <GMG12864_Update>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20002745 	.word	0x20002745
 8002684:	0800b458 	.word	0x0800b458
 8002688:	200000a4 	.word	0x200000a4

0800268c <GMG12864_fifth_line_level_1>:

void GMG12864_fifth_line_level_1(uint8_t x, uint8_t y){
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af02      	add	r7, sp, #8
 8002692:	4603      	mov	r3, r0
 8002694:	460a      	mov	r2, r1
 8002696:	71fb      	strb	r3, [r7, #7]
 8002698:	4613      	mov	r3, r2
 800269a:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "high charge %d         ", state_high_charge);
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <GMG12864_fifth_line_level_1+0x3c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	490a      	ldr	r1, [pc, #40]	; (80026cc <GMG12864_fifth_line_level_1+0x40>)
 80026a4:	480a      	ldr	r0, [pc, #40]	; (80026d0 <GMG12864_fifth_line_level_1+0x44>)
 80026a6:	f008 fa27 	bl	800aaf8 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 80026aa:	79b9      	ldrb	r1, [r7, #6]
 80026ac:	79f8      	ldrb	r0, [r7, #7]
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <GMG12864_fifth_line_level_1+0x44>)
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2300      	movs	r3, #0
 80026b4:	2201      	movs	r2, #1
 80026b6:	f7fe fb83 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 80026ba:	f7fe f9ed 	bl	8000a98 <GMG12864_Update>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20002744 	.word	0x20002744
 80026cc:	0800b470 	.word	0x0800b470
 80026d0:	200000a4 	.word	0x200000a4

080026d4 <GMG12864_sixth_line_level_1>:

void GMG12864_sixth_line_level_1(uint8_t x, uint8_t y){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af02      	add	r7, sp, #8
 80026da:	4603      	mov	r3, r0
 80026dc:	460a      	mov	r2, r1
 80026de:	71fb      	strb	r3, [r7, #7]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "discharge %d         ", state_discharge);
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <GMG12864_sixth_line_level_1+0x3c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	490a      	ldr	r1, [pc, #40]	; (8002714 <GMG12864_sixth_line_level_1+0x40>)
 80026ec:	480a      	ldr	r0, [pc, #40]	; (8002718 <GMG12864_sixth_line_level_1+0x44>)
 80026ee:	f008 fa03 	bl	800aaf8 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 80026f2:	79b9      	ldrb	r1, [r7, #6]
 80026f4:	79f8      	ldrb	r0, [r7, #7]
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <GMG12864_sixth_line_level_1+0x44>)
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2300      	movs	r3, #0
 80026fc:	2201      	movs	r2, #1
 80026fe:	f7fe fb5f 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002702:	f7fe f9c9 	bl	8000a98 <GMG12864_Update>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20002746 	.word	0x20002746
 8002714:	0800b488 	.word	0x0800b488
 8002718:	200000a4 	.word	0x200000a4

0800271c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
}
 8002722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002724:	e7fe      	b.n	8002724 <Error_Handler+0x8>
	...

08002728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_MspInit+0x44>)
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	4a0e      	ldr	r2, [pc, #56]	; (800276c <HAL_MspInit+0x44>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6193      	str	r3, [r2, #24]
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_MspInit+0x44>)
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_MspInit+0x44>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	4a08      	ldr	r2, [pc, #32]	; (800276c <HAL_MspInit+0x44>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	61d3      	str	r3, [r2, #28]
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_MspInit+0x44>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800275e:	2007      	movs	r0, #7
 8002760:	f000 fb52 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000

08002770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a26      	ldr	r2, [pc, #152]	; (8002828 <HAL_I2C_MspInit+0xb8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d145      	bne.n	800281e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <HAL_I2C_MspInit+0xbc>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	4a25      	ldr	r2, [pc, #148]	; (800282c <HAL_I2C_MspInit+0xbc>)
 8002798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279c:	6153      	str	r3, [r2, #20]
 800279e:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_I2C_MspInit+0xbc>)
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_I2C_MspInit+0xbc>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	4a1f      	ldr	r2, [pc, #124]	; (800282c <HAL_I2C_MspInit+0xbc>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b4:	6153      	str	r3, [r2, #20]
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_I2C_MspInit+0xbc>)
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c8:	2312      	movs	r3, #18
 80027ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d0:	2303      	movs	r3, #3
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027d4:	2304      	movs	r3, #4
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	4619      	mov	r1, r3
 80027de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e2:	f000 fb53 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ea:	2312      	movs	r3, #18
 80027ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f2:	2303      	movs	r3, #3
 80027f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027f6:	2304      	movs	r3, #4
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fa:	f107 0314 	add.w	r3, r7, #20
 80027fe:	4619      	mov	r1, r3
 8002800:	480b      	ldr	r0, [pc, #44]	; (8002830 <HAL_I2C_MspInit+0xc0>)
 8002802:	f000 fb43 	bl	8002e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_I2C_MspInit+0xbc>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	4a08      	ldr	r2, [pc, #32]	; (800282c <HAL_I2C_MspInit+0xbc>)
 800280c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002810:	61d3      	str	r3, [r2, #28]
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_I2C_MspInit+0xbc>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800281e:	bf00      	nop
 8002820:	3728      	adds	r7, #40	; 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40005400 	.word	0x40005400
 800282c:	40021000 	.word	0x40021000
 8002830:	48000400 	.word	0x48000400

08002834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	; 0x30
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3d      	ldr	r2, [pc, #244]	; (8002948 <HAL_SPI_MspInit+0x114>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d145      	bne.n	80028e2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_SPI_MspInit+0x118>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	4a3c      	ldr	r2, [pc, #240]	; (800294c <HAL_SPI_MspInit+0x118>)
 800285c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002860:	6193      	str	r3, [r2, #24]
 8002862:	4b3a      	ldr	r3, [pc, #232]	; (800294c <HAL_SPI_MspInit+0x118>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	4b37      	ldr	r3, [pc, #220]	; (800294c <HAL_SPI_MspInit+0x118>)
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4a36      	ldr	r2, [pc, #216]	; (800294c <HAL_SPI_MspInit+0x118>)
 8002874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002878:	6153      	str	r3, [r2, #20]
 800287a:	4b34      	ldr	r3, [pc, #208]	; (800294c <HAL_SPI_MspInit+0x118>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_SPI_MspInit+0x118>)
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4a30      	ldr	r2, [pc, #192]	; (800294c <HAL_SPI_MspInit+0x118>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6153      	str	r3, [r2, #20]
 8002892:	4b2e      	ldr	r3, [pc, #184]	; (800294c <HAL_SPI_MspInit+0x118>)
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ae:	2305      	movs	r3, #5
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b2:	f107 031c 	add.w	r3, r7, #28
 80028b6:	4619      	mov	r1, r3
 80028b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028bc:	f000 fae6 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028c0:	2308      	movs	r3, #8
 80028c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028d0:	2305      	movs	r3, #5
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	4619      	mov	r1, r3
 80028da:	481d      	ldr	r0, [pc, #116]	; (8002950 <HAL_SPI_MspInit+0x11c>)
 80028dc:	f000 fad6 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028e0:	e02d      	b.n	800293e <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <HAL_SPI_MspInit+0x120>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d128      	bne.n	800293e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <HAL_SPI_MspInit+0x118>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	4a16      	ldr	r2, [pc, #88]	; (800294c <HAL_SPI_MspInit+0x118>)
 80028f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f6:	61d3      	str	r3, [r2, #28]
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_SPI_MspInit+0x118>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_SPI_MspInit+0x118>)
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	4a10      	ldr	r2, [pc, #64]	; (800294c <HAL_SPI_MspInit+0x118>)
 800290a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800290e:	6153      	str	r3, [r2, #20]
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_SPI_MspInit+0x118>)
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800291c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800292e:	2305      	movs	r3, #5
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	4805      	ldr	r0, [pc, #20]	; (8002950 <HAL_SPI_MspInit+0x11c>)
 800293a:	f000 faa7 	bl	8002e8c <HAL_GPIO_Init>
}
 800293e:	bf00      	nop
 8002940:	3730      	adds	r7, #48	; 0x30
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40013000 	.word	0x40013000
 800294c:	40021000 	.word	0x40021000
 8002950:	48000400 	.word	0x48000400
 8002954:	40003800 	.word	0x40003800

08002958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a17      	ldr	r2, [pc, #92]	; (80029d4 <HAL_UART_MspInit+0x7c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d128      	bne.n	80029cc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_UART_MspInit+0x80>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4a16      	ldr	r2, [pc, #88]	; (80029d8 <HAL_UART_MspInit+0x80>)
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	61d3      	str	r3, [r2, #28]
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_UART_MspInit+0x80>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_UART_MspInit+0x80>)
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <HAL_UART_MspInit+0x80>)
 8002998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299c:	6153      	str	r3, [r2, #20]
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <HAL_UART_MspInit+0x80>)
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029aa:	230c      	movs	r3, #12
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ba:	2307      	movs	r3, #7
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	4619      	mov	r1, r3
 80029c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c8:	f000 fa60 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40004400 	.word	0x40004400
 80029d8:	40021000 	.word	0x40021000

080029dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <NMI_Handler+0x4>

080029e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e6:	e7fe      	b.n	80029e6 <HardFault_Handler+0x4>

080029e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029ec:	e7fe      	b.n	80029ec <MemManage_Handler+0x4>

080029ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f2:	e7fe      	b.n	80029f2 <BusFault_Handler+0x4>

080029f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f8:	e7fe      	b.n	80029f8 <UsageFault_Handler+0x4>

080029fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <SysTick_Handler+0x34>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <SysTick_Handler+0x18>
			Timer1--;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <SysTick_Handler+0x34>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <SysTick_Handler+0x34>)
 8002a3a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <SysTick_Handler+0x38>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <SysTick_Handler+0x2c>
			Timer2--;
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SysTick_Handler+0x38>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <SysTick_Handler+0x38>)
 8002a4e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a50:	f000 f8c6 	bl	8002be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000530 	.word	0x20000530
 8002a5c:	20000532 	.word	0x20000532

08002a60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(user_button_Pin);
 8002a64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a68:	f000 fbb2 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <_sbrk+0x5c>)
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <_sbrk+0x60>)
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <_sbrk+0x64>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <_sbrk+0x64>)
 8002a8e:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <_sbrk+0x68>)
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d207      	bcs.n	8002ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa0:	f007 fff8 	bl	800aa94 <__errno>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	e009      	b.n	8002ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <_sbrk+0x64>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <_sbrk+0x64>)
 8002ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20010000 	.word	0x20010000
 8002ad0:	00000400 	.word	0x00000400
 8002ad4:	2000274c 	.word	0x2000274c
 8002ad8:	20002998 	.word	0x20002998

08002adc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <SystemInit+0x20>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <SystemInit+0x20>)
 8002ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b04:	480d      	ldr	r0, [pc, #52]	; (8002b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b06:	490e      	ldr	r1, [pc, #56]	; (8002b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b08:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <LoopForever+0xe>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b0c:	e002      	b.n	8002b14 <LoopCopyDataInit>

08002b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b12:	3304      	adds	r3, #4

08002b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b18:	d3f9      	bcc.n	8002b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b1a:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b1c:	4c0b      	ldr	r4, [pc, #44]	; (8002b4c <LoopForever+0x16>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b20:	e001      	b.n	8002b26 <LoopFillZerobss>

08002b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b24:	3204      	adds	r2, #4

08002b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b28:	d3fb      	bcc.n	8002b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b2a:	f7ff ffd7 	bl	8002adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b2e:	f007 ffb7 	bl	800aaa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b32:	f7ff f91b 	bl	8001d6c <main>

08002b36 <LoopForever>:

LoopForever:
    b LoopForever
 8002b36:	e7fe      	b.n	8002b36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b40:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002b44:	0800bfc0 	.word	0x0800bfc0
  ldr r2, =_sbss
 8002b48:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002b4c:	20002998 	.word	0x20002998

08002b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b50:	e7fe      	b.n	8002b50 <ADC1_2_IRQHandler>
	...

08002b54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <HAL_Init+0x28>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <HAL_Init+0x28>)
 8002b5e:	f043 0310 	orr.w	r3, r3, #16
 8002b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b64:	2003      	movs	r0, #3
 8002b66:	f000 f94f 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f000 f808 	bl	8002b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b70:	f7ff fdda 	bl	8002728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40022000 	.word	0x40022000

08002b80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_InitTick+0x54>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_InitTick+0x58>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f967 	bl	8002e72 <HAL_SYSTICK_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00e      	b.n	8002bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b0f      	cmp	r3, #15
 8002bb2:	d80a      	bhi.n	8002bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f000 f92f 	bl	8002e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc0:	4a06      	ldr	r2, [pc, #24]	; (8002bdc <HAL_InitTick+0x5c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000004 	.word	0x20000004
 8002bd8:	2000000c 	.word	0x2000000c
 8002bdc:	20000008 	.word	0x20000008

08002be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_IncTick+0x20>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_IncTick+0x24>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <HAL_IncTick+0x24>)
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	2000000c 	.word	0x2000000c
 8002c04:	20002750 	.word	0x20002750

08002c08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_GetTick+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20002750 	.word	0x20002750

08002c20 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff ffee 	bl	8002c08 <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d005      	beq.n	8002c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_Delay+0x44>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c46:	bf00      	nop
 8002c48:	f7ff ffde 	bl	8002c08 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d8f7      	bhi.n	8002c48 <HAL_Delay+0x28>
  {
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2000000c 	.word	0x2000000c

08002c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	; (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60d3      	str	r3, [r2, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 0307 	and.w	r3, r3, #7
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0b      	blt.n	8002cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4907      	ldr	r1, [pc, #28]	; (8002d04 <__NVIC_EnableIRQ+0x38>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	; (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	; (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	bf28      	it	cs
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	4313      	orrs	r3, r2
         );
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	; 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd4:	d301      	bcc.n	8002dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <SysTick_Config+0x40>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de2:	210f      	movs	r1, #15
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f7ff ff8e 	bl	8002d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <SysTick_Config+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <SysTick_Config+0x40>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff29 	bl	8002c68 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e30:	f7ff ff3e 	bl	8002cb0 <__NVIC_GetPriorityGrouping>
 8002e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ff8e 	bl	8002d5c <NVIC_EncodePriority>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff5d 	bl	8002d08 <__NVIC_SetPriority>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff31 	bl	8002ccc <__NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ffa2 	bl	8002dc4 <SysTick_Config>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e9a:	e160      	b.n	800315e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8152 	beq.w	8003158 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d005      	beq.n	8002ecc <HAL_GPIO_Init+0x40>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d130      	bne.n	8002f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f02:	2201      	movs	r2, #1
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f003 0201 	and.w	r2, r3, #1
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d017      	beq.n	8002f6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d123      	bne.n	8002fbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	08da      	lsrs	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3208      	adds	r2, #8
 8002f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	08da      	lsrs	r2, r3, #3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3208      	adds	r2, #8
 8002fb8:	6939      	ldr	r1, [r7, #16]
 8002fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	2203      	movs	r2, #3
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 0203 	and.w	r2, r3, #3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80ac 	beq.w	8003158 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003000:	4b5e      	ldr	r3, [pc, #376]	; (800317c <HAL_GPIO_Init+0x2f0>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4a5d      	ldr	r2, [pc, #372]	; (800317c <HAL_GPIO_Init+0x2f0>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6193      	str	r3, [r2, #24]
 800300c:	4b5b      	ldr	r3, [pc, #364]	; (800317c <HAL_GPIO_Init+0x2f0>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003018:	4a59      	ldr	r2, [pc, #356]	; (8003180 <HAL_GPIO_Init+0x2f4>)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	089b      	lsrs	r3, r3, #2
 800301e:	3302      	adds	r3, #2
 8003020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003042:	d025      	beq.n	8003090 <HAL_GPIO_Init+0x204>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a4f      	ldr	r2, [pc, #316]	; (8003184 <HAL_GPIO_Init+0x2f8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d01f      	beq.n	800308c <HAL_GPIO_Init+0x200>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a4e      	ldr	r2, [pc, #312]	; (8003188 <HAL_GPIO_Init+0x2fc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d019      	beq.n	8003088 <HAL_GPIO_Init+0x1fc>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a4d      	ldr	r2, [pc, #308]	; (800318c <HAL_GPIO_Init+0x300>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_GPIO_Init+0x1f8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a4c      	ldr	r2, [pc, #304]	; (8003190 <HAL_GPIO_Init+0x304>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00d      	beq.n	8003080 <HAL_GPIO_Init+0x1f4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a4b      	ldr	r2, [pc, #300]	; (8003194 <HAL_GPIO_Init+0x308>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d007      	beq.n	800307c <HAL_GPIO_Init+0x1f0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a4a      	ldr	r2, [pc, #296]	; (8003198 <HAL_GPIO_Init+0x30c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_GPIO_Init+0x1ec>
 8003074:	2306      	movs	r3, #6
 8003076:	e00c      	b.n	8003092 <HAL_GPIO_Init+0x206>
 8003078:	2307      	movs	r3, #7
 800307a:	e00a      	b.n	8003092 <HAL_GPIO_Init+0x206>
 800307c:	2305      	movs	r3, #5
 800307e:	e008      	b.n	8003092 <HAL_GPIO_Init+0x206>
 8003080:	2304      	movs	r3, #4
 8003082:	e006      	b.n	8003092 <HAL_GPIO_Init+0x206>
 8003084:	2303      	movs	r3, #3
 8003086:	e004      	b.n	8003092 <HAL_GPIO_Init+0x206>
 8003088:	2302      	movs	r3, #2
 800308a:	e002      	b.n	8003092 <HAL_GPIO_Init+0x206>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_GPIO_Init+0x206>
 8003090:	2300      	movs	r3, #0
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	f002 0203 	and.w	r2, r2, #3
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	4093      	lsls	r3, r2
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030a2:	4937      	ldr	r1, [pc, #220]	; (8003180 <HAL_GPIO_Init+0x2f4>)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b0:	4b3a      	ldr	r3, [pc, #232]	; (800319c <HAL_GPIO_Init+0x310>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030d4:	4a31      	ldr	r2, [pc, #196]	; (800319c <HAL_GPIO_Init+0x310>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030da:	4b30      	ldr	r3, [pc, #192]	; (800319c <HAL_GPIO_Init+0x310>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030fe:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_GPIO_Init+0x310>)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_GPIO_Init+0x310>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003128:	4a1c      	ldr	r2, [pc, #112]	; (800319c <HAL_GPIO_Init+0x310>)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_GPIO_Init+0x310>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	43db      	mvns	r3, r3
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003152:	4a12      	ldr	r2, [pc, #72]	; (800319c <HAL_GPIO_Init+0x310>)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	f47f ae97 	bne.w	8002e9c <HAL_GPIO_Init+0x10>
  }
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40021000 	.word	0x40021000
 8003180:	40010000 	.word	0x40010000
 8003184:	48000400 	.word	0x48000400
 8003188:	48000800 	.word	0x48000800
 800318c:	48000c00 	.word	0x48000c00
 8003190:	48001000 	.word	0x48001000
 8003194:	48001400 	.word	0x48001400
 8003198:	48001800 	.word	0x48001800
 800319c:	40010400 	.word	0x40010400

080031a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
 80031ac:	4613      	mov	r3, r2
 80031ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b0:	787b      	ldrb	r3, [r7, #1]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031bc:	e002      	b.n	80031c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031be:	887a      	ldrh	r2, [r7, #2]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031e6:	4a05      	ldr	r2, [pc, #20]	; (80031fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f914 	bl	800241c <HAL_GPIO_EXTI_Callback>
  }
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40010400 	.word	0x40010400

08003200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e081      	b.n	8003316 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff faa2 	bl	8002770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	; 0x24
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003250:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003260:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	e006      	b.n	8003288 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003286:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d104      	bne.n	800329a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003298:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69d9      	ldr	r1, [r3, #28]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	4603      	mov	r3, r0
 8003330:	817b      	strh	r3, [r7, #10]
 8003332:	460b      	mov	r3, r1
 8003334:	813b      	strh	r3, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	f040 80f9 	bne.w	800353a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_I2C_Mem_Write+0x34>
 800334e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0ed      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_I2C_Mem_Write+0x4e>
 800336a:	2302      	movs	r3, #2
 800336c:	e0e6      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003376:	f7ff fc47 	bl	8002c08 <HAL_GetTick>
 800337a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2319      	movs	r3, #25
 8003382:	2201      	movs	r2, #1
 8003384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fbcb 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0d1      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2221      	movs	r2, #33	; 0x21
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2240      	movs	r2, #64	; 0x40
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033c0:	88f8      	ldrh	r0, [r7, #6]
 80033c2:	893a      	ldrh	r2, [r7, #8]
 80033c4:	8979      	ldrh	r1, [r7, #10]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	4603      	mov	r3, r0
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fadb 	bl	800398c <I2C_RequestMemoryWrite>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0a9      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2bff      	cmp	r3, #255	; 0xff
 80033f0:	d90e      	bls.n	8003410 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	22ff      	movs	r2, #255	; 0xff
 80033f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	8979      	ldrh	r1, [r7, #10]
 8003400:	2300      	movs	r3, #0
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fcbd 	bl	8003d88 <I2C_TransferConfig>
 800340e:	e00f      	b.n	8003430 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341e:	b2da      	uxtb	r2, r3
 8003420:	8979      	ldrh	r1, [r7, #10]
 8003422:	2300      	movs	r3, #0
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fcac 	bl	8003d88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fbb5 	bl	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e07b      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	781a      	ldrb	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d034      	beq.n	80034e8 <HAL_I2C_Mem_Write+0x1c8>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003482:	2b00      	cmp	r3, #0
 8003484:	d130      	bne.n	80034e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	2200      	movs	r2, #0
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fb47 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e04d      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2bff      	cmp	r3, #255	; 0xff
 80034a8:	d90e      	bls.n	80034c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	22ff      	movs	r2, #255	; 0xff
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	8979      	ldrh	r1, [r7, #10]
 80034b8:	2300      	movs	r3, #0
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fc61 	bl	8003d88 <I2C_TransferConfig>
 80034c6:	e00f      	b.n	80034e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	8979      	ldrh	r1, [r7, #10]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fc50 	bl	8003d88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d19e      	bne.n	8003430 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fb94 	bl	8003c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e01a      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2220      	movs	r2, #32
 800350c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_I2C_Mem_Write+0x224>)
 800351a:	400b      	ands	r3, r1
 800351c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800353a:	2302      	movs	r3, #2
  }
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	fe00e800 	.word	0xfe00e800

08003548 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	4608      	mov	r0, r1
 8003552:	4611      	mov	r1, r2
 8003554:	461a      	mov	r2, r3
 8003556:	4603      	mov	r3, r0
 8003558:	817b      	strh	r3, [r7, #10]
 800355a:	460b      	mov	r3, r1
 800355c:	813b      	strh	r3, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b20      	cmp	r3, #32
 800356c:	f040 80fd 	bne.w	800376a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_I2C_Mem_Read+0x34>
 8003576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0f1      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_I2C_Mem_Read+0x4e>
 8003592:	2302      	movs	r3, #2
 8003594:	e0ea      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800359e:	f7ff fb33 	bl	8002c08 <HAL_GetTick>
 80035a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2319      	movs	r3, #25
 80035aa:	2201      	movs	r2, #1
 80035ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fab7 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0d5      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2222      	movs	r2, #34	; 0x22
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e8:	88f8      	ldrh	r0, [r7, #6]
 80035ea:	893a      	ldrh	r2, [r7, #8]
 80035ec:	8979      	ldrh	r1, [r7, #10]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	4603      	mov	r3, r0
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fa1b 	bl	8003a34 <I2C_RequestMemoryRead>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0ad      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2bff      	cmp	r3, #255	; 0xff
 8003618:	d90e      	bls.n	8003638 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	22ff      	movs	r2, #255	; 0xff
 800361e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	b2da      	uxtb	r2, r3
 8003626:	8979      	ldrh	r1, [r7, #10]
 8003628:	4b52      	ldr	r3, [pc, #328]	; (8003774 <HAL_I2C_Mem_Read+0x22c>)
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fba9 	bl	8003d88 <I2C_TransferConfig>
 8003636:	e00f      	b.n	8003658 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	b2da      	uxtb	r2, r3
 8003648:	8979      	ldrh	r1, [r7, #10]
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_I2C_Mem_Read+0x22c>)
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fb98 	bl	8003d88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	2200      	movs	r2, #0
 8003660:	2104      	movs	r1, #4
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fa5e 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e07c      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d034      	beq.n	8003718 <HAL_I2C_Mem_Read+0x1d0>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d130      	bne.n	8003718 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	2200      	movs	r2, #0
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fa2f 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e04d      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2bff      	cmp	r3, #255	; 0xff
 80036d8:	d90e      	bls.n	80036f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	8979      	ldrh	r1, [r7, #10]
 80036e8:	2300      	movs	r3, #0
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fb49 	bl	8003d88 <I2C_TransferConfig>
 80036f6:	e00f      	b.n	8003718 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	b2da      	uxtb	r2, r3
 8003708:	8979      	ldrh	r1, [r7, #10]
 800370a:	2300      	movs	r3, #0
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fb38 	bl	8003d88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d19a      	bne.n	8003658 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fa7c 	bl	8003c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e01a      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2220      	movs	r2, #32
 800373c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_I2C_Mem_Read+0x230>)
 800374a:	400b      	ands	r3, r1
 800374c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	80002400 	.word	0x80002400
 8003778:	fe00e800 	.word	0xfe00e800

0800377c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	460b      	mov	r3, r1
 800378a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b20      	cmp	r3, #32
 800379a:	f040 80f1 	bne.w	8003980 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ac:	d101      	bne.n	80037b2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
 80037b0:	e0e7      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_I2C_IsDeviceReady+0x44>
 80037bc:	2302      	movs	r3, #2
 80037be:	e0e0      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_I2C_IsDeviceReady+0x72>
 80037de:	897b      	ldrh	r3, [r7, #10]
 80037e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037ec:	e004      	b.n	80037f8 <HAL_I2C_IsDeviceReady+0x7c>
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037f4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80037fe:	f7ff fa03 	bl	8002c08 <HAL_GetTick>
 8003802:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b20      	cmp	r3, #32
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b10      	cmp	r3, #16
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003830:	e034      	b.n	800389c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d01a      	beq.n	8003870 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7ff f9e5 	bl	8002c08 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <HAL_I2C_IsDeviceReady+0xd4>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10f      	bne.n	8003870 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e088      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b20      	cmp	r3, #32
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b10      	cmp	r3, #16
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800389c:	7ffb      	ldrb	r3, [r7, #31]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <HAL_I2C_IsDeviceReady+0x12c>
 80038a2:	7fbb      	ldrb	r3, [r7, #30]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0c4      	beq.n	8003832 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d01a      	beq.n	80038ec <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	2120      	movs	r1, #32
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f92f 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e058      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2220      	movs	r2, #32
 80038d6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e04a      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	2120      	movs	r1, #32
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f914 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e03d      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2210      	movs	r2, #16
 800390c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2220      	movs	r2, #32
 8003914:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d118      	bne.n	8003950 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800392c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2200      	movs	r2, #0
 8003936:	2120      	movs	r1, #32
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f8f3 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e01c      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2220      	movs	r2, #32
 800394e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3301      	adds	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	429a      	cmp	r2, r3
 800395c:	f63f af3b 	bhi.w	80037d6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	4608      	mov	r0, r1
 8003996:	4611      	mov	r1, r2
 8003998:	461a      	mov	r2, r3
 800399a:	4603      	mov	r3, r0
 800399c:	817b      	strh	r3, [r7, #10]
 800399e:	460b      	mov	r3, r1
 80039a0:	813b      	strh	r3, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	8979      	ldrh	r1, [r7, #10]
 80039ac:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <I2C_RequestMemoryWrite+0xa4>)
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f9e7 	bl	8003d88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	69b9      	ldr	r1, [r7, #24]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f8f0 	bl	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e02c      	b.n	8003a28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039d4:	893b      	ldrh	r3, [r7, #8]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
 80039de:	e015      	b.n	8003a0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039e0:	893b      	ldrh	r3, [r7, #8]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	69b9      	ldr	r1, [r7, #24]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f8d6 	bl	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e012      	b.n	8003a28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a02:	893b      	ldrh	r3, [r7, #8]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2200      	movs	r2, #0
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f884 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	80002000 	.word	0x80002000

08003a34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	461a      	mov	r2, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	817b      	strh	r3, [r7, #10]
 8003a46:	460b      	mov	r3, r1
 8003a48:	813b      	strh	r3, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	8979      	ldrh	r1, [r7, #10]
 8003a54:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <I2C_RequestMemoryRead+0xa4>)
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f994 	bl	8003d88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	69b9      	ldr	r1, [r7, #24]
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f89d 	bl	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e02c      	b.n	8003ace <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7a:	893b      	ldrh	r3, [r7, #8]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
 8003a84:	e015      	b.n	8003ab2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a86:	893b      	ldrh	r3, [r7, #8]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	69b9      	ldr	r1, [r7, #24]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f883 	bl	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e012      	b.n	8003ace <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2140      	movs	r1, #64	; 0x40
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f831 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	80002000 	.word	0x80002000

08003adc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d103      	bne.n	8003afa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d007      	beq.n	8003b18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	619a      	str	r2, [r3, #24]
  }
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b34:	e022      	b.n	8003b7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d01e      	beq.n	8003b7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7ff f863 	bl	8002c08 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d113      	bne.n	8003b7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e00f      	b.n	8003b9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4013      	ands	r3, r2
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d0cd      	beq.n	8003b36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bb0:	e02c      	b.n	8003c0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f870 	bl	8003c9c <I2C_IsAcknowledgeFailed>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e02a      	b.n	8003c1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d01e      	beq.n	8003c0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7ff f81b 	bl	8002c08 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d113      	bne.n	8003c0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e007      	b.n	8003c1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d1cb      	bne.n	8003bb2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c30:	e028      	b.n	8003c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f830 	bl	8003c9c <I2C_IsAcknowledgeFailed>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e026      	b.n	8003c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c46:	f7fe ffdf 	bl	8002c08 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d302      	bcc.n	8003c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d113      	bne.n	8003c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e007      	b.n	8003c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d1cf      	bne.n	8003c32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d161      	bne.n	8003d7a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cc4:	d02b      	beq.n	8003d1e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cd4:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cd6:	e022      	b.n	8003d1e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d01e      	beq.n	8003d1e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce0:	f7fe ff92 	bl	8002c08 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d302      	bcc.n	8003cf6 <I2C_IsAcknowledgeFailed+0x5a>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d113      	bne.n	8003d1e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e02e      	b.n	8003d7c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d1d5      	bne.n	8003cd8 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2210      	movs	r2, #16
 8003d32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff fecd 	bl	8003adc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <I2C_IsAcknowledgeFailed+0xe8>)
 8003d4e:	400b      	ands	r3, r1
 8003d50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f043 0204 	orr.w	r2, r3, #4
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	fe00e800 	.word	0xfe00e800

08003d88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	607b      	str	r3, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	817b      	strh	r3, [r7, #10]
 8003d96:	4613      	mov	r3, r2
 8003d98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	0d5b      	lsrs	r3, r3, #21
 8003da4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003da8:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <I2C_TransferConfig+0x58>)
 8003daa:	430b      	orrs	r3, r1
 8003dac:	43db      	mvns	r3, r3
 8003dae:	ea02 0103 	and.w	r1, r2, r3
 8003db2:	897b      	ldrh	r3, [r7, #10]
 8003db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003db8:	7a7b      	ldrb	r3, [r7, #9]
 8003dba:	041b      	lsls	r3, r3, #16
 8003dbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	03ff63ff 	.word	0x03ff63ff

08003de4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d138      	bne.n	8003e6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e032      	b.n	8003e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2224      	movs	r2, #36	; 0x24
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0201 	bic.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6819      	ldr	r1, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d139      	bne.n	8003f04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e033      	b.n	8003f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2224      	movs	r2, #36	; 0x24
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ecc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f001 b83a 	b.w	8004fae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 816f 	beq.w	800422e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f50:	4bb5      	ldr	r3, [pc, #724]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 030c 	and.w	r3, r3, #12
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d00c      	beq.n	8003f76 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f5c:	4bb2      	ldr	r3, [pc, #712]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d15c      	bne.n	8004022 <HAL_RCC_OscConfig+0x10e>
 8003f68:	4baf      	ldr	r3, [pc, #700]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f74:	d155      	bne.n	8004022 <HAL_RCC_OscConfig+0x10e>
 8003f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f7a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f82:	fa93 f3a3 	rbit	r3, r3
 8003f86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d102      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x94>
 8003fa2:	4ba1      	ldr	r3, [pc, #644]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	e015      	b.n	8003fd4 <HAL_RCC_OscConfig+0xc0>
 8003fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003fb4:	fa93 f3a3 	rbit	r3, r3
 8003fb8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fc0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003fc4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003fc8:	fa93 f3a3 	rbit	r3, r3
 8003fcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003fd0:	4b95      	ldr	r3, [pc, #596]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fd8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003fdc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003fe0:	fa92 f2a2 	rbit	r2, r2
 8003fe4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003fe8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003fec:	fab2 f282 	clz	r2, r2
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	f042 0220 	orr.w	r2, r2, #32
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	f002 021f 	and.w	r2, r2, #31
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8111 	beq.w	800422c <HAL_RCC_OscConfig+0x318>
 800400a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800400e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 8108 	bne.w	800422c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f000 bfc6 	b.w	8004fae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004022:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004026:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004032:	d106      	bne.n	8004042 <HAL_RCC_OscConfig+0x12e>
 8004034:	4b7c      	ldr	r3, [pc, #496]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a7b      	ldr	r2, [pc, #492]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 800403a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e036      	b.n	80040b0 <HAL_RCC_OscConfig+0x19c>
 8004042:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004046:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x158>
 8004052:	4b75      	ldr	r3, [pc, #468]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a74      	ldr	r2, [pc, #464]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8004058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b72      	ldr	r3, [pc, #456]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a71      	ldr	r2, [pc, #452]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8004064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e021      	b.n	80040b0 <HAL_RCC_OscConfig+0x19c>
 800406c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004070:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x184>
 800407e:	4b6a      	ldr	r3, [pc, #424]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a69      	ldr	r2, [pc, #420]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8004084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b67      	ldr	r3, [pc, #412]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a66      	ldr	r2, [pc, #408]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 8004090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0x19c>
 8004098:	4b63      	ldr	r3, [pc, #396]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a62      	ldr	r2, [pc, #392]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b60      	ldr	r3, [pc, #384]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a5f      	ldr	r2, [pc, #380]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 80040aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d059      	beq.n	8004174 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe fda2 	bl	8002c08 <HAL_GetTick>
 80040c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ca:	f7fe fd9d 	bl	8002c08 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d902      	bls.n	80040e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	f000 bf67 	b.w	8004fae <HAL_RCC_OscConfig+0x109a>
 80040e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040e4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80040ec:	fa93 f3a3 	rbit	r3, r3
 80040f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80040f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d102      	bne.n	8004112 <HAL_RCC_OscConfig+0x1fe>
 800410c:	4b46      	ldr	r3, [pc, #280]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	e015      	b.n	800413e <HAL_RCC_OscConfig+0x22a>
 8004112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004116:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800412a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800412e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800413a:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004142:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004146:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800414a:	fa92 f2a2 	rbit	r2, r2
 800414e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004152:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004156:	fab2 f282 	clz	r2, r2
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	f042 0220 	orr.w	r2, r2, #32
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	f002 021f 	and.w	r2, r2, #31
 8004166:	2101      	movs	r1, #1
 8004168:	fa01 f202 	lsl.w	r2, r1, r2
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0ab      	beq.n	80040ca <HAL_RCC_OscConfig+0x1b6>
 8004172:	e05c      	b.n	800422e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7fe fd48 	bl	8002c08 <HAL_GetTick>
 8004178:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417c:	e00a      	b.n	8004194 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800417e:	f7fe fd43 	bl	8002c08 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d902      	bls.n	8004194 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	f000 bf0d 	b.w	8004fae <HAL_RCC_OscConfig+0x109a>
 8004194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004198:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80041a0:	fa93 f3a3 	rbit	r3, r3
 80041a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80041a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ac:	fab3 f383 	clz	r3, r3
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d102      	bne.n	80041c6 <HAL_RCC_OscConfig+0x2b2>
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x2de>
 80041c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80041da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80041e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80041ee:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <HAL_RCC_OscConfig+0x314>)
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80041fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80041fe:	fa92 f2a2 	rbit	r2, r2
 8004202:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004206:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800420a:	fab2 f282 	clz	r2, r2
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	f042 0220 	orr.w	r2, r2, #32
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	f002 021f 	and.w	r2, r2, #31
 800421a:	2101      	movs	r1, #1
 800421c:	fa01 f202 	lsl.w	r2, r1, r2
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ab      	bne.n	800417e <HAL_RCC_OscConfig+0x26a>
 8004226:	e002      	b.n	800422e <HAL_RCC_OscConfig+0x31a>
 8004228:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004232:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 817f 	beq.w	8004542 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004244:	4ba7      	ldr	r3, [pc, #668]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00c      	beq.n	800426a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004250:	4ba4      	ldr	r3, [pc, #656]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	d173      	bne.n	8004344 <HAL_RCC_OscConfig+0x430>
 800425c:	4ba1      	ldr	r3, [pc, #644]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	d16c      	bne.n	8004344 <HAL_RCC_OscConfig+0x430>
 800426a:	2302      	movs	r3, #2
 800426c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004270:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800427c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004280:	fab3 f383 	clz	r3, r3
 8004284:	b2db      	uxtb	r3, r3
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	b2db      	uxtb	r3, r3
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d102      	bne.n	800429a <HAL_RCC_OscConfig+0x386>
 8004294:	4b93      	ldr	r3, [pc, #588]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	e013      	b.n	80042c2 <HAL_RCC_OscConfig+0x3ae>
 800429a:	2302      	movs	r3, #2
 800429c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80042ac:	2302      	movs	r3, #2
 80042ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80042b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80042be:	4b89      	ldr	r3, [pc, #548]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	2202      	movs	r2, #2
 80042c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80042c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80042cc:	fa92 f2a2 	rbit	r2, r2
 80042d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80042d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80042d8:	fab2 f282 	clz	r2, r2
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	f042 0220 	orr.w	r2, r2, #32
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	f002 021f 	and.w	r2, r2, #31
 80042e8:	2101      	movs	r1, #1
 80042ea:	fa01 f202 	lsl.w	r2, r1, r2
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_RCC_OscConfig+0x3f6>
 80042f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d002      	beq.n	800430a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f000 be52 	b.w	8004fae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430a:	4b76      	ldr	r3, [pc, #472]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004316:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	21f8      	movs	r1, #248	; 0xf8
 8004320:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004324:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004328:	fa91 f1a1 	rbit	r1, r1
 800432c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004330:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004334:	fab1 f181 	clz	r1, r1
 8004338:	b2c9      	uxtb	r1, r1
 800433a:	408b      	lsls	r3, r1
 800433c:	4969      	ldr	r1, [pc, #420]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	e0fe      	b.n	8004542 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004348:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8088 	beq.w	8004466 <HAL_RCC_OscConfig+0x552>
 8004356:	2301      	movs	r3, #1
 8004358:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004368:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800436c:	fab3 f383 	clz	r3, r3
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004376:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	461a      	mov	r2, r3
 800437e:	2301      	movs	r3, #1
 8004380:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004382:	f7fe fc41 	bl	8002c08 <HAL_GetTick>
 8004386:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438c:	f7fe fc3c 	bl	8002c08 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d902      	bls.n	80043a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	f000 be06 	b.w	8004fae <HAL_RCC_OscConfig+0x109a>
 80043a2:	2302      	movs	r3, #2
 80043a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80043b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b8:	fab3 f383 	clz	r3, r3
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <HAL_RCC_OscConfig+0x4be>
 80043cc:	4b45      	ldr	r3, [pc, #276]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	e013      	b.n	80043fa <HAL_RCC_OscConfig+0x4e6>
 80043d2:	2302      	movs	r3, #2
 80043d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80043e4:	2302      	movs	r3, #2
 80043e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80043ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80043ee:	fa93 f3a3 	rbit	r3, r3
 80043f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80043f6:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	2202      	movs	r2, #2
 80043fc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004400:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004404:	fa92 f2a2 	rbit	r2, r2
 8004408:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800440c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004410:	fab2 f282 	clz	r2, r2
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	f042 0220 	orr.w	r2, r2, #32
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	f002 021f 	and.w	r2, r2, #31
 8004420:	2101      	movs	r1, #1
 8004422:	fa01 f202 	lsl.w	r2, r1, r2
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0af      	beq.n	800438c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b2d      	ldr	r3, [pc, #180]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004438:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	21f8      	movs	r1, #248	; 0xf8
 8004442:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800444a:	fa91 f1a1 	rbit	r1, r1
 800444e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004452:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004456:	fab1 f181 	clz	r1, r1
 800445a:	b2c9      	uxtb	r1, r1
 800445c:	408b      	lsls	r3, r1
 800445e:	4921      	ldr	r1, [pc, #132]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]
 8004464:	e06d      	b.n	8004542 <HAL_RCC_OscConfig+0x62e>
 8004466:	2301      	movs	r3, #1
 8004468:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004470:	fa93 f3a3 	rbit	r3, r3
 8004474:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004478:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447c:	fab3 f383 	clz	r3, r3
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004486:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	461a      	mov	r2, r3
 800448e:	2300      	movs	r3, #0
 8004490:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004492:	f7fe fbb9 	bl	8002c08 <HAL_GetTick>
 8004496:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800449c:	f7fe fbb4 	bl	8002c08 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d902      	bls.n	80044b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	f000 bd7e 	b.w	8004fae <HAL_RCC_OscConfig+0x109a>
 80044b2:	2302      	movs	r3, #2
 80044b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80044c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c8:	fab3 f383 	clz	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d105      	bne.n	80044e8 <HAL_RCC_OscConfig+0x5d4>
 80044dc:	4b01      	ldr	r3, [pc, #4]	; (80044e4 <HAL_RCC_OscConfig+0x5d0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	e016      	b.n	8004510 <HAL_RCC_OscConfig+0x5fc>
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000
 80044e8:	2302      	movs	r3, #2
 80044ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80044fa:	2302      	movs	r3, #2
 80044fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004500:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800450c:	4bbf      	ldr	r3, [pc, #764]	; (800480c <HAL_RCC_OscConfig+0x8f8>)
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	2202      	movs	r2, #2
 8004512:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004516:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800451a:	fa92 f2a2 	rbit	r2, r2
 800451e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004522:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004526:	fab2 f282 	clz	r2, r2
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	f042 0220 	orr.w	r2, r2, #32
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	f002 021f 	and.w	r2, r2, #31
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f202 	lsl.w	r2, r1, r2
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ac      	bne.n	800449c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004546:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8113 	beq.w	800477e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800455c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d07c      	beq.n	8004662 <HAL_RCC_OscConfig+0x74e>
 8004568:	2301      	movs	r3, #1
 800456a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004572:	fa93 f3a3 	rbit	r3, r3
 8004576:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800457a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800457e:	fab3 f383 	clz	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	4ba2      	ldr	r3, [pc, #648]	; (8004810 <HAL_RCC_OscConfig+0x8fc>)
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	461a      	mov	r2, r3
 800458e:	2301      	movs	r3, #1
 8004590:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004592:	f7fe fb39 	bl	8002c08 <HAL_GetTick>
 8004596:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459c:	f7fe fb34 	bl	8002c08 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d902      	bls.n	80045b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	f000 bcfe 	b.w	8004fae <HAL_RCC_OscConfig+0x109a>
 80045b2:	2302      	movs	r3, #2
 80045b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045bc:	fa93 f2a3 	rbit	r2, r3
 80045c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045d2:	2202      	movs	r2, #2
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	fa93 f2a3 	rbit	r2, r3
 80045e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045f6:	2202      	movs	r2, #2
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	fa93 f2a3 	rbit	r2, r3
 8004608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800460c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004610:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004612:	4b7e      	ldr	r3, [pc, #504]	; (800480c <HAL_RCC_OscConfig+0x8f8>)
 8004614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800461a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800461e:	2102      	movs	r1, #2
 8004620:	6019      	str	r1, [r3, #0]
 8004622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004626:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	fa93 f1a3 	rbit	r1, r3
 8004630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004634:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004638:	6019      	str	r1, [r3, #0]
  return result;
 800463a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800463e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	fab3 f383 	clz	r3, r3
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	2101      	movs	r1, #1
 8004656:	fa01 f303 	lsl.w	r3, r1, r3
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d09d      	beq.n	800459c <HAL_RCC_OscConfig+0x688>
 8004660:	e08d      	b.n	800477e <HAL_RCC_OscConfig+0x86a>
 8004662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004666:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004672:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	fa93 f2a3 	rbit	r2, r3
 800467c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004680:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004684:	601a      	str	r2, [r3, #0]
  return result;
 8004686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800468a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800468e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004690:	fab3 f383 	clz	r3, r3
 8004694:	b2db      	uxtb	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	4b5d      	ldr	r3, [pc, #372]	; (8004810 <HAL_RCC_OscConfig+0x8fc>)
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	461a      	mov	r2, r3
 80046a0:	2300      	movs	r3, #0
 80046a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a4:	f7fe fab0 	bl	8002c08 <HAL_GetTick>
 80046a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ae:	f7fe faab 	bl	8002c08 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d902      	bls.n	80046c4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	f000 bc75 	b.w	8004fae <HAL_RCC_OscConfig+0x109a>
 80046c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80046cc:	2202      	movs	r2, #2
 80046ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	fa93 f2a3 	rbit	r2, r3
 80046de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046f0:	2202      	movs	r2, #2
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	fa93 f2a3 	rbit	r2, r3
 8004702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004710:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004714:	2202      	movs	r2, #2
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800471c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	fa93 f2a3 	rbit	r2, r3
 8004726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800472a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800472e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	4b36      	ldr	r3, [pc, #216]	; (800480c <HAL_RCC_OscConfig+0x8f8>)
 8004732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004738:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800473c:	2102      	movs	r1, #2
 800473e:	6019      	str	r1, [r3, #0]
 8004740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004744:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	fa93 f1a3 	rbit	r1, r3
 800474e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004752:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004756:	6019      	str	r1, [r3, #0]
  return result;
 8004758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800475c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	fab3 f383 	clz	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	2101      	movs	r1, #1
 8004774:	fa01 f303 	lsl.w	r3, r1, r3
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d197      	bne.n	80046ae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004782:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 81a5 	beq.w	8004ade <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479a:	4b1c      	ldr	r3, [pc, #112]	; (800480c <HAL_RCC_OscConfig+0x8f8>)
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d116      	bne.n	80047d4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	4b19      	ldr	r3, [pc, #100]	; (800480c <HAL_RCC_OscConfig+0x8f8>)
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4a18      	ldr	r2, [pc, #96]	; (800480c <HAL_RCC_OscConfig+0x8f8>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	61d3      	str	r3, [r2, #28]
 80047b2:	4b16      	ldr	r3, [pc, #88]	; (800480c <HAL_RCC_OscConfig+0x8f8>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80047ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <HAL_RCC_OscConfig+0x900>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d121      	bne.n	8004824 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e0:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <HAL_RCC_OscConfig+0x900>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a0b      	ldr	r2, [pc, #44]	; (8004814 <HAL_RCC_OscConfig+0x900>)
 80047e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ec:	f7fe fa0c 	bl	8002c08 <HAL_GetTick>
 80047f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f4:	e010      	b.n	8004818 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f6:	f7fe fa07 	bl	8002c08 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b64      	cmp	r3, #100	; 0x64
 8004804:	d908      	bls.n	8004818 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e3d1      	b.n	8004fae <HAL_RCC_OscConfig+0x109a>
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000
 8004810:	10908120 	.word	0x10908120
 8004814:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	4b8d      	ldr	r3, [pc, #564]	; (8004a50 <HAL_RCC_OscConfig+0xb3c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0e8      	beq.n	80047f6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004828:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d106      	bne.n	8004842 <HAL_RCC_OscConfig+0x92e>
 8004834:	4b87      	ldr	r3, [pc, #540]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	4a86      	ldr	r2, [pc, #536]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6213      	str	r3, [r2, #32]
 8004840:	e035      	b.n	80048ae <HAL_RCC_OscConfig+0x99a>
 8004842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004846:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x958>
 8004852:	4b80      	ldr	r3, [pc, #512]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	4a7f      	ldr	r2, [pc, #508]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	6213      	str	r3, [r2, #32]
 800485e:	4b7d      	ldr	r3, [pc, #500]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	4a7c      	ldr	r2, [pc, #496]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 8004864:	f023 0304 	bic.w	r3, r3, #4
 8004868:	6213      	str	r3, [r2, #32]
 800486a:	e020      	b.n	80048ae <HAL_RCC_OscConfig+0x99a>
 800486c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004870:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b05      	cmp	r3, #5
 800487a:	d10c      	bne.n	8004896 <HAL_RCC_OscConfig+0x982>
 800487c:	4b75      	ldr	r3, [pc, #468]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	4a74      	ldr	r2, [pc, #464]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 8004882:	f043 0304 	orr.w	r3, r3, #4
 8004886:	6213      	str	r3, [r2, #32]
 8004888:	4b72      	ldr	r3, [pc, #456]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	4a71      	ldr	r2, [pc, #452]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	6213      	str	r3, [r2, #32]
 8004894:	e00b      	b.n	80048ae <HAL_RCC_OscConfig+0x99a>
 8004896:	4b6f      	ldr	r3, [pc, #444]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	4a6e      	ldr	r2, [pc, #440]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	6213      	str	r3, [r2, #32]
 80048a2:	4b6c      	ldr	r3, [pc, #432]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	4a6b      	ldr	r2, [pc, #428]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 80048a8:	f023 0304 	bic.w	r3, r3, #4
 80048ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8081 	beq.w	80049c2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c0:	f7fe f9a2 	bl	8002c08 <HAL_GetTick>
 80048c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c8:	e00b      	b.n	80048e2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ca:	f7fe f99d 	bl	8002c08 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e365      	b.n	8004fae <HAL_RCC_OscConfig+0x109a>
 80048e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80048ea:	2202      	movs	r2, #2
 80048ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	fa93 f2a3 	rbit	r2, r3
 80048fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004900:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800490a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800490e:	2202      	movs	r2, #2
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004916:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	fa93 f2a3 	rbit	r2, r3
 8004920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004924:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004928:	601a      	str	r2, [r3, #0]
  return result;
 800492a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800492e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004932:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004934:	fab3 f383 	clz	r3, r3
 8004938:	b2db      	uxtb	r3, r3
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f043 0302 	orr.w	r3, r3, #2
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d102      	bne.n	800494e <HAL_RCC_OscConfig+0xa3a>
 8004948:	4b42      	ldr	r3, [pc, #264]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	e013      	b.n	8004976 <HAL_RCC_OscConfig+0xa62>
 800494e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004952:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004956:	2202      	movs	r2, #2
 8004958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800495e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	fa93 f2a3 	rbit	r2, r3
 8004968:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800496c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800497a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800497e:	2102      	movs	r1, #2
 8004980:	6011      	str	r1, [r2, #0]
 8004982:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004986:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	fa92 f1a2 	rbit	r1, r2
 8004990:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004994:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004998:	6011      	str	r1, [r2, #0]
  return result;
 800499a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800499e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	fab2 f282 	clz	r2, r2
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	f002 021f 	and.w	r2, r2, #31
 80049b4:	2101      	movs	r1, #1
 80049b6:	fa01 f202 	lsl.w	r2, r1, r2
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d084      	beq.n	80048ca <HAL_RCC_OscConfig+0x9b6>
 80049c0:	e083      	b.n	8004aca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c2:	f7fe f921 	bl	8002c08 <HAL_GetTick>
 80049c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ca:	e00b      	b.n	80049e4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049cc:	f7fe f91c 	bl	8002c08 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049dc:	4293      	cmp	r3, r2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e2e4      	b.n	8004fae <HAL_RCC_OscConfig+0x109a>
 80049e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80049ec:	2202      	movs	r2, #2
 80049ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	fa93 f2a3 	rbit	r2, r3
 80049fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a10:	2202      	movs	r2, #2
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	fa93 f2a3 	rbit	r2, r3
 8004a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004a2a:	601a      	str	r2, [r3, #0]
  return result;
 8004a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a30:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004a34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a36:	fab3 f383 	clz	r3, r3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f043 0302 	orr.w	r3, r3, #2
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0xb44>
 8004a4a:	4b02      	ldr	r3, [pc, #8]	; (8004a54 <HAL_RCC_OscConfig+0xb40>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	e017      	b.n	8004a80 <HAL_RCC_OscConfig+0xb6c>
 8004a50:	40007000 	.word	0x40007000
 8004a54:	40021000 	.word	0x40021000
 8004a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004a60:	2202      	movs	r2, #2
 8004a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	fa93 f2a3 	rbit	r2, r3
 8004a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a76:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	4bb3      	ldr	r3, [pc, #716]	; (8004d4c <HAL_RCC_OscConfig+0xe38>)
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004a88:	2102      	movs	r1, #2
 8004a8a:	6011      	str	r1, [r2, #0]
 8004a8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	fa92 f1a2 	rbit	r1, r2
 8004a9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a9e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004aa2:	6011      	str	r1, [r2, #0]
  return result;
 8004aa4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004aa8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	fab2 f282 	clz	r2, r2
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	f002 021f 	and.w	r2, r2, #31
 8004abe:	2101      	movs	r1, #1
 8004ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d180      	bne.n	80049cc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004aca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d105      	bne.n	8004ade <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad2:	4b9e      	ldr	r3, [pc, #632]	; (8004d4c <HAL_RCC_OscConfig+0xe38>)
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	4a9d      	ldr	r2, [pc, #628]	; (8004d4c <HAL_RCC_OscConfig+0xe38>)
 8004ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004adc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ae2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 825e 	beq.w	8004fac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004af0:	4b96      	ldr	r3, [pc, #600]	; (8004d4c <HAL_RCC_OscConfig+0xe38>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 030c 	and.w	r3, r3, #12
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	f000 821f 	beq.w	8004f3c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	f040 8170 	bne.w	8004df0 <HAL_RCC_OscConfig+0xedc>
 8004b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	fa93 f2a3 	rbit	r2, r3
 8004b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004b34:	601a      	str	r2, [r3, #0]
  return result;
 8004b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004b3e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b40:	fab3 f383 	clz	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fe f857 	bl	8002c08 <HAL_GetTick>
 8004b5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b5e:	e009      	b.n	8004b74 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fe f852 	bl	8002c08 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e21c      	b.n	8004fae <HAL_RCC_OscConfig+0x109a>
 8004b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b86:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	fa93 f2a3 	rbit	r2, r3
 8004b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b94:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b98:	601a      	str	r2, [r3, #0]
  return result;
 8004b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ba2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ba4:	fab3 f383 	clz	r3, r3
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d102      	bne.n	8004bbe <HAL_RCC_OscConfig+0xcaa>
 8004bb8:	4b64      	ldr	r3, [pc, #400]	; (8004d4c <HAL_RCC_OscConfig+0xe38>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	e027      	b.n	8004c0e <HAL_RCC_OscConfig+0xcfa>
 8004bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bd0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	fa93 f2a3 	rbit	r2, r3
 8004bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bde:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004be8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bf6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	fa93 f2a3 	rbit	r2, r3
 8004c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c04:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <HAL_RCC_OscConfig+0xe38>)
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c12:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c1a:	6011      	str	r1, [r2, #0]
 8004c1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c20:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	fa92 f1a2 	rbit	r1, r2
 8004c2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c2e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004c32:	6011      	str	r1, [r2, #0]
  return result;
 8004c34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c38:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	fab2 f282 	clz	r2, r2
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	f042 0220 	orr.w	r2, r2, #32
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	f002 021f 	and.w	r2, r2, #31
 8004c4e:	2101      	movs	r1, #1
 8004c50:	fa01 f202 	lsl.w	r2, r1, r2
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d182      	bne.n	8004b60 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c5a:	4b3c      	ldr	r3, [pc, #240]	; (8004d4c <HAL_RCC_OscConfig+0xe38>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	f023 020f 	bic.w	r2, r3, #15
 8004c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	4937      	ldr	r1, [pc, #220]	; (8004d4c <HAL_RCC_OscConfig+0xe38>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004c74:	4b35      	ldr	r3, [pc, #212]	; (8004d4c <HAL_RCC_OscConfig+0xe38>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a19      	ldr	r1, [r3, #32]
 8004c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	430b      	orrs	r3, r1
 8004c96:	492d      	ldr	r1, [pc, #180]	; (8004d4c <HAL_RCC_OscConfig+0xe38>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	604b      	str	r3, [r1, #4]
 8004c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ca0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004ca4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	fa93 f2a3 	rbit	r2, r3
 8004cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cbc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004cc0:	601a      	str	r2, [r3, #0]
  return result;
 8004cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cc6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004cca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ccc:	fab3 f383 	clz	r3, r3
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	2301      	movs	r3, #1
 8004ce0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce2:	f7fd ff91 	bl	8002c08 <HAL_GetTick>
 8004ce6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cea:	e009      	b.n	8004d00 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fd ff8c 	bl	8002c08 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e156      	b.n	8004fae <HAL_RCC_OscConfig+0x109a>
 8004d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d04:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d12:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	fa93 f2a3 	rbit	r2, r3
 8004d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d20:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004d24:	601a      	str	r2, [r3, #0]
  return result;
 8004d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004d2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d30:	fab3 f383 	clz	r3, r3
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d105      	bne.n	8004d50 <HAL_RCC_OscConfig+0xe3c>
 8004d44:	4b01      	ldr	r3, [pc, #4]	; (8004d4c <HAL_RCC_OscConfig+0xe38>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	e02a      	b.n	8004da0 <HAL_RCC_OscConfig+0xe8c>
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d54:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	fa93 f2a3 	rbit	r2, r3
 8004d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d88:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	fa93 f2a3 	rbit	r2, r3
 8004d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d96:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	4b86      	ldr	r3, [pc, #536]	; (8004fb8 <HAL_RCC_OscConfig+0x10a4>)
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004da4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004da8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dac:	6011      	str	r1, [r2, #0]
 8004dae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004db2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	fa92 f1a2 	rbit	r1, r2
 8004dbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dc0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004dc4:	6011      	str	r1, [r2, #0]
  return result;
 8004dc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dca:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	fab2 f282 	clz	r2, r2
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	f042 0220 	orr.w	r2, r2, #32
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	f002 021f 	and.w	r2, r2, #31
 8004de0:	2101      	movs	r1, #1
 8004de2:	fa01 f202 	lsl.w	r2, r1, r2
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f43f af7f 	beq.w	8004cec <HAL_RCC_OscConfig+0xdd8>
 8004dee:	e0dd      	b.n	8004fac <HAL_RCC_OscConfig+0x1098>
 8004df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004df4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004df8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e02:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	fa93 f2a3 	rbit	r2, r3
 8004e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e10:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004e14:	601a      	str	r2, [r3, #0]
  return result;
 8004e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e1a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004e1e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e20:	fab3 f383 	clz	r3, r3
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	461a      	mov	r2, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e36:	f7fd fee7 	bl	8002c08 <HAL_GetTick>
 8004e3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e3e:	e009      	b.n	8004e54 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e40:	f7fd fee2 	bl	8002c08 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e0ac      	b.n	8004fae <HAL_RCC_OscConfig+0x109a>
 8004e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	fa93 f2a3 	rbit	r2, r3
 8004e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004e78:	601a      	str	r2, [r3, #0]
  return result;
 8004e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e7e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004e82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e84:	fab3 f383 	clz	r3, r3
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d102      	bne.n	8004e9e <HAL_RCC_OscConfig+0xf8a>
 8004e98:	4b47      	ldr	r3, [pc, #284]	; (8004fb8 <HAL_RCC_OscConfig+0x10a4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	e027      	b.n	8004eee <HAL_RCC_OscConfig+0xfda>
 8004e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ea2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eb0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	fa93 f2a3 	rbit	r2, r3
 8004eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ebe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ec8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004ecc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ed6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	fa93 f2a3 	rbit	r2, r3
 8004ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	4b33      	ldr	r3, [pc, #204]	; (8004fb8 <HAL_RCC_OscConfig+0x10a4>)
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ef2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004ef6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004efa:	6011      	str	r1, [r2, #0]
 8004efc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f00:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	fa92 f1a2 	rbit	r1, r2
 8004f0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f0e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004f12:	6011      	str	r1, [r2, #0]
  return result;
 8004f14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f18:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	fab2 f282 	clz	r2, r2
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	f042 0220 	orr.w	r2, r2, #32
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	f002 021f 	and.w	r2, r2, #31
 8004f2e:	2101      	movs	r1, #1
 8004f30:	fa01 f202 	lsl.w	r2, r1, r2
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d182      	bne.n	8004e40 <HAL_RCC_OscConfig+0xf2c>
 8004f3a:	e037      	b.n	8004fac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e02e      	b.n	8004fae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <HAL_RCC_OscConfig+0x10a4>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004f58:	4b17      	ldr	r3, [pc, #92]	; (8004fb8 <HAL_RCC_OscConfig+0x10a4>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f64:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d117      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004f78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f7c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d10b      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f94:	f003 020f 	and.w	r2, r3, #15
 8004f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40021000 	.word	0x40021000

08004fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b09e      	sub	sp, #120	; 0x78
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e162      	b.n	800529a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b90      	ldr	r3, [pc, #576]	; (8005218 <HAL_RCC_ClockConfig+0x25c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d910      	bls.n	8005004 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b8d      	ldr	r3, [pc, #564]	; (8005218 <HAL_RCC_ClockConfig+0x25c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 0207 	bic.w	r2, r3, #7
 8004fea:	498b      	ldr	r1, [pc, #556]	; (8005218 <HAL_RCC_ClockConfig+0x25c>)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff2:	4b89      	ldr	r3, [pc, #548]	; (8005218 <HAL_RCC_ClockConfig+0x25c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e14a      	b.n	800529a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005010:	4b82      	ldr	r3, [pc, #520]	; (800521c <HAL_RCC_ClockConfig+0x260>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	497f      	ldr	r1, [pc, #508]	; (800521c <HAL_RCC_ClockConfig+0x260>)
 800501e:	4313      	orrs	r3, r2
 8005020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 80dc 	beq.w	80051e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d13c      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xf6>
 8005038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800503c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005040:	fa93 f3a3 	rbit	r3, r3
 8005044:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005048:	fab3 f383 	clz	r3, r3
 800504c:	b2db      	uxtb	r3, r3
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d102      	bne.n	8005062 <HAL_RCC_ClockConfig+0xa6>
 800505c:	4b6f      	ldr	r3, [pc, #444]	; (800521c <HAL_RCC_ClockConfig+0x260>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	e00f      	b.n	8005082 <HAL_RCC_ClockConfig+0xc6>
 8005062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005066:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800506a:	fa93 f3a3 	rbit	r3, r3
 800506e:	667b      	str	r3, [r7, #100]	; 0x64
 8005070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005074:	663b      	str	r3, [r7, #96]	; 0x60
 8005076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005078:	fa93 f3a3 	rbit	r3, r3
 800507c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800507e:	4b67      	ldr	r3, [pc, #412]	; (800521c <HAL_RCC_ClockConfig+0x260>)
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005086:	65ba      	str	r2, [r7, #88]	; 0x58
 8005088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800508a:	fa92 f2a2 	rbit	r2, r2
 800508e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005092:	fab2 f282 	clz	r2, r2
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	f042 0220 	orr.w	r2, r2, #32
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	f002 021f 	and.w	r2, r2, #31
 80050a2:	2101      	movs	r1, #1
 80050a4:	fa01 f202 	lsl.w	r2, r1, r2
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d17b      	bne.n	80051a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e0f3      	b.n	800529a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d13c      	bne.n	8005134 <HAL_RCC_ClockConfig+0x178>
 80050ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c2:	fa93 f3a3 	rbit	r3, r3
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80050c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ca:	fab3 f383 	clz	r3, r3
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d102      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x128>
 80050de:	4b4f      	ldr	r3, [pc, #316]	; (800521c <HAL_RCC_ClockConfig+0x260>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	e00f      	b.n	8005104 <HAL_RCC_ClockConfig+0x148>
 80050e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ec:	fa93 f3a3 	rbit	r3, r3
 80050f0:	647b      	str	r3, [r7, #68]	; 0x44
 80050f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050f6:	643b      	str	r3, [r7, #64]	; 0x40
 80050f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fa:	fa93 f3a3 	rbit	r3, r3
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005100:	4b46      	ldr	r3, [pc, #280]	; (800521c <HAL_RCC_ClockConfig+0x260>)
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005108:	63ba      	str	r2, [r7, #56]	; 0x38
 800510a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800510c:	fa92 f2a2 	rbit	r2, r2
 8005110:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005114:	fab2 f282 	clz	r2, r2
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	f042 0220 	orr.w	r2, r2, #32
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	f002 021f 	and.w	r2, r2, #31
 8005124:	2101      	movs	r1, #1
 8005126:	fa01 f202 	lsl.w	r2, r1, r2
 800512a:	4013      	ands	r3, r2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d13a      	bne.n	80051a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0b2      	b.n	800529a <HAL_RCC_ClockConfig+0x2de>
 8005134:	2302      	movs	r3, #2
 8005136:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	fa93 f3a3 	rbit	r3, r3
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005142:	fab3 f383 	clz	r3, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b01      	cmp	r3, #1
 8005154:	d102      	bne.n	800515c <HAL_RCC_ClockConfig+0x1a0>
 8005156:	4b31      	ldr	r3, [pc, #196]	; (800521c <HAL_RCC_ClockConfig+0x260>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	e00d      	b.n	8005178 <HAL_RCC_ClockConfig+0x1bc>
 800515c:	2302      	movs	r3, #2
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	fa93 f3a3 	rbit	r3, r3
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
 8005168:	2302      	movs	r3, #2
 800516a:	623b      	str	r3, [r7, #32]
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	fa93 f3a3 	rbit	r3, r3
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	4b29      	ldr	r3, [pc, #164]	; (800521c <HAL_RCC_ClockConfig+0x260>)
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	2202      	movs	r2, #2
 800517a:	61ba      	str	r2, [r7, #24]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	fa92 f2a2 	rbit	r2, r2
 8005182:	617a      	str	r2, [r7, #20]
  return result;
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	fab2 f282 	clz	r2, r2
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	f042 0220 	orr.w	r2, r2, #32
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	f002 021f 	and.w	r2, r2, #31
 8005196:	2101      	movs	r1, #1
 8005198:	fa01 f202 	lsl.w	r2, r1, r2
 800519c:	4013      	ands	r3, r2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e079      	b.n	800529a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051a6:	4b1d      	ldr	r3, [pc, #116]	; (800521c <HAL_RCC_ClockConfig+0x260>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f023 0203 	bic.w	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	491a      	ldr	r1, [pc, #104]	; (800521c <HAL_RCC_ClockConfig+0x260>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051b8:	f7fd fd26 	bl	8002c08 <HAL_GetTick>
 80051bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c0:	f7fd fd22 	bl	8002c08 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e061      	b.n	800529a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d6:	4b11      	ldr	r3, [pc, #68]	; (800521c <HAL_RCC_ClockConfig+0x260>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f003 020c 	and.w	r2, r3, #12
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d1eb      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <HAL_RCC_ClockConfig+0x25c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d214      	bcs.n	8005220 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f6:	4b08      	ldr	r3, [pc, #32]	; (8005218 <HAL_RCC_ClockConfig+0x25c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 0207 	bic.w	r2, r3, #7
 80051fe:	4906      	ldr	r1, [pc, #24]	; (8005218 <HAL_RCC_ClockConfig+0x25c>)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	4313      	orrs	r3, r2
 8005204:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005206:	4b04      	ldr	r3, [pc, #16]	; (8005218 <HAL_RCC_ClockConfig+0x25c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d005      	beq.n	8005220 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e040      	b.n	800529a <HAL_RCC_ClockConfig+0x2de>
 8005218:	40022000 	.word	0x40022000
 800521c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800522c:	4b1d      	ldr	r3, [pc, #116]	; (80052a4 <HAL_RCC_ClockConfig+0x2e8>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	491a      	ldr	r1, [pc, #104]	; (80052a4 <HAL_RCC_ClockConfig+0x2e8>)
 800523a:	4313      	orrs	r3, r2
 800523c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800524a:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <HAL_RCC_ClockConfig+0x2e8>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4912      	ldr	r1, [pc, #72]	; (80052a4 <HAL_RCC_ClockConfig+0x2e8>)
 800525a:	4313      	orrs	r3, r2
 800525c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800525e:	f000 f829 	bl	80052b4 <HAL_RCC_GetSysClockFreq>
 8005262:	4601      	mov	r1, r0
 8005264:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <HAL_RCC_ClockConfig+0x2e8>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800526c:	22f0      	movs	r2, #240	; 0xf0
 800526e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	fa92 f2a2 	rbit	r2, r2
 8005276:	60fa      	str	r2, [r7, #12]
  return result;
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	fab2 f282 	clz	r2, r2
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	40d3      	lsrs	r3, r2
 8005282:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <HAL_RCC_ClockConfig+0x2ec>)
 8005284:	5cd3      	ldrb	r3, [r2, r3]
 8005286:	fa21 f303 	lsr.w	r3, r1, r3
 800528a:	4a08      	ldr	r2, [pc, #32]	; (80052ac <HAL_RCC_ClockConfig+0x2f0>)
 800528c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800528e:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <HAL_RCC_ClockConfig+0x2f4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fd fc74 	bl	8002b80 <HAL_InitTick>
  
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3778      	adds	r7, #120	; 0x78
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	0800b9fc 	.word	0x0800b9fc
 80052ac:	20000004 	.word	0x20000004
 80052b0:	20000008 	.word	0x20000008

080052b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b08b      	sub	sp, #44	; 0x2c
 80052b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80052ce:	4b2a      	ldr	r3, [pc, #168]	; (8005378 <HAL_RCC_GetSysClockFreq+0xc4>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d002      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0x30>
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d003      	beq.n	80052ea <HAL_RCC_GetSysClockFreq+0x36>
 80052e2:	e03f      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052e4:	4b25      	ldr	r3, [pc, #148]	; (800537c <HAL_RCC_GetSysClockFreq+0xc8>)
 80052e6:	623b      	str	r3, [r7, #32]
      break;
 80052e8:	e03f      	b.n	800536a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80052f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80052f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	fa92 f2a2 	rbit	r2, r2
 80052fc:	607a      	str	r2, [r7, #4]
  return result;
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	fab2 f282 	clz	r2, r2
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	40d3      	lsrs	r3, r2
 8005308:	4a1d      	ldr	r2, [pc, #116]	; (8005380 <HAL_RCC_GetSysClockFreq+0xcc>)
 800530a:	5cd3      	ldrb	r3, [r2, r3]
 800530c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800530e:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	220f      	movs	r2, #15
 8005318:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	fa92 f2a2 	rbit	r2, r2
 8005320:	60fa      	str	r2, [r7, #12]
  return result;
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	fab2 f282 	clz	r2, r2
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	40d3      	lsrs	r3, r2
 800532c:	4a15      	ldr	r2, [pc, #84]	; (8005384 <HAL_RCC_GetSysClockFreq+0xd0>)
 800532e:	5cd3      	ldrb	r3, [r2, r3]
 8005330:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800533c:	4a0f      	ldr	r2, [pc, #60]	; (800537c <HAL_RCC_GetSysClockFreq+0xc8>)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	fbb2 f2f3 	udiv	r2, r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
 800534c:	e007      	b.n	800535e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800534e:	4a0b      	ldr	r2, [pc, #44]	; (800537c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	fbb2 f2f3 	udiv	r2, r2, r3
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	623b      	str	r3, [r7, #32]
      break;
 8005362:	e002      	b.n	800536a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005366:	623b      	str	r3, [r7, #32]
      break;
 8005368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800536a:	6a3b      	ldr	r3, [r7, #32]
}
 800536c:	4618      	mov	r0, r3
 800536e:	372c      	adds	r7, #44	; 0x2c
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	40021000 	.word	0x40021000
 800537c:	007a1200 	.word	0x007a1200
 8005380:	0800ba14 	.word	0x0800ba14
 8005384:	0800ba24 	.word	0x0800ba24

08005388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800538c:	4b03      	ldr	r3, [pc, #12]	; (800539c <HAL_RCC_GetHCLKFreq+0x14>)
 800538e:	681b      	ldr	r3, [r3, #0]
}
 8005390:	4618      	mov	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20000004 	.word	0x20000004

080053a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80053a6:	f7ff ffef 	bl	8005388 <HAL_RCC_GetHCLKFreq>
 80053aa:	4601      	mov	r1, r0
 80053ac:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80053b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	fa92 f2a2 	rbit	r2, r2
 80053c0:	603a      	str	r2, [r7, #0]
  return result;
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	fab2 f282 	clz	r2, r2
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	40d3      	lsrs	r3, r2
 80053cc:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80053ce:	5cd3      	ldrb	r3, [r2, r3]
 80053d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	0800ba0c 	.word	0x0800ba0c

080053e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80053ea:	f7ff ffcd 	bl	8005388 <HAL_RCC_GetHCLKFreq>
 80053ee:	4601      	mov	r1, r0
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80053f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80053fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	fa92 f2a2 	rbit	r2, r2
 8005404:	603a      	str	r2, [r7, #0]
  return result;
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	fab2 f282 	clz	r2, r2
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	40d3      	lsrs	r3, r2
 8005410:	4a04      	ldr	r2, [pc, #16]	; (8005424 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005412:	5cd3      	ldrb	r3, [r2, r3]
 8005414:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40021000 	.word	0x40021000
 8005424:	0800ba0c 	.word	0x0800ba0c

08005428 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b092      	sub	sp, #72	; 0x48
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005438:	2300      	movs	r3, #0
 800543a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 80d4 	beq.w	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800544c:	4b4e      	ldr	r3, [pc, #312]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10e      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005458:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	4a4a      	ldr	r2, [pc, #296]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005462:	61d3      	str	r3, [r2, #28]
 8005464:	4b48      	ldr	r3, [pc, #288]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005476:	4b45      	ldr	r3, [pc, #276]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d118      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005482:	4b42      	ldr	r3, [pc, #264]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a41      	ldr	r2, [pc, #260]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800548c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800548e:	f7fd fbbb 	bl	8002c08 <HAL_GetTick>
 8005492:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005494:	e008      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005496:	f7fd fbb7 	bl	8002c08 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b64      	cmp	r3, #100	; 0x64
 80054a2:	d901      	bls.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e1d6      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a8:	4b38      	ldr	r3, [pc, #224]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054b4:	4b34      	ldr	r3, [pc, #208]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8084 	beq.w	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d07c      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054d4:	4b2c      	ldr	r3, [pc, #176]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	fa93 f3a3 	rbit	r3, r3
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ee:	fab3 f383 	clz	r3, r3
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	4b26      	ldr	r3, [pc, #152]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	461a      	mov	r2, r3
 80054fe:	2301      	movs	r3, #1
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005506:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	fa93 f3a3 	rbit	r3, r3
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005512:	fab3 f383 	clz	r3, r3
 8005516:	b2db      	uxtb	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	461a      	mov	r2, r3
 8005522:	2300      	movs	r3, #0
 8005524:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005526:	4a18      	ldr	r2, [pc, #96]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800552c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d04b      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005536:	f7fd fb67 	bl	8002c08 <HAL_GetTick>
 800553a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553c:	e00a      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553e:	f7fd fb63 	bl	8002c08 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	f241 3288 	movw	r2, #5000	; 0x1388
 800554c:	4293      	cmp	r3, r2
 800554e:	d901      	bls.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e180      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005554:	2302      	movs	r3, #2
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	fa93 f3a3 	rbit	r3, r3
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
 8005560:	2302      	movs	r3, #2
 8005562:	623b      	str	r3, [r7, #32]
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	fa93 f3a3 	rbit	r3, r3
 800556a:	61fb      	str	r3, [r7, #28]
  return result;
 800556c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556e:	fab3 f383 	clz	r3, r3
 8005572:	b2db      	uxtb	r3, r3
 8005574:	095b      	lsrs	r3, r3, #5
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f043 0302 	orr.w	r3, r3, #2
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d108      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005582:	4b01      	ldr	r3, [pc, #4]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	e00d      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005588:	40021000 	.word	0x40021000
 800558c:	40007000 	.word	0x40007000
 8005590:	10908100 	.word	0x10908100
 8005594:	2302      	movs	r3, #2
 8005596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	fa93 f3a3 	rbit	r3, r3
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	4b9a      	ldr	r3, [pc, #616]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	2202      	movs	r2, #2
 80055a6:	613a      	str	r2, [r7, #16]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	fa92 f2a2 	rbit	r2, r2
 80055ae:	60fa      	str	r2, [r7, #12]
  return result;
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	fab2 f282 	clz	r2, r2
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	f002 021f 	and.w	r2, r2, #31
 80055c2:	2101      	movs	r1, #1
 80055c4:	fa01 f202 	lsl.w	r2, r1, r2
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0b7      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80055ce:	4b8f      	ldr	r3, [pc, #572]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	498c      	ldr	r1, [pc, #560]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d105      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e8:	4b88      	ldr	r3, [pc, #544]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	4a87      	ldr	r2, [pc, #540]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005600:	4b82      	ldr	r3, [pc, #520]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	f023 0203 	bic.w	r2, r3, #3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	497f      	ldr	r1, [pc, #508]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800560e:	4313      	orrs	r3, r2
 8005610:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d008      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800561e:	4b7b      	ldr	r3, [pc, #492]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	4978      	ldr	r1, [pc, #480]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800562c:	4313      	orrs	r3, r2
 800562e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800563c:	4b73      	ldr	r3, [pc, #460]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	4970      	ldr	r1, [pc, #448]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800564a:	4313      	orrs	r3, r2
 800564c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800565a:	4b6c      	ldr	r3, [pc, #432]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	f023 0210 	bic.w	r2, r3, #16
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	4969      	ldr	r1, [pc, #420]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005668:	4313      	orrs	r3, r2
 800566a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005678:	4b64      	ldr	r3, [pc, #400]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005684:	4961      	ldr	r1, [pc, #388]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005686:	4313      	orrs	r3, r2
 8005688:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d008      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005696:	4b5d      	ldr	r3, [pc, #372]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	f023 0220 	bic.w	r2, r3, #32
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	495a      	ldr	r1, [pc, #360]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056b4:	4b55      	ldr	r3, [pc, #340]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	4952      	ldr	r1, [pc, #328]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d008      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056d2:	4b4e      	ldr	r3, [pc, #312]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	494b      	ldr	r1, [pc, #300]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056f0:	4b46      	ldr	r3, [pc, #280]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	4943      	ldr	r1, [pc, #268]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800570e:	4b3f      	ldr	r3, [pc, #252]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	493c      	ldr	r1, [pc, #240]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800571c:	4313      	orrs	r3, r2
 800571e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800572c:	4b37      	ldr	r3, [pc, #220]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	4934      	ldr	r1, [pc, #208]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800573a:	4313      	orrs	r3, r2
 800573c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800574a:	4b30      	ldr	r3, [pc, #192]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	492d      	ldr	r1, [pc, #180]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005758:	4313      	orrs	r3, r2
 800575a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005768:	4b28      	ldr	r3, [pc, #160]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005774:	4925      	ldr	r1, [pc, #148]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005776:	4313      	orrs	r3, r2
 8005778:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005786:	4b21      	ldr	r3, [pc, #132]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	491e      	ldr	r1, [pc, #120]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005794:	4313      	orrs	r3, r2
 8005796:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80057a4:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	4916      	ldr	r1, [pc, #88]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	490f      	ldr	r1, [pc, #60]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ec:	4907      	ldr	r1, [pc, #28]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00c      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80057fe:	4b03      	ldr	r3, [pc, #12]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	e002      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000
 8005810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005812:	4913      	ldr	r1, [pc, #76]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005814:	4313      	orrs	r3, r2
 8005816:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005824:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005830:	490b      	ldr	r1, [pc, #44]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005832:	4313      	orrs	r3, r2
 8005834:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005842:	4b07      	ldr	r3, [pc, #28]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584e:	4904      	ldr	r1, [pc, #16]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005850:	4313      	orrs	r3, r2
 8005852:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3748      	adds	r7, #72	; 0x48
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40021000 	.word	0x40021000

08005864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e09d      	b.n	80059b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d108      	bne.n	8005890 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005886:	d009      	beq.n	800589c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	61da      	str	r2, [r3, #28]
 800588e:	e005      	b.n	800589c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc ffbc 	bl	8002834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058dc:	d902      	bls.n	80058e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	e002      	b.n	80058ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058f2:	d007      	beq.n	8005904 <HAL_SPI_Init+0xa0>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058fc:	d002      	beq.n	8005904 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	ea42 0103 	orr.w	r1, r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	0c1b      	lsrs	r3, r3, #16
 8005960:	f003 0204 	and.w	r2, r3, #4
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005980:	ea42 0103 	orr.w	r1, r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b088      	sub	sp, #32
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	4613      	mov	r3, r2
 80059c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_SPI_Transmit+0x22>
 80059d8:	2302      	movs	r3, #2
 80059da:	e158      	b.n	8005c8e <HAL_SPI_Transmit+0x2d4>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059e4:	f7fd f910 	bl	8002c08 <HAL_GetTick>
 80059e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d002      	beq.n	8005a00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
 80059fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059fe:	e13d      	b.n	8005c7c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_SPI_Transmit+0x52>
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a10:	e134      	b.n	8005c7c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2203      	movs	r2, #3
 8005a16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	88fa      	ldrh	r2, [r7, #6]
 8005a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a5c:	d10f      	bne.n	8005a7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a88:	2b40      	cmp	r3, #64	; 0x40
 8005a8a:	d007      	beq.n	8005a9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aa4:	d94b      	bls.n	8005b3e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_SPI_Transmit+0xfa>
 8005aae:	8afb      	ldrh	r3, [r7, #22]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d13e      	bne.n	8005b32 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	881a      	ldrh	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	1c9a      	adds	r2, r3, #2
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ad8:	e02b      	b.n	8005b32 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d112      	bne.n	8005b0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	881a      	ldrh	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	1c9a      	adds	r2, r3, #2
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b0c:	e011      	b.n	8005b32 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b0e:	f7fd f87b 	bl	8002c08 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d803      	bhi.n	8005b26 <HAL_SPI_Transmit+0x16c>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b24:	d102      	bne.n	8005b2c <HAL_SPI_Transmit+0x172>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d102      	bne.n	8005b32 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b30:	e0a4      	b.n	8005c7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1ce      	bne.n	8005ada <HAL_SPI_Transmit+0x120>
 8005b3c:	e07c      	b.n	8005c38 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_SPI_Transmit+0x192>
 8005b46:	8afb      	ldrh	r3, [r7, #22]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d170      	bne.n	8005c2e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d912      	bls.n	8005b7c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	881a      	ldrh	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	1c9a      	adds	r2, r3, #2
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b02      	subs	r3, #2
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b7a:	e058      	b.n	8005c2e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	7812      	ldrb	r2, [r2, #0]
 8005b88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ba2:	e044      	b.n	8005c2e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d12b      	bne.n	8005c0a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d912      	bls.n	8005be2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	881a      	ldrh	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	1c9a      	adds	r2, r3, #2
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b02      	subs	r3, #2
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005be0:	e025      	b.n	8005c2e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	330c      	adds	r3, #12
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c08:	e011      	b.n	8005c2e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c0a:	f7fc fffd 	bl	8002c08 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d803      	bhi.n	8005c22 <HAL_SPI_Transmit+0x268>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d102      	bne.n	8005c28 <HAL_SPI_Transmit+0x26e>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d102      	bne.n	8005c2e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c2c:	e026      	b.n	8005c7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1b5      	bne.n	8005ba4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fb69 	bl	8006314 <SPI_EndRxTxTransaction>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e000      	b.n	8005c7c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005c7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b08a      	sub	sp, #40	; 0x28
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x26>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e1fb      	b.n	80060b4 <HAL_SPI_TransmitReceive+0x41e>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cc4:	f7fc ffa0 	bl	8002c08 <HAL_GetTick>
 8005cc8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cd0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005cd8:	887b      	ldrh	r3, [r7, #2]
 8005cda:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005cdc:	887b      	ldrh	r3, [r7, #2]
 8005cde:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ce0:	7efb      	ldrb	r3, [r7, #27]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d00e      	beq.n	8005d04 <HAL_SPI_TransmitReceive+0x6e>
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cec:	d106      	bne.n	8005cfc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <HAL_SPI_TransmitReceive+0x66>
 8005cf6:	7efb      	ldrb	r3, [r7, #27]
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d003      	beq.n	8005d04 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d02:	e1cd      	b.n	80060a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <HAL_SPI_TransmitReceive+0x80>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_SPI_TransmitReceive+0x80>
 8005d10:	887b      	ldrh	r3, [r7, #2]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d1c:	e1c0      	b.n	80060a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d003      	beq.n	8005d32 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2205      	movs	r2, #5
 8005d2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	887a      	ldrh	r2, [r7, #2]
 8005d42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	887a      	ldrh	r2, [r7, #2]
 8005d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	887a      	ldrh	r2, [r7, #2]
 8005d58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	887a      	ldrh	r2, [r7, #2]
 8005d5e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d74:	d802      	bhi.n	8005d7c <HAL_SPI_TransmitReceive+0xe6>
 8005d76:	8a3b      	ldrh	r3, [r7, #16]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d908      	bls.n	8005d8e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d8a:	605a      	str	r2, [r3, #4]
 8005d8c:	e007      	b.n	8005d9e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d9c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d007      	beq.n	8005dbc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dc4:	d97c      	bls.n	8005ec0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x13e>
 8005dce:	8a7b      	ldrh	r3, [r7, #18]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d169      	bne.n	8005ea8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	881a      	ldrh	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	1c9a      	adds	r2, r3, #2
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005df8:	e056      	b.n	8005ea8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d11b      	bne.n	8005e40 <HAL_SPI_TransmitReceive+0x1aa>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d016      	beq.n	8005e40 <HAL_SPI_TransmitReceive+0x1aa>
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d113      	bne.n	8005e40 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	881a      	ldrh	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	1c9a      	adds	r2, r3, #2
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d11c      	bne.n	8005e88 <HAL_SPI_TransmitReceive+0x1f2>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d016      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	b292      	uxth	r2, r2
 8005e66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	1c9a      	adds	r2, r3, #2
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e84:	2301      	movs	r3, #1
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e88:	f7fc febe 	bl	8002c08 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d807      	bhi.n	8005ea8 <HAL_SPI_TransmitReceive+0x212>
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d003      	beq.n	8005ea8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ea6:	e0fb      	b.n	80060a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1a3      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x164>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d19d      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x164>
 8005ebe:	e0df      	b.n	8006080 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x23a>
 8005ec8:	8a7b      	ldrh	r3, [r7, #18]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	f040 80cb 	bne.w	8006066 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d912      	bls.n	8005f00 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	881a      	ldrh	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	1c9a      	adds	r2, r3, #2
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b02      	subs	r3, #2
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005efe:	e0b2      	b.n	8006066 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	7812      	ldrb	r2, [r2, #0]
 8005f0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f26:	e09e      	b.n	8006066 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d134      	bne.n	8005fa0 <HAL_SPI_TransmitReceive+0x30a>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d02f      	beq.n	8005fa0 <HAL_SPI_TransmitReceive+0x30a>
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d12c      	bne.n	8005fa0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d912      	bls.n	8005f76 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	881a      	ldrh	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	1c9a      	adds	r2, r3, #2
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b02      	subs	r3, #2
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f74:	e012      	b.n	8005f9c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	330c      	adds	r3, #12
 8005f80:	7812      	ldrb	r2, [r2, #0]
 8005f82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d148      	bne.n	8006040 <HAL_SPI_TransmitReceive+0x3aa>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d042      	beq.n	8006040 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d923      	bls.n	800600e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	b292      	uxth	r2, r2
 8005fd2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	1c9a      	adds	r2, r3, #2
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b02      	subs	r3, #2
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d81f      	bhi.n	800603c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800600a:	605a      	str	r2, [r3, #4]
 800600c:	e016      	b.n	800603c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f103 020c 	add.w	r2, r3, #12
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800603c:	2301      	movs	r3, #1
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006040:	f7fc fde2 	bl	8002c08 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800604c:	429a      	cmp	r2, r3
 800604e:	d803      	bhi.n	8006058 <HAL_SPI_TransmitReceive+0x3c2>
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006056:	d102      	bne.n	800605e <HAL_SPI_TransmitReceive+0x3c8>
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006064:	e01c      	b.n	80060a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	f47f af5b 	bne.w	8005f28 <HAL_SPI_TransmitReceive+0x292>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	f47f af54 	bne.w	8005f28 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f945 	bl	8006314 <SPI_EndRxTxTransaction>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d006      	beq.n	800609e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	661a      	str	r2, [r3, #96]	; 0x60
 800609c:	e000      	b.n	80060a0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800609e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3728      	adds	r7, #40	; 0x28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060ca:	b2db      	uxtb	r3, r3
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060e8:	f7fc fd8e 	bl	8002c08 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060f8:	f7fc fd86 	bl	8002c08 <HAL_GetTick>
 80060fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060fe:	4b39      	ldr	r3, [pc, #228]	; (80061e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	015b      	lsls	r3, r3, #5
 8006104:	0d1b      	lsrs	r3, r3, #20
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	fb02 f303 	mul.w	r3, r2, r3
 800610c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800610e:	e054      	b.n	80061ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d050      	beq.n	80061ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006118:	f7fc fd76 	bl	8002c08 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	429a      	cmp	r2, r3
 8006126:	d902      	bls.n	800612e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d13d      	bne.n	80061aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800613c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006146:	d111      	bne.n	800616c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006150:	d004      	beq.n	800615c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615a:	d107      	bne.n	800616c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800616a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006174:	d10f      	bne.n	8006196 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006194:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e017      	b.n	80061da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4013      	ands	r3, r2
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	bf0c      	ite	eq
 80061ca:	2301      	moveq	r3, #1
 80061cc:	2300      	movne	r3, #0
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d19b      	bne.n	8006110 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000004 	.word	0x20000004

080061e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061fa:	f7fc fd05 	bl	8002c08 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	4413      	add	r3, r2
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800620a:	f7fc fcfd 	bl	8002c08 <HAL_GetTick>
 800620e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	330c      	adds	r3, #12
 8006216:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006218:	4b3d      	ldr	r3, [pc, #244]	; (8006310 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	00da      	lsls	r2, r3, #3
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	0d1b      	lsrs	r3, r3, #20
 8006228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006230:	e060      	b.n	80062f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006238:	d107      	bne.n	800624a <SPI_WaitFifoStateUntilTimeout+0x62>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d104      	bne.n	800624a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006248:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006250:	d050      	beq.n	80062f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006252:	f7fc fcd9 	bl	8002c08 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625e:	429a      	cmp	r2, r3
 8006260:	d902      	bls.n	8006268 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	2b00      	cmp	r3, #0
 8006266:	d13d      	bne.n	80062e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006276:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006280:	d111      	bne.n	80062a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628a:	d004      	beq.n	8006296 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006294:	d107      	bne.n	80062a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ae:	d10f      	bne.n	80062d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e010      	b.n	8006306 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4013      	ands	r3, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	429a      	cmp	r2, r3
 8006302:	d196      	bne.n	8006232 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3728      	adds	r7, #40	; 0x28
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000004 	.word	0x20000004

08006314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af02      	add	r7, sp, #8
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2200      	movs	r2, #0
 8006328:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7ff ff5b 	bl	80061e8 <SPI_WaitFifoStateUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e027      	b.n	8006398 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2200      	movs	r2, #0
 8006350:	2180      	movs	r1, #128	; 0x80
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7ff fec0 	bl	80060d8 <SPI_WaitFlagStateUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006362:	f043 0220 	orr.w	r2, r3, #32
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e014      	b.n	8006398 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2200      	movs	r2, #0
 8006376:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7ff ff34 	bl	80061e8 <SPI_WaitFifoStateUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d007      	beq.n	8006396 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638a:	f043 0220 	orr.w	r2, r3, #32
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e000      	b.n	8006398 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e040      	b.n	8006434 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fc fac8 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2224      	movs	r2, #36	; 0x24
 80063cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f82c 	bl	800643c <UART_SetConfig>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e022      	b.n	8006434 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f9f6 	bl	80067e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800640a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800641a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa7d 	bl	800692c <UART_CheckIdleState>
 8006432:	4603      	mov	r3, r0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006444:	2300      	movs	r3, #0
 8006446:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b92      	ldr	r3, [pc, #584]	; (80066b0 <UART_SetConfig+0x274>)
 8006468:	4013      	ands	r3, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	6979      	ldr	r1, [r7, #20]
 8006470:	430b      	orrs	r3, r1
 8006472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a80      	ldr	r2, [pc, #512]	; (80066b4 <UART_SetConfig+0x278>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d120      	bne.n	80064fa <UART_SetConfig+0xbe>
 80064b8:	4b7f      	ldr	r3, [pc, #508]	; (80066b8 <UART_SetConfig+0x27c>)
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	f003 0303 	and.w	r3, r3, #3
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d817      	bhi.n	80064f4 <UART_SetConfig+0xb8>
 80064c4:	a201      	add	r2, pc, #4	; (adr r2, 80064cc <UART_SetConfig+0x90>)
 80064c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ca:	bf00      	nop
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	080064e9 	.word	0x080064e9
 80064d4:	080064ef 	.word	0x080064ef
 80064d8:	080064e3 	.word	0x080064e3
 80064dc:	2301      	movs	r3, #1
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e0b5      	b.n	800664e <UART_SetConfig+0x212>
 80064e2:	2302      	movs	r3, #2
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e0b2      	b.n	800664e <UART_SetConfig+0x212>
 80064e8:	2304      	movs	r3, #4
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e0af      	b.n	800664e <UART_SetConfig+0x212>
 80064ee:	2308      	movs	r3, #8
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e0ac      	b.n	800664e <UART_SetConfig+0x212>
 80064f4:	2310      	movs	r3, #16
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e0a9      	b.n	800664e <UART_SetConfig+0x212>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a6f      	ldr	r2, [pc, #444]	; (80066bc <UART_SetConfig+0x280>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d124      	bne.n	800654e <UART_SetConfig+0x112>
 8006504:	4b6c      	ldr	r3, [pc, #432]	; (80066b8 <UART_SetConfig+0x27c>)
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800650c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006510:	d011      	beq.n	8006536 <UART_SetConfig+0xfa>
 8006512:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006516:	d817      	bhi.n	8006548 <UART_SetConfig+0x10c>
 8006518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651c:	d011      	beq.n	8006542 <UART_SetConfig+0x106>
 800651e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006522:	d811      	bhi.n	8006548 <UART_SetConfig+0x10c>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <UART_SetConfig+0xf4>
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d006      	beq.n	800653c <UART_SetConfig+0x100>
 800652e:	e00b      	b.n	8006548 <UART_SetConfig+0x10c>
 8006530:	2300      	movs	r3, #0
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e08b      	b.n	800664e <UART_SetConfig+0x212>
 8006536:	2302      	movs	r3, #2
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e088      	b.n	800664e <UART_SetConfig+0x212>
 800653c:	2304      	movs	r3, #4
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e085      	b.n	800664e <UART_SetConfig+0x212>
 8006542:	2308      	movs	r3, #8
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e082      	b.n	800664e <UART_SetConfig+0x212>
 8006548:	2310      	movs	r3, #16
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e07f      	b.n	800664e <UART_SetConfig+0x212>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a5b      	ldr	r2, [pc, #364]	; (80066c0 <UART_SetConfig+0x284>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d124      	bne.n	80065a2 <UART_SetConfig+0x166>
 8006558:	4b57      	ldr	r3, [pc, #348]	; (80066b8 <UART_SetConfig+0x27c>)
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006560:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006564:	d011      	beq.n	800658a <UART_SetConfig+0x14e>
 8006566:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800656a:	d817      	bhi.n	800659c <UART_SetConfig+0x160>
 800656c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006570:	d011      	beq.n	8006596 <UART_SetConfig+0x15a>
 8006572:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006576:	d811      	bhi.n	800659c <UART_SetConfig+0x160>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <UART_SetConfig+0x148>
 800657c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006580:	d006      	beq.n	8006590 <UART_SetConfig+0x154>
 8006582:	e00b      	b.n	800659c <UART_SetConfig+0x160>
 8006584:	2300      	movs	r3, #0
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e061      	b.n	800664e <UART_SetConfig+0x212>
 800658a:	2302      	movs	r3, #2
 800658c:	77fb      	strb	r3, [r7, #31]
 800658e:	e05e      	b.n	800664e <UART_SetConfig+0x212>
 8006590:	2304      	movs	r3, #4
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	e05b      	b.n	800664e <UART_SetConfig+0x212>
 8006596:	2308      	movs	r3, #8
 8006598:	77fb      	strb	r3, [r7, #31]
 800659a:	e058      	b.n	800664e <UART_SetConfig+0x212>
 800659c:	2310      	movs	r3, #16
 800659e:	77fb      	strb	r3, [r7, #31]
 80065a0:	e055      	b.n	800664e <UART_SetConfig+0x212>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a47      	ldr	r2, [pc, #284]	; (80066c4 <UART_SetConfig+0x288>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d124      	bne.n	80065f6 <UART_SetConfig+0x1ba>
 80065ac:	4b42      	ldr	r3, [pc, #264]	; (80066b8 <UART_SetConfig+0x27c>)
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80065b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065b8:	d011      	beq.n	80065de <UART_SetConfig+0x1a2>
 80065ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065be:	d817      	bhi.n	80065f0 <UART_SetConfig+0x1b4>
 80065c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c4:	d011      	beq.n	80065ea <UART_SetConfig+0x1ae>
 80065c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ca:	d811      	bhi.n	80065f0 <UART_SetConfig+0x1b4>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <UART_SetConfig+0x19c>
 80065d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d4:	d006      	beq.n	80065e4 <UART_SetConfig+0x1a8>
 80065d6:	e00b      	b.n	80065f0 <UART_SetConfig+0x1b4>
 80065d8:	2300      	movs	r3, #0
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e037      	b.n	800664e <UART_SetConfig+0x212>
 80065de:	2302      	movs	r3, #2
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e034      	b.n	800664e <UART_SetConfig+0x212>
 80065e4:	2304      	movs	r3, #4
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e031      	b.n	800664e <UART_SetConfig+0x212>
 80065ea:	2308      	movs	r3, #8
 80065ec:	77fb      	strb	r3, [r7, #31]
 80065ee:	e02e      	b.n	800664e <UART_SetConfig+0x212>
 80065f0:	2310      	movs	r3, #16
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e02b      	b.n	800664e <UART_SetConfig+0x212>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a33      	ldr	r2, [pc, #204]	; (80066c8 <UART_SetConfig+0x28c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d124      	bne.n	800664a <UART_SetConfig+0x20e>
 8006600:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <UART_SetConfig+0x27c>)
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006608:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800660c:	d011      	beq.n	8006632 <UART_SetConfig+0x1f6>
 800660e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006612:	d817      	bhi.n	8006644 <UART_SetConfig+0x208>
 8006614:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006618:	d011      	beq.n	800663e <UART_SetConfig+0x202>
 800661a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800661e:	d811      	bhi.n	8006644 <UART_SetConfig+0x208>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <UART_SetConfig+0x1f0>
 8006624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006628:	d006      	beq.n	8006638 <UART_SetConfig+0x1fc>
 800662a:	e00b      	b.n	8006644 <UART_SetConfig+0x208>
 800662c:	2300      	movs	r3, #0
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e00d      	b.n	800664e <UART_SetConfig+0x212>
 8006632:	2302      	movs	r3, #2
 8006634:	77fb      	strb	r3, [r7, #31]
 8006636:	e00a      	b.n	800664e <UART_SetConfig+0x212>
 8006638:	2304      	movs	r3, #4
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e007      	b.n	800664e <UART_SetConfig+0x212>
 800663e:	2308      	movs	r3, #8
 8006640:	77fb      	strb	r3, [r7, #31]
 8006642:	e004      	b.n	800664e <UART_SetConfig+0x212>
 8006644:	2310      	movs	r3, #16
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e001      	b.n	800664e <UART_SetConfig+0x212>
 800664a:	2310      	movs	r3, #16
 800664c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006656:	d16c      	bne.n	8006732 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8006658:	7ffb      	ldrb	r3, [r7, #31]
 800665a:	2b08      	cmp	r3, #8
 800665c:	d838      	bhi.n	80066d0 <UART_SetConfig+0x294>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <UART_SetConfig+0x228>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006689 	.word	0x08006689
 8006668:	08006691 	.word	0x08006691
 800666c:	08006699 	.word	0x08006699
 8006670:	080066d1 	.word	0x080066d1
 8006674:	0800669f 	.word	0x0800669f
 8006678:	080066d1 	.word	0x080066d1
 800667c:	080066d1 	.word	0x080066d1
 8006680:	080066d1 	.word	0x080066d1
 8006684:	080066a7 	.word	0x080066a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006688:	f7fe fe8a 	bl	80053a0 <HAL_RCC_GetPCLK1Freq>
 800668c:	61b8      	str	r0, [r7, #24]
        break;
 800668e:	e024      	b.n	80066da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006690:	f7fe fea8 	bl	80053e4 <HAL_RCC_GetPCLK2Freq>
 8006694:	61b8      	str	r0, [r7, #24]
        break;
 8006696:	e020      	b.n	80066da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006698:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <UART_SetConfig+0x290>)
 800669a:	61bb      	str	r3, [r7, #24]
        break;
 800669c:	e01d      	b.n	80066da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800669e:	f7fe fe09 	bl	80052b4 <HAL_RCC_GetSysClockFreq>
 80066a2:	61b8      	str	r0, [r7, #24]
        break;
 80066a4:	e019      	b.n	80066da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066aa:	61bb      	str	r3, [r7, #24]
        break;
 80066ac:	e015      	b.n	80066da <UART_SetConfig+0x29e>
 80066ae:	bf00      	nop
 80066b0:	efff69f3 	.word	0xefff69f3
 80066b4:	40013800 	.word	0x40013800
 80066b8:	40021000 	.word	0x40021000
 80066bc:	40004400 	.word	0x40004400
 80066c0:	40004800 	.word	0x40004800
 80066c4:	40004c00 	.word	0x40004c00
 80066c8:	40005000 	.word	0x40005000
 80066cc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	77bb      	strb	r3, [r7, #30]
        break;
 80066d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d075      	beq.n	80067cc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	005a      	lsls	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	441a      	add	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b0f      	cmp	r3, #15
 80066fc:	d916      	bls.n	800672c <UART_SetConfig+0x2f0>
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006704:	d212      	bcs.n	800672c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f023 030f 	bic.w	r3, r3, #15
 800670e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	b29b      	uxth	r3, r3
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	b29a      	uxth	r2, r3
 800671c:	89fb      	ldrh	r3, [r7, #14]
 800671e:	4313      	orrs	r3, r2
 8006720:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	89fa      	ldrh	r2, [r7, #14]
 8006728:	60da      	str	r2, [r3, #12]
 800672a:	e04f      	b.n	80067cc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	77bb      	strb	r3, [r7, #30]
 8006730:	e04c      	b.n	80067cc <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006732:	7ffb      	ldrb	r3, [r7, #31]
 8006734:	2b08      	cmp	r3, #8
 8006736:	d828      	bhi.n	800678a <UART_SetConfig+0x34e>
 8006738:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <UART_SetConfig+0x304>)
 800673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673e:	bf00      	nop
 8006740:	08006765 	.word	0x08006765
 8006744:	0800676d 	.word	0x0800676d
 8006748:	08006775 	.word	0x08006775
 800674c:	0800678b 	.word	0x0800678b
 8006750:	0800677b 	.word	0x0800677b
 8006754:	0800678b 	.word	0x0800678b
 8006758:	0800678b 	.word	0x0800678b
 800675c:	0800678b 	.word	0x0800678b
 8006760:	08006783 	.word	0x08006783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006764:	f7fe fe1c 	bl	80053a0 <HAL_RCC_GetPCLK1Freq>
 8006768:	61b8      	str	r0, [r7, #24]
        break;
 800676a:	e013      	b.n	8006794 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800676c:	f7fe fe3a 	bl	80053e4 <HAL_RCC_GetPCLK2Freq>
 8006770:	61b8      	str	r0, [r7, #24]
        break;
 8006772:	e00f      	b.n	8006794 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006774:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <UART_SetConfig+0x3a8>)
 8006776:	61bb      	str	r3, [r7, #24]
        break;
 8006778:	e00c      	b.n	8006794 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800677a:	f7fe fd9b 	bl	80052b4 <HAL_RCC_GetSysClockFreq>
 800677e:	61b8      	str	r0, [r7, #24]
        break;
 8006780:	e008      	b.n	8006794 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006786:	61bb      	str	r3, [r7, #24]
        break;
 8006788:	e004      	b.n	8006794 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	77bb      	strb	r3, [r7, #30]
        break;
 8006792:	bf00      	nop
    }

    if (pclk != 0U)
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d018      	beq.n	80067cc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	085a      	lsrs	r2, r3, #1
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	441a      	add	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b0f      	cmp	r3, #15
 80067b4:	d908      	bls.n	80067c8 <UART_SetConfig+0x38c>
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067bc:	d204      	bcs.n	80067c8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	60da      	str	r2, [r3, #12]
 80067c6:	e001      	b.n	80067cc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	007a1200 	.word	0x007a1200

080067e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	f003 0310 	and.w	r3, r3, #16
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01a      	beq.n	80068fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e6:	d10a      	bne.n	80068fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	605a      	str	r2, [r3, #4]
  }
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af02      	add	r7, sp, #8
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800693c:	f7fc f964 	bl	8002c08 <HAL_GetTick>
 8006940:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b08      	cmp	r3, #8
 800694e:	d10e      	bne.n	800696e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f82d 	bl	80069be <UART_WaitOnFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e023      	b.n	80069b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b04      	cmp	r3, #4
 800697a:	d10e      	bne.n	800699a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800697c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f817 	bl	80069be <UART_WaitOnFlagUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e00d      	b.n	80069b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2220      	movs	r2, #32
 80069a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b09c      	sub	sp, #112	; 0x70
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	4613      	mov	r3, r2
 80069cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ce:	e0a5      	b.n	8006b1c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d6:	f000 80a1 	beq.w	8006b1c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069da:	f7fc f915 	bl	8002c08 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d302      	bcc.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80069ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d13e      	bne.n	8006a6e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a04:	667b      	str	r3, [r7, #100]	; 0x64
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e6      	bne.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	663b      	str	r3, [r7, #96]	; 0x60
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a42:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e5      	bne.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e067      	b.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d04f      	beq.n	8006b1c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a8a:	d147      	bne.n	8006b1c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e6      	bne.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f023 0301 	bic.w	r3, r3, #1
 8006ade:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ae8:	623a      	str	r2, [r7, #32]
 8006aea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	69f9      	ldr	r1, [r7, #28]
 8006aee:	6a3a      	ldr	r2, [r7, #32]
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e5      	bne.n	8006ac8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2220      	movs	r2, #32
 8006b06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e010      	b.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69da      	ldr	r2, [r3, #28]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	4013      	ands	r3, r2
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	bf0c      	ite	eq
 8006b2c:	2301      	moveq	r3, #1
 8006b2e:	2300      	movne	r3, #0
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	f43f af4a 	beq.w	80069d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3770      	adds	r7, #112	; 0x70
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006b4c:	4904      	ldr	r1, [pc, #16]	; (8006b60 <MX_FATFS_Init+0x18>)
 8006b4e:	4805      	ldr	r0, [pc, #20]	; (8006b64 <MX_FATFS_Init+0x1c>)
 8006b50:	f003 ff26 	bl	800a9a0 <FATFS_LinkDriver>
 8006b54:	4603      	mov	r3, r0
 8006b56:	461a      	mov	r2, r3
 8006b58:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <MX_FATFS_Init+0x20>)
 8006b5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b5c:	bf00      	nop
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20002758 	.word	0x20002758
 8006b64:	20000010 	.word	0x20000010
 8006b68:	20002754 	.word	0x20002754

08006b6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006b70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fa fdd9 	bl	8001740 <SD_disk_initialize>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fa feb0 	bl	800190c <SD_disk_status>
 8006bac:	4603      	mov	r3, r0
 8006bae:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006bc8:	7bf8      	ldrb	r0, [r7, #15]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	f7fa feb2 	bl	8001938 <SD_disk_read>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	4603      	mov	r3, r0
 8006bee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006bf0:	7bf8      	ldrb	r0, [r7, #15]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	f7fa ff08 	bl	8001a0c <SD_disk_write>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	603a      	str	r2, [r7, #0]
 8006c12:	71fb      	strb	r3, [r7, #7]
 8006c14:	460b      	mov	r3, r1
 8006c16:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	79b9      	ldrb	r1, [r7, #6]
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fa ff78 	bl	8001b14 <SD_disk_ioctl>
 8006c24:	4603      	mov	r3, r0
 8006c26:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	4a08      	ldr	r2, [pc, #32]	; (8006c60 <disk_status+0x30>)
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	79fa      	ldrb	r2, [r7, #7]
 8006c48:	4905      	ldr	r1, [pc, #20]	; (8006c60 <disk_status+0x30>)
 8006c4a:	440a      	add	r2, r1
 8006c4c:	7a12      	ldrb	r2, [r2, #8]
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4798      	blx	r3
 8006c52:	4603      	mov	r3, r0
 8006c54:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	2000297c 	.word	0x2000297c

08006c64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	4a0d      	ldr	r2, [pc, #52]	; (8006cac <disk_initialize+0x48>)
 8006c76:	5cd3      	ldrb	r3, [r2, r3]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d111      	bne.n	8006ca0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	4a0b      	ldr	r2, [pc, #44]	; (8006cac <disk_initialize+0x48>)
 8006c80:	2101      	movs	r1, #1
 8006c82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	4a09      	ldr	r2, [pc, #36]	; (8006cac <disk_initialize+0x48>)
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	79fa      	ldrb	r2, [r7, #7]
 8006c92:	4906      	ldr	r1, [pc, #24]	; (8006cac <disk_initialize+0x48>)
 8006c94:	440a      	add	r2, r1
 8006c96:	7a12      	ldrb	r2, [r2, #8]
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	2000297c 	.word	0x2000297c

08006cb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006cb0:	b590      	push	{r4, r7, lr}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <disk_read+0x3c>)
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	689c      	ldr	r4, [r3, #8]
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	4a07      	ldr	r2, [pc, #28]	; (8006cec <disk_read+0x3c>)
 8006cd0:	4413      	add	r3, r2
 8006cd2:	7a18      	ldrb	r0, [r3, #8]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	47a0      	blx	r4
 8006cdc:	4603      	mov	r3, r0
 8006cde:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd90      	pop	{r4, r7, pc}
 8006cea:	bf00      	nop
 8006cec:	2000297c 	.word	0x2000297c

08006cf0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	4a0a      	ldr	r2, [pc, #40]	; (8006d2c <disk_write+0x3c>)
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	68dc      	ldr	r4, [r3, #12]
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	4a07      	ldr	r2, [pc, #28]	; (8006d2c <disk_write+0x3c>)
 8006d10:	4413      	add	r3, r2
 8006d12:	7a18      	ldrb	r0, [r3, #8]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	47a0      	blx	r4
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd90      	pop	{r4, r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	2000297c 	.word	0x2000297c

08006d30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	603a      	str	r2, [r7, #0]
 8006d3a:	71fb      	strb	r3, [r7, #7]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	4a09      	ldr	r2, [pc, #36]	; (8006d68 <disk_ioctl+0x38>)
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	79fa      	ldrb	r2, [r7, #7]
 8006d4e:	4906      	ldr	r1, [pc, #24]	; (8006d68 <disk_ioctl+0x38>)
 8006d50:	440a      	add	r2, r1
 8006d52:	7a10      	ldrb	r0, [r2, #8]
 8006d54:	79b9      	ldrb	r1, [r7, #6]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	4798      	blx	r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	2000297c 	.word	0x2000297c

08006d6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006d80:	e007      	b.n	8006d92 <mem_cpy+0x26>
		*d++ = *s++;
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	1c53      	adds	r3, r2, #1
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	1c59      	adds	r1, r3, #1
 8006d8c:	6179      	str	r1, [r7, #20]
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	1e5a      	subs	r2, r3, #1
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1f2      	bne.n	8006d82 <mem_cpy+0x16>
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006daa:	b480      	push	{r7}
 8006dac:	b087      	sub	sp, #28
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006dba:	e005      	b.n	8006dc8 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	617a      	str	r2, [r7, #20]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	1e5a      	subs	r2, r3, #1
 8006dcc:	607a      	str	r2, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f4      	bne.n	8006dbc <mem_set+0x12>
}
 8006dd2:	bf00      	nop
 8006dd4:	bf00      	nop
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006de0:	b480      	push	{r7}
 8006de2:	b089      	sub	sp, #36	; 0x24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	61fb      	str	r3, [r7, #28]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006df8:	bf00      	nop
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	1e5a      	subs	r2, r3, #1
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00d      	beq.n	8006e20 <mem_cmp+0x40>
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	61fa      	str	r2, [r7, #28]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	61ba      	str	r2, [r7, #24]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	1acb      	subs	r3, r1, r3
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0ec      	beq.n	8006dfa <mem_cmp+0x1a>
	return r;
 8006e20:	697b      	ldr	r3, [r7, #20]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3724      	adds	r7, #36	; 0x24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006e38:	e002      	b.n	8006e40 <chk_chr+0x12>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <chk_chr+0x26>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d1f2      	bne.n	8006e3a <chk_chr+0xc>
	return *str;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	781b      	ldrb	r3, [r3, #0]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60bb      	str	r3, [r7, #8]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	e03b      	b.n	8006ef0 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8006e78:	4931      	ldr	r1, [pc, #196]	; (8006f40 <chk_lock+0xdc>)
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d02c      	beq.n	8006ee6 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006e8c:	492c      	ldr	r1, [pc, #176]	; (8006f40 <chk_lock+0xdc>)
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4613      	mov	r3, r2
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d120      	bne.n	8006eea <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8006ea8:	4925      	ldr	r1, [pc, #148]	; (8006f40 <chk_lock+0xdc>)
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4613      	mov	r3, r2
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec0:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d111      	bne.n	8006eea <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006ec6:	491e      	ldr	r1, [pc, #120]	; (8006f40 <chk_lock+0xdc>)
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	881a      	ldrh	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ede:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d102      	bne.n	8006eea <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006ee4:	e007      	b.n	8006ef6 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3301      	adds	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d9c0      	bls.n	8006e78 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d109      	bne.n	8006f10 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <chk_lock+0xa4>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d101      	bne.n	8006f0c <chk_lock+0xa8>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e013      	b.n	8006f34 <chk_lock+0xd0>
 8006f0c:	2312      	movs	r3, #18
 8006f0e:	e011      	b.n	8006f34 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <chk_lock+0xca>
 8006f16:	490a      	ldr	r1, [pc, #40]	; (8006f40 <chk_lock+0xdc>)
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	440b      	add	r3, r1
 8006f24:	330a      	adds	r3, #10
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2c:	d101      	bne.n	8006f32 <chk_lock+0xce>
 8006f2e:	2310      	movs	r3, #16
 8006f30:	e000      	b.n	8006f34 <chk_lock+0xd0>
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20002764 	.word	0x20002764

08006f44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	607b      	str	r3, [r7, #4]
 8006f4e:	e002      	b.n	8006f56 <enq_lock+0x12>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3301      	adds	r3, #1
 8006f54:	607b      	str	r3, [r7, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d809      	bhi.n	8006f70 <enq_lock+0x2c>
 8006f5c:	490a      	ldr	r1, [pc, #40]	; (8006f88 <enq_lock+0x44>)
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1ef      	bne.n	8006f50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	bf14      	ite	ne
 8006f76:	2301      	movne	r3, #1
 8006f78:	2300      	moveq	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	20002764 	.word	0x20002764

08006f8c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	e02e      	b.n	8006ffa <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8006f9c:	4959      	ldr	r1, [pc, #356]	; (8007104 <inc_lock+0x178>)
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d11d      	bne.n	8006ff4 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8006fb8:	4952      	ldr	r1, [pc, #328]	; (8007104 <inc_lock+0x178>)
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d10e      	bne.n	8006ff4 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8006fd6:	494b      	ldr	r1, [pc, #300]	; (8007104 <inc_lock+0x178>)
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	881a      	ldrh	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fee:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d006      	beq.n	8007002 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d9cd      	bls.n	8006f9c <inc_lock+0x10>
 8007000:	e000      	b.n	8007004 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8007002:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d148      	bne.n	800709c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	e002      	b.n	8007016 <inc_lock+0x8a>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d809      	bhi.n	8007030 <inc_lock+0xa4>
 800701c:	4939      	ldr	r1, [pc, #228]	; (8007104 <inc_lock+0x178>)
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4613      	mov	r3, r2
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1ef      	bne.n	8007010 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d101      	bne.n	800703a <inc_lock+0xae>
 8007036:	2300      	movs	r3, #0
 8007038:	e05d      	b.n	80070f6 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007040:	6819      	ldr	r1, [r3, #0]
 8007042:	4830      	ldr	r0, [pc, #192]	; (8007104 <inc_lock+0x178>)
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4613      	mov	r3, r2
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4403      	add	r3, r0
 8007050:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007058:	6899      	ldr	r1, [r3, #8]
 800705a:	482a      	ldr	r0, [pc, #168]	; (8007104 <inc_lock+0x178>)
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4613      	mov	r3, r2
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4403      	add	r3, r0
 8007068:	3304      	adds	r3, #4
 800706a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007072:	88d8      	ldrh	r0, [r3, #6]
 8007074:	4923      	ldr	r1, [pc, #140]	; (8007104 <inc_lock+0x178>)
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4613      	mov	r3, r2
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	3308      	adds	r3, #8
 8007084:	4602      	mov	r2, r0
 8007086:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8007088:	491e      	ldr	r1, [pc, #120]	; (8007104 <inc_lock+0x178>)
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4613      	mov	r3, r2
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	440b      	add	r3, r1
 8007096:	330a      	adds	r3, #10
 8007098:	2200      	movs	r2, #0
 800709a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00c      	beq.n	80070bc <inc_lock+0x130>
 80070a2:	4918      	ldr	r1, [pc, #96]	; (8007104 <inc_lock+0x178>)
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4613      	mov	r3, r2
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	330a      	adds	r3, #10
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <inc_lock+0x130>
 80070b8:	2300      	movs	r3, #0
 80070ba:	e01c      	b.n	80070f6 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10b      	bne.n	80070da <inc_lock+0x14e>
 80070c2:	4910      	ldr	r1, [pc, #64]	; (8007104 <inc_lock+0x178>)
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4613      	mov	r3, r2
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	330a      	adds	r3, #10
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	b299      	uxth	r1, r3
 80070d8:	e001      	b.n	80070de <inc_lock+0x152>
 80070da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070de:	4809      	ldr	r0, [pc, #36]	; (8007104 <inc_lock+0x178>)
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4613      	mov	r3, r2
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4403      	add	r3, r0
 80070ec:	330a      	adds	r3, #10
 80070ee:	460a      	mov	r2, r1
 80070f0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3301      	adds	r3, #1
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20002764 	.word	0x20002764

08007108 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3b01      	subs	r3, #1
 8007114:	607b      	str	r3, [r7, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d82e      	bhi.n	800717a <dec_lock+0x72>
		n = Files[i].ctr;
 800711c:	491b      	ldr	r1, [pc, #108]	; (800718c <dec_lock+0x84>)
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	330a      	adds	r3, #10
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007130:	89fb      	ldrh	r3, [r7, #14]
 8007132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007136:	d101      	bne.n	800713c <dec_lock+0x34>
 8007138:	2300      	movs	r3, #0
 800713a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800713c:	89fb      	ldrh	r3, [r7, #14]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <dec_lock+0x40>
 8007142:	89fb      	ldrh	r3, [r7, #14]
 8007144:	3b01      	subs	r3, #1
 8007146:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007148:	4910      	ldr	r1, [pc, #64]	; (800718c <dec_lock+0x84>)
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	330a      	adds	r3, #10
 8007158:	89fa      	ldrh	r2, [r7, #14]
 800715a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800715c:	89fb      	ldrh	r3, [r7, #14]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d108      	bne.n	8007174 <dec_lock+0x6c>
 8007162:	490a      	ldr	r1, [pc, #40]	; (800718c <dec_lock+0x84>)
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	4613      	mov	r3, r2
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	737b      	strb	r3, [r7, #13]
 8007178:	e001      	b.n	800717e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800717a:	2302      	movs	r3, #2
 800717c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800717e:	7b7b      	ldrb	r3, [r7, #13]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	20002764 	.word	0x20002764

08007190 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	e016      	b.n	80071cc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800719e:	4910      	ldr	r1, [pc, #64]	; (80071e0 <clear_lock+0x50>)
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4613      	mov	r3, r2
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	440b      	add	r3, r1
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d108      	bne.n	80071c6 <clear_lock+0x36>
 80071b4:	490a      	ldr	r1, [pc, #40]	; (80071e0 <clear_lock+0x50>)
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4613      	mov	r3, r2
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	440b      	add	r3, r1
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3301      	adds	r3, #1
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d9e5      	bls.n	800719e <clear_lock+0xe>
	}
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	20002764 	.word	0x20002764

080071e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f6:	791b      	ldrb	r3, [r3, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d040      	beq.n	800727e <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800720c:	7858      	ldrb	r0, [r3, #1]
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	2301      	movs	r3, #1
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	f7ff fd6c 	bl	8006cf0 <disk_write>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <sync_window+0x40>
			res = FR_DISK_ERR;
 800721e:	2301      	movs	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]
 8007222:	e02c      	b.n	800727e <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722a:	2200      	movs	r2, #0
 800722c:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	1ad2      	subs	r2, r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	429a      	cmp	r2, r3
 8007244:	d21b      	bcs.n	800727e <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724c:	78db      	ldrb	r3, [r3, #3]
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	e012      	b.n	8007278 <sync_window+0x94>
					wsect += fs->fsize;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4413      	add	r3, r2
 800725e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007266:	7858      	ldrb	r0, [r3, #1]
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	2301      	movs	r3, #1
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	f7ff fd3f 	bl	8006cf0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	3b01      	subs	r3, #1
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d8e9      	bhi.n	8007252 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800727e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d01e      	beq.n	80072e2 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff ff9d 	bl	80071e4 <sync_window>
 80072aa:	4603      	mov	r3, r0
 80072ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d116      	bne.n	80072e2 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ba:	7858      	ldrb	r0, [r3, #1]
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	2301      	movs	r3, #1
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	f7ff fcf5 	bl	8006cb0 <disk_read>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d004      	beq.n	80072d6 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80072cc:	f04f 33ff 	mov.w	r3, #4294967295
 80072d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072dc:	461a      	mov	r2, r3
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff ff75 	bl	80071e4 <sync_window>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 80ad 	bne.w	8007460 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b03      	cmp	r3, #3
 8007310:	f040 8098 	bne.w	8007444 <sync_fs+0x158>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800731a:	795b      	ldrb	r3, [r3, #5]
 800731c:	2b01      	cmp	r3, #1
 800731e:	f040 8091 	bne.w	8007444 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732a:	895b      	ldrh	r3, [r3, #10]
 800732c:	461a      	mov	r2, r3
 800732e:	2100      	movs	r1, #0
 8007330:	f7ff fd3b 	bl	8006daa <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2255      	movs	r2, #85	; 0x55
 8007338:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	22aa      	movs	r2, #170	; 0xaa
 8007340:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2252      	movs	r2, #82	; 0x52
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2252      	movs	r2, #82	; 0x52
 800734e:	705a      	strb	r2, [r3, #1]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2261      	movs	r2, #97	; 0x61
 8007354:	709a      	strb	r2, [r3, #2]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2241      	movs	r2, #65	; 0x41
 800735a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2272      	movs	r2, #114	; 0x72
 8007360:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2272      	movs	r2, #114	; 0x72
 8007368:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2241      	movs	r2, #65	; 0x41
 8007370:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2261      	movs	r2, #97	; 0x61
 8007378:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	b2da      	uxtb	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	b29b      	uxth	r3, r3
 8007396:	0a1b      	lsrs	r3, r3, #8
 8007398:	b29b      	uxth	r3, r3
 800739a:	b2da      	uxtb	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	0c1b      	lsrs	r3, r3, #16
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	0e1b      	lsrs	r3, r3, #24
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	0a1b      	lsrs	r3, r3, #8
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	0c1b      	lsrs	r3, r3, #16
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	0e1b      	lsrs	r3, r3, #24
 8007408:	b2da      	uxtb	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	3301      	adds	r3, #1
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007420:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007428:	7858      	ldrb	r0, [r3, #1]
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	2301      	movs	r3, #1
 8007436:	f7ff fc5b 	bl	8006cf0 <disk_write>
			fs->fsi_flag = 0;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007440:	2200      	movs	r2, #0
 8007442:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744a:	785b      	ldrb	r3, [r3, #1]
 800744c:	2200      	movs	r2, #0
 800744e:	2100      	movs	r1, #0
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fc6d 	bl	8006d30 <disk_ioctl>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800745c:	2301      	movs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	3b02      	subs	r3, #2
 8007478:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	3b02      	subs	r3, #2
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d301      	bcc.n	800748e <clust2sect+0x24>
 800748a:	2300      	movs	r3, #0
 800748c:	e00c      	b.n	80074a8 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007494:	789b      	ldrb	r3, [r3, #2]
 8007496:	461a      	mov	r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	fb03 f202 	mul.w	r2, r3, r2
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	4413      	add	r3, r2
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d906      	bls.n	80074d2 <get_fat+0x1e>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d302      	bcc.n	80074d8 <get_fat+0x24>
		val = 1;	/* Internal error */
 80074d2:	2301      	movs	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	e0e4      	b.n	80076a2 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80074d8:	f04f 33ff 	mov.w	r3, #4294967295
 80074dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	f000 8098 	beq.w	800761c <get_fat+0x168>
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	f300 80ce 	bgt.w	800768e <get_fat+0x1da>
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d002      	beq.n	80074fc <get_fat+0x48>
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d05f      	beq.n	80075ba <get_fat+0x106>
 80074fa:	e0c8      	b.n	800768e <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007510:	6a1a      	ldr	r2, [r3, #32]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007518:	895b      	ldrh	r3, [r3, #10]
 800751a:	4619      	mov	r1, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007522:	4413      	add	r3, r2
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7ff feae 	bl	8007288 <move_window>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 80b0 	bne.w	8007694 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	60fa      	str	r2, [r7, #12]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007540:	8952      	ldrh	r2, [r2, #10]
 8007542:	fbb3 f1f2 	udiv	r1, r3, r2
 8007546:	fb01 f202 	mul.w	r2, r1, r2
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	5cd3      	ldrb	r3, [r2, r3]
 8007550:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007558:	6a1a      	ldr	r2, [r3, #32]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007560:	895b      	ldrh	r3, [r3, #10]
 8007562:	4619      	mov	r1, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	fbb3 f3f1 	udiv	r3, r3, r1
 800756a:	4413      	add	r3, r2
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fe8a 	bl	8007288 <move_window>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	f040 808e 	bne.w	8007698 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007582:	895b      	ldrh	r3, [r3, #10]
 8007584:	461a      	mov	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	fbb3 f1f2 	udiv	r1, r3, r2
 800758c:	fb01 f202 	mul.w	r2, r1, r2
 8007590:	1a9b      	subs	r3, r3, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	5cd3      	ldrb	r3, [r2, r3]
 8007596:	021b      	lsls	r3, r3, #8
 8007598:	461a      	mov	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	4313      	orrs	r3, r2
 800759e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <get_fat+0xfc>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	091b      	lsrs	r3, r3, #4
 80075ae:	e002      	b.n	80075b6 <get_fat+0x102>
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075b6:	617b      	str	r3, [r7, #20]
			break;
 80075b8:	e073      	b.n	80076a2 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c0:	6a1a      	ldr	r2, [r3, #32]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c8:	895b      	ldrh	r3, [r3, #10]
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	4619      	mov	r1, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80075d6:	4413      	add	r3, r2
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff fe54 	bl	8007288 <move_window>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d15a      	bne.n	800769c <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075f0:	8952      	ldrh	r2, [r2, #10]
 80075f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80075f6:	fb01 f202 	mul.w	r2, r1, r2
 80075fa:	1a9b      	subs	r3, r3, r2
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4413      	add	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	3301      	adds	r3, #1
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	b21a      	sxth	r2, r3
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	b21b      	sxth	r3, r3
 8007612:	4313      	orrs	r3, r2
 8007614:	b21b      	sxth	r3, r3
 8007616:	b29b      	uxth	r3, r3
 8007618:	617b      	str	r3, [r7, #20]
			break;
 800761a:	e042      	b.n	80076a2 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007622:	6a1a      	ldr	r2, [r3, #32]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800762a:	895b      	ldrh	r3, [r3, #10]
 800762c:	089b      	lsrs	r3, r3, #2
 800762e:	b29b      	uxth	r3, r3
 8007630:	4619      	mov	r1, r3
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	fbb3 f3f1 	udiv	r3, r3, r1
 8007638:	4413      	add	r3, r2
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff fe23 	bl	8007288 <move_window>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d12b      	bne.n	80076a0 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007652:	8952      	ldrh	r2, [r2, #10]
 8007654:	fbb3 f1f2 	udiv	r1, r3, r2
 8007658:	fb01 f202 	mul.w	r2, r1, r2
 800765c:	1a9b      	subs	r3, r3, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	4413      	add	r3, r2
 8007662:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	3303      	adds	r3, #3
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	061a      	lsls	r2, r3, #24
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	3302      	adds	r3, #2
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	041b      	lsls	r3, r3, #16
 8007674:	4313      	orrs	r3, r2
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	3201      	adds	r2, #1
 800767a:	7812      	ldrb	r2, [r2, #0]
 800767c:	0212      	lsls	r2, r2, #8
 800767e:	4313      	orrs	r3, r2
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	4313      	orrs	r3, r2
 8007686:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800768a:	617b      	str	r3, [r7, #20]
			break;
 800768c:	e009      	b.n	80076a2 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800768e:	2301      	movs	r3, #1
 8007690:	617b      	str	r3, [r7, #20]
 8007692:	e006      	b.n	80076a2 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007694:	bf00      	nop
 8007696:	e004      	b.n	80076a2 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007698:	bf00      	nop
 800769a:	e002      	b.n	80076a2 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800769c:	bf00      	nop
 800769e:	e000      	b.n	80076a2 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80076a0:	bf00      	nop
		}
	}

	return val;
 80076a2:	697b      	ldr	r3, [r7, #20]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d906      	bls.n	80076cc <put_fat+0x20>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d302      	bcc.n	80076d2 <put_fat+0x26>
		res = FR_INT_ERR;
 80076cc:	2302      	movs	r3, #2
 80076ce:	77fb      	strb	r3, [r7, #31]
 80076d0:	e13a      	b.n	8007948 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	f000 80d0 	beq.w	8007880 <put_fat+0x1d4>
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	f300 8127 	bgt.w	8007934 <put_fat+0x288>
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d003      	beq.n	80076f2 <put_fat+0x46>
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	f000 808f 	beq.w	800780e <put_fat+0x162>
 80076f0:	e120      	b.n	8007934 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007706:	6a1a      	ldr	r2, [r3, #32]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770e:	895b      	ldrh	r3, [r3, #10]
 8007710:	4619      	mov	r1, r3
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	fbb3 f3f1 	udiv	r3, r3, r1
 8007718:	4413      	add	r3, r2
 800771a:	4619      	mov	r1, r3
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f7ff fdb3 	bl	8007288 <move_window>
 8007722:	4603      	mov	r3, r0
 8007724:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007726:	7ffb      	ldrb	r3, [r7, #31]
 8007728:	2b00      	cmp	r3, #0
 800772a:	f040 8106 	bne.w	800793a <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	617a      	str	r2, [r7, #20]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800773a:	8952      	ldrh	r2, [r2, #10]
 800773c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007740:	fb01 f202 	mul.w	r2, r1, r2
 8007744:	1a9b      	subs	r3, r3, r2
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4413      	add	r3, r2
 800774a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00d      	beq.n	8007772 <put_fat+0xc6>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	b25b      	sxtb	r3, r3
 800775c:	f003 030f 	and.w	r3, r3, #15
 8007760:	b25a      	sxtb	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	b25b      	sxtb	r3, r3
 800776a:	4313      	orrs	r3, r2
 800776c:	b25b      	sxtb	r3, r3
 800776e:	b2db      	uxtb	r3, r3
 8007770:	e001      	b.n	8007776 <put_fat+0xca>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007780:	2201      	movs	r2, #1
 8007782:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800778a:	6a1a      	ldr	r2, [r3, #32]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007792:	895b      	ldrh	r3, [r3, #10]
 8007794:	4619      	mov	r1, r3
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	fbb3 f3f1 	udiv	r3, r3, r1
 800779c:	4413      	add	r3, r2
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff fd71 	bl	8007288 <move_window>
 80077a6:	4603      	mov	r3, r0
 80077a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077aa:	7ffb      	ldrb	r3, [r7, #31]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f040 80c6 	bne.w	800793e <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b8:	895b      	ldrh	r3, [r3, #10]
 80077ba:	461a      	mov	r2, r3
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	fbb3 f1f2 	udiv	r1, r3, r2
 80077c2:	fb01 f202 	mul.w	r2, r1, r2
 80077c6:	1a9b      	subs	r3, r3, r2
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4413      	add	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <put_fat+0x134>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	091b      	lsrs	r3, r3, #4
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	e00e      	b.n	80077fe <put_fat+0x152>
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	b25b      	sxtb	r3, r3
 80077e6:	f023 030f 	bic.w	r3, r3, #15
 80077ea:	b25a      	sxtb	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	0a1b      	lsrs	r3, r3, #8
 80077f0:	b25b      	sxtb	r3, r3
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	4313      	orrs	r3, r2
 80077fa:	b25b      	sxtb	r3, r3
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007808:	2201      	movs	r2, #1
 800780a:	711a      	strb	r2, [r3, #4]
			break;
 800780c:	e09c      	b.n	8007948 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007814:	6a1a      	ldr	r2, [r3, #32]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781c:	895b      	ldrh	r3, [r3, #10]
 800781e:	085b      	lsrs	r3, r3, #1
 8007820:	b29b      	uxth	r3, r3
 8007822:	4619      	mov	r1, r3
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	fbb3 f3f1 	udiv	r3, r3, r1
 800782a:	4413      	add	r3, r2
 800782c:	4619      	mov	r1, r3
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f7ff fd2a 	bl	8007288 <move_window>
 8007834:	4603      	mov	r3, r0
 8007836:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007838:	7ffb      	ldrb	r3, [r7, #31]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f040 8081 	bne.w	8007942 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800784a:	8952      	ldrh	r2, [r2, #10]
 800784c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007850:	fb01 f202 	mul.w	r2, r1, r2
 8007854:	1a9b      	subs	r3, r3, r2
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4413      	add	r3, r2
 800785a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	b2da      	uxtb	r2, r3
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	b29b      	uxth	r3, r3
 8007868:	0a1b      	lsrs	r3, r3, #8
 800786a:	b29a      	uxth	r2, r3
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	3301      	adds	r3, #1
 8007870:	b2d2      	uxtb	r2, r2
 8007872:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787a:	2201      	movs	r2, #1
 800787c:	711a      	strb	r2, [r3, #4]
			break;
 800787e:	e063      	b.n	8007948 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007886:	6a1a      	ldr	r2, [r3, #32]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800788e:	895b      	ldrh	r3, [r3, #10]
 8007890:	089b      	lsrs	r3, r3, #2
 8007892:	b29b      	uxth	r3, r3
 8007894:	4619      	mov	r1, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	fbb3 f3f1 	udiv	r3, r3, r1
 800789c:	4413      	add	r3, r2
 800789e:	4619      	mov	r1, r3
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f7ff fcf1 	bl	8007288 <move_window>
 80078a6:	4603      	mov	r3, r0
 80078a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078aa:	7ffb      	ldrb	r3, [r7, #31]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d14a      	bne.n	8007946 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078ba:	8952      	ldrh	r2, [r2, #10]
 80078bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80078c0:	fb01 f202 	mul.w	r2, r1, r2
 80078c4:	1a9b      	subs	r3, r3, r2
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	3303      	adds	r3, #3
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	061a      	lsls	r2, r3, #24
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	3302      	adds	r3, #2
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	041b      	lsls	r3, r3, #16
 80078dc:	4313      	orrs	r3, r2
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	3201      	adds	r2, #1
 80078e2:	7812      	ldrb	r2, [r2, #0]
 80078e4:	0212      	lsls	r2, r2, #8
 80078e6:	4313      	orrs	r3, r2
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	7812      	ldrb	r2, [r2, #0]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	b29b      	uxth	r3, r3
 8007904:	0a1b      	lsrs	r3, r3, #8
 8007906:	b29a      	uxth	r2, r3
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	3301      	adds	r3, #1
 800790c:	b2d2      	uxtb	r2, r2
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	0c1a      	lsrs	r2, r3, #16
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	3302      	adds	r3, #2
 8007918:	b2d2      	uxtb	r2, r2
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	0e1a      	lsrs	r2, r3, #24
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	3303      	adds	r3, #3
 8007924:	b2d2      	uxtb	r2, r2
 8007926:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792e:	2201      	movs	r2, #1
 8007930:	711a      	strb	r2, [r3, #4]
			break;
 8007932:	e009      	b.n	8007948 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8007934:	2302      	movs	r3, #2
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e006      	b.n	8007948 <put_fat+0x29c>
			if (res != FR_OK) break;
 800793a:	bf00      	nop
 800793c:	e004      	b.n	8007948 <put_fat+0x29c>
			if (res != FR_OK) break;
 800793e:	bf00      	nop
 8007940:	e002      	b.n	8007948 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007942:	bf00      	nop
 8007944:	e000      	b.n	8007948 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007946:	bf00      	nop
		}
	}

	return res;
 8007948:	7ffb      	ldrb	r3, [r7, #31]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3720      	adds	r7, #32
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d906      	bls.n	8007970 <remove_chain+0x1e>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	429a      	cmp	r2, r3
 800796e:	d302      	bcc.n	8007976 <remove_chain+0x24>
		res = FR_INT_ERR;
 8007970:	2302      	movs	r3, #2
 8007972:	73fb      	strb	r3, [r7, #15]
 8007974:	e049      	b.n	8007a0a <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800797a:	e03b      	b.n	80079f4 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff fd98 	bl	80074b4 <get_fat>
 8007984:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d03b      	beq.n	8007a04 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d102      	bne.n	8007998 <remove_chain+0x46>
 8007992:	2302      	movs	r3, #2
 8007994:	73fb      	strb	r3, [r7, #15]
 8007996:	e038      	b.n	8007a0a <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799e:	d102      	bne.n	80079a6 <remove_chain+0x54>
 80079a0:	2301      	movs	r3, #1
 80079a2:	73fb      	strb	r3, [r7, #15]
 80079a4:	e031      	b.n	8007a0a <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80079a6:	2200      	movs	r2, #0
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fe7e 	bl	80076ac <put_fat>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d126      	bne.n	8007a08 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c6:	d013      	beq.n	80079f0 <remove_chain+0x9e>
				fs->free_clust++;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	3301      	adds	r3, #1
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079d8:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e0:	795b      	ldrb	r3, [r3, #5]
 80079e2:	f043 0301 	orr.w	r3, r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ee:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d3bc      	bcc.n	800797c <remove_chain+0x2a>
 8007a02:	e002      	b.n	8007a0a <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8007a04:	bf00      	nop
 8007a06:	e000      	b.n	8007a0a <remove_chain+0xb8>
			if (res != FR_OK) break;
 8007a08:	bf00      	nop
		}
	}

	return res;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d111      	bne.n	8007a48 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d006      	beq.n	8007a42 <create_chain+0x2e>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d31d      	bcc.n	8007a7e <create_chain+0x6a>
 8007a42:	2301      	movs	r3, #1
 8007a44:	613b      	str	r3, [r7, #16]
 8007a46:	e01a      	b.n	8007a7e <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff fd32 	bl	80074b4 <get_fat>
 8007a50:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d801      	bhi.n	8007a5c <create_chain+0x48>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e07f      	b.n	8007b5c <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a62:	d101      	bne.n	8007a68 <create_chain+0x54>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	e079      	b.n	8007b5c <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d201      	bcs.n	8007a7a <create_chain+0x66>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	e070      	b.n	8007b5c <create_chain+0x148>
		scl = clst;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	3301      	adds	r3, #1
 8007a86:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d307      	bcc.n	8007aa6 <create_chain+0x92>
			ncl = 2;
 8007a96:	2302      	movs	r3, #2
 8007a98:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d901      	bls.n	8007aa6 <create_chain+0x92>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e05a      	b.n	8007b5c <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007aa6:	6979      	ldr	r1, [r7, #20]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff fd03 	bl	80074b4 <get_fat>
 8007aae:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00e      	beq.n	8007ad4 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d002      	beq.n	8007ac4 <create_chain+0xb0>
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <create_chain+0xb4>
			return cs;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	e049      	b.n	8007b5c <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d1d8      	bne.n	8007a82 <create_chain+0x6e>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e043      	b.n	8007b5c <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8007ad4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007ad6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007ada:	6979      	ldr	r1, [r7, #20]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff fde5 	bl	80076ac <put_fat>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d109      	bne.n	8007b00 <create_chain+0xec>
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d006      	beq.n	8007b00 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fdd8 	bl	80076ac <put_fat>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d121      	bne.n	8007b4a <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1e:	d01c      	beq.n	8007b5a <create_chain+0x146>
			fs->free_clust--;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b30:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b38:	795b      	ldrb	r3, [r3, #5]
 8007b3a:	f043 0301 	orr.w	r3, r3, #1
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b46:	715a      	strb	r2, [r3, #5]
 8007b48:	e007      	b.n	8007b5a <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d102      	bne.n	8007b56 <create_chain+0x142>
 8007b50:	f04f 33ff 	mov.w	r3, #4294967295
 8007b54:	e000      	b.n	8007b58 <create_chain+0x144>
 8007b56:	2301      	movs	r3, #1
 8007b58:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007b5a:	697b      	ldr	r3, [r7, #20]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	3304      	adds	r3, #4
 8007b78:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b86:	895b      	ldrh	r3, [r3, #10]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b96:	6812      	ldr	r2, [r2, #0]
 8007b98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b9c:	7892      	ldrb	r2, [r2, #2]
 8007b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	1d1a      	adds	r2, r3, #4
 8007ba8:	613a      	str	r2, [r7, #16]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <clmt_clust+0x54>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e010      	b.n	8007bda <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d307      	bcc.n	8007bd0 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007bce:	e7e9      	b.n	8007ba4 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8007bd0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	4413      	add	r3, r2
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b086      	sub	sp, #24
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfa:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d009      	beq.n	8007c20 <dir_sdi+0x3a>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d301      	bcc.n	8007c24 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8007c20:	2302      	movs	r3, #2
 8007c22:	e0aa      	b.n	8007d7a <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d110      	bne.n	8007c4c <dir_sdi+0x66>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d107      	bne.n	8007c4c <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d115      	bne.n	8007c7e <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c5e:	891b      	ldrh	r3, [r3, #8]
 8007c60:	461a      	mov	r2, r3
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d301      	bcc.n	8007c6c <dir_sdi+0x86>
			return FR_INT_ERR;
 8007c68:	2302      	movs	r3, #2
 8007c6a:	e086      	b.n	8007d7a <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	613b      	str	r3, [r7, #16]
 8007c7c:	e043      	b.n	8007d06 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8a:	895b      	ldrh	r3, [r3, #10]
 8007c8c:	095b      	lsrs	r3, r3, #5
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	461a      	mov	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9e:	789b      	ldrb	r3, [r3, #2]
 8007ca0:	fb02 f303 	mul.w	r3, r2, r3
 8007ca4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007ca6:	e021      	b.n	8007cec <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6979      	ldr	r1, [r7, #20]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fbfe 	bl	80074b4 <get_fat>
 8007cb8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc0:	d101      	bne.n	8007cc6 <dir_sdi+0xe0>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e059      	b.n	8007d7a <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d909      	bls.n	8007ce0 <dir_sdi+0xfa>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d301      	bcc.n	8007ce4 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e04a      	b.n	8007d7a <dir_sdi+0x194>
			idx -= ic;
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d2d9      	bcs.n	8007ca8 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6979      	ldr	r1, [r7, #20]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff fbb3 	bl	800746a <clust2sect>
 8007d04:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <dir_sdi+0x136>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e02e      	b.n	8007d7a <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d28:	895b      	ldrh	r3, [r3, #10]
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	4413      	add	r3, r2
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d40:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d58:	895b      	ldrh	r3, [r3, #10]
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	461a      	mov	r2, r3
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d66:	fb01 f202 	mul.w	r2, r1, r2
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	015b      	lsls	r3, r3, #5
 8007d6e:	4403      	add	r3, r0
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d76:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007d82:	b590      	push	{r4, r7, lr}
 8007d84:	b087      	sub	sp, #28
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d92:	88db      	ldrh	r3, [r3, #6]
 8007d94:	3301      	adds	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <dir_next+0x2a>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <dir_next+0x2e>
		return FR_NO_FILE;
 8007dac:	2304      	movs	r3, #4
 8007dae:	e12e      	b.n	800800e <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dbc:	895b      	ldrh	r3, [r3, #10]
 8007dbe:	095b      	lsrs	r3, r3, #5
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dca:	fb01 f202 	mul.w	r2, r1, r2
 8007dce:	1a9b      	subs	r3, r3, r2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f040 80fa 	bne.w	8007fca <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	3301      	adds	r3, #1
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007de6:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10d      	bne.n	8007e10 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e00:	891b      	ldrh	r3, [r3, #8]
 8007e02:	461a      	mov	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4293      	cmp	r3, r2
 8007e08:	f0c0 80df 	bcc.w	8007fca <dir_next+0x248>
				return FR_NO_FILE;
 8007e0c:	2304      	movs	r3, #4
 8007e0e:	e0fe      	b.n	800800e <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e1c:	895b      	ldrh	r3, [r3, #10]
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	461a      	mov	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e36:	7892      	ldrb	r2, [r2, #2]
 8007e38:	3a01      	subs	r2, #1
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 80c4 	bne.w	8007fca <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f7ff fb2d 	bl	80074b4 <get_fat>
 8007e5a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d801      	bhi.n	8007e66 <dir_next+0xe4>
 8007e62:	2302      	movs	r3, #2
 8007e64:	e0d3      	b.n	800800e <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6c:	d101      	bne.n	8007e72 <dir_next+0xf0>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e0cd      	b.n	800800e <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	f0c0 808e 	bcc.w	8007fa4 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <dir_next+0x110>
 8007e8e:	2304      	movs	r3, #4
 8007e90:	e0bd      	b.n	800800e <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f7ff fdb5 	bl	8007a14 <create_chain>
 8007eaa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <dir_next+0x134>
 8007eb2:	2307      	movs	r3, #7
 8007eb4:	e0ab      	b.n	800800e <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <dir_next+0x13e>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e0a6      	b.n	800800e <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec6:	d101      	bne.n	8007ecc <dir_next+0x14a>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e0a0      	b.n	800800e <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff f985 	bl	80071e4 <sync_window>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <dir_next+0x162>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e094      	b.n	800800e <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efa:	895b      	ldrh	r3, [r3, #10]
 8007efc:	461a      	mov	r2, r3
 8007efe:	2100      	movs	r1, #0
 8007f00:	f7fe ff53 	bl	8006daa <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f12:	681c      	ldr	r4, [r3, #0]
 8007f14:	6979      	ldr	r1, [r7, #20]
 8007f16:	4610      	mov	r0, r2
 8007f18:	f7ff faa7 	bl	800746a <clust2sect>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8007f22:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007f24:	2300      	movs	r3, #0
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	e021      	b.n	8007f6e <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f36:	2201      	movs	r2, #1
 8007f38:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff f94e 	bl	80071e4 <sync_window>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <dir_next+0x1d0>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e05d      	b.n	800800e <dir_next+0x28c>
						dp->fs->winsect++;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8007f5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f60:	3201      	adds	r2, #1
 8007f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f66:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7a:	789b      	ldrb	r3, [r3, #2]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d3d2      	bcc.n	8007f2a <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	1acb      	subs	r3, r1, r3
 8007f9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007faa:	461a      	mov	r2, r3
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6979      	ldr	r1, [r7, #20]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7ff fa55 	bl	800746a <clust2sect>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc8:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd4:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fec:	895b      	ldrh	r3, [r3, #10]
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ffa:	fb01 f202 	mul.w	r2, r1, r2
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	015b      	lsls	r3, r3, #5
 8008002:	4403      	add	r3, r0
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800800a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	371c      	adds	r7, #28
 8008012:	46bd      	mov	sp, r7
 8008014:	bd90      	pop	{r4, r7, pc}

08008016 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8008020:	2100      	movs	r1, #0
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff fddf 	bl	8007be6 <dir_sdi>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d135      	bne.n	800809e <dir_alloc+0x88>
		n = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f7ff f91d 	bl	8007288 <move_window>
 800804e:	4603      	mov	r3, r0
 8008050:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d121      	bne.n	800809c <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2be5      	cmp	r3, #229	; 0xe5
 8008064:	d006      	beq.n	8008074 <dir_alloc+0x5e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d107      	bne.n	8008084 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	3301      	adds	r3, #1
 8008078:	60bb      	str	r3, [r7, #8]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d102      	bne.n	8008088 <dir_alloc+0x72>
 8008082:	e00c      	b.n	800809e <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008084:	2300      	movs	r3, #0
 8008086:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008088:	2101      	movs	r1, #1
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff fe79 	bl	8007d82 <dir_next>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0cd      	beq.n	8008036 <dir_alloc+0x20>
 800809a:	e000      	b.n	800809e <dir_alloc+0x88>
			if (res != FR_OK) break;
 800809c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d101      	bne.n	80080a8 <dir_alloc+0x92>
 80080a4:	2307      	movs	r3, #7
 80080a6:	73fb      	strb	r3, [r7, #15]
	return res;
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b085      	sub	sp, #20
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	331b      	adds	r3, #27
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	b21a      	sxth	r2, r3
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	331a      	adds	r3, #26
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	b21b      	sxth	r3, r3
 80080ce:	4313      	orrs	r3, r2
 80080d0:	b21b      	sxth	r3, r3
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d10f      	bne.n	8008102 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	3315      	adds	r3, #21
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	b21a      	sxth	r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	3314      	adds	r3, #20
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	b21b      	sxth	r3, r3
 80080f4:	4313      	orrs	r3, r2
 80080f6:	b21b      	sxth	r3, r3
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	041b      	lsls	r3, r3, #16
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]

	return cl;
 8008102:	68fb      	ldr	r3, [r7, #12]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	331a      	adds	r3, #26
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	b2d2      	uxtb	r2, r2
 8008122:	701a      	strb	r2, [r3, #0]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	0a1b      	lsrs	r3, r3, #8
 800812a:	b29a      	uxth	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	331b      	adds	r3, #27
 8008130:	b2d2      	uxtb	r2, r2
 8008132:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	0c1a      	lsrs	r2, r3, #16
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3314      	adds	r3, #20
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	0c1b      	lsrs	r3, r3, #16
 8008144:	b29b      	uxth	r3, r3
 8008146:	0a1b      	lsrs	r3, r3, #8
 8008148:	b29a      	uxth	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3315      	adds	r3, #21
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	701a      	strb	r2, [r3, #0]
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
	...

08008160 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008172:	1e5a      	subs	r2, r3, #1
 8008174:	4613      	mov	r3, r2
 8008176:	005b      	lsls	r3, r3, #1
 8008178:	4413      	add	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8008180:	2300      	movs	r3, #0
 8008182:	613b      	str	r3, [r7, #16]
 8008184:	2301      	movs	r3, #1
 8008186:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8008188:	4a2b      	ldr	r2, [pc, #172]	; (8008238 <cmp_lfn+0xd8>)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	4413      	add	r3, r2
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	3301      	adds	r3, #1
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	4413      	add	r3, r2
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	021b      	lsls	r3, r3, #8
 800819a:	b21a      	sxth	r2, r3
 800819c:	4926      	ldr	r1, [pc, #152]	; (8008238 <cmp_lfn+0xd8>)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	440b      	add	r3, r1
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	4619      	mov	r1, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	440b      	add	r3, r1
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	b21b      	sxth	r3, r3
 80081ae:	4313      	orrs	r3, r2
 80081b0:	b21b      	sxth	r3, r3
 80081b2:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80081b4:	89fb      	ldrh	r3, [r7, #14]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d019      	beq.n	80081ee <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80081ba:	89bb      	ldrh	r3, [r7, #12]
 80081bc:	4618      	mov	r0, r3
 80081be:	f002 fc3b 	bl	800aa38 <ff_wtoupper>
 80081c2:	4603      	mov	r3, r0
 80081c4:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2bfe      	cmp	r3, #254	; 0xfe
 80081ca:	d80e      	bhi.n	80081ea <cmp_lfn+0x8a>
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	617a      	str	r2, [r7, #20]
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	4413      	add	r3, r2
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	4618      	mov	r0, r3
 80081dc:	f002 fc2c 	bl	800aa38 <ff_wtoupper>
 80081e0:	4603      	mov	r3, r0
 80081e2:	461a      	mov	r2, r3
 80081e4:	89fb      	ldrh	r3, [r7, #14]
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d008      	beq.n	80081fc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80081ea:	2300      	movs	r3, #0
 80081ec:	e01f      	b.n	800822e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80081ee:	89bb      	ldrh	r3, [r7, #12]
 80081f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d001      	beq.n	80081fc <cmp_lfn+0x9c>
 80081f8:	2300      	movs	r3, #0
 80081fa:	e018      	b.n	800822e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3301      	adds	r3, #1
 8008200:	613b      	str	r3, [r7, #16]
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	2b0c      	cmp	r3, #12
 8008206:	d9bf      	bls.n	8008188 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <cmp_lfn+0xcc>
 8008214:	89fb      	ldrh	r3, [r7, #14]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d008      	beq.n	800822c <cmp_lfn+0xcc>
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4413      	add	r3, r2
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <cmp_lfn+0xcc>
		return 0;
 8008228:	2300      	movs	r3, #0
 800822a:	e000      	b.n	800822e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800822c:	2301      	movs	r3, #1
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	0800bab4 	.word	0x0800bab4

0800823c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800823c:	b480      	push	{r7}
 800823e:	b089      	sub	sp, #36	; 0x24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4611      	mov	r1, r2
 8008248:	461a      	mov	r2, r3
 800824a:	460b      	mov	r3, r1
 800824c:	71fb      	strb	r3, [r7, #7]
 800824e:	4613      	mov	r3, r2
 8008250:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	330d      	adds	r3, #13
 8008256:	79ba      	ldrb	r2, [r7, #6]
 8008258:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	330b      	adds	r3, #11
 800825e:	220f      	movs	r2, #15
 8008260:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	330c      	adds	r3, #12
 8008266:	2200      	movs	r2, #0
 8008268:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	331a      	adds	r3, #26
 800826e:	2200      	movs	r2, #0
 8008270:	701a      	strb	r2, [r3, #0]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	331b      	adds	r3, #27
 8008276:	2200      	movs	r2, #0
 8008278:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	1e5a      	subs	r2, r3, #1
 800827e:	4613      	mov	r3, r2
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	82fb      	strh	r3, [r7, #22]
 800828e:	2300      	movs	r3, #0
 8008290:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8008292:	8afb      	ldrh	r3, [r7, #22]
 8008294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008298:	4293      	cmp	r3, r2
 800829a:	d007      	beq.n	80082ac <fit_lfn+0x70>
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	61fa      	str	r2, [r7, #28]
 80082a2:	005b      	lsls	r3, r3, #1
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	4413      	add	r3, r2
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80082ac:	4a1d      	ldr	r2, [pc, #116]	; (8008324 <fit_lfn+0xe8>)
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	4413      	add	r3, r2
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	4413      	add	r3, r2
 80082ba:	8afa      	ldrh	r2, [r7, #22]
 80082bc:	b2d2      	uxtb	r2, r2
 80082be:	701a      	strb	r2, [r3, #0]
 80082c0:	8afb      	ldrh	r3, [r7, #22]
 80082c2:	0a1b      	lsrs	r3, r3, #8
 80082c4:	b299      	uxth	r1, r3
 80082c6:	4a17      	ldr	r2, [pc, #92]	; (8008324 <fit_lfn+0xe8>)
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	4413      	add	r3, r2
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	4413      	add	r3, r2
 80082d4:	b2ca      	uxtb	r2, r1
 80082d6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80082d8:	8afb      	ldrh	r3, [r7, #22]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <fit_lfn+0xa8>
 80082de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082e2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	3301      	adds	r3, #1
 80082e8:	61bb      	str	r3, [r7, #24]
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	2b0c      	cmp	r3, #12
 80082ee:	d9d0      	bls.n	8008292 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80082f0:	8afb      	ldrh	r3, [r7, #22]
 80082f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d006      	beq.n	8008308 <fit_lfn+0xcc>
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d103      	bne.n	8008310 <fit_lfn+0xd4>
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800830e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	79fa      	ldrb	r2, [r7, #7]
 8008314:	701a      	strb	r2, [r3, #0]
}
 8008316:	bf00      	nop
 8008318:	3724      	adds	r7, #36	; 0x24
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	0800bab4 	.word	0x0800bab4

08008328 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08c      	sub	sp, #48	; 0x30
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008336:	220b      	movs	r2, #11
 8008338:	68b9      	ldr	r1, [r7, #8]
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7fe fd16 	bl	8006d6c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b05      	cmp	r3, #5
 8008344:	d92b      	bls.n	800839e <gen_numname+0x76>
		sr = seq;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800834a:	e022      	b.n	8008392 <gen_numname+0x6a>
			wc = *lfn++;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	1c9a      	adds	r2, r3, #2
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008356:	2300      	movs	r3, #0
 8008358:	62bb      	str	r3, [r7, #40]	; 0x28
 800835a:	e017      	b.n	800838c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	005a      	lsls	r2, r3, #1
 8008360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	4413      	add	r3, r2
 8008368:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800836a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800836c:	085b      	lsrs	r3, r3, #1
 800836e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d005      	beq.n	8008386 <gen_numname+0x5e>
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008380:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008384:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	3301      	adds	r3, #1
 800838a:	62bb      	str	r3, [r7, #40]	; 0x28
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	2b0f      	cmp	r3, #15
 8008390:	d9e4      	bls.n	800835c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1d8      	bne.n	800834c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800839e:	2307      	movs	r3, #7
 80083a0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	3330      	adds	r3, #48	; 0x30
 80083ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80083b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083b6:	2b39      	cmp	r3, #57	; 0x39
 80083b8:	d904      	bls.n	80083c4 <gen_numname+0x9c>
 80083ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083be:	3307      	adds	r3, #7
 80083c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	1e5a      	subs	r2, r3, #1
 80083c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80083ca:	3330      	adds	r3, #48	; 0x30
 80083cc:	443b      	add	r3, r7
 80083ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80083d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	091b      	lsrs	r3, r3, #4
 80083da:	603b      	str	r3, [r7, #0]
	} while (seq);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1df      	bne.n	80083a2 <gen_numname+0x7a>
	ns[i] = '~';
 80083e2:	f107 0214 	add.w	r2, r7, #20
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	4413      	add	r3, r2
 80083ea:	227e      	movs	r2, #126	; 0x7e
 80083ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80083ee:	2300      	movs	r3, #0
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
 80083f2:	e002      	b.n	80083fa <gen_numname+0xd2>
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	3301      	adds	r3, #1
 80083f8:	627b      	str	r3, [r7, #36]	; 0x24
 80083fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fe:	429a      	cmp	r2, r3
 8008400:	d205      	bcs.n	800840e <gen_numname+0xe6>
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	4413      	add	r3, r2
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b20      	cmp	r3, #32
 800840c:	d1f2      	bne.n	80083f4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	2b07      	cmp	r3, #7
 8008412:	d807      	bhi.n	8008424 <gen_numname+0xfc>
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	62ba      	str	r2, [r7, #40]	; 0x28
 800841a:	3330      	adds	r3, #48	; 0x30
 800841c:	443b      	add	r3, r7
 800841e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008422:	e000      	b.n	8008426 <gen_numname+0xfe>
 8008424:	2120      	movs	r1, #32
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	627a      	str	r2, [r7, #36]	; 0x24
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	4413      	add	r3, r2
 8008430:	460a      	mov	r2, r1
 8008432:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	2b07      	cmp	r3, #7
 8008438:	d9e9      	bls.n	800840e <gen_numname+0xe6>
}
 800843a:	bf00      	nop
 800843c:	bf00      	nop
 800843e:	3730      	adds	r7, #48	; 0x30
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008450:	230b      	movs	r3, #11
 8008452:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	b2da      	uxtb	r2, r3
 8008458:	0852      	lsrs	r2, r2, #1
 800845a:	01db      	lsls	r3, r3, #7
 800845c:	4313      	orrs	r3, r2
 800845e:	b2da      	uxtb	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	1c59      	adds	r1, r3, #1
 8008464:	6079      	str	r1, [r7, #4]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	4413      	add	r3, r2
 800846a:	73fb      	strb	r3, [r7, #15]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	3b01      	subs	r3, #1
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1ed      	bne.n	8008454 <sum_sfn+0x10>
	return sum;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b086      	sub	sp, #24
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800848e:	2100      	movs	r1, #0
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff fba8 	bl	8007be6 <dir_sdi>
 8008496:	4603      	mov	r3, r0
 8008498:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800849a:	7dfb      	ldrb	r3, [r7, #23]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <dir_find+0x1e>
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	e0b8      	b.n	8008616 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80084a4:	23ff      	movs	r3, #255	; 0xff
 80084a6:	753b      	strb	r3, [r7, #20]
 80084a8:	7d3b      	ldrb	r3, [r7, #20]
 80084aa:	757b      	strb	r3, [r7, #21]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084b6:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	4619      	mov	r1, r3
 80084ca:	4610      	mov	r0, r2
 80084cc:	f7fe fedc 	bl	8007288 <move_window>
 80084d0:	4603      	mov	r3, r0
 80084d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f040 8097 	bne.w	800860a <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80084ec:	7dbb      	ldrb	r3, [r7, #22]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d102      	bne.n	80084f8 <dir_find+0x72>
 80084f2:	2304      	movs	r3, #4
 80084f4:	75fb      	strb	r3, [r7, #23]
 80084f6:	e08d      	b.n	8008614 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	330b      	adds	r3, #11
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008502:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008504:	7dbb      	ldrb	r3, [r7, #22]
 8008506:	2be5      	cmp	r3, #229	; 0xe5
 8008508:	d007      	beq.n	800851a <dir_find+0x94>
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	f003 0308 	and.w	r3, r3, #8
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <dir_find+0xa6>
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	2b0f      	cmp	r3, #15
 8008518:	d008      	beq.n	800852c <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800851a:	23ff      	movs	r3, #255	; 0xff
 800851c:	757b      	strb	r3, [r7, #21]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008528:	849a      	strh	r2, [r3, #36]	; 0x24
 800852a:	e063      	b.n	80085f4 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	2b0f      	cmp	r3, #15
 8008530:	d137      	bne.n	80085a2 <dir_find+0x11c>
				if (dp->lfn) {
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d05a      	beq.n	80085f4 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800853e:	7dbb      	ldrb	r3, [r7, #22]
 8008540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008544:	2b00      	cmp	r3, #0
 8008546:	d010      	beq.n	800856a <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	7b5b      	ldrb	r3, [r3, #13]
 800854c:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800854e:	7dbb      	ldrb	r3, [r7, #22]
 8008550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008554:	75bb      	strb	r3, [r7, #22]
 8008556:	7dbb      	ldrb	r3, [r7, #22]
 8008558:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008560:	88da      	ldrh	r2, [r3, #6]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008568:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800856a:	7dba      	ldrb	r2, [r7, #22]
 800856c:	7d7b      	ldrb	r3, [r7, #21]
 800856e:	429a      	cmp	r2, r3
 8008570:	d114      	bne.n	800859c <dir_find+0x116>
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	330d      	adds	r3, #13
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	7d3a      	ldrb	r2, [r7, #20]
 800857a:	429a      	cmp	r2, r3
 800857c:	d10e      	bne.n	800859c <dir_find+0x116>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	6939      	ldr	r1, [r7, #16]
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff fde9 	bl	8008160 <cmp_lfn>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <dir_find+0x116>
 8008594:	7d7b      	ldrb	r3, [r7, #21]
 8008596:	3b01      	subs	r3, #1
 8008598:	b2db      	uxtb	r3, r3
 800859a:	e000      	b.n	800859e <dir_find+0x118>
 800859c:	23ff      	movs	r3, #255	; 0xff
 800859e:	757b      	strb	r3, [r7, #21]
 80085a0:	e028      	b.n	80085f4 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80085a2:	7d7b      	ldrb	r3, [r7, #21]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d107      	bne.n	80085b8 <dir_find+0x132>
 80085a8:	6938      	ldr	r0, [r7, #16]
 80085aa:	f7ff ff4b 	bl	8008444 <sum_sfn>
 80085ae:	4603      	mov	r3, r0
 80085b0:	461a      	mov	r2, r3
 80085b2:	7d3b      	ldrb	r3, [r7, #20]
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d02a      	beq.n	800860e <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	330b      	adds	r3, #11
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10b      	bne.n	80085e4 <dir_find+0x15e>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	220b      	movs	r2, #11
 80085d6:	4619      	mov	r1, r3
 80085d8:	6938      	ldr	r0, [r7, #16]
 80085da:	f7fe fc01 	bl	8006de0 <mem_cmp>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d016      	beq.n	8008612 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80085e4:	23ff      	movs	r3, #255	; 0xff
 80085e6:	757b      	strb	r3, [r7, #21]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085f2:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80085f4:	2100      	movs	r1, #0
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff fbc3 	bl	8007d82 <dir_next>
 80085fc:	4603      	mov	r3, r0
 80085fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f43f af58 	beq.w	80084b8 <dir_find+0x32>
 8008608:	e004      	b.n	8008614 <dir_find+0x18e>
		if (res != FR_OK) break;
 800860a:	bf00      	nop
 800860c:	e002      	b.n	8008614 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800860e:	bf00      	nop
 8008610:	e000      	b.n	8008614 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008612:	bf00      	nop

	return res;
 8008614:	7dfb      	ldrb	r3, [r7, #23]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08c      	sub	sp, #48	; 0x30
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	623b      	str	r3, [r7, #32]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800863c:	f107 030c 	add.w	r3, r7, #12
 8008640:	220c      	movs	r2, #12
 8008642:	6a39      	ldr	r1, [r7, #32]
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe fb91 	bl	8006d6c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800864a:	7dfb      	ldrb	r3, [r7, #23]
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	d03b      	beq.n	80086cc <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	330b      	adds	r3, #11
 8008658:	2200      	movs	r2, #0
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008662:	461a      	mov	r2, r3
 8008664:	2300      	movs	r3, #0
 8008666:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8008668:	2301      	movs	r3, #1
 800866a:	62bb      	str	r3, [r7, #40]	; 0x28
 800866c:	e013      	b.n	8008696 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800866e:	f107 010c 	add.w	r1, r7, #12
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	69fa      	ldr	r2, [r7, #28]
 8008676:	6a38      	ldr	r0, [r7, #32]
 8008678:	f7ff fe56 	bl	8008328 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff ff02 	bl	8008486 <dir_find>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8008690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008692:	3301      	adds	r3, #1
 8008694:	62bb      	str	r3, [r7, #40]	; 0x28
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	2b63      	cmp	r3, #99	; 0x63
 800869a:	d9e8      	bls.n	800866e <dir_register+0x4e>
 800869c:	e000      	b.n	80086a0 <dir_register+0x80>
			if (res != FR_OK) break;
 800869e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	2b64      	cmp	r3, #100	; 0x64
 80086a4:	d101      	bne.n	80086aa <dir_register+0x8a>
 80086a6:	2307      	movs	r3, #7
 80086a8:	e0d8      	b.n	800885c <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80086aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	d002      	beq.n	80086b8 <dir_register+0x98>
 80086b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086b6:	e0d1      	b.n	800885c <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	330b      	adds	r3, #11
 80086bc:	7dfa      	ldrb	r2, [r7, #23]
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c6:	461a      	mov	r2, r3
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d014      	beq.n	8008700 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 80086d6:	2300      	movs	r3, #0
 80086d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80086da:	e002      	b.n	80086e2 <dir_register+0xc2>
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	3301      	adds	r3, #1
 80086e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80086e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	69fa      	ldr	r2, [r7, #28]
 80086e8:	4413      	add	r3, r2
 80086ea:	881b      	ldrh	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1f5      	bne.n	80086dc <dir_register+0xbc>
		nent = (n + 25) / 13;
 80086f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f2:	3319      	adds	r3, #25
 80086f4:	4a5b      	ldr	r2, [pc, #364]	; (8008864 <dir_register+0x244>)
 80086f6:	fba2 2303 	umull	r2, r3, r2, r3
 80086fa:	089b      	lsrs	r3, r3, #2
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
 80086fe:	e001      	b.n	8008704 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8008700:	2301      	movs	r3, #1
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff fc85 	bl	8008016 <dir_alloc>
 800870c:	4603      	mov	r3, r0
 800870e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008716:	2b00      	cmp	r3, #0
 8008718:	d15b      	bne.n	80087d2 <dir_register+0x1b2>
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	3b01      	subs	r3, #1
 800871e:	627b      	str	r3, [r7, #36]	; 0x24
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	2b00      	cmp	r3, #0
 8008724:	d055      	beq.n	80087d2 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800872c:	88db      	ldrh	r3, [r3, #6]
 800872e:	461a      	mov	r2, r3
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff fa55 	bl	8007be6 <dir_sdi>
 800873c:	4603      	mov	r3, r0
 800873e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008746:	2b00      	cmp	r3, #0
 8008748:	d143      	bne.n	80087d2 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff fe76 	bl	8008444 <sum_sfn>
 8008758:	4603      	mov	r3, r0
 800875a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	4619      	mov	r1, r3
 800876e:	4610      	mov	r0, r2
 8008770:	f7fe fd8a 	bl	8007288 <move_window>
 8008774:	4603      	mov	r3, r0
 8008776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800877a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800877e:	2b00      	cmp	r3, #0
 8008780:	d126      	bne.n	80087d0 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008788:	6a18      	ldr	r0, [r3, #32]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008790:	6959      	ldr	r1, [r3, #20]
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	b2da      	uxtb	r2, r3
 8008796:	7efb      	ldrb	r3, [r7, #27]
 8008798:	f7ff fd50 	bl	800823c <fit_lfn>
				dp->fs->wflag = 1;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a8:	2201      	movs	r2, #1
 80087aa:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 80087ac:	2100      	movs	r1, #0
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff fae7 	bl	8007d82 <dir_next>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80087ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d107      	bne.n	80087d2 <dir_register+0x1b2>
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	3b01      	subs	r3, #1
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1c6      	bne.n	800875c <dir_register+0x13c>
 80087ce:	e000      	b.n	80087d2 <dir_register+0x1b2>
				if (res != FR_OK) break;
 80087d0:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80087d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d13e      	bne.n	8008858 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	4619      	mov	r1, r3
 80087ec:	4610      	mov	r0, r2
 80087ee:	f7fe fd4b 	bl	8007288 <move_window>
 80087f2:	4603      	mov	r3, r0
 80087f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80087f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d12b      	bne.n	8008858 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	2220      	movs	r2, #32
 800880a:	2100      	movs	r1, #0
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe facc 	bl	8006daa <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008818:	6958      	ldr	r0, [r3, #20]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	220b      	movs	r2, #11
 8008824:	4619      	mov	r1, r3
 8008826:	f7fe faa1 	bl	8006d6c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	330b      	adds	r3, #11
 8008834:	781a      	ldrb	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	330c      	adds	r3, #12
 8008840:	f002 0218 	and.w	r2, r2, #24
 8008844:	b2d2      	uxtb	r2, r2
 8008846:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008854:	2201      	movs	r2, #1
 8008856:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8008858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800885c:	4618      	mov	r0, r3
 800885e:	3730      	adds	r7, #48	; 0x30
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	4ec4ec4f 	.word	0x4ec4ec4f

08008868 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08a      	sub	sp, #40	; 0x28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	613b      	str	r3, [r7, #16]
 8008878:	e002      	b.n	8008880 <create_name+0x18>
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	3301      	adds	r3, #1
 800887e:	613b      	str	r3, [r7, #16]
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b2f      	cmp	r3, #47	; 0x2f
 8008886:	d0f8      	beq.n	800887a <create_name+0x12>
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b5c      	cmp	r3, #92	; 0x5c
 800888e:	d0f4      	beq.n	800887a <create_name+0x12>
	lfn = dp->lfn;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	61ba      	str	r2, [r7, #24]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	4413      	add	r3, r2
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80088b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088b2:	2b1f      	cmp	r3, #31
 80088b4:	d92f      	bls.n	8008916 <create_name+0xae>
 80088b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088b8:	2b2f      	cmp	r3, #47	; 0x2f
 80088ba:	d02c      	beq.n	8008916 <create_name+0xae>
 80088bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088be:	2b5c      	cmp	r3, #92	; 0x5c
 80088c0:	d029      	beq.n	8008916 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2bfe      	cmp	r3, #254	; 0xfe
 80088c6:	d901      	bls.n	80088cc <create_name+0x64>
			return FR_INVALID_NAME;
 80088c8:	2306      	movs	r3, #6
 80088ca:	e186      	b.n	8008bda <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 80088cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80088d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088d4:	2101      	movs	r1, #1
 80088d6:	4618      	mov	r0, r3
 80088d8:	f002 f872 	bl	800a9c0 <ff_convert>
 80088dc:	4603      	mov	r3, r0
 80088de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80088e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <create_name+0x82>
 80088e6:	2306      	movs	r3, #6
 80088e8:	e177      	b.n	8008bda <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80088ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088ec:	2b7f      	cmp	r3, #127	; 0x7f
 80088ee:	d809      	bhi.n	8008904 <create_name+0x9c>
 80088f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088f2:	4619      	mov	r1, r3
 80088f4:	488e      	ldr	r0, [pc, #568]	; (8008b30 <create_name+0x2c8>)
 80088f6:	f7fe fa9a 	bl	8006e2e <chk_chr>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <create_name+0x9c>
			return FR_INVALID_NAME;
 8008900:	2306      	movs	r3, #6
 8008902:	e16a      	b.n	8008bda <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	617a      	str	r2, [r7, #20]
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008912:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008914:	e7c5      	b.n	80088a2 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	441a      	add	r2, r3
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8008920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008922:	2b1f      	cmp	r3, #31
 8008924:	d801      	bhi.n	800892a <create_name+0xc2>
 8008926:	2304      	movs	r3, #4
 8008928:	e000      	b.n	800892c <create_name+0xc4>
 800892a:	2300      	movs	r3, #0
 800892c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8008930:	e011      	b.n	8008956 <create_name+0xee>
		w = lfn[di - 1];
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008938:	3b01      	subs	r3, #1
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008946:	2b20      	cmp	r3, #32
 8008948:	d002      	beq.n	8008950 <create_name+0xe8>
 800894a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800894c:	2b2e      	cmp	r3, #46	; 0x2e
 800894e:	d106      	bne.n	800895e <create_name+0xf6>
		di--;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	3b01      	subs	r3, #1
 8008954:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1ea      	bne.n	8008932 <create_name+0xca>
 800895c:	e000      	b.n	8008960 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800895e:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <create_name+0x102>
 8008966:	2306      	movs	r3, #6
 8008968:	e137      	b.n	8008bda <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	4413      	add	r3, r2
 8008972:	2200      	movs	r2, #0
 8008974:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	220b      	movs	r2, #11
 8008980:	2120      	movs	r1, #32
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fa11 	bl	8006daa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008988:	2300      	movs	r3, #0
 800898a:	61bb      	str	r3, [r7, #24]
 800898c:	e002      	b.n	8008994 <create_name+0x12c>
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	3301      	adds	r3, #1
 8008992:	61bb      	str	r3, [r7, #24]
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	005b      	lsls	r3, r3, #1
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	2b20      	cmp	r3, #32
 80089a0:	d0f5      	beq.n	800898e <create_name+0x126>
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4413      	add	r3, r2
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	2b2e      	cmp	r3, #46	; 0x2e
 80089ae:	d0ee      	beq.n	800898e <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d009      	beq.n	80089ca <create_name+0x162>
 80089b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089ba:	f043 0303 	orr.w	r3, r3, #3
 80089be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80089c2:	e002      	b.n	80089ca <create_name+0x162>
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d009      	beq.n	80089e4 <create_name+0x17c>
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089d6:	3b01      	subs	r3, #1
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	4413      	add	r3, r2
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	2b2e      	cmp	r3, #46	; 0x2e
 80089e2:	d1ef      	bne.n	80089c4 <create_name+0x15c>

	b = i = 0; ni = 8;
 80089e4:	2300      	movs	r3, #0
 80089e6:	623b      	str	r3, [r7, #32]
 80089e8:	2300      	movs	r3, #0
 80089ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80089ee:	2308      	movs	r3, #8
 80089f0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	1c5a      	adds	r2, r3, #1
 80089f6:	61ba      	str	r2, [r7, #24]
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4413      	add	r3, r2
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 8091 	beq.w	8008b2c <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a0c:	2b20      	cmp	r3, #32
 8008a0e:	d006      	beq.n	8008a1e <create_name+0x1b6>
 8008a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a12:	2b2e      	cmp	r3, #46	; 0x2e
 8008a14:	d10a      	bne.n	8008a2c <create_name+0x1c4>
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d006      	beq.n	8008a2c <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8008a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a22:	f043 0303 	orr.w	r3, r3, #3
 8008a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a2a:	e07e      	b.n	8008b2a <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008a2c:	6a3a      	ldr	r2, [r7, #32]
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d203      	bcs.n	8008a3c <create_name+0x1d4>
 8008a34:	69ba      	ldr	r2, [r7, #24]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d123      	bne.n	8008a84 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	2b0b      	cmp	r3, #11
 8008a40:	d106      	bne.n	8008a50 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8008a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a46:	f043 0303 	orr.w	r3, r3, #3
 8008a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a4e:	e076      	b.n	8008b3e <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d005      	beq.n	8008a64 <create_name+0x1fc>
 8008a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a5c:	f043 0303 	orr.w	r3, r3, #3
 8008a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d867      	bhi.n	8008b3c <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	61bb      	str	r3, [r7, #24]
 8008a70:	2308      	movs	r3, #8
 8008a72:	623b      	str	r3, [r7, #32]
 8008a74:	230b      	movs	r3, #11
 8008a76:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008a78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008a82:	e052      	b.n	8008b2a <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008a84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a86:	2b7f      	cmp	r3, #127	; 0x7f
 8008a88:	d914      	bls.n	8008ab4 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f001 ff96 	bl	800a9c0 <ff_convert>
 8008a94:	4603      	mov	r3, r0
 8008a96:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008a98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d004      	beq.n	8008aa8 <create_name+0x240>
 8008a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008aa0:	3b80      	subs	r3, #128	; 0x80
 8008aa2:	4a24      	ldr	r2, [pc, #144]	; (8008b34 <create_name+0x2cc>)
 8008aa4:	5cd3      	ldrb	r3, [r2, r3]
 8008aa6:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aac:	f043 0302 	orr.w	r3, r3, #2
 8008ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d007      	beq.n	8008aca <create_name+0x262>
 8008aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008abc:	4619      	mov	r1, r3
 8008abe:	481e      	ldr	r0, [pc, #120]	; (8008b38 <create_name+0x2d0>)
 8008ac0:	f7fe f9b5 	bl	8006e2e <chk_chr>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d008      	beq.n	8008adc <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008aca:	235f      	movs	r3, #95	; 0x5f
 8008acc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ad2:	f043 0303 	orr.w	r3, r3, #3
 8008ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ada:	e01b      	b.n	8008b14 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008adc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ade:	2b40      	cmp	r3, #64	; 0x40
 8008ae0:	d909      	bls.n	8008af6 <create_name+0x28e>
 8008ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ae4:	2b5a      	cmp	r3, #90	; 0x5a
 8008ae6:	d806      	bhi.n	8008af6 <create_name+0x28e>
					b |= 2;
 8008ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008aec:	f043 0302 	orr.w	r3, r3, #2
 8008af0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008af4:	e00e      	b.n	8008b14 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008af8:	2b60      	cmp	r3, #96	; 0x60
 8008afa:	d90b      	bls.n	8008b14 <create_name+0x2ac>
 8008afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008afe:	2b7a      	cmp	r3, #122	; 0x7a
 8008b00:	d808      	bhi.n	8008b14 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8008b02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b10:	3b20      	subs	r3, #32
 8008b12:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1a:	699a      	ldr	r2, [r3, #24]
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	1c59      	adds	r1, r3, #1
 8008b20:	6239      	str	r1, [r7, #32]
 8008b22:	4413      	add	r3, r2
 8008b24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b26:	b2d2      	uxtb	r2, r2
 8008b28:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8008b2a:	e762      	b.n	80089f2 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8008b2c:	bf00      	nop
 8008b2e:	e006      	b.n	8008b3e <create_name+0x2d6>
 8008b30:	0800b4a0 	.word	0x0800b4a0
 8008b34:	0800ba34 	.word	0x0800ba34
 8008b38:	0800b4ac 	.word	0x0800b4ac
			if (si > di) break;			/* No extension */
 8008b3c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2be5      	cmp	r3, #229	; 0xe5
 8008b4a:	d105      	bne.n	8008b58 <create_name+0x2f0>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	2205      	movs	r2, #5
 8008b56:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	2b08      	cmp	r3, #8
 8008b5c:	d104      	bne.n	8008b68 <create_name+0x300>
 8008b5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8008b68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b6c:	f003 030c 	and.w	r3, r3, #12
 8008b70:	2b0c      	cmp	r3, #12
 8008b72:	d005      	beq.n	8008b80 <create_name+0x318>
 8008b74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b78:	f003 0303 	and.w	r3, r3, #3
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d105      	bne.n	8008b8c <create_name+0x324>
		cf |= NS_LFN;
 8008b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b84:	f043 0302 	orr.w	r3, r3, #2
 8008b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d117      	bne.n	8008bc8 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008b98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b9c:	f003 0303 	and.w	r3, r3, #3
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d105      	bne.n	8008bb0 <create_name+0x348>
 8008ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ba8:	f043 0310 	orr.w	r3, r3, #16
 8008bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008bb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008bb4:	f003 030c 	and.w	r3, r3, #12
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d105      	bne.n	8008bc8 <create_name+0x360>
 8008bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc0:	f043 0308 	orr.w	r3, r3, #8
 8008bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	330b      	adds	r3, #11
 8008bd2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008bd6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008bd8:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3728      	adds	r7, #40	; 0x28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop

08008be4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b2f      	cmp	r3, #47	; 0x2f
 8008bf4:	d003      	beq.n	8008bfe <follow_path+0x1a>
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b5c      	cmp	r3, #92	; 0x5c
 8008bfc:	d102      	bne.n	8008c04 <follow_path+0x20>
		path++;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	3301      	adds	r3, #1
 8008c02:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b1f      	cmp	r3, #31
 8008c16:	d80c      	bhi.n	8008c32 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8008c18:	2100      	movs	r1, #0
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7fe ffe3 	bl	8007be6 <dir_sdi>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	6153      	str	r3, [r2, #20]
 8008c30:	e049      	b.n	8008cc6 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c32:	463b      	mov	r3, r7
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff fe16 	bl	8008868 <create_name>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d13a      	bne.n	8008cbc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7ff fc1d 	bl	8008486 <dir_find>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	7adb      	ldrb	r3, [r3, #11]
 8008c5a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00a      	beq.n	8008c78 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	2b04      	cmp	r3, #4
 8008c66:	d12b      	bne.n	8008cc0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d126      	bne.n	8008cc0 <follow_path+0xdc>
 8008c72:	2305      	movs	r3, #5
 8008c74:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8008c76:	e023      	b.n	8008cc0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	f003 0304 	and.w	r3, r3, #4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d120      	bne.n	8008cc4 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	330b      	adds	r3, #11
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	f003 0310 	and.w	r3, r3, #16
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8008c9a:	2305      	movs	r3, #5
 8008c9c:	73fb      	strb	r3, [r7, #15]
 8008c9e:	e012      	b.n	8008cc6 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68b9      	ldr	r1, [r7, #8]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff fa01 	bl	80080b2 <ld_clust>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008cba:	e7ba      	b.n	8008c32 <follow_path+0x4e>
			if (res != FR_OK) break;
 8008cbc:	bf00      	nop
 8008cbe:	e002      	b.n	8008cc6 <follow_path+0xe2>
				break;
 8008cc0:	bf00      	nop
 8008cc2:	e000      	b.n	8008cc6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008cc4:	bf00      	nop
		}
	}

	return res;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cdc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d031      	beq.n	8008d4a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	e002      	b.n	8008cf4 <get_ldnumber+0x24>
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	617b      	str	r3, [r7, #20]
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b1f      	cmp	r3, #31
 8008cfa:	d903      	bls.n	8008d04 <get_ldnumber+0x34>
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b3a      	cmp	r3, #58	; 0x3a
 8008d02:	d1f4      	bne.n	8008cee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b3a      	cmp	r3, #58	; 0x3a
 8008d0a:	d11c      	bne.n	8008d46 <get_ldnumber+0x76>
			tp = *path;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	60fa      	str	r2, [r7, #12]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	3b30      	subs	r3, #48	; 0x30
 8008d1c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b09      	cmp	r3, #9
 8008d22:	d80e      	bhi.n	8008d42 <get_ldnumber+0x72>
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d10a      	bne.n	8008d42 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d107      	bne.n	8008d42 <get_ldnumber+0x72>
					vol = (int)i;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	617b      	str	r3, [r7, #20]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	e002      	b.n	8008d4c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008d46:	2300      	movs	r3, #0
 8008d48:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008d4a:	693b      	ldr	r3, [r7, #16]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	371c      	adds	r7, #28
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d68:	2200      	movs	r2, #0
 8008d6a:	711a      	strb	r2, [r3, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d72:	461a      	mov	r2, r3
 8008d74:	f04f 33ff 	mov.w	r3, #4294967295
 8008d78:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7fe fa83 	bl	8007288 <move_window>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <check_fs+0x34>
		return 3;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e04a      	b.n	8008e22 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d92:	3301      	adds	r3, #1
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	021b      	lsls	r3, r3, #8
 8008d98:	b21a      	sxth	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008da0:	b21b      	sxth	r3, r3
 8008da2:	4313      	orrs	r3, r2
 8008da4:	b21b      	sxth	r3, r3
 8008da6:	4a21      	ldr	r2, [pc, #132]	; (8008e2c <check_fs+0xd4>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d001      	beq.n	8008db0 <check_fs+0x58>
		return 2;
 8008dac:	2302      	movs	r3, #2
 8008dae:	e038      	b.n	8008e22 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3336      	adds	r3, #54	; 0x36
 8008db4:	3303      	adds	r3, #3
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	061a      	lsls	r2, r3, #24
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3336      	adds	r3, #54	; 0x36
 8008dbe:	3302      	adds	r3, #2
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	041b      	lsls	r3, r3, #16
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	3236      	adds	r2, #54	; 0x36
 8008dca:	3201      	adds	r2, #1
 8008dcc:	7812      	ldrb	r2, [r2, #0]
 8008dce:	0212      	lsls	r2, r2, #8
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008dde:	4a14      	ldr	r2, [pc, #80]	; (8008e30 <check_fs+0xd8>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d101      	bne.n	8008de8 <check_fs+0x90>
		return 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	e01c      	b.n	8008e22 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3352      	adds	r3, #82	; 0x52
 8008dec:	3303      	adds	r3, #3
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	061a      	lsls	r2, r3, #24
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	3352      	adds	r3, #82	; 0x52
 8008df6:	3302      	adds	r3, #2
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	041b      	lsls	r3, r3, #16
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	3252      	adds	r2, #82	; 0x52
 8008e02:	3201      	adds	r2, #1
 8008e04:	7812      	ldrb	r2, [r2, #0]
 8008e06:	0212      	lsls	r2, r2, #8
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008e10:	4313      	orrs	r3, r2
 8008e12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e16:	4a06      	ldr	r2, [pc, #24]	; (8008e30 <check_fs+0xd8>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d101      	bne.n	8008e20 <check_fs+0xc8>
		return 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	e000      	b.n	8008e22 <check_fs+0xca>

	return 1;
 8008e20:	2301      	movs	r3, #1
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	ffffaa55 	.word	0xffffaa55
 8008e30:	00544146 	.word	0x00544146

08008e34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b096      	sub	sp, #88	; 0x58
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008e48:	68b8      	ldr	r0, [r7, #8]
 8008e4a:	f7ff ff41 	bl	8008cd0 <get_ldnumber>
 8008e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	da01      	bge.n	8008e5a <find_volume+0x26>
 8008e56:	230b      	movs	r3, #11
 8008e58:	e311      	b.n	800947e <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008e5a:	4a98      	ldr	r2, [pc, #608]	; (80090bc <find_volume+0x288>)
 8008e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <find_volume+0x3a>
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	e307      	b.n	800947e <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e72:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01c      	beq.n	8008eba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e86:	785b      	ldrb	r3, [r3, #1]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fd fed1 	bl	8006c30 <disk_status>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008e94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10c      	bne.n	8008eba <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d007      	beq.n	8008eb6 <find_volume+0x82>
 8008ea6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008eaa:	f003 0304 	and.w	r3, r3, #4
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008eb2:	230a      	movs	r3, #10
 8008eb4:	e2e3      	b.n	800947e <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e2e1      	b.n	800947e <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ece:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ed6:	785b      	ldrb	r3, [r3, #1]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fd fec3 	bl	8006c64 <disk_initialize>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e2c4      	b.n	800947e <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d007      	beq.n	8008f0a <find_volume+0xd6>
 8008efa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008efe:	f003 0304 	and.w	r3, r3, #4
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8008f06:	230a      	movs	r3, #10
 8008f08:	e2b9      	b.n	800947e <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f10:	7858      	ldrb	r0, [r3, #1]
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f18:	330a      	adds	r3, #10
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	2102      	movs	r1, #2
 8008f1e:	f7fd ff07 	bl	8006d30 <disk_ioctl>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10d      	bne.n	8008f44 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f2e:	895b      	ldrh	r3, [r3, #10]
 8008f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f34:	d306      	bcc.n	8008f44 <find_volume+0x110>
 8008f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f3c:	895b      	ldrh	r3, [r3, #10]
 8008f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f42:	d901      	bls.n	8008f48 <find_volume+0x114>
 8008f44:	2301      	movs	r3, #1
 8008f46:	e29a      	b.n	800947e <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008f4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f50:	f7ff ff02 	bl	8008d58 <check_fs>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008f5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d153      	bne.n	800900a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008f62:	2300      	movs	r3, #0
 8008f64:	643b      	str	r3, [r7, #64]	; 0x40
 8008f66:	e028      	b.n	8008fba <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f6c:	011b      	lsls	r3, r3, #4
 8008f6e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008f72:	4413      	add	r3, r2
 8008f74:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	3304      	adds	r3, #4
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d012      	beq.n	8008fa6 <find_volume+0x172>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	330b      	adds	r3, #11
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	061a      	lsls	r2, r3, #24
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	330a      	adds	r3, #10
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	041b      	lsls	r3, r3, #16
 8008f90:	4313      	orrs	r3, r2
 8008f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f94:	3209      	adds	r2, #9
 8008f96:	7812      	ldrb	r2, [r2, #0]
 8008f98:	0212      	lsls	r2, r2, #8
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f9e:	3208      	adds	r2, #8
 8008fa0:	7812      	ldrb	r2, [r2, #0]
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	e000      	b.n	8008fa8 <find_volume+0x174>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	3358      	adds	r3, #88	; 0x58
 8008fae:	443b      	add	r3, r7
 8008fb0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8008fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d9d3      	bls.n	8008f68 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <find_volume+0x19c>
 8008fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	3358      	adds	r3, #88	; 0x58
 8008fd6:	443b      	add	r3, r7
 8008fd8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008fdc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <find_volume+0x1bc>
 8008fe4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fe6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fe8:	f7ff feb6 	bl	8008d58 <check_fs>
 8008fec:	4603      	mov	r3, r0
 8008fee:	e000      	b.n	8008ff2 <find_volume+0x1be>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008ff6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <find_volume+0x1d6>
 8008ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009000:	3301      	adds	r3, #1
 8009002:	643b      	str	r3, [r7, #64]	; 0x40
 8009004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009006:	2b03      	cmp	r3, #3
 8009008:	d9e2      	bls.n	8008fd0 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800900a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800900e:	2b03      	cmp	r3, #3
 8009010:	d101      	bne.n	8009016 <find_volume+0x1e2>
 8009012:	2301      	movs	r3, #1
 8009014:	e233      	b.n	800947e <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009016:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <find_volume+0x1ee>
 800901e:	230d      	movs	r3, #13
 8009020:	e22d      	b.n	800947e <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009024:	7b1b      	ldrb	r3, [r3, #12]
 8009026:	021b      	lsls	r3, r3, #8
 8009028:	b21a      	sxth	r2, r3
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	7adb      	ldrb	r3, [r3, #11]
 800902e:	b21b      	sxth	r3, r3
 8009030:	4313      	orrs	r3, r2
 8009032:	b21a      	sxth	r2, r3
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800903a:	895b      	ldrh	r3, [r3, #10]
 800903c:	b21b      	sxth	r3, r3
 800903e:	429a      	cmp	r2, r3
 8009040:	d001      	beq.n	8009046 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8009042:	230d      	movs	r3, #13
 8009044:	e21b      	b.n	800947e <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8009046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009048:	7ddb      	ldrb	r3, [r3, #23]
 800904a:	021b      	lsls	r3, r3, #8
 800904c:	b21a      	sxth	r2, r3
 800904e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009050:	7d9b      	ldrb	r3, [r3, #22]
 8009052:	b21b      	sxth	r3, r3
 8009054:	4313      	orrs	r3, r2
 8009056:	b21b      	sxth	r3, r3
 8009058:	b29b      	uxth	r3, r3
 800905a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800905c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800905e:	2b00      	cmp	r3, #0
 8009060:	d112      	bne.n	8009088 <find_volume+0x254>
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009068:	061a      	lsls	r2, r3, #24
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009070:	041b      	lsls	r3, r3, #16
 8009072:	4313      	orrs	r3, r2
 8009074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009076:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800907a:	0212      	lsls	r2, r2, #8
 800907c:	4313      	orrs	r3, r2
 800907e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009080:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009084:	4313      	orrs	r3, r2
 8009086:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8009088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800908e:	461a      	mov	r2, r3
 8009090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009092:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	7c1a      	ldrb	r2, [r3, #16]
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800909e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a6:	78db      	ldrb	r3, [r3, #3]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d009      	beq.n	80090c0 <find_volume+0x28c>
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b2:	78db      	ldrb	r3, [r3, #3]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d003      	beq.n	80090c0 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80090b8:	230d      	movs	r3, #13
 80090ba:	e1e0      	b.n	800947e <find_volume+0x64a>
 80090bc:	2000275c 	.word	0x2000275c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80090c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c6:	78db      	ldrb	r3, [r3, #3]
 80090c8:	461a      	mov	r2, r3
 80090ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090cc:	fb02 f303 	mul.w	r3, r2, r3
 80090d0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80090d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d4:	7b5a      	ldrb	r2, [r3, #13]
 80090d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090dc:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80090de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e4:	789b      	ldrb	r3, [r3, #2]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00c      	beq.n	8009104 <find_volume+0x2d0>
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f0:	789b      	ldrb	r3, [r3, #2]
 80090f2:	461a      	mov	r2, r3
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090fa:	789b      	ldrb	r3, [r3, #2]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	4013      	ands	r3, r2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8009104:	230d      	movs	r3, #13
 8009106:	e1ba      	b.n	800947e <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8009108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910a:	7c9b      	ldrb	r3, [r3, #18]
 800910c:	021b      	lsls	r3, r3, #8
 800910e:	b21a      	sxth	r2, r3
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	7c5b      	ldrb	r3, [r3, #17]
 8009114:	b21b      	sxth	r3, r3
 8009116:	4313      	orrs	r3, r2
 8009118:	b21b      	sxth	r3, r3
 800911a:	b29a      	uxth	r2, r3
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009122:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912a:	891b      	ldrh	r3, [r3, #8]
 800912c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800912e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009132:	8952      	ldrh	r2, [r2, #10]
 8009134:	0952      	lsrs	r2, r2, #5
 8009136:	b292      	uxth	r2, r2
 8009138:	fbb3 f1f2 	udiv	r1, r3, r2
 800913c:	fb01 f202 	mul.w	r2, r1, r2
 8009140:	1a9b      	subs	r3, r3, r2
 8009142:	b29b      	uxth	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8009148:	230d      	movs	r3, #13
 800914a:	e198      	b.n	800947e <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800914c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914e:	7d1b      	ldrb	r3, [r3, #20]
 8009150:	021b      	lsls	r3, r3, #8
 8009152:	b21a      	sxth	r2, r3
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	7cdb      	ldrb	r3, [r3, #19]
 8009158:	b21b      	sxth	r3, r3
 800915a:	4313      	orrs	r3, r2
 800915c:	b21b      	sxth	r3, r3
 800915e:	b29b      	uxth	r3, r3
 8009160:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8009162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009164:	2b00      	cmp	r3, #0
 8009166:	d112      	bne.n	800918e <find_volume+0x35a>
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800916e:	061a      	lsls	r2, r3, #24
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009176:	041b      	lsls	r3, r3, #16
 8009178:	4313      	orrs	r3, r2
 800917a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800917c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8009180:	0212      	lsls	r2, r2, #8
 8009182:	4313      	orrs	r3, r2
 8009184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009186:	f892 2020 	ldrb.w	r2, [r2, #32]
 800918a:	4313      	orrs	r3, r2
 800918c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800918e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009190:	7bdb      	ldrb	r3, [r3, #15]
 8009192:	021b      	lsls	r3, r3, #8
 8009194:	b21a      	sxth	r2, r3
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	7b9b      	ldrb	r3, [r3, #14]
 800919a:	b21b      	sxth	r3, r3
 800919c:	4313      	orrs	r3, r2
 800919e:	b21b      	sxth	r3, r3
 80091a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80091a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <find_volume+0x378>
 80091a8:	230d      	movs	r3, #13
 80091aa:	e168      	b.n	800947e <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80091ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80091ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b0:	4413      	add	r3, r2
 80091b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091b8:	8911      	ldrh	r1, [r2, #8]
 80091ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091c0:	8952      	ldrh	r2, [r2, #10]
 80091c2:	0952      	lsrs	r2, r2, #5
 80091c4:	b292      	uxth	r2, r2
 80091c6:	fbb1 f2f2 	udiv	r2, r1, r2
 80091ca:	b292      	uxth	r2, r2
 80091cc:	4413      	add	r3, r2
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80091d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d201      	bcs.n	80091dc <find_volume+0x3a8>
 80091d8:	230d      	movs	r3, #13
 80091da:	e150      	b.n	800947e <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80091dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091e8:	7892      	ldrb	r2, [r2, #2]
 80091ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80091ee:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <find_volume+0x3c6>
 80091f6:	230d      	movs	r3, #13
 80091f8:	e141      	b.n	800947e <find_volume+0x64a>
	fmt = FS_FAT12;
 80091fa:	2301      	movs	r3, #1
 80091fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009206:	4293      	cmp	r3, r2
 8009208:	d902      	bls.n	8009210 <find_volume+0x3dc>
 800920a:	2302      	movs	r3, #2
 800920c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009216:	4293      	cmp	r3, r2
 8009218:	d902      	bls.n	8009220 <find_volume+0x3ec>
 800921a:	2303      	movs	r3, #3
 800921c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	3302      	adds	r3, #2
 8009224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009226:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800922a:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800922c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009232:	461a      	mov	r2, r3
 8009234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009236:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009238:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800923a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800923c:	4413      	add	r3, r2
 800923e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009240:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009244:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8009246:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	4413      	add	r3, r2
 800924c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800924e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009252:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8009254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009258:	2b03      	cmp	r3, #3
 800925a:	d124      	bne.n	80092a6 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009262:	891b      	ldrh	r3, [r3, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <find_volume+0x438>
 8009268:	230d      	movs	r3, #13
 800926a:	e108      	b.n	800947e <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800926c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009272:	061a      	lsls	r2, r3, #24
 8009274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009276:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800927a:	041b      	lsls	r3, r3, #16
 800927c:	4313      	orrs	r3, r2
 800927e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009280:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8009284:	0212      	lsls	r2, r2, #8
 8009286:	4313      	orrs	r3, r2
 8009288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800928a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800928e:	4313      	orrs	r3, r2
 8009290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009292:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009296:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	647b      	str	r3, [r7, #68]	; 0x44
 80092a4:	e02b      	b.n	80092fe <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80092a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ac:	891b      	ldrh	r3, [r3, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <find_volume+0x482>
 80092b2:	230d      	movs	r3, #13
 80092b4:	e0e3      	b.n	800947e <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092bc:	6a1a      	ldr	r2, [r3, #32]
 80092be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c0:	4413      	add	r3, r2
 80092c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092c8:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80092ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d105      	bne.n	80092de <find_volume+0x4aa>
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	e00e      	b.n	80092fc <find_volume+0x4c8>
 80092de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e4:	695a      	ldr	r2, [r3, #20]
 80092e6:	4613      	mov	r3, r2
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	4413      	add	r3, r2
 80092ec:	085a      	lsrs	r2, r3, #1
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80092fc:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009304:	699a      	ldr	r2, [r3, #24]
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800930c:	895b      	ldrh	r3, [r3, #10]
 800930e:	4619      	mov	r1, r3
 8009310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009312:	440b      	add	r3, r1
 8009314:	3b01      	subs	r3, #1
 8009316:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009318:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800931c:	8949      	ldrh	r1, [r1, #10]
 800931e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009322:	429a      	cmp	r2, r3
 8009324:	d201      	bcs.n	800932a <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8009326:	230d      	movs	r3, #13
 8009328:	e0a9      	b.n	800947e <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009330:	461a      	mov	r2, r3
 8009332:	f04f 33ff 	mov.w	r3, #4294967295
 8009336:	6113      	str	r3, [r2, #16]
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009342:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009346:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800934e:	2280      	movs	r2, #128	; 0x80
 8009350:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009356:	2b03      	cmp	r3, #3
 8009358:	d17a      	bne.n	8009450 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800935a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009360:	021b      	lsls	r3, r3, #8
 8009362:	b21a      	sxth	r2, r3
 8009364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800936a:	b21b      	sxth	r3, r3
 800936c:	4313      	orrs	r3, r2
 800936e:	b21b      	sxth	r3, r3
 8009370:	2b01      	cmp	r3, #1
 8009372:	d16d      	bne.n	8009450 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8009374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009376:	3301      	adds	r3, #1
 8009378:	4619      	mov	r1, r3
 800937a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800937c:	f7fd ff84 	bl	8007288 <move_window>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d164      	bne.n	8009450 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8009386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800938c:	2200      	movs	r2, #0
 800938e:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8009396:	021b      	lsls	r3, r3, #8
 8009398:	b21a      	sxth	r2, r3
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80093a0:	b21b      	sxth	r3, r3
 80093a2:	4313      	orrs	r3, r2
 80093a4:	b21b      	sxth	r3, r3
 80093a6:	4a38      	ldr	r2, [pc, #224]	; (8009488 <find_volume+0x654>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d151      	bne.n	8009450 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	78db      	ldrb	r3, [r3, #3]
 80093b0:	061a      	lsls	r2, r3, #24
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	789b      	ldrb	r3, [r3, #2]
 80093b6:	041b      	lsls	r3, r3, #16
 80093b8:	4313      	orrs	r3, r2
 80093ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093bc:	7852      	ldrb	r2, [r2, #1]
 80093be:	0212      	lsls	r2, r2, #8
 80093c0:	4313      	orrs	r3, r2
 80093c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093c4:	7812      	ldrb	r2, [r2, #0]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	4a30      	ldr	r2, [pc, #192]	; (800948c <find_volume+0x658>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d140      	bne.n	8009450 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80093ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d0:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80093d4:	061a      	lsls	r2, r3, #24
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d8:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80093dc:	041b      	lsls	r3, r3, #16
 80093de:	4313      	orrs	r3, r2
 80093e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093e2:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80093e6:	0212      	lsls	r2, r2, #8
 80093e8:	4313      	orrs	r3, r2
 80093ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ec:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80093f0:	4313      	orrs	r3, r2
 80093f2:	4a27      	ldr	r2, [pc, #156]	; (8009490 <find_volume+0x65c>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d12b      	bne.n	8009450 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80093f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fa:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80093fe:	061a      	lsls	r2, r3, #24
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8009406:	041b      	lsls	r3, r3, #16
 8009408:	4313      	orrs	r3, r2
 800940a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800940c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8009410:	0212      	lsls	r2, r2, #8
 8009412:	4313      	orrs	r3, r2
 8009414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009416:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800941a:	4313      	orrs	r3, r2
 800941c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800941e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009422:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800942a:	061a      	lsls	r2, r3, #24
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8009432:	041b      	lsls	r3, r3, #16
 8009434:	4313      	orrs	r3, r2
 8009436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009438:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800943c:	0212      	lsls	r2, r2, #8
 800943e:	4313      	orrs	r3, r2
 8009440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009442:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8009446:	4313      	orrs	r3, r2
 8009448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800944a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800944e:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8009450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009456:	461a      	mov	r2, r3
 8009458:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800945c:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800945e:	4b0d      	ldr	r3, [pc, #52]	; (8009494 <find_volume+0x660>)
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	3301      	adds	r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <find_volume+0x660>)
 8009468:	801a      	strh	r2, [r3, #0]
 800946a:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <find_volume+0x660>)
 800946c:	881a      	ldrh	r2, [r3, #0]
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009474:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8009476:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009478:	f7fd fe8a 	bl	8007190 <clear_lock>
#endif

	return FR_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3758      	adds	r7, #88	; 0x58
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	ffffaa55 	.word	0xffffaa55
 800948c:	41615252 	.word	0x41615252
 8009490:	61417272 	.word	0x61417272
 8009494:	20002760 	.word	0x20002760

08009498 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d02a      	beq.n	8009500 <validate+0x68>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d024      	beq.n	8009500 <validate+0x68>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d01b      	beq.n	8009500 <validate+0x68>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d4:	88da      	ldrh	r2, [r3, #6]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094dc:	889b      	ldrh	r3, [r3, #4]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d10e      	bne.n	8009500 <validate+0x68>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ee:	785b      	ldrb	r3, [r3, #1]
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fd fb9d 	bl	8006c30 <disk_status>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8009500:	2309      	movs	r3, #9
 8009502:	e000      	b.n	8009506 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	4613      	mov	r3, r2
 800951c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8009522:	f107 0310 	add.w	r3, r7, #16
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff fbd2 	bl	8008cd0 <get_ldnumber>
 800952c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	2b00      	cmp	r3, #0
 8009532:	da01      	bge.n	8009538 <f_mount+0x28>
 8009534:	230b      	movs	r3, #11
 8009536:	e02f      	b.n	8009598 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009538:	4a19      	ldr	r2, [pc, #100]	; (80095a0 <f_mount+0x90>)
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009540:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d007      	beq.n	8009558 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8009548:	69b8      	ldr	r0, [r7, #24]
 800954a:	f7fd fe21 	bl	8007190 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d004      	beq.n	8009568 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009564:	2200      	movs	r2, #0
 8009566:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	490d      	ldr	r1, [pc, #52]	; (80095a0 <f_mount+0x90>)
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <f_mount+0x6e>
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d001      	beq.n	8009582 <f_mount+0x72>
 800957e:	2300      	movs	r3, #0
 8009580:	e00a      	b.n	8009598 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009582:	f107 0108 	add.w	r1, r7, #8
 8009586:	f107 030c 	add.w	r3, r7, #12
 800958a:	2200      	movs	r2, #0
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff fc51 	bl	8008e34 <find_volume>
 8009592:	4603      	mov	r3, r0
 8009594:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009596:	7dfb      	ldrb	r3, [r7, #23]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3720      	adds	r7, #32
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	2000275c 	.word	0x2000275c

080095a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80095b2:	f843 0c4c 	str.w	r0, [r3, #-76]
 80095b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80095ba:	f843 1c50 	str.w	r1, [r3, #-80]
 80095be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80095c2:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80095c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80095ca:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <f_open+0x32>
 80095d2:	2309      	movs	r3, #9
 80095d4:	e2f7      	b.n	8009bc6 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 80095d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80095da:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80095de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e2:	461a      	mov	r2, r3
 80095e4:	2300      	movs	r3, #0
 80095e6:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80095e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80095ec:	461a      	mov	r2, r3
 80095ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80095f2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80095f6:	f003 031f 	and.w	r3, r3, #31
 80095fa:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80095fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009602:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009606:	f023 0301 	bic.w	r3, r3, #1
 800960a:	b2da      	uxtb	r2, r3
 800960c:	f107 0118 	add.w	r1, r7, #24
 8009610:	3910      	subs	r1, #16
 8009612:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009616:	3b18      	subs	r3, #24
 8009618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff fc09 	bl	8008e34 <find_volume>
 8009622:	4603      	mov	r3, r0
 8009624:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009628:	f102 0217 	add.w	r2, r2, #23
 800962c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800962e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009632:	f103 0317 	add.w	r3, r3, #23
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f040 82bf 	bne.w	8009bbc <f_open+0x618>
		INIT_BUF(dj);
 800963e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009642:	461a      	mov	r2, r3
 8009644:	f107 0318 	add.w	r3, r7, #24
 8009648:	3b04      	subs	r3, #4
 800964a:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800964e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009652:	461a      	mov	r2, r3
 8009654:	4bd4      	ldr	r3, [pc, #848]	; (80099a8 <f_open+0x404>)
 8009656:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800965a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800965e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8009662:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009666:	3b18      	subs	r3, #24
 8009668:	4611      	mov	r1, r2
 800966a:	4618      	mov	r0, r3
 800966c:	f7ff faba 	bl	8008be4 <follow_path>
 8009670:	4603      	mov	r3, r0
 8009672:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009676:	f102 0217 	add.w	r2, r2, #23
 800967a:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800967c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009680:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8009684:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009688:	f102 0210 	add.w	r2, r2, #16
 800968c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800968e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009692:	f103 0317 	add.w	r3, r3, #23
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d126      	bne.n	80096ea <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800969c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80096a0:	f103 0310 	add.w	r3, r3, #16
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <f_open+0x114>
				res = FR_INVALID_NAME;
 80096aa:	2306      	movs	r3, #6
 80096ac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80096b0:	f102 0217 	add.w	r2, r2, #23
 80096b4:	7013      	strb	r3, [r2, #0]
 80096b6:	e018      	b.n	80096ea <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80096b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80096bc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80096c0:	f023 0301 	bic.w	r3, r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	bf14      	ite	ne
 80096c8:	2301      	movne	r3, #1
 80096ca:	2300      	moveq	r3, #0
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	461a      	mov	r2, r3
 80096d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80096d4:	3b18      	subs	r3, #24
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fd fbc3 	bl	8006e64 <chk_lock>
 80096de:	4603      	mov	r3, r0
 80096e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80096e4:	f102 0217 	add.w	r2, r2, #23
 80096e8:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80096ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80096ee:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80096f2:	f003 031c 	and.w	r3, r3, #28
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 813c 	beq.w	8009974 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 80096fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009700:	f103 0317 	add.w	r3, r3, #23
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d02e      	beq.n	8009768 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800970a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800970e:	f103 0317 	add.w	r3, r3, #23
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	2b04      	cmp	r3, #4
 8009716:	d112      	bne.n	800973e <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009718:	f7fd fc14 	bl	8006f44 <enq_lock>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d007      	beq.n	8009732 <f_open+0x18e>
 8009722:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009726:	3b18      	subs	r3, #24
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe ff79 	bl	8008620 <dir_register>
 800972e:	4603      	mov	r3, r0
 8009730:	e000      	b.n	8009734 <f_open+0x190>
 8009732:	2312      	movs	r3, #18
 8009734:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009738:	f102 0217 	add.w	r2, r2, #23
 800973c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800973e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009742:	461a      	mov	r2, r3
 8009744:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009748:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800974c:	f043 0308 	orr.w	r3, r3, #8
 8009750:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8009754:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009758:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800975c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009760:	f102 0210 	add.w	r2, r2, #16
 8009764:	6013      	str	r3, [r2, #0]
 8009766:	e01f      	b.n	80097a8 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009768:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800976c:	f103 0310 	add.w	r3, r3, #16
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	330b      	adds	r3, #11
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f003 0311 	and.w	r3, r3, #17
 800977a:	2b00      	cmp	r3, #0
 800977c:	d006      	beq.n	800978c <f_open+0x1e8>
					res = FR_DENIED;
 800977e:	2307      	movs	r3, #7
 8009780:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009784:	f102 0217 	add.w	r2, r2, #23
 8009788:	7013      	strb	r3, [r2, #0]
 800978a:	e00d      	b.n	80097a8 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800978c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009790:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009794:	f003 0304 	and.w	r3, r3, #4
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <f_open+0x204>
						res = FR_EXIST;
 800979c:	2308      	movs	r3, #8
 800979e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80097a2:	f102 0217 	add.w	r2, r2, #23
 80097a6:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80097a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80097ac:	f103 0317 	add.w	r3, r3, #23
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f040 8113 	bne.w	80099de <f_open+0x43a>
 80097b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80097bc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80097c0:	f003 0308 	and.w	r3, r3, #8
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 810a 	beq.w	80099de <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 80097ca:	f7fd f9cf 	bl	8006b6c <get_fattime>
 80097ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80097d2:	f103 030c 	add.w	r3, r3, #12
 80097d6:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80097d8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80097dc:	f103 0310 	add.w	r3, r3, #16
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	330e      	adds	r3, #14
 80097e4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80097e8:	f102 020c 	add.w	r2, r2, #12
 80097ec:	6812      	ldr	r2, [r2, #0]
 80097ee:	b2d2      	uxtb	r2, r2
 80097f0:	701a      	strb	r2, [r3, #0]
 80097f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80097f6:	f103 030c 	add.w	r3, r3, #12
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	0a1b      	lsrs	r3, r3, #8
 8009800:	b29a      	uxth	r2, r3
 8009802:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009806:	f103 0310 	add.w	r3, r3, #16
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	330f      	adds	r3, #15
 800980e:	b2d2      	uxtb	r2, r2
 8009810:	701a      	strb	r2, [r3, #0]
 8009812:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009816:	f103 030c 	add.w	r3, r3, #12
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	0c1a      	lsrs	r2, r3, #16
 800981e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009822:	f103 0310 	add.w	r3, r3, #16
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3310      	adds	r3, #16
 800982a:	b2d2      	uxtb	r2, r2
 800982c:	701a      	strb	r2, [r3, #0]
 800982e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009832:	f103 030c 	add.w	r3, r3, #12
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	0e1a      	lsrs	r2, r3, #24
 800983a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800983e:	f103 0310 	add.w	r3, r3, #16
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3311      	adds	r3, #17
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800984a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800984e:	f103 0310 	add.w	r3, r3, #16
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	330b      	adds	r3, #11
 8009856:	2200      	movs	r2, #0
 8009858:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800985a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800985e:	f103 0310 	add.w	r3, r3, #16
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	331c      	adds	r3, #28
 8009866:	2200      	movs	r2, #0
 8009868:	701a      	strb	r2, [r3, #0]
 800986a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800986e:	f103 0310 	add.w	r3, r3, #16
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	331d      	adds	r3, #29
 8009876:	2200      	movs	r2, #0
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800987e:	f103 0310 	add.w	r3, r3, #16
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	331e      	adds	r3, #30
 8009886:	2200      	movs	r2, #0
 8009888:	701a      	strb	r2, [r3, #0]
 800988a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800988e:	f103 0310 	add.w	r3, r3, #16
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	331f      	adds	r3, #31
 8009896:	2200      	movs	r2, #0
 8009898:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800989a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800989e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80098a2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80098a6:	f102 0210 	add.w	r2, r2, #16
 80098aa:	6811      	ldr	r1, [r2, #0]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fc00 	bl	80080b2 <ld_clust>
 80098b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80098b6:	f103 0308 	add.w	r3, r3, #8
 80098ba:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80098bc:	2100      	movs	r1, #0
 80098be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80098c2:	f103 0310 	add.w	r3, r3, #16
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	f7fe fc22 	bl	8008110 <st_clust>
				dj.fs->wflag = 1;
 80098cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80098d0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80098d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d8:	2201      	movs	r2, #1
 80098da:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 80098dc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80098e0:	f103 0308 	add.w	r3, r3, #8
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d079      	beq.n	80099de <f_open+0x43a>
					dw = dj.fs->winsect;
 80098ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80098ee:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80098f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80098fc:	f102 020c 	add.w	r2, r2, #12
 8009900:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8009902:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009906:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800990a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800990e:	f102 0208 	add.w	r2, r2, #8
 8009912:	6811      	ldr	r1, [r2, #0]
 8009914:	4618      	mov	r0, r3
 8009916:	f7fe f81c 	bl	8007952 <remove_chain>
 800991a:	4603      	mov	r3, r0
 800991c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009920:	f102 0217 	add.w	r2, r2, #23
 8009924:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8009926:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800992a:	f103 0317 	add.w	r3, r3, #23
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d154      	bne.n	80099de <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009934:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009938:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800993c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009940:	f103 0308 	add.w	r3, r3, #8
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3b01      	subs	r3, #1
 8009948:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800994c:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800994e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009952:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009956:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800995a:	f102 020c 	add.w	r2, r2, #12
 800995e:	6811      	ldr	r1, [r2, #0]
 8009960:	4618      	mov	r0, r3
 8009962:	f7fd fc91 	bl	8007288 <move_window>
 8009966:	4603      	mov	r3, r0
 8009968:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800996c:	f102 0217 	add.w	r2, r2, #23
 8009970:	7013      	strb	r3, [r2, #0]
 8009972:	e034      	b.n	80099de <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8009974:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009978:	f103 0317 	add.w	r3, r3, #23
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d12d      	bne.n	80099de <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8009982:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009986:	f103 0310 	add.w	r3, r3, #16
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	330b      	adds	r3, #11
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	f003 0310 	and.w	r3, r3, #16
 8009994:	2b00      	cmp	r3, #0
 8009996:	d009      	beq.n	80099ac <f_open+0x408>
					res = FR_NO_FILE;
 8009998:	2304      	movs	r3, #4
 800999a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800999e:	f102 0217 	add.w	r2, r2, #23
 80099a2:	7013      	strb	r3, [r2, #0]
 80099a4:	e01b      	b.n	80099de <f_open+0x43a>
 80099a6:	bf00      	nop
 80099a8:	2000277c 	.word	0x2000277c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80099ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80099b0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d010      	beq.n	80099de <f_open+0x43a>
 80099bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80099c0:	f103 0310 	add.w	r3, r3, #16
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	330b      	adds	r3, #11
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d005      	beq.n	80099de <f_open+0x43a>
						res = FR_DENIED;
 80099d2:	2307      	movs	r3, #7
 80099d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80099d8:	f102 0217 	add.w	r2, r2, #23
 80099dc:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80099de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80099e2:	f103 0317 	add.w	r3, r3, #23
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d157      	bne.n	8009a9c <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80099ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80099f0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80099f4:	f003 0308 	and.w	r3, r3, #8
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00a      	beq.n	8009a12 <f_open+0x46e>
				mode |= FA__WRITTEN;
 80099fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a00:	461a      	mov	r2, r3
 8009a02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a06:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009a0a:	f043 0320 	orr.w	r3, r3, #32
 8009a0e:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009a12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a16:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a20:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009a24:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8009a28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a2c:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8009a2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a32:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009a40:	f103 0310 	add.w	r3, r3, #16
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009a48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a4c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009a50:	f023 0301 	bic.w	r3, r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	bf14      	ite	ne
 8009a58:	2301      	movne	r3, #1
 8009a5a:	2300      	moveq	r3, #0
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a64:	3b18      	subs	r3, #24
 8009a66:	4611      	mov	r1, r2
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fd fa8f 	bl	8006f8c <inc_lock>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a74:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a7c:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8009a7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a82:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d105      	bne.n	8009a9c <f_open+0x4f8>
 8009a90:	2302      	movs	r3, #2
 8009a92:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009a96:	f102 0217 	add.w	r2, r2, #23
 8009a9a:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8009a9c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009aa0:	f103 0317 	add.w	r3, r3, #23
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f040 8088 	bne.w	8009bbc <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8009aac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ab0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab8:	461a      	mov	r2, r3
 8009aba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009abe:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009ac2:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8009ac4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ac8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009ad4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ad8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009adc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009ae0:	f102 0210 	add.w	r2, r2, #16
 8009ae4:	6811      	ldr	r1, [r2, #0]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fae3 	bl	80080b2 <ld_clust>
 8009aec:	4602      	mov	r2, r0
 8009aee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009af2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009afa:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009afc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009b00:	f103 0310 	add.w	r3, r3, #16
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	331f      	adds	r3, #31
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	061a      	lsls	r2, r3, #24
 8009b0c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009b10:	f103 0310 	add.w	r3, r3, #16
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	331e      	adds	r3, #30
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	041b      	lsls	r3, r3, #16
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009b22:	f102 0210 	add.w	r2, r2, #16
 8009b26:	6812      	ldr	r2, [r2, #0]
 8009b28:	321d      	adds	r2, #29
 8009b2a:	7812      	ldrb	r2, [r2, #0]
 8009b2c:	0212      	lsls	r2, r2, #8
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009b34:	f102 0210 	add.w	r2, r2, #16
 8009b38:	6812      	ldr	r2, [r2, #0]
 8009b3a:	321c      	adds	r2, #28
 8009b3c:	7812      	ldrb	r2, [r2, #0]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009b44:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8009b48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b4c:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8009b4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b52:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8009b60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b64:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009b72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b76:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b7e:	461a      	mov	r2, r3
 8009b80:	2300      	movs	r3, #0
 8009b82:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009b84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b88:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009b8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009b90:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8009b94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b98:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8009b9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b9e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bac:	88da      	ldrh	r2, [r3, #6]
 8009bae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009bb2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bba:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8009bbc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009bc0:	f103 0317 	add.w	r3, r3, #23
 8009bc4:	781b      	ldrb	r3, [r3, #0]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8009bcc:	3718      	adds	r7, #24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop

08009bd4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08a      	sub	sp, #40	; 0x28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f7ff fc53 	bl	8009498 <validate>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <f_write+0x2c>
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	e21e      	b.n	800a03e <f_write+0x46a>
	if (fp->err)							/* Check error */
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c06:	79db      	ldrb	r3, [r3, #7]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d004      	beq.n	8009c16 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c12:	79db      	ldrb	r3, [r3, #7]
 8009c14:	e213      	b.n	800a03e <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c1c:	799b      	ldrb	r3, [r3, #6]
 8009c1e:	f003 0302 	and.w	r3, r3, #2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009c26:	2307      	movs	r3, #7
 8009c28:	e209      	b.n	800a03e <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c30:	689a      	ldr	r2, [r3, #8]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	441a      	add	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	f080 81d9 	bcs.w	8009ff6 <f_write+0x422>
 8009c44:	2300      	movs	r3, #0
 8009c46:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8009c48:	e1d5      	b.n	8009ff6 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c58:	6812      	ldr	r2, [r2, #0]
 8009c5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c5e:	8952      	ldrh	r2, [r2, #10]
 8009c60:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c64:	fb01 f202 	mul.w	r2, r1, r2
 8009c68:	1a9b      	subs	r3, r3, r2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f040 8169 	bne.w	8009f42 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c7e:	6812      	ldr	r2, [r2, #0]
 8009c80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c84:	8952      	ldrh	r2, [r2, #10]
 8009c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c98:	789b      	ldrb	r3, [r3, #2]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8009ca2:	7dbb      	ldrb	r3, [r7, #22]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d15f      	bne.n	8009d68 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d111      	bne.n	8009cd8 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d126      	bne.n	8009d12 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2100      	movs	r1, #0
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fd fea0 	bl	8007a14 <create_chain>
 8009cd4:	6278      	str	r0, [r7, #36]	; 0x24
 8009cd6:	e01c      	b.n	8009d12 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d009      	beq.n	8009cf8 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	4619      	mov	r1, r3
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f7fd ff38 	bl	8007b64 <clmt_clust>
 8009cf4:	6278      	str	r0, [r7, #36]	; 0x24
 8009cf6:	e00c      	b.n	8009d12 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	f7fd fe82 	bl	8007a14 <create_chain>
 8009d10:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f000 8173 	beq.w	800a000 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d106      	bne.n	8009d2e <f_write+0x15a>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d26:	2202      	movs	r2, #2
 8009d28:	71da      	strb	r2, [r3, #7]
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	e187      	b.n	800a03e <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d34:	d106      	bne.n	8009d44 <f_write+0x170>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	71da      	strb	r2, [r3, #7]
 8009d40:	2301      	movs	r3, #1
 8009d42:	e17c      	b.n	800a03e <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d105      	bne.n	8009d68 <f_write+0x194>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d62:	461a      	mov	r2, r3
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d6e:	799b      	ldrb	r3, [r3, #6]
 8009d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d023      	beq.n	8009dc0 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d84:	7858      	ldrb	r0, [r3, #1]
 8009d86:	68f9      	ldr	r1, [r7, #12]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d8e:	699a      	ldr	r2, [r3, #24]
 8009d90:	2301      	movs	r3, #1
 8009d92:	f7fc ffad 	bl	8006cf0 <disk_write>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d006      	beq.n	8009daa <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da2:	2201      	movs	r2, #1
 8009da4:	71da      	strb	r2, [r3, #7]
 8009da6:	2301      	movs	r3, #1
 8009da8:	e149      	b.n	800a03e <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db0:	799b      	ldrb	r3, [r3, #6]
 8009db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dbe:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	f7fd fb49 	bl	800746a <clust2sect>
 8009dd8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d106      	bne.n	8009dee <f_write+0x21a>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de6:	2202      	movs	r2, #2
 8009de8:	71da      	strb	r2, [r3, #7]
 8009dea:	2302      	movs	r3, #2
 8009dec:	e127      	b.n	800a03e <f_write+0x46a>
			sect += csect;
 8009dee:	7dbb      	ldrb	r3, [r7, #22]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	4413      	add	r3, r2
 8009df4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e02:	895b      	ldrh	r3, [r3, #10]
 8009e04:	461a      	mov	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e0c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d069      	beq.n	8009ee8 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009e14:	7dba      	ldrb	r2, [r7, #22]
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	4413      	add	r3, r2
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e20:	6812      	ldr	r2, [r2, #0]
 8009e22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e26:	7892      	ldrb	r2, [r2, #2]
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d90a      	bls.n	8009e42 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e38:	789b      	ldrb	r3, [r3, #2]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	7dbb      	ldrb	r3, [r7, #22]
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e4e:	7858      	ldrb	r0, [r3, #1]
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	69b9      	ldr	r1, [r7, #24]
 8009e56:	f7fc ff4b 	bl	8006cf0 <disk_write>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d006      	beq.n	8009e6e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e66:	2201      	movs	r2, #1
 8009e68:	71da      	strb	r2, [r3, #7]
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e0e7      	b.n	800a03e <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e74:	699a      	ldr	r2, [r3, #24]
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	69fa      	ldr	r2, [r7, #28]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d926      	bls.n	8009ece <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e88:	699a      	ldr	r2, [r3, #24]
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e94:	6812      	ldr	r2, [r2, #0]
 8009e96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e9a:	8952      	ldrh	r2, [r2, #10]
 8009e9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	18d1      	adds	r1, r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb0:	895b      	ldrh	r3, [r3, #10]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f7fc ff5a 	bl	8006d6c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ebe:	799b      	ldrb	r3, [r3, #6]
 8009ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ecc:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eda:	895b      	ldrh	r3, [r3, #10]
 8009edc:	461a      	mov	r2, r3
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	fb02 f303 	mul.w	r3, r2, r3
 8009ee4:	623b      	str	r3, [r7, #32]
				continue;
 8009ee6:	e06e      	b.n	8009fc6 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d01f      	beq.n	8009f36 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009efc:	689a      	ldr	r2, [r3, #8]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d215      	bcs.n	8009f36 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f16:	7858      	ldrb	r0, [r3, #1]
 8009f18:	68f9      	ldr	r1, [r7, #12]
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	f7fc fec7 	bl	8006cb0 <disk_read>
 8009f22:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d006      	beq.n	8009f36 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f2e:	2201      	movs	r2, #1
 8009f30:	71da      	strb	r2, [r3, #7]
 8009f32:	2301      	movs	r3, #1
 8009f34:	e083      	b.n	800a03e <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f4e:	895b      	ldrh	r3, [r3, #10]
 8009f50:	4618      	mov	r0, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f60:	6812      	ldr	r2, [r2, #0]
 8009f62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f66:	8952      	ldrh	r2, [r2, #10]
 8009f68:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f6c:	fb01 f202 	mul.w	r2, r1, r2
 8009f70:	1a9b      	subs	r3, r3, r2
 8009f72:	1ac3      	subs	r3, r0, r3
 8009f74:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009f76:	6a3a      	ldr	r2, [r7, #32]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d901      	bls.n	8009f82 <f_write+0x3ae>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f90:	6812      	ldr	r2, [r2, #0]
 8009f92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f96:	8952      	ldrh	r2, [r2, #10]
 8009f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f9c:	fb01 f202 	mul.w	r2, r1, r2
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	6a3a      	ldr	r2, [r7, #32]
 8009fa8:	69b9      	ldr	r1, [r7, #24]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fc fede 	bl	8006d6c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb6:	799b      	ldrb	r3, [r3, #6]
 8009fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc4:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009fc6:	69ba      	ldr	r2, [r7, #24]
 8009fc8:	6a3b      	ldr	r3, [r7, #32]
 8009fca:	4413      	add	r3, r2
 8009fcc:	61bb      	str	r3, [r7, #24]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd4:	689a      	ldr	r2, [r3, #8]
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	4413      	add	r3, r2
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fe0:	6093      	str	r3, [r2, #8]
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	441a      	add	r2, r3
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	6a3b      	ldr	r3, [r7, #32]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f47f ae26 	bne.w	8009c4a <f_write+0x76>
 8009ffe:	e000      	b.n	800a002 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a000:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a008:	689a      	ldr	r2, [r3, #8]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	429a      	cmp	r2, r3
 800a014:	d907      	bls.n	800a026 <f_write+0x452>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a024:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02c:	799b      	ldrb	r3, [r3, #6]
 800a02e:	f043 0320 	orr.w	r3, r3, #32
 800a032:	b2da      	uxtb	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a03a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3728      	adds	r7, #40	; 0x28
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b086      	sub	sp, #24
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff fa22 	bl	8009498 <validate>
 800a054:	4603      	mov	r3, r0
 800a056:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a058:	7dfb      	ldrb	r3, [r7, #23]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f040 80bc 	bne.w	800a1d8 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a066:	799b      	ldrb	r3, [r3, #6]
 800a068:	f003 0320 	and.w	r3, r3, #32
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 80b3 	beq.w	800a1d8 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a078:	799b      	ldrb	r3, [r3, #6]
 800a07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d01e      	beq.n	800a0c0 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a08e:	7858      	ldrb	r0, [r3, #1]
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	2301      	movs	r3, #1
 800a09c:	f7fc fe28 	bl	8006cf0 <disk_write>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d001      	beq.n	800a0aa <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e097      	b.n	800a1da <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0b0:	799b      	ldrb	r3, [r3, #6]
 800a0b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0be:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f7fd f8d8 	bl	8007288 <move_window>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d17a      	bne.n	800a1d8 <f_sync+0x192>
				dir = fp->dir_ptr;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	330b      	adds	r3, #11
 800a0f0:	781a      	ldrb	r2, [r3, #0]
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	330b      	adds	r3, #11
 800a0f6:	f042 0220 	orr.w	r2, r2, #32
 800a0fa:	b2d2      	uxtb	r2, r2
 800a0fc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a104:	68da      	ldr	r2, [r3, #12]
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	331c      	adds	r3, #28
 800a10a:	b2d2      	uxtb	r2, r2
 800a10c:	701a      	strb	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	b29b      	uxth	r3, r3
 800a118:	0a1b      	lsrs	r3, r3, #8
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	331d      	adds	r3, #29
 800a120:	b2d2      	uxtb	r2, r2
 800a122:	701a      	strb	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	0c1a      	lsrs	r2, r3, #16
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	331e      	adds	r3, #30
 800a132:	b2d2      	uxtb	r2, r2
 800a134:	701a      	strb	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	0e1a      	lsrs	r2, r3, #24
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	331f      	adds	r3, #31
 800a144:	b2d2      	uxtb	r2, r2
 800a146:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	4619      	mov	r1, r3
 800a152:	6938      	ldr	r0, [r7, #16]
 800a154:	f7fd ffdc 	bl	8008110 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800a158:	f7fc fd08 	bl	8006b6c <get_fattime>
 800a15c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	3316      	adds	r3, #22
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	b2d2      	uxtb	r2, r2
 800a166:	701a      	strb	r2, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	0a1b      	lsrs	r3, r3, #8
 800a16e:	b29a      	uxth	r2, r3
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	3317      	adds	r3, #23
 800a174:	b2d2      	uxtb	r2, r2
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	0c1a      	lsrs	r2, r3, #16
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	3318      	adds	r3, #24
 800a180:	b2d2      	uxtb	r2, r2
 800a182:	701a      	strb	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	0e1a      	lsrs	r2, r3, #24
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	3319      	adds	r3, #25
 800a18c:	b2d2      	uxtb	r2, r2
 800a18e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	3312      	adds	r3, #18
 800a194:	2200      	movs	r2, #0
 800a196:	701a      	strb	r2, [r3, #0]
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	3313      	adds	r3, #19
 800a19c:	2200      	movs	r2, #0
 800a19e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1a6:	799b      	ldrb	r3, [r3, #6]
 800a1a8:	f023 0320 	bic.w	r3, r3, #32
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b4:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fd f88c 	bl	80072ec <sync_fs>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7ff ff2b 	bl	800a046 <f_sync>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d119      	bne.n	800a22e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff f94c 	bl	8009498 <validate>
 800a200:	4603      	mov	r3, r0
 800a202:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d111      	bne.n	800a22e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a212:	4618      	mov	r0, r3
 800a214:	f7fc ff78 	bl	8007108 <dec_lock>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d105      	bne.n	800a22e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a228:	461a      	mov	r2, r3
 800a22a:	2300      	movs	r3, #0
 800a22c:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b090      	sub	sp, #64	; 0x40
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff f928 	bl	8009498 <validate>
 800a248:	4603      	mov	r3, r0
 800a24a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a24e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <f_lseek+0x24>
 800a256:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a25a:	e2da      	b.n	800a812 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a262:	79db      	ldrb	r3, [r3, #7]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d004      	beq.n	800a272 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a26e:	79db      	ldrb	r3, [r3, #7]
 800a270:	e2cf      	b.n	800a812 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 8124 	beq.w	800a4c8 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a286:	d16c      	bne.n	800a362 <f_lseek+0x12a>
			tbl = fp->cltbl;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	1d1a      	adds	r2, r3, #4
 800a296:	627a      	str	r2, [r7, #36]	; 0x24
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	617b      	str	r3, [r7, #20]
 800a29c:	2302      	movs	r3, #2
 800a29e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d046      	beq.n	800a33e <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	613b      	str	r3, [r7, #16]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ba:	3302      	adds	r3, #2
 800a2bc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c0:	60fb      	str	r3, [r7, #12]
 800a2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fd f8ee 	bl	80074b4 <get_fat>
 800a2d8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d806      	bhi.n	800a2ee <f_lseek+0xb6>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	71da      	strb	r2, [r3, #7]
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	e291      	b.n	800a812 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f4:	d106      	bne.n	800a304 <f_lseek+0xcc>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	71da      	strb	r2, [r3, #7]
 800a300:	2301      	movs	r3, #1
 800a302:	e286      	b.n	800a812 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	3301      	adds	r3, #1
 800a308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d0d7      	beq.n	800a2be <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a30e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	429a      	cmp	r2, r3
 800a314:	d809      	bhi.n	800a32a <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	1d1a      	adds	r2, r3, #4
 800a31a:	627a      	str	r2, [r7, #36]	; 0x24
 800a31c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	1d1a      	adds	r2, r3, #4
 800a324:	627a      	str	r2, [r7, #36]	; 0x24
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d3b8      	bcc.n	800a2b0 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a348:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800a34a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d803      	bhi.n	800a35a <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	2200      	movs	r2, #0
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	e259      	b.n	800a80e <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a35a:	2311      	movs	r3, #17
 800a35c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a360:	e255      	b.n	800a80e <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d904      	bls.n	800a37a <f_lseek+0x142>
				ofs = fp->fsize;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a380:	461a      	mov	r2, r3
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 8240 	beq.w	800a80e <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	3b01      	subs	r3, #1
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7fd fbe5 	bl	8007b64 <clmt_clust>
 800a39a:	4602      	mov	r2, r0
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a2:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	f7fd f857 	bl	800746a <clust2sect>
 800a3bc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d106      	bne.n	800a3d2 <f_lseek+0x19a>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	71da      	strb	r2, [r3, #7]
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	e21f      	b.n	800a812 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3dc:	6812      	ldr	r2, [r2, #0]
 800a3de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3e2:	8952      	ldrh	r2, [r2, #10]
 800a3e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3ee:	6812      	ldr	r2, [r2, #0]
 800a3f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3f4:	7892      	ldrb	r2, [r2, #2]
 800a3f6:	3a01      	subs	r2, #1
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	69ba      	ldr	r2, [r7, #24]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a40e:	6812      	ldr	r2, [r2, #0]
 800a410:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a414:	8952      	ldrh	r2, [r2, #10]
 800a416:	fbb3 f1f2 	udiv	r1, r3, r2
 800a41a:	fb01 f202 	mul.w	r2, r1, r2
 800a41e:	1a9b      	subs	r3, r3, r2
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 81f4 	beq.w	800a80e <f_lseek+0x5d6>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	429a      	cmp	r2, r3
 800a432:	f000 81ec 	beq.w	800a80e <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a43c:	799b      	ldrb	r3, [r3, #6]
 800a43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a442:	2b00      	cmp	r3, #0
 800a444:	d023      	beq.n	800a48e <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a452:	7858      	ldrb	r0, [r3, #1]
 800a454:	6879      	ldr	r1, [r7, #4]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a45c:	699a      	ldr	r2, [r3, #24]
 800a45e:	2301      	movs	r3, #1
 800a460:	f7fc fc46 	bl	8006cf0 <disk_write>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d006      	beq.n	800a478 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a470:	2201      	movs	r2, #1
 800a472:	71da      	strb	r2, [r3, #7]
 800a474:	2301      	movs	r3, #1
 800a476:	e1cc      	b.n	800a812 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a47e:	799b      	ldrb	r3, [r3, #6]
 800a480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a484:	b2da      	uxtb	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a48c:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a49a:	7858      	ldrb	r0, [r3, #1]
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	2301      	movs	r3, #1
 800a4a0:	69ba      	ldr	r2, [r7, #24]
 800a4a2:	f7fc fc05 	bl	8006cb0 <disk_read>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d006      	beq.n	800a4ba <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	71da      	strb	r2, [r3, #7]
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e1ab      	b.n	800a812 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	6193      	str	r3, [r2, #24]
 800a4c6:	e1a2      	b.n	800a80e <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d90c      	bls.n	800a4f0 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4dc:	799b      	ldrb	r3, [r3, #6]
 800a4de:	f003 0302 	and.w	r3, r3, #2
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d104      	bne.n	800a4f0 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a504:	461a      	mov	r2, r3
 800a506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a508:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 8100 	beq.w	800a712 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a51e:	789b      	ldrb	r3, [r3, #2]
 800a520:	461a      	mov	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a52e:	895b      	ldrh	r3, [r3, #10]
 800a530:	fb02 f303 	mul.w	r3, r2, r3
 800a534:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d021      	beq.n	800a580 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	1e5a      	subs	r2, r3, #1
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	fbb2 f2f3 	udiv	r2, r2, r3
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	1e59      	subs	r1, r3, #1
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a550:	429a      	cmp	r2, r3
 800a552:	d315      	bcc.n	800a580 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	1e5a      	subs	r2, r3, #1
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	425b      	negs	r3, r3
 800a55c:	4013      	ands	r3, r2
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a564:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a57e:	e031      	b.n	800a5e4 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d123      	bne.n	800a5d8 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2100      	movs	r1, #0
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fd fa3a 	bl	8007a14 <create_chain>
 800a5a0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d106      	bne.n	800a5b6 <f_lseek+0x37e>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	71da      	strb	r2, [r3, #7]
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	e12d      	b.n	800a812 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5bc:	d106      	bne.n	800a5cc <f_lseek+0x394>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	71da      	strb	r2, [r3, #7]
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e122      	b.n	800a812 <f_lseek+0x5da>
					fp->sclust = clst;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d6:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5de:	461a      	mov	r2, r3
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 8093 	beq.w	800a712 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800a5ec:	e052      	b.n	800a694 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f4:	799b      	ldrb	r3, [r3, #6]
 800a5f6:	f003 0302 	and.w	r3, r3, #2
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00e      	beq.n	800a61c <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fd fa03 	bl	8007a14 <create_chain>
 800a60e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10b      	bne.n	800a62e <f_lseek+0x3f6>
							ofs = bcs; break;
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	603b      	str	r3, [r7, #0]
 800a61a:	e03f      	b.n	800a69c <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a626:	4618      	mov	r0, r3
 800a628:	f7fc ff44 	bl	80074b4 <get_fat>
 800a62c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a634:	d106      	bne.n	800a644 <f_lseek+0x40c>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a63c:	2201      	movs	r2, #1
 800a63e:	71da      	strb	r2, [r3, #7]
 800a640:	2301      	movs	r3, #1
 800a642:	e0e6      	b.n	800a812 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800a644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a646:	2b01      	cmp	r3, #1
 800a648:	d909      	bls.n	800a65e <f_lseek+0x426>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d306      	bcc.n	800a66c <f_lseek+0x434>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a664:	2202      	movs	r2, #2
 800a666:	71da      	strb	r2, [r3, #7]
 800a668:	2302      	movs	r3, #2
 800a66a:	e0d2      	b.n	800a812 <f_lseek+0x5da>
					fp->clust = clst;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a672:	461a      	mov	r2, r3
 800a674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a676:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	4413      	add	r3, r2
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a68a:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d8a8      	bhi.n	800a5ee <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6ae:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6bc:	895b      	ldrh	r3, [r3, #10]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6c6:	fb01 f202 	mul.w	r2, r1, r2
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d020      	beq.n	800a712 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fc fec5 	bl	800746a <clust2sect>
 800a6e0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d106      	bne.n	800a6f6 <f_lseek+0x4be>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	71da      	strb	r2, [r3, #7]
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	e08d      	b.n	800a812 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a702:	895b      	ldrh	r3, [r3, #10]
 800a704:	461a      	mov	r2, r3
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	fbb3 f3f2 	udiv	r3, r3, r2
 800a70c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a70e:	4413      	add	r3, r2
 800a710:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a720:	6812      	ldr	r2, [r2, #0]
 800a722:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a726:	8952      	ldrh	r2, [r2, #10]
 800a728:	fbb3 f1f2 	udiv	r1, r3, r2
 800a72c:	fb01 f202 	mul.w	r2, r1, r2
 800a730:	1a9b      	subs	r3, r3, r2
 800a732:	2b00      	cmp	r3, #0
 800a734:	d04e      	beq.n	800a7d4 <f_lseek+0x59c>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a740:	429a      	cmp	r2, r3
 800a742:	d047      	beq.n	800a7d4 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a74a:	799b      	ldrb	r3, [r3, #6]
 800a74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a750:	2b00      	cmp	r3, #0
 800a752:	d023      	beq.n	800a79c <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a760:	7858      	ldrb	r0, [r3, #1]
 800a762:	6879      	ldr	r1, [r7, #4]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a76a:	699a      	ldr	r2, [r3, #24]
 800a76c:	2301      	movs	r3, #1
 800a76e:	f7fc fabf 	bl	8006cf0 <disk_write>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d006      	beq.n	800a786 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a77e:	2201      	movs	r2, #1
 800a780:	71da      	strb	r2, [r3, #7]
 800a782:	2301      	movs	r3, #1
 800a784:	e045      	b.n	800a812 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a78c:	799b      	ldrb	r3, [r3, #6]
 800a78e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a792:	b2da      	uxtb	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a79a:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a8:	7858      	ldrb	r0, [r3, #1]
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7b0:	f7fc fa7e 	bl	8006cb0 <disk_read>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d006      	beq.n	800a7c8 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	71da      	strb	r2, [r3, #7]
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e024      	b.n	800a812 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d2:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7da:	689a      	ldr	r2, [r3, #8]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d912      	bls.n	800a80e <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7f6:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7fe:	799b      	ldrb	r3, [r3, #6]
 800a800:	f043 0320 	orr.w	r3, r3, #32
 800a804:	b2da      	uxtb	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a80c:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800a80e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a812:	4618      	mov	r0, r3
 800a814:	3740      	adds	r7, #64	; 0x40
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800a826:	78fb      	ldrb	r3, [r7, #3]
 800a828:	2b0a      	cmp	r3, #10
 800a82a:	d103      	bne.n	800a834 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a82c:	210d      	movs	r1, #13
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7ff fff3 	bl	800a81a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	db25      	blt.n	800a88c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	60fa      	str	r2, [r7, #12]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	4413      	add	r3, r2
 800a84a:	78fa      	ldrb	r2, [r7, #3]
 800a84c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2b3c      	cmp	r3, #60	; 0x3c
 800a852:	dd12      	ble.n	800a87a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6818      	ldr	r0, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f103 010c 	add.w	r1, r3, #12
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	f107 0308 	add.w	r3, r7, #8
 800a864:	f7ff f9b6 	bl	8009bd4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d101      	bne.n	800a874 <putc_bfd+0x5a>
 800a870:	2300      	movs	r3, #0
 800a872:	e001      	b.n	800a878 <putc_bfd+0x5e>
 800a874:	f04f 33ff 	mov.w	r3, #4294967295
 800a878:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	609a      	str	r2, [r3, #8]
 800a88a:	e000      	b.n	800a88e <putc_bfd+0x74>
	if (i < 0) return;
 800a88c:	bf00      	nop
}
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a894:	b590      	push	{r4, r7, lr}
 800a896:	b097      	sub	sp, #92	; 0x5c
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	613b      	str	r3, [r7, #16]
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800a8aa:	e009      	b.n	800a8c0 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	1c5a      	adds	r2, r3, #1
 800a8b0:	607a      	str	r2, [r7, #4]
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	f107 030c 	add.w	r3, r7, #12
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff ffad 	bl	800a81a <putc_bfd>
	while (*str)			/* Put the string */
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1f1      	bne.n	800a8ac <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	db15      	blt.n	800a8fa <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	461c      	mov	r4, r3
 800a8d4:	f107 0208 	add.w	r2, r7, #8
 800a8d8:	f107 030c 	add.w	r3, r7, #12
 800a8dc:	f103 010c 	add.w	r1, r3, #12
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	4622      	mov	r2, r4
 800a8e4:	f7ff f976 	bl	8009bd4 <f_write>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d105      	bne.n	800a8fa <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d101      	bne.n	800a8fa <f_puts+0x66>
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	e001      	b.n	800a8fe <f_puts+0x6a>
	return EOF;
 800a8fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	375c      	adds	r7, #92	; 0x5c
 800a902:	46bd      	mov	sp, r7
 800a904:	bd90      	pop	{r4, r7, pc}
	...

0800a908 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a908:	b480      	push	{r7}
 800a90a:	b087      	sub	sp, #28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a916:	2301      	movs	r3, #1
 800a918:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a91e:	4b1f      	ldr	r3, [pc, #124]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a920:	7a5b      	ldrb	r3, [r3, #9]
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b01      	cmp	r3, #1
 800a926:	d831      	bhi.n	800a98c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a928:	4b1c      	ldr	r3, [pc, #112]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a92a:	7a5b      	ldrb	r3, [r3, #9]
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	461a      	mov	r2, r3
 800a930:	4b1a      	ldr	r3, [pc, #104]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a932:	2100      	movs	r1, #0
 800a934:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a936:	4b19      	ldr	r3, [pc, #100]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a938:	7a5b      	ldrb	r3, [r3, #9]
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	4a17      	ldr	r2, [pc, #92]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a946:	4b15      	ldr	r3, [pc, #84]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a948:	7a5b      	ldrb	r3, [r3, #9]
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	461a      	mov	r2, r3
 800a94e:	4b13      	ldr	r3, [pc, #76]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a950:	4413      	add	r3, r2
 800a952:	79fa      	ldrb	r2, [r7, #7]
 800a954:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a956:	4b11      	ldr	r3, [pc, #68]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a958:	7a5b      	ldrb	r3, [r3, #9]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	b2d1      	uxtb	r1, r2
 800a960:	4a0e      	ldr	r2, [pc, #56]	; (800a99c <FATFS_LinkDriverEx+0x94>)
 800a962:	7251      	strb	r1, [r2, #9]
 800a964:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a966:	7dbb      	ldrb	r3, [r7, #22]
 800a968:	3330      	adds	r3, #48	; 0x30
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	3301      	adds	r3, #1
 800a974:	223a      	movs	r2, #58	; 0x3a
 800a976:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	3302      	adds	r3, #2
 800a97c:	222f      	movs	r2, #47	; 0x2f
 800a97e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	3303      	adds	r3, #3
 800a984:	2200      	movs	r2, #0
 800a986:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	2000297c 	.word	0x2000297c

0800a9a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7ff ffaa 	bl	800a908 <FATFS_LinkDriverEx>
 800a9b4:	4603      	mov	r3, r0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	6039      	str	r1, [r7, #0]
 800a9ca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	2b7f      	cmp	r3, #127	; 0x7f
 800a9d0:	d802      	bhi.n	800a9d8 <ff_convert+0x18>
		c = chr;
 800a9d2:	88fb      	ldrh	r3, [r7, #6]
 800a9d4:	81fb      	strh	r3, [r7, #14]
 800a9d6:	e025      	b.n	800aa24 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00b      	beq.n	800a9f6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a9de:	88fb      	ldrh	r3, [r7, #6]
 800a9e0:	2bff      	cmp	r3, #255	; 0xff
 800a9e2:	d805      	bhi.n	800a9f0 <ff_convert+0x30>
 800a9e4:	88fb      	ldrh	r3, [r7, #6]
 800a9e6:	3b80      	subs	r3, #128	; 0x80
 800a9e8:	4a12      	ldr	r2, [pc, #72]	; (800aa34 <ff_convert+0x74>)
 800a9ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9ee:	e000      	b.n	800a9f2 <ff_convert+0x32>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	81fb      	strh	r3, [r7, #14]
 800a9f4:	e016      	b.n	800aa24 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	81fb      	strh	r3, [r7, #14]
 800a9fa:	e009      	b.n	800aa10 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a9fc:	89fb      	ldrh	r3, [r7, #14]
 800a9fe:	4a0d      	ldr	r2, [pc, #52]	; (800aa34 <ff_convert+0x74>)
 800aa00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa04:	88fa      	ldrh	r2, [r7, #6]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d006      	beq.n	800aa18 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800aa0a:	89fb      	ldrh	r3, [r7, #14]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	81fb      	strh	r3, [r7, #14]
 800aa10:	89fb      	ldrh	r3, [r7, #14]
 800aa12:	2b7f      	cmp	r3, #127	; 0x7f
 800aa14:	d9f2      	bls.n	800a9fc <ff_convert+0x3c>
 800aa16:	e000      	b.n	800aa1a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800aa18:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800aa1a:	89fb      	ldrh	r3, [r7, #14]
 800aa1c:	3380      	adds	r3, #128	; 0x80
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800aa24:	89fb      	ldrh	r3, [r7, #14]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	0800bac4 	.word	0x0800bac4

0800aa38 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	4603      	mov	r3, r0
 800aa40:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800aa42:	2300      	movs	r3, #0
 800aa44:	60fb      	str	r3, [r7, #12]
 800aa46:	e002      	b.n	800aa4e <ff_wtoupper+0x16>
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	60fb      	str	r3, [r7, #12]
 800aa4e:	4a0f      	ldr	r2, [pc, #60]	; (800aa8c <ff_wtoupper+0x54>)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d006      	beq.n	800aa68 <ff_wtoupper+0x30>
 800aa5a:	4a0c      	ldr	r2, [pc, #48]	; (800aa8c <ff_wtoupper+0x54>)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa62:	88fa      	ldrh	r2, [r7, #6]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d1ef      	bne.n	800aa48 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800aa68:	4a08      	ldr	r2, [pc, #32]	; (800aa8c <ff_wtoupper+0x54>)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d004      	beq.n	800aa7e <ff_wtoupper+0x46>
 800aa74:	4a06      	ldr	r2, [pc, #24]	; (800aa90 <ff_wtoupper+0x58>)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa7c:	e000      	b.n	800aa80 <ff_wtoupper+0x48>
 800aa7e:	88fb      	ldrh	r3, [r7, #6]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	0800bbc4 	.word	0x0800bbc4
 800aa90:	0800bda4 	.word	0x0800bda4

0800aa94 <__errno>:
 800aa94:	4b01      	ldr	r3, [pc, #4]	; (800aa9c <__errno+0x8>)
 800aa96:	6818      	ldr	r0, [r3, #0]
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	20000024 	.word	0x20000024

0800aaa0 <__libc_init_array>:
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	4d0d      	ldr	r5, [pc, #52]	; (800aad8 <__libc_init_array+0x38>)
 800aaa4:	4c0d      	ldr	r4, [pc, #52]	; (800aadc <__libc_init_array+0x3c>)
 800aaa6:	1b64      	subs	r4, r4, r5
 800aaa8:	10a4      	asrs	r4, r4, #2
 800aaaa:	2600      	movs	r6, #0
 800aaac:	42a6      	cmp	r6, r4
 800aaae:	d109      	bne.n	800aac4 <__libc_init_array+0x24>
 800aab0:	4d0b      	ldr	r5, [pc, #44]	; (800aae0 <__libc_init_array+0x40>)
 800aab2:	4c0c      	ldr	r4, [pc, #48]	; (800aae4 <__libc_init_array+0x44>)
 800aab4:	f000 fc8e 	bl	800b3d4 <_init>
 800aab8:	1b64      	subs	r4, r4, r5
 800aaba:	10a4      	asrs	r4, r4, #2
 800aabc:	2600      	movs	r6, #0
 800aabe:	42a6      	cmp	r6, r4
 800aac0:	d105      	bne.n	800aace <__libc_init_array+0x2e>
 800aac2:	bd70      	pop	{r4, r5, r6, pc}
 800aac4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aac8:	4798      	blx	r3
 800aaca:	3601      	adds	r6, #1
 800aacc:	e7ee      	b.n	800aaac <__libc_init_array+0xc>
 800aace:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad2:	4798      	blx	r3
 800aad4:	3601      	adds	r6, #1
 800aad6:	e7f2      	b.n	800aabe <__libc_init_array+0x1e>
 800aad8:	0800bfb8 	.word	0x0800bfb8
 800aadc:	0800bfb8 	.word	0x0800bfb8
 800aae0:	0800bfb8 	.word	0x0800bfb8
 800aae4:	0800bfbc 	.word	0x0800bfbc

0800aae8 <memset>:
 800aae8:	4402      	add	r2, r0
 800aaea:	4603      	mov	r3, r0
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d100      	bne.n	800aaf2 <memset+0xa>
 800aaf0:	4770      	bx	lr
 800aaf2:	f803 1b01 	strb.w	r1, [r3], #1
 800aaf6:	e7f9      	b.n	800aaec <memset+0x4>

0800aaf8 <siprintf>:
 800aaf8:	b40e      	push	{r1, r2, r3}
 800aafa:	b500      	push	{lr}
 800aafc:	b09c      	sub	sp, #112	; 0x70
 800aafe:	ab1d      	add	r3, sp, #116	; 0x74
 800ab00:	9002      	str	r0, [sp, #8]
 800ab02:	9006      	str	r0, [sp, #24]
 800ab04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab08:	4809      	ldr	r0, [pc, #36]	; (800ab30 <siprintf+0x38>)
 800ab0a:	9107      	str	r1, [sp, #28]
 800ab0c:	9104      	str	r1, [sp, #16]
 800ab0e:	4909      	ldr	r1, [pc, #36]	; (800ab34 <siprintf+0x3c>)
 800ab10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab14:	9105      	str	r1, [sp, #20]
 800ab16:	6800      	ldr	r0, [r0, #0]
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	a902      	add	r1, sp, #8
 800ab1c:	f000 f868 	bl	800abf0 <_svfiprintf_r>
 800ab20:	9b02      	ldr	r3, [sp, #8]
 800ab22:	2200      	movs	r2, #0
 800ab24:	701a      	strb	r2, [r3, #0]
 800ab26:	b01c      	add	sp, #112	; 0x70
 800ab28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab2c:	b003      	add	sp, #12
 800ab2e:	4770      	bx	lr
 800ab30:	20000024 	.word	0x20000024
 800ab34:	ffff0208 	.word	0xffff0208

0800ab38 <__ssputs_r>:
 800ab38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab3c:	688e      	ldr	r6, [r1, #8]
 800ab3e:	429e      	cmp	r6, r3
 800ab40:	4682      	mov	sl, r0
 800ab42:	460c      	mov	r4, r1
 800ab44:	4690      	mov	r8, r2
 800ab46:	461f      	mov	r7, r3
 800ab48:	d838      	bhi.n	800abbc <__ssputs_r+0x84>
 800ab4a:	898a      	ldrh	r2, [r1, #12]
 800ab4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab50:	d032      	beq.n	800abb8 <__ssputs_r+0x80>
 800ab52:	6825      	ldr	r5, [r4, #0]
 800ab54:	6909      	ldr	r1, [r1, #16]
 800ab56:	eba5 0901 	sub.w	r9, r5, r1
 800ab5a:	6965      	ldr	r5, [r4, #20]
 800ab5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab64:	3301      	adds	r3, #1
 800ab66:	444b      	add	r3, r9
 800ab68:	106d      	asrs	r5, r5, #1
 800ab6a:	429d      	cmp	r5, r3
 800ab6c:	bf38      	it	cc
 800ab6e:	461d      	movcc	r5, r3
 800ab70:	0553      	lsls	r3, r2, #21
 800ab72:	d531      	bpl.n	800abd8 <__ssputs_r+0xa0>
 800ab74:	4629      	mov	r1, r5
 800ab76:	f000 fb63 	bl	800b240 <_malloc_r>
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	b950      	cbnz	r0, 800ab94 <__ssputs_r+0x5c>
 800ab7e:	230c      	movs	r3, #12
 800ab80:	f8ca 3000 	str.w	r3, [sl]
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab8a:	81a3      	strh	r3, [r4, #12]
 800ab8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab94:	6921      	ldr	r1, [r4, #16]
 800ab96:	464a      	mov	r2, r9
 800ab98:	f000 fabe 	bl	800b118 <memcpy>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aba6:	81a3      	strh	r3, [r4, #12]
 800aba8:	6126      	str	r6, [r4, #16]
 800abaa:	6165      	str	r5, [r4, #20]
 800abac:	444e      	add	r6, r9
 800abae:	eba5 0509 	sub.w	r5, r5, r9
 800abb2:	6026      	str	r6, [r4, #0]
 800abb4:	60a5      	str	r5, [r4, #8]
 800abb6:	463e      	mov	r6, r7
 800abb8:	42be      	cmp	r6, r7
 800abba:	d900      	bls.n	800abbe <__ssputs_r+0x86>
 800abbc:	463e      	mov	r6, r7
 800abbe:	6820      	ldr	r0, [r4, #0]
 800abc0:	4632      	mov	r2, r6
 800abc2:	4641      	mov	r1, r8
 800abc4:	f000 fab6 	bl	800b134 <memmove>
 800abc8:	68a3      	ldr	r3, [r4, #8]
 800abca:	1b9b      	subs	r3, r3, r6
 800abcc:	60a3      	str	r3, [r4, #8]
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	4433      	add	r3, r6
 800abd2:	6023      	str	r3, [r4, #0]
 800abd4:	2000      	movs	r0, #0
 800abd6:	e7db      	b.n	800ab90 <__ssputs_r+0x58>
 800abd8:	462a      	mov	r2, r5
 800abda:	f000 fba5 	bl	800b328 <_realloc_r>
 800abde:	4606      	mov	r6, r0
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d1e1      	bne.n	800aba8 <__ssputs_r+0x70>
 800abe4:	6921      	ldr	r1, [r4, #16]
 800abe6:	4650      	mov	r0, sl
 800abe8:	f000 fabe 	bl	800b168 <_free_r>
 800abec:	e7c7      	b.n	800ab7e <__ssputs_r+0x46>
	...

0800abf0 <_svfiprintf_r>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	4698      	mov	r8, r3
 800abf6:	898b      	ldrh	r3, [r1, #12]
 800abf8:	061b      	lsls	r3, r3, #24
 800abfa:	b09d      	sub	sp, #116	; 0x74
 800abfc:	4607      	mov	r7, r0
 800abfe:	460d      	mov	r5, r1
 800ac00:	4614      	mov	r4, r2
 800ac02:	d50e      	bpl.n	800ac22 <_svfiprintf_r+0x32>
 800ac04:	690b      	ldr	r3, [r1, #16]
 800ac06:	b963      	cbnz	r3, 800ac22 <_svfiprintf_r+0x32>
 800ac08:	2140      	movs	r1, #64	; 0x40
 800ac0a:	f000 fb19 	bl	800b240 <_malloc_r>
 800ac0e:	6028      	str	r0, [r5, #0]
 800ac10:	6128      	str	r0, [r5, #16]
 800ac12:	b920      	cbnz	r0, 800ac1e <_svfiprintf_r+0x2e>
 800ac14:	230c      	movs	r3, #12
 800ac16:	603b      	str	r3, [r7, #0]
 800ac18:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1c:	e0d1      	b.n	800adc2 <_svfiprintf_r+0x1d2>
 800ac1e:	2340      	movs	r3, #64	; 0x40
 800ac20:	616b      	str	r3, [r5, #20]
 800ac22:	2300      	movs	r3, #0
 800ac24:	9309      	str	r3, [sp, #36]	; 0x24
 800ac26:	2320      	movs	r3, #32
 800ac28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac30:	2330      	movs	r3, #48	; 0x30
 800ac32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800addc <_svfiprintf_r+0x1ec>
 800ac36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac3a:	f04f 0901 	mov.w	r9, #1
 800ac3e:	4623      	mov	r3, r4
 800ac40:	469a      	mov	sl, r3
 800ac42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac46:	b10a      	cbz	r2, 800ac4c <_svfiprintf_r+0x5c>
 800ac48:	2a25      	cmp	r2, #37	; 0x25
 800ac4a:	d1f9      	bne.n	800ac40 <_svfiprintf_r+0x50>
 800ac4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ac50:	d00b      	beq.n	800ac6a <_svfiprintf_r+0x7a>
 800ac52:	465b      	mov	r3, fp
 800ac54:	4622      	mov	r2, r4
 800ac56:	4629      	mov	r1, r5
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f7ff ff6d 	bl	800ab38 <__ssputs_r>
 800ac5e:	3001      	adds	r0, #1
 800ac60:	f000 80aa 	beq.w	800adb8 <_svfiprintf_r+0x1c8>
 800ac64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac66:	445a      	add	r2, fp
 800ac68:	9209      	str	r2, [sp, #36]	; 0x24
 800ac6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f000 80a2 	beq.w	800adb8 <_svfiprintf_r+0x1c8>
 800ac74:	2300      	movs	r3, #0
 800ac76:	f04f 32ff 	mov.w	r2, #4294967295
 800ac7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac7e:	f10a 0a01 	add.w	sl, sl, #1
 800ac82:	9304      	str	r3, [sp, #16]
 800ac84:	9307      	str	r3, [sp, #28]
 800ac86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac8a:	931a      	str	r3, [sp, #104]	; 0x68
 800ac8c:	4654      	mov	r4, sl
 800ac8e:	2205      	movs	r2, #5
 800ac90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac94:	4851      	ldr	r0, [pc, #324]	; (800addc <_svfiprintf_r+0x1ec>)
 800ac96:	f7f5 faab 	bl	80001f0 <memchr>
 800ac9a:	9a04      	ldr	r2, [sp, #16]
 800ac9c:	b9d8      	cbnz	r0, 800acd6 <_svfiprintf_r+0xe6>
 800ac9e:	06d0      	lsls	r0, r2, #27
 800aca0:	bf44      	itt	mi
 800aca2:	2320      	movmi	r3, #32
 800aca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca8:	0711      	lsls	r1, r2, #28
 800acaa:	bf44      	itt	mi
 800acac:	232b      	movmi	r3, #43	; 0x2b
 800acae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acb2:	f89a 3000 	ldrb.w	r3, [sl]
 800acb6:	2b2a      	cmp	r3, #42	; 0x2a
 800acb8:	d015      	beq.n	800ace6 <_svfiprintf_r+0xf6>
 800acba:	9a07      	ldr	r2, [sp, #28]
 800acbc:	4654      	mov	r4, sl
 800acbe:	2000      	movs	r0, #0
 800acc0:	f04f 0c0a 	mov.w	ip, #10
 800acc4:	4621      	mov	r1, r4
 800acc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acca:	3b30      	subs	r3, #48	; 0x30
 800accc:	2b09      	cmp	r3, #9
 800acce:	d94e      	bls.n	800ad6e <_svfiprintf_r+0x17e>
 800acd0:	b1b0      	cbz	r0, 800ad00 <_svfiprintf_r+0x110>
 800acd2:	9207      	str	r2, [sp, #28]
 800acd4:	e014      	b.n	800ad00 <_svfiprintf_r+0x110>
 800acd6:	eba0 0308 	sub.w	r3, r0, r8
 800acda:	fa09 f303 	lsl.w	r3, r9, r3
 800acde:	4313      	orrs	r3, r2
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	46a2      	mov	sl, r4
 800ace4:	e7d2      	b.n	800ac8c <_svfiprintf_r+0x9c>
 800ace6:	9b03      	ldr	r3, [sp, #12]
 800ace8:	1d19      	adds	r1, r3, #4
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	9103      	str	r1, [sp, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	bfbb      	ittet	lt
 800acf2:	425b      	neglt	r3, r3
 800acf4:	f042 0202 	orrlt.w	r2, r2, #2
 800acf8:	9307      	strge	r3, [sp, #28]
 800acfa:	9307      	strlt	r3, [sp, #28]
 800acfc:	bfb8      	it	lt
 800acfe:	9204      	strlt	r2, [sp, #16]
 800ad00:	7823      	ldrb	r3, [r4, #0]
 800ad02:	2b2e      	cmp	r3, #46	; 0x2e
 800ad04:	d10c      	bne.n	800ad20 <_svfiprintf_r+0x130>
 800ad06:	7863      	ldrb	r3, [r4, #1]
 800ad08:	2b2a      	cmp	r3, #42	; 0x2a
 800ad0a:	d135      	bne.n	800ad78 <_svfiprintf_r+0x188>
 800ad0c:	9b03      	ldr	r3, [sp, #12]
 800ad0e:	1d1a      	adds	r2, r3, #4
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	9203      	str	r2, [sp, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bfb8      	it	lt
 800ad18:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad1c:	3402      	adds	r4, #2
 800ad1e:	9305      	str	r3, [sp, #20]
 800ad20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800adec <_svfiprintf_r+0x1fc>
 800ad24:	7821      	ldrb	r1, [r4, #0]
 800ad26:	2203      	movs	r2, #3
 800ad28:	4650      	mov	r0, sl
 800ad2a:	f7f5 fa61 	bl	80001f0 <memchr>
 800ad2e:	b140      	cbz	r0, 800ad42 <_svfiprintf_r+0x152>
 800ad30:	2340      	movs	r3, #64	; 0x40
 800ad32:	eba0 000a 	sub.w	r0, r0, sl
 800ad36:	fa03 f000 	lsl.w	r0, r3, r0
 800ad3a:	9b04      	ldr	r3, [sp, #16]
 800ad3c:	4303      	orrs	r3, r0
 800ad3e:	3401      	adds	r4, #1
 800ad40:	9304      	str	r3, [sp, #16]
 800ad42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad46:	4826      	ldr	r0, [pc, #152]	; (800ade0 <_svfiprintf_r+0x1f0>)
 800ad48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad4c:	2206      	movs	r2, #6
 800ad4e:	f7f5 fa4f 	bl	80001f0 <memchr>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d038      	beq.n	800adc8 <_svfiprintf_r+0x1d8>
 800ad56:	4b23      	ldr	r3, [pc, #140]	; (800ade4 <_svfiprintf_r+0x1f4>)
 800ad58:	bb1b      	cbnz	r3, 800ada2 <_svfiprintf_r+0x1b2>
 800ad5a:	9b03      	ldr	r3, [sp, #12]
 800ad5c:	3307      	adds	r3, #7
 800ad5e:	f023 0307 	bic.w	r3, r3, #7
 800ad62:	3308      	adds	r3, #8
 800ad64:	9303      	str	r3, [sp, #12]
 800ad66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad68:	4433      	add	r3, r6
 800ad6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad6c:	e767      	b.n	800ac3e <_svfiprintf_r+0x4e>
 800ad6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad72:	460c      	mov	r4, r1
 800ad74:	2001      	movs	r0, #1
 800ad76:	e7a5      	b.n	800acc4 <_svfiprintf_r+0xd4>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	3401      	adds	r4, #1
 800ad7c:	9305      	str	r3, [sp, #20]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	f04f 0c0a 	mov.w	ip, #10
 800ad84:	4620      	mov	r0, r4
 800ad86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad8a:	3a30      	subs	r2, #48	; 0x30
 800ad8c:	2a09      	cmp	r2, #9
 800ad8e:	d903      	bls.n	800ad98 <_svfiprintf_r+0x1a8>
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d0c5      	beq.n	800ad20 <_svfiprintf_r+0x130>
 800ad94:	9105      	str	r1, [sp, #20]
 800ad96:	e7c3      	b.n	800ad20 <_svfiprintf_r+0x130>
 800ad98:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e7f0      	b.n	800ad84 <_svfiprintf_r+0x194>
 800ada2:	ab03      	add	r3, sp, #12
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	462a      	mov	r2, r5
 800ada8:	4b0f      	ldr	r3, [pc, #60]	; (800ade8 <_svfiprintf_r+0x1f8>)
 800adaa:	a904      	add	r1, sp, #16
 800adac:	4638      	mov	r0, r7
 800adae:	f3af 8000 	nop.w
 800adb2:	1c42      	adds	r2, r0, #1
 800adb4:	4606      	mov	r6, r0
 800adb6:	d1d6      	bne.n	800ad66 <_svfiprintf_r+0x176>
 800adb8:	89ab      	ldrh	r3, [r5, #12]
 800adba:	065b      	lsls	r3, r3, #25
 800adbc:	f53f af2c 	bmi.w	800ac18 <_svfiprintf_r+0x28>
 800adc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adc2:	b01d      	add	sp, #116	; 0x74
 800adc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc8:	ab03      	add	r3, sp, #12
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	462a      	mov	r2, r5
 800adce:	4b06      	ldr	r3, [pc, #24]	; (800ade8 <_svfiprintf_r+0x1f8>)
 800add0:	a904      	add	r1, sp, #16
 800add2:	4638      	mov	r0, r7
 800add4:	f000 f87a 	bl	800aecc <_printf_i>
 800add8:	e7eb      	b.n	800adb2 <_svfiprintf_r+0x1c2>
 800adda:	bf00      	nop
 800addc:	0800bf84 	.word	0x0800bf84
 800ade0:	0800bf8e 	.word	0x0800bf8e
 800ade4:	00000000 	.word	0x00000000
 800ade8:	0800ab39 	.word	0x0800ab39
 800adec:	0800bf8a 	.word	0x0800bf8a

0800adf0 <_printf_common>:
 800adf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adf4:	4616      	mov	r6, r2
 800adf6:	4699      	mov	r9, r3
 800adf8:	688a      	ldr	r2, [r1, #8]
 800adfa:	690b      	ldr	r3, [r1, #16]
 800adfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae00:	4293      	cmp	r3, r2
 800ae02:	bfb8      	it	lt
 800ae04:	4613      	movlt	r3, r2
 800ae06:	6033      	str	r3, [r6, #0]
 800ae08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae0c:	4607      	mov	r7, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	b10a      	cbz	r2, 800ae16 <_printf_common+0x26>
 800ae12:	3301      	adds	r3, #1
 800ae14:	6033      	str	r3, [r6, #0]
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	0699      	lsls	r1, r3, #26
 800ae1a:	bf42      	ittt	mi
 800ae1c:	6833      	ldrmi	r3, [r6, #0]
 800ae1e:	3302      	addmi	r3, #2
 800ae20:	6033      	strmi	r3, [r6, #0]
 800ae22:	6825      	ldr	r5, [r4, #0]
 800ae24:	f015 0506 	ands.w	r5, r5, #6
 800ae28:	d106      	bne.n	800ae38 <_printf_common+0x48>
 800ae2a:	f104 0a19 	add.w	sl, r4, #25
 800ae2e:	68e3      	ldr	r3, [r4, #12]
 800ae30:	6832      	ldr	r2, [r6, #0]
 800ae32:	1a9b      	subs	r3, r3, r2
 800ae34:	42ab      	cmp	r3, r5
 800ae36:	dc26      	bgt.n	800ae86 <_printf_common+0x96>
 800ae38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae3c:	1e13      	subs	r3, r2, #0
 800ae3e:	6822      	ldr	r2, [r4, #0]
 800ae40:	bf18      	it	ne
 800ae42:	2301      	movne	r3, #1
 800ae44:	0692      	lsls	r2, r2, #26
 800ae46:	d42b      	bmi.n	800aea0 <_printf_common+0xb0>
 800ae48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	4638      	mov	r0, r7
 800ae50:	47c0      	blx	r8
 800ae52:	3001      	adds	r0, #1
 800ae54:	d01e      	beq.n	800ae94 <_printf_common+0xa4>
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	68e5      	ldr	r5, [r4, #12]
 800ae5a:	6832      	ldr	r2, [r6, #0]
 800ae5c:	f003 0306 	and.w	r3, r3, #6
 800ae60:	2b04      	cmp	r3, #4
 800ae62:	bf08      	it	eq
 800ae64:	1aad      	subeq	r5, r5, r2
 800ae66:	68a3      	ldr	r3, [r4, #8]
 800ae68:	6922      	ldr	r2, [r4, #16]
 800ae6a:	bf0c      	ite	eq
 800ae6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae70:	2500      	movne	r5, #0
 800ae72:	4293      	cmp	r3, r2
 800ae74:	bfc4      	itt	gt
 800ae76:	1a9b      	subgt	r3, r3, r2
 800ae78:	18ed      	addgt	r5, r5, r3
 800ae7a:	2600      	movs	r6, #0
 800ae7c:	341a      	adds	r4, #26
 800ae7e:	42b5      	cmp	r5, r6
 800ae80:	d11a      	bne.n	800aeb8 <_printf_common+0xc8>
 800ae82:	2000      	movs	r0, #0
 800ae84:	e008      	b.n	800ae98 <_printf_common+0xa8>
 800ae86:	2301      	movs	r3, #1
 800ae88:	4652      	mov	r2, sl
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	4638      	mov	r0, r7
 800ae8e:	47c0      	blx	r8
 800ae90:	3001      	adds	r0, #1
 800ae92:	d103      	bne.n	800ae9c <_printf_common+0xac>
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9c:	3501      	adds	r5, #1
 800ae9e:	e7c6      	b.n	800ae2e <_printf_common+0x3e>
 800aea0:	18e1      	adds	r1, r4, r3
 800aea2:	1c5a      	adds	r2, r3, #1
 800aea4:	2030      	movs	r0, #48	; 0x30
 800aea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aeaa:	4422      	add	r2, r4
 800aeac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aeb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aeb4:	3302      	adds	r3, #2
 800aeb6:	e7c7      	b.n	800ae48 <_printf_common+0x58>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	4622      	mov	r2, r4
 800aebc:	4649      	mov	r1, r9
 800aebe:	4638      	mov	r0, r7
 800aec0:	47c0      	blx	r8
 800aec2:	3001      	adds	r0, #1
 800aec4:	d0e6      	beq.n	800ae94 <_printf_common+0xa4>
 800aec6:	3601      	adds	r6, #1
 800aec8:	e7d9      	b.n	800ae7e <_printf_common+0x8e>
	...

0800aecc <_printf_i>:
 800aecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aed0:	7e0f      	ldrb	r7, [r1, #24]
 800aed2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aed4:	2f78      	cmp	r7, #120	; 0x78
 800aed6:	4691      	mov	r9, r2
 800aed8:	4680      	mov	r8, r0
 800aeda:	460c      	mov	r4, r1
 800aedc:	469a      	mov	sl, r3
 800aede:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aee2:	d807      	bhi.n	800aef4 <_printf_i+0x28>
 800aee4:	2f62      	cmp	r7, #98	; 0x62
 800aee6:	d80a      	bhi.n	800aefe <_printf_i+0x32>
 800aee8:	2f00      	cmp	r7, #0
 800aeea:	f000 80d8 	beq.w	800b09e <_printf_i+0x1d2>
 800aeee:	2f58      	cmp	r7, #88	; 0x58
 800aef0:	f000 80a3 	beq.w	800b03a <_printf_i+0x16e>
 800aef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aefc:	e03a      	b.n	800af74 <_printf_i+0xa8>
 800aefe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af02:	2b15      	cmp	r3, #21
 800af04:	d8f6      	bhi.n	800aef4 <_printf_i+0x28>
 800af06:	a101      	add	r1, pc, #4	; (adr r1, 800af0c <_printf_i+0x40>)
 800af08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af0c:	0800af65 	.word	0x0800af65
 800af10:	0800af79 	.word	0x0800af79
 800af14:	0800aef5 	.word	0x0800aef5
 800af18:	0800aef5 	.word	0x0800aef5
 800af1c:	0800aef5 	.word	0x0800aef5
 800af20:	0800aef5 	.word	0x0800aef5
 800af24:	0800af79 	.word	0x0800af79
 800af28:	0800aef5 	.word	0x0800aef5
 800af2c:	0800aef5 	.word	0x0800aef5
 800af30:	0800aef5 	.word	0x0800aef5
 800af34:	0800aef5 	.word	0x0800aef5
 800af38:	0800b085 	.word	0x0800b085
 800af3c:	0800afa9 	.word	0x0800afa9
 800af40:	0800b067 	.word	0x0800b067
 800af44:	0800aef5 	.word	0x0800aef5
 800af48:	0800aef5 	.word	0x0800aef5
 800af4c:	0800b0a7 	.word	0x0800b0a7
 800af50:	0800aef5 	.word	0x0800aef5
 800af54:	0800afa9 	.word	0x0800afa9
 800af58:	0800aef5 	.word	0x0800aef5
 800af5c:	0800aef5 	.word	0x0800aef5
 800af60:	0800b06f 	.word	0x0800b06f
 800af64:	682b      	ldr	r3, [r5, #0]
 800af66:	1d1a      	adds	r2, r3, #4
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	602a      	str	r2, [r5, #0]
 800af6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af74:	2301      	movs	r3, #1
 800af76:	e0a3      	b.n	800b0c0 <_printf_i+0x1f4>
 800af78:	6820      	ldr	r0, [r4, #0]
 800af7a:	6829      	ldr	r1, [r5, #0]
 800af7c:	0606      	lsls	r6, r0, #24
 800af7e:	f101 0304 	add.w	r3, r1, #4
 800af82:	d50a      	bpl.n	800af9a <_printf_i+0xce>
 800af84:	680e      	ldr	r6, [r1, #0]
 800af86:	602b      	str	r3, [r5, #0]
 800af88:	2e00      	cmp	r6, #0
 800af8a:	da03      	bge.n	800af94 <_printf_i+0xc8>
 800af8c:	232d      	movs	r3, #45	; 0x2d
 800af8e:	4276      	negs	r6, r6
 800af90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af94:	485e      	ldr	r0, [pc, #376]	; (800b110 <_printf_i+0x244>)
 800af96:	230a      	movs	r3, #10
 800af98:	e019      	b.n	800afce <_printf_i+0x102>
 800af9a:	680e      	ldr	r6, [r1, #0]
 800af9c:	602b      	str	r3, [r5, #0]
 800af9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afa2:	bf18      	it	ne
 800afa4:	b236      	sxthne	r6, r6
 800afa6:	e7ef      	b.n	800af88 <_printf_i+0xbc>
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	6820      	ldr	r0, [r4, #0]
 800afac:	1d19      	adds	r1, r3, #4
 800afae:	6029      	str	r1, [r5, #0]
 800afb0:	0601      	lsls	r1, r0, #24
 800afb2:	d501      	bpl.n	800afb8 <_printf_i+0xec>
 800afb4:	681e      	ldr	r6, [r3, #0]
 800afb6:	e002      	b.n	800afbe <_printf_i+0xf2>
 800afb8:	0646      	lsls	r6, r0, #25
 800afba:	d5fb      	bpl.n	800afb4 <_printf_i+0xe8>
 800afbc:	881e      	ldrh	r6, [r3, #0]
 800afbe:	4854      	ldr	r0, [pc, #336]	; (800b110 <_printf_i+0x244>)
 800afc0:	2f6f      	cmp	r7, #111	; 0x6f
 800afc2:	bf0c      	ite	eq
 800afc4:	2308      	moveq	r3, #8
 800afc6:	230a      	movne	r3, #10
 800afc8:	2100      	movs	r1, #0
 800afca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afce:	6865      	ldr	r5, [r4, #4]
 800afd0:	60a5      	str	r5, [r4, #8]
 800afd2:	2d00      	cmp	r5, #0
 800afd4:	bfa2      	ittt	ge
 800afd6:	6821      	ldrge	r1, [r4, #0]
 800afd8:	f021 0104 	bicge.w	r1, r1, #4
 800afdc:	6021      	strge	r1, [r4, #0]
 800afde:	b90e      	cbnz	r6, 800afe4 <_printf_i+0x118>
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	d04d      	beq.n	800b080 <_printf_i+0x1b4>
 800afe4:	4615      	mov	r5, r2
 800afe6:	fbb6 f1f3 	udiv	r1, r6, r3
 800afea:	fb03 6711 	mls	r7, r3, r1, r6
 800afee:	5dc7      	ldrb	r7, [r0, r7]
 800aff0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aff4:	4637      	mov	r7, r6
 800aff6:	42bb      	cmp	r3, r7
 800aff8:	460e      	mov	r6, r1
 800affa:	d9f4      	bls.n	800afe6 <_printf_i+0x11a>
 800affc:	2b08      	cmp	r3, #8
 800affe:	d10b      	bne.n	800b018 <_printf_i+0x14c>
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	07de      	lsls	r6, r3, #31
 800b004:	d508      	bpl.n	800b018 <_printf_i+0x14c>
 800b006:	6923      	ldr	r3, [r4, #16]
 800b008:	6861      	ldr	r1, [r4, #4]
 800b00a:	4299      	cmp	r1, r3
 800b00c:	bfde      	ittt	le
 800b00e:	2330      	movle	r3, #48	; 0x30
 800b010:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b014:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b018:	1b52      	subs	r2, r2, r5
 800b01a:	6122      	str	r2, [r4, #16]
 800b01c:	f8cd a000 	str.w	sl, [sp]
 800b020:	464b      	mov	r3, r9
 800b022:	aa03      	add	r2, sp, #12
 800b024:	4621      	mov	r1, r4
 800b026:	4640      	mov	r0, r8
 800b028:	f7ff fee2 	bl	800adf0 <_printf_common>
 800b02c:	3001      	adds	r0, #1
 800b02e:	d14c      	bne.n	800b0ca <_printf_i+0x1fe>
 800b030:	f04f 30ff 	mov.w	r0, #4294967295
 800b034:	b004      	add	sp, #16
 800b036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b03a:	4835      	ldr	r0, [pc, #212]	; (800b110 <_printf_i+0x244>)
 800b03c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b040:	6829      	ldr	r1, [r5, #0]
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	f851 6b04 	ldr.w	r6, [r1], #4
 800b048:	6029      	str	r1, [r5, #0]
 800b04a:	061d      	lsls	r5, r3, #24
 800b04c:	d514      	bpl.n	800b078 <_printf_i+0x1ac>
 800b04e:	07df      	lsls	r7, r3, #31
 800b050:	bf44      	itt	mi
 800b052:	f043 0320 	orrmi.w	r3, r3, #32
 800b056:	6023      	strmi	r3, [r4, #0]
 800b058:	b91e      	cbnz	r6, 800b062 <_printf_i+0x196>
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	f023 0320 	bic.w	r3, r3, #32
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	2310      	movs	r3, #16
 800b064:	e7b0      	b.n	800afc8 <_printf_i+0xfc>
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	f043 0320 	orr.w	r3, r3, #32
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	2378      	movs	r3, #120	; 0x78
 800b070:	4828      	ldr	r0, [pc, #160]	; (800b114 <_printf_i+0x248>)
 800b072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b076:	e7e3      	b.n	800b040 <_printf_i+0x174>
 800b078:	0659      	lsls	r1, r3, #25
 800b07a:	bf48      	it	mi
 800b07c:	b2b6      	uxthmi	r6, r6
 800b07e:	e7e6      	b.n	800b04e <_printf_i+0x182>
 800b080:	4615      	mov	r5, r2
 800b082:	e7bb      	b.n	800affc <_printf_i+0x130>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	6826      	ldr	r6, [r4, #0]
 800b088:	6961      	ldr	r1, [r4, #20]
 800b08a:	1d18      	adds	r0, r3, #4
 800b08c:	6028      	str	r0, [r5, #0]
 800b08e:	0635      	lsls	r5, r6, #24
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	d501      	bpl.n	800b098 <_printf_i+0x1cc>
 800b094:	6019      	str	r1, [r3, #0]
 800b096:	e002      	b.n	800b09e <_printf_i+0x1d2>
 800b098:	0670      	lsls	r0, r6, #25
 800b09a:	d5fb      	bpl.n	800b094 <_printf_i+0x1c8>
 800b09c:	8019      	strh	r1, [r3, #0]
 800b09e:	2300      	movs	r3, #0
 800b0a0:	6123      	str	r3, [r4, #16]
 800b0a2:	4615      	mov	r5, r2
 800b0a4:	e7ba      	b.n	800b01c <_printf_i+0x150>
 800b0a6:	682b      	ldr	r3, [r5, #0]
 800b0a8:	1d1a      	adds	r2, r3, #4
 800b0aa:	602a      	str	r2, [r5, #0]
 800b0ac:	681d      	ldr	r5, [r3, #0]
 800b0ae:	6862      	ldr	r2, [r4, #4]
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f7f5 f89c 	bl	80001f0 <memchr>
 800b0b8:	b108      	cbz	r0, 800b0be <_printf_i+0x1f2>
 800b0ba:	1b40      	subs	r0, r0, r5
 800b0bc:	6060      	str	r0, [r4, #4]
 800b0be:	6863      	ldr	r3, [r4, #4]
 800b0c0:	6123      	str	r3, [r4, #16]
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0c8:	e7a8      	b.n	800b01c <_printf_i+0x150>
 800b0ca:	6923      	ldr	r3, [r4, #16]
 800b0cc:	462a      	mov	r2, r5
 800b0ce:	4649      	mov	r1, r9
 800b0d0:	4640      	mov	r0, r8
 800b0d2:	47d0      	blx	sl
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	d0ab      	beq.n	800b030 <_printf_i+0x164>
 800b0d8:	6823      	ldr	r3, [r4, #0]
 800b0da:	079b      	lsls	r3, r3, #30
 800b0dc:	d413      	bmi.n	800b106 <_printf_i+0x23a>
 800b0de:	68e0      	ldr	r0, [r4, #12]
 800b0e0:	9b03      	ldr	r3, [sp, #12]
 800b0e2:	4298      	cmp	r0, r3
 800b0e4:	bfb8      	it	lt
 800b0e6:	4618      	movlt	r0, r3
 800b0e8:	e7a4      	b.n	800b034 <_printf_i+0x168>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	4632      	mov	r2, r6
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	4640      	mov	r0, r8
 800b0f2:	47d0      	blx	sl
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	d09b      	beq.n	800b030 <_printf_i+0x164>
 800b0f8:	3501      	adds	r5, #1
 800b0fa:	68e3      	ldr	r3, [r4, #12]
 800b0fc:	9903      	ldr	r1, [sp, #12]
 800b0fe:	1a5b      	subs	r3, r3, r1
 800b100:	42ab      	cmp	r3, r5
 800b102:	dcf2      	bgt.n	800b0ea <_printf_i+0x21e>
 800b104:	e7eb      	b.n	800b0de <_printf_i+0x212>
 800b106:	2500      	movs	r5, #0
 800b108:	f104 0619 	add.w	r6, r4, #25
 800b10c:	e7f5      	b.n	800b0fa <_printf_i+0x22e>
 800b10e:	bf00      	nop
 800b110:	0800bf95 	.word	0x0800bf95
 800b114:	0800bfa6 	.word	0x0800bfa6

0800b118 <memcpy>:
 800b118:	440a      	add	r2, r1
 800b11a:	4291      	cmp	r1, r2
 800b11c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b120:	d100      	bne.n	800b124 <memcpy+0xc>
 800b122:	4770      	bx	lr
 800b124:	b510      	push	{r4, lr}
 800b126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b12a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b12e:	4291      	cmp	r1, r2
 800b130:	d1f9      	bne.n	800b126 <memcpy+0xe>
 800b132:	bd10      	pop	{r4, pc}

0800b134 <memmove>:
 800b134:	4288      	cmp	r0, r1
 800b136:	b510      	push	{r4, lr}
 800b138:	eb01 0402 	add.w	r4, r1, r2
 800b13c:	d902      	bls.n	800b144 <memmove+0x10>
 800b13e:	4284      	cmp	r4, r0
 800b140:	4623      	mov	r3, r4
 800b142:	d807      	bhi.n	800b154 <memmove+0x20>
 800b144:	1e43      	subs	r3, r0, #1
 800b146:	42a1      	cmp	r1, r4
 800b148:	d008      	beq.n	800b15c <memmove+0x28>
 800b14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b152:	e7f8      	b.n	800b146 <memmove+0x12>
 800b154:	4402      	add	r2, r0
 800b156:	4601      	mov	r1, r0
 800b158:	428a      	cmp	r2, r1
 800b15a:	d100      	bne.n	800b15e <memmove+0x2a>
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b166:	e7f7      	b.n	800b158 <memmove+0x24>

0800b168 <_free_r>:
 800b168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b16a:	2900      	cmp	r1, #0
 800b16c:	d044      	beq.n	800b1f8 <_free_r+0x90>
 800b16e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b172:	9001      	str	r0, [sp, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	f1a1 0404 	sub.w	r4, r1, #4
 800b17a:	bfb8      	it	lt
 800b17c:	18e4      	addlt	r4, r4, r3
 800b17e:	f000 f913 	bl	800b3a8 <__malloc_lock>
 800b182:	4a1e      	ldr	r2, [pc, #120]	; (800b1fc <_free_r+0x94>)
 800b184:	9801      	ldr	r0, [sp, #4]
 800b186:	6813      	ldr	r3, [r2, #0]
 800b188:	b933      	cbnz	r3, 800b198 <_free_r+0x30>
 800b18a:	6063      	str	r3, [r4, #4]
 800b18c:	6014      	str	r4, [r2, #0]
 800b18e:	b003      	add	sp, #12
 800b190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b194:	f000 b90e 	b.w	800b3b4 <__malloc_unlock>
 800b198:	42a3      	cmp	r3, r4
 800b19a:	d908      	bls.n	800b1ae <_free_r+0x46>
 800b19c:	6825      	ldr	r5, [r4, #0]
 800b19e:	1961      	adds	r1, r4, r5
 800b1a0:	428b      	cmp	r3, r1
 800b1a2:	bf01      	itttt	eq
 800b1a4:	6819      	ldreq	r1, [r3, #0]
 800b1a6:	685b      	ldreq	r3, [r3, #4]
 800b1a8:	1949      	addeq	r1, r1, r5
 800b1aa:	6021      	streq	r1, [r4, #0]
 800b1ac:	e7ed      	b.n	800b18a <_free_r+0x22>
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	b10b      	cbz	r3, 800b1b8 <_free_r+0x50>
 800b1b4:	42a3      	cmp	r3, r4
 800b1b6:	d9fa      	bls.n	800b1ae <_free_r+0x46>
 800b1b8:	6811      	ldr	r1, [r2, #0]
 800b1ba:	1855      	adds	r5, r2, r1
 800b1bc:	42a5      	cmp	r5, r4
 800b1be:	d10b      	bne.n	800b1d8 <_free_r+0x70>
 800b1c0:	6824      	ldr	r4, [r4, #0]
 800b1c2:	4421      	add	r1, r4
 800b1c4:	1854      	adds	r4, r2, r1
 800b1c6:	42a3      	cmp	r3, r4
 800b1c8:	6011      	str	r1, [r2, #0]
 800b1ca:	d1e0      	bne.n	800b18e <_free_r+0x26>
 800b1cc:	681c      	ldr	r4, [r3, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	6053      	str	r3, [r2, #4]
 800b1d2:	4421      	add	r1, r4
 800b1d4:	6011      	str	r1, [r2, #0]
 800b1d6:	e7da      	b.n	800b18e <_free_r+0x26>
 800b1d8:	d902      	bls.n	800b1e0 <_free_r+0x78>
 800b1da:	230c      	movs	r3, #12
 800b1dc:	6003      	str	r3, [r0, #0]
 800b1de:	e7d6      	b.n	800b18e <_free_r+0x26>
 800b1e0:	6825      	ldr	r5, [r4, #0]
 800b1e2:	1961      	adds	r1, r4, r5
 800b1e4:	428b      	cmp	r3, r1
 800b1e6:	bf04      	itt	eq
 800b1e8:	6819      	ldreq	r1, [r3, #0]
 800b1ea:	685b      	ldreq	r3, [r3, #4]
 800b1ec:	6063      	str	r3, [r4, #4]
 800b1ee:	bf04      	itt	eq
 800b1f0:	1949      	addeq	r1, r1, r5
 800b1f2:	6021      	streq	r1, [r4, #0]
 800b1f4:	6054      	str	r4, [r2, #4]
 800b1f6:	e7ca      	b.n	800b18e <_free_r+0x26>
 800b1f8:	b003      	add	sp, #12
 800b1fa:	bd30      	pop	{r4, r5, pc}
 800b1fc:	20002988 	.word	0x20002988

0800b200 <sbrk_aligned>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	4e0e      	ldr	r6, [pc, #56]	; (800b23c <sbrk_aligned+0x3c>)
 800b204:	460c      	mov	r4, r1
 800b206:	6831      	ldr	r1, [r6, #0]
 800b208:	4605      	mov	r5, r0
 800b20a:	b911      	cbnz	r1, 800b212 <sbrk_aligned+0x12>
 800b20c:	f000 f8bc 	bl	800b388 <_sbrk_r>
 800b210:	6030      	str	r0, [r6, #0]
 800b212:	4621      	mov	r1, r4
 800b214:	4628      	mov	r0, r5
 800b216:	f000 f8b7 	bl	800b388 <_sbrk_r>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	d00a      	beq.n	800b234 <sbrk_aligned+0x34>
 800b21e:	1cc4      	adds	r4, r0, #3
 800b220:	f024 0403 	bic.w	r4, r4, #3
 800b224:	42a0      	cmp	r0, r4
 800b226:	d007      	beq.n	800b238 <sbrk_aligned+0x38>
 800b228:	1a21      	subs	r1, r4, r0
 800b22a:	4628      	mov	r0, r5
 800b22c:	f000 f8ac 	bl	800b388 <_sbrk_r>
 800b230:	3001      	adds	r0, #1
 800b232:	d101      	bne.n	800b238 <sbrk_aligned+0x38>
 800b234:	f04f 34ff 	mov.w	r4, #4294967295
 800b238:	4620      	mov	r0, r4
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	2000298c 	.word	0x2000298c

0800b240 <_malloc_r>:
 800b240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b244:	1ccd      	adds	r5, r1, #3
 800b246:	f025 0503 	bic.w	r5, r5, #3
 800b24a:	3508      	adds	r5, #8
 800b24c:	2d0c      	cmp	r5, #12
 800b24e:	bf38      	it	cc
 800b250:	250c      	movcc	r5, #12
 800b252:	2d00      	cmp	r5, #0
 800b254:	4607      	mov	r7, r0
 800b256:	db01      	blt.n	800b25c <_malloc_r+0x1c>
 800b258:	42a9      	cmp	r1, r5
 800b25a:	d905      	bls.n	800b268 <_malloc_r+0x28>
 800b25c:	230c      	movs	r3, #12
 800b25e:	603b      	str	r3, [r7, #0]
 800b260:	2600      	movs	r6, #0
 800b262:	4630      	mov	r0, r6
 800b264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b268:	4e2e      	ldr	r6, [pc, #184]	; (800b324 <_malloc_r+0xe4>)
 800b26a:	f000 f89d 	bl	800b3a8 <__malloc_lock>
 800b26e:	6833      	ldr	r3, [r6, #0]
 800b270:	461c      	mov	r4, r3
 800b272:	bb34      	cbnz	r4, 800b2c2 <_malloc_r+0x82>
 800b274:	4629      	mov	r1, r5
 800b276:	4638      	mov	r0, r7
 800b278:	f7ff ffc2 	bl	800b200 <sbrk_aligned>
 800b27c:	1c43      	adds	r3, r0, #1
 800b27e:	4604      	mov	r4, r0
 800b280:	d14d      	bne.n	800b31e <_malloc_r+0xde>
 800b282:	6834      	ldr	r4, [r6, #0]
 800b284:	4626      	mov	r6, r4
 800b286:	2e00      	cmp	r6, #0
 800b288:	d140      	bne.n	800b30c <_malloc_r+0xcc>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	4631      	mov	r1, r6
 800b28e:	4638      	mov	r0, r7
 800b290:	eb04 0803 	add.w	r8, r4, r3
 800b294:	f000 f878 	bl	800b388 <_sbrk_r>
 800b298:	4580      	cmp	r8, r0
 800b29a:	d13a      	bne.n	800b312 <_malloc_r+0xd2>
 800b29c:	6821      	ldr	r1, [r4, #0]
 800b29e:	3503      	adds	r5, #3
 800b2a0:	1a6d      	subs	r5, r5, r1
 800b2a2:	f025 0503 	bic.w	r5, r5, #3
 800b2a6:	3508      	adds	r5, #8
 800b2a8:	2d0c      	cmp	r5, #12
 800b2aa:	bf38      	it	cc
 800b2ac:	250c      	movcc	r5, #12
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f7ff ffa5 	bl	800b200 <sbrk_aligned>
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	d02b      	beq.n	800b312 <_malloc_r+0xd2>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	442b      	add	r3, r5
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	e00e      	b.n	800b2e0 <_malloc_r+0xa0>
 800b2c2:	6822      	ldr	r2, [r4, #0]
 800b2c4:	1b52      	subs	r2, r2, r5
 800b2c6:	d41e      	bmi.n	800b306 <_malloc_r+0xc6>
 800b2c8:	2a0b      	cmp	r2, #11
 800b2ca:	d916      	bls.n	800b2fa <_malloc_r+0xba>
 800b2cc:	1961      	adds	r1, r4, r5
 800b2ce:	42a3      	cmp	r3, r4
 800b2d0:	6025      	str	r5, [r4, #0]
 800b2d2:	bf18      	it	ne
 800b2d4:	6059      	strne	r1, [r3, #4]
 800b2d6:	6863      	ldr	r3, [r4, #4]
 800b2d8:	bf08      	it	eq
 800b2da:	6031      	streq	r1, [r6, #0]
 800b2dc:	5162      	str	r2, [r4, r5]
 800b2de:	604b      	str	r3, [r1, #4]
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	f104 060b 	add.w	r6, r4, #11
 800b2e6:	f000 f865 	bl	800b3b4 <__malloc_unlock>
 800b2ea:	f026 0607 	bic.w	r6, r6, #7
 800b2ee:	1d23      	adds	r3, r4, #4
 800b2f0:	1af2      	subs	r2, r6, r3
 800b2f2:	d0b6      	beq.n	800b262 <_malloc_r+0x22>
 800b2f4:	1b9b      	subs	r3, r3, r6
 800b2f6:	50a3      	str	r3, [r4, r2]
 800b2f8:	e7b3      	b.n	800b262 <_malloc_r+0x22>
 800b2fa:	6862      	ldr	r2, [r4, #4]
 800b2fc:	42a3      	cmp	r3, r4
 800b2fe:	bf0c      	ite	eq
 800b300:	6032      	streq	r2, [r6, #0]
 800b302:	605a      	strne	r2, [r3, #4]
 800b304:	e7ec      	b.n	800b2e0 <_malloc_r+0xa0>
 800b306:	4623      	mov	r3, r4
 800b308:	6864      	ldr	r4, [r4, #4]
 800b30a:	e7b2      	b.n	800b272 <_malloc_r+0x32>
 800b30c:	4634      	mov	r4, r6
 800b30e:	6876      	ldr	r6, [r6, #4]
 800b310:	e7b9      	b.n	800b286 <_malloc_r+0x46>
 800b312:	230c      	movs	r3, #12
 800b314:	603b      	str	r3, [r7, #0]
 800b316:	4638      	mov	r0, r7
 800b318:	f000 f84c 	bl	800b3b4 <__malloc_unlock>
 800b31c:	e7a1      	b.n	800b262 <_malloc_r+0x22>
 800b31e:	6025      	str	r5, [r4, #0]
 800b320:	e7de      	b.n	800b2e0 <_malloc_r+0xa0>
 800b322:	bf00      	nop
 800b324:	20002988 	.word	0x20002988

0800b328 <_realloc_r>:
 800b328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b32c:	4680      	mov	r8, r0
 800b32e:	4614      	mov	r4, r2
 800b330:	460e      	mov	r6, r1
 800b332:	b921      	cbnz	r1, 800b33e <_realloc_r+0x16>
 800b334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b338:	4611      	mov	r1, r2
 800b33a:	f7ff bf81 	b.w	800b240 <_malloc_r>
 800b33e:	b92a      	cbnz	r2, 800b34c <_realloc_r+0x24>
 800b340:	f7ff ff12 	bl	800b168 <_free_r>
 800b344:	4625      	mov	r5, r4
 800b346:	4628      	mov	r0, r5
 800b348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34c:	f000 f838 	bl	800b3c0 <_malloc_usable_size_r>
 800b350:	4284      	cmp	r4, r0
 800b352:	4607      	mov	r7, r0
 800b354:	d802      	bhi.n	800b35c <_realloc_r+0x34>
 800b356:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b35a:	d812      	bhi.n	800b382 <_realloc_r+0x5a>
 800b35c:	4621      	mov	r1, r4
 800b35e:	4640      	mov	r0, r8
 800b360:	f7ff ff6e 	bl	800b240 <_malloc_r>
 800b364:	4605      	mov	r5, r0
 800b366:	2800      	cmp	r0, #0
 800b368:	d0ed      	beq.n	800b346 <_realloc_r+0x1e>
 800b36a:	42bc      	cmp	r4, r7
 800b36c:	4622      	mov	r2, r4
 800b36e:	4631      	mov	r1, r6
 800b370:	bf28      	it	cs
 800b372:	463a      	movcs	r2, r7
 800b374:	f7ff fed0 	bl	800b118 <memcpy>
 800b378:	4631      	mov	r1, r6
 800b37a:	4640      	mov	r0, r8
 800b37c:	f7ff fef4 	bl	800b168 <_free_r>
 800b380:	e7e1      	b.n	800b346 <_realloc_r+0x1e>
 800b382:	4635      	mov	r5, r6
 800b384:	e7df      	b.n	800b346 <_realloc_r+0x1e>
	...

0800b388 <_sbrk_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4d06      	ldr	r5, [pc, #24]	; (800b3a4 <_sbrk_r+0x1c>)
 800b38c:	2300      	movs	r3, #0
 800b38e:	4604      	mov	r4, r0
 800b390:	4608      	mov	r0, r1
 800b392:	602b      	str	r3, [r5, #0]
 800b394:	f7f7 fb6c 	bl	8002a70 <_sbrk>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d102      	bne.n	800b3a2 <_sbrk_r+0x1a>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	b103      	cbz	r3, 800b3a2 <_sbrk_r+0x1a>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd38      	pop	{r3, r4, r5, pc}
 800b3a4:	20002990 	.word	0x20002990

0800b3a8 <__malloc_lock>:
 800b3a8:	4801      	ldr	r0, [pc, #4]	; (800b3b0 <__malloc_lock+0x8>)
 800b3aa:	f000 b811 	b.w	800b3d0 <__retarget_lock_acquire_recursive>
 800b3ae:	bf00      	nop
 800b3b0:	20002994 	.word	0x20002994

0800b3b4 <__malloc_unlock>:
 800b3b4:	4801      	ldr	r0, [pc, #4]	; (800b3bc <__malloc_unlock+0x8>)
 800b3b6:	f000 b80c 	b.w	800b3d2 <__retarget_lock_release_recursive>
 800b3ba:	bf00      	nop
 800b3bc:	20002994 	.word	0x20002994

0800b3c0 <_malloc_usable_size_r>:
 800b3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3c4:	1f18      	subs	r0, r3, #4
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	bfbc      	itt	lt
 800b3ca:	580b      	ldrlt	r3, [r1, r0]
 800b3cc:	18c0      	addlt	r0, r0, r3
 800b3ce:	4770      	bx	lr

0800b3d0 <__retarget_lock_acquire_recursive>:
 800b3d0:	4770      	bx	lr

0800b3d2 <__retarget_lock_release_recursive>:
 800b3d2:	4770      	bx	lr

0800b3d4 <_init>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	bf00      	nop
 800b3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3da:	bc08      	pop	{r3}
 800b3dc:	469e      	mov	lr, r3
 800b3de:	4770      	bx	lr

0800b3e0 <_fini>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	bf00      	nop
 800b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e6:	bc08      	pop	{r3}
 800b3e8:	469e      	mov	lr, r3
 800b3ea:	4770      	bx	lr
