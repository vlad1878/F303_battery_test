
F303_battery_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc8  0800afb8  0800afb8  0001afb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb80  0800bb80  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb80  0800bb80  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb80  0800bb80  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb80  0800bb80  0001bb80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb84  0800bb84  0001bb84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800bb88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00002964  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200029ec  200029ec  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000152f7  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e38  00000000  00000000  000353af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  000381e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe0  00000000  00000000  000392f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225aa  00000000  00000000  0003a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018590  00000000  00000000  0005c882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6610  00000000  00000000  00074e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b422  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b18  00000000  00000000  0013b474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800afa0 	.word	0x0800afa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800afa0 	.word	0x0800afa0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <GMG12864_Send_command>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void GMG12864_Send_command(uint8_t Command) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Command - 8 бит данных.
	DC_set();
 80008a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008ae:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, &Command, 1, HAL_MAX_DELAY);
 80008b0:	1df9      	adds	r1, r7, #7
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	2201      	movs	r2, #1
 80008b8:	4808      	ldr	r0, [pc, #32]	; (80008dc <GMG12864_Send_command+0x40>)
 80008ba:	f005 f956 	bl	8005b6a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80008be:	bf00      	nop
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <GMG12864_Send_command+0x40>)
 80008c2:	f005 fcd3 	bl	800626c <HAL_SPI_GetState>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d1f9      	bne.n	80008c0 <GMG12864_Send_command+0x24>
	DC_reset();
 80008cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008d0:	2210      	movs	r2, #16
 80008d2:	619a      	str	r2, [r3, #24]
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200005cc 	.word	0x200005cc

080008e0 <GMG12864_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных.
static void GMG12864_Send_data(uint8_t Dat) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &Dat, 1, HAL_MAX_DELAY);
 80008ea:	1df9      	adds	r1, r7, #7
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	2201      	movs	r2, #1
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <GMG12864_Send_data+0x30>)
 80008f4:	f005 f939 	bl	8005b6a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80008f8:	bf00      	nop
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <GMG12864_Send_data+0x30>)
 80008fc:	f005 fcb6 	bl	800626c <HAL_SPI_GetState>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d1f9      	bne.n	80008fa <GMG12864_Send_data+0x1a>
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200005cc 	.word	0x200005cc

08000914 <GMG12864_Init>:
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
}
/*------------------------Функция очистки буфера кадра-------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void GMG12864_Init(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	cs_set();
 8000918:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800091c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000920:	619a      	str	r2, [r3, #24]
	RST_set();
 8000922:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800092a:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 800092c:	200a      	movs	r0, #10
 800092e:	f002 fa4f 	bl	8002dd0 <HAL_Delay>
	RST_reset();
 8000932:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000936:	2202      	movs	r2, #2
 8000938:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 800093a:	200a      	movs	r0, #10
 800093c:	f002 fa48 	bl	8002dd0 <HAL_Delay>
	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея
	GMG12864_Send_command(0xA2);
 8000940:	20a2      	movs	r0, #162	; 0xa2
 8000942:	f7ff ffab 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 8000946:	2001      	movs	r0, #1
 8000948:	f002 fa42 	bl	8002dd0 <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	GMG12864_Send_command(0xA0); //ADC selection(SEG0->SEG128)
 800094c:	20a0      	movs	r0, #160	; 0xa0
 800094e:	f7ff ffa5 	bl	800089c <GMG12864_Send_command>
	GMG12864_Send_command(0xC8); //SHL selection(COM0->COM64)
 8000952:	20c8      	movs	r0, #200	; 0xc8
 8000954:	f7ff ffa2 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f002 fa39 	bl	8002dd0 <HAL_Delay>
	// делитель внутреннего резистора установлен на 7 (от 0..7)
	GMG12864_Send_command(0x20 | 0x7);    //Regulator Resistor Selection
 800095e:	2027      	movs	r0, #39	; 0x27
 8000960:	f7ff ff9c 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f002 fa33 	bl	8002dd0 <HAL_Delay>
	// управление питанием, все внутренние блоки включены	(от 0..7)
	GMG12864_Send_command(0x28 | 0x7);
 800096a:	202f      	movs	r0, #47	; 0x2f
 800096c:	f7ff ff96 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f002 fa2d 	bl	8002dd0 <HAL_Delay>
	// войти в режим динамического контраста
	GMG12864_Send_command(0x81);    //Electronic Volume
 8000976:	2081      	movs	r0, #129	; 0x81
 8000978:	f7ff ff90 	bl	800089c <GMG12864_Send_command>
	GMG12864_Send_command(18);	// Настройка контраста. Отрегулируйте на своем дисплее. У меня на 15-19 норм. Максимум 63.
 800097c:	2012      	movs	r0, #18
 800097e:	f7ff ff8d 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 8000982:	2001      	movs	r0, #1
 8000984:	f002 fa24 	bl	8002dd0 <HAL_Delay>
	GMG12864_Send_command(0x40);
 8000988:	2040      	movs	r0, #64	; 0x40
 800098a:	f7ff ff87 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 800098e:	2001      	movs	r0, #1
 8000990:	f002 fa1e 	bl	8002dd0 <HAL_Delay>
	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	GMG12864_Send_command(0xAF);    		//Display on
 8000994:	20af      	movs	r0, #175	; 0xaf
 8000996:	f7ff ff81 	bl	800089c <GMG12864_Send_command>
	// Инвертирование экрана
	GMG12864_Send_command(0xA6); //0xA6 - nomal, 0xA7 - revers
 800099a:	20a6      	movs	r0, #166	; 0xa6
 800099c:	f7ff ff7e 	bl	800089c <GMG12864_Send_command>
	HAL_Delay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f002 fa15 	bl	8002dd0 <HAL_Delay>
	cs_reset();
 80009a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009aa:	2201      	movs	r2, #1
 80009ac:	619a      	str	r2, [r3, #24]
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <GMG12864_Draw_pixel>:
	}
}
/*------------------------Функция вывода изображения с указаием его размера-------------------------*/

/*------------------------Функция рисования пикселя-------------------------*/
void GMG12864_Draw_pixel(int16_t x, int16_t y, uint8_t color) {
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	460b      	mov	r3, r1
 80009c0:	80bb      	strh	r3, [r7, #4]
 80009c2:	4613      	mov	r3, r2
 80009c4:	70fb      	strb	r3, [r7, #3]

	if (x >= GMG12864_width || x < 0 || y >= GMG12864_height || y < 0) {
 80009c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ca:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <GMG12864_Draw_pixel+0xd8>)
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	da55      	bge.n	8000a7e <GMG12864_Draw_pixel+0xca>
 80009d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db51      	blt.n	8000a7e <GMG12864_Draw_pixel+0xca>
 80009da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009de:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <GMG12864_Draw_pixel+0xdc>)
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	4293      	cmp	r3, r2
 80009e4:	da4b      	bge.n	8000a7e <GMG12864_Draw_pixel+0xca>
 80009e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db47      	blt.n	8000a7e <GMG12864_Draw_pixel+0xca>
		return;
	} else {
		uint16_t array_pos = x + ((y / 8) * GMG12864_width);
 80009ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da00      	bge.n	80009f8 <GMG12864_Draw_pixel+0x44>
 80009f6:	3307      	adds	r3, #7
 80009f8:	10db      	asrs	r3, r3, #3
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <GMG12864_Draw_pixel+0xd8>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	fb12 f303 	smulbb	r3, r2, r3
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	81fb      	strh	r3, [r7, #14]

		if (color) {
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d018      	beq.n	8000a48 <GMG12864_Draw_pixel+0x94>
			Frame_buffer[array_pos] |= 1 << (y % 8);
 8000a16:	89fb      	ldrh	r3, [r7, #14]
 8000a18:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <GMG12864_Draw_pixel+0xe0>)
 8000a1a:	5cd3      	ldrb	r3, [r2, r3]
 8000a1c:	b25a      	sxtb	r2, r3
 8000a1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a22:	4259      	negs	r1, r3
 8000a24:	f003 0307 	and.w	r3, r3, #7
 8000a28:	f001 0107 	and.w	r1, r1, #7
 8000a2c:	bf58      	it	pl
 8000a2e:	424b      	negpl	r3, r1
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	2301      	movs	r3, #1
 8000a36:	408b      	lsls	r3, r1
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b25a      	sxtb	r2, r3
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	b2d1      	uxtb	r1, r2
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <GMG12864_Draw_pixel+0xe0>)
 8000a44:	54d1      	strb	r1, [r2, r3]
 8000a46:	e01b      	b.n	8000a80 <GMG12864_Draw_pixel+0xcc>
		} else {
			Frame_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 8000a48:	89fb      	ldrh	r3, [r7, #14]
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <GMG12864_Draw_pixel+0xe0>)
 8000a4c:	5cd3      	ldrb	r3, [r2, r3]
 8000a4e:	b25a      	sxtb	r2, r3
 8000a50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a54:	4259      	negs	r1, r3
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	f001 0107 	and.w	r1, r1, #7
 8000a5e:	bf58      	it	pl
 8000a60:	424b      	negpl	r3, r1
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	4619      	mov	r1, r3
 8000a66:	2301      	movs	r3, #1
 8000a68:	408b      	lsls	r3, r1
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	4013      	ands	r3, r2
 8000a72:	b25a      	sxtb	r2, r3
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	b2d1      	uxtb	r1, r2
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <GMG12864_Draw_pixel+0xe0>)
 8000a7a:	54d1      	strb	r1, [r2, r3]
 8000a7c:	e000      	b.n	8000a80 <GMG12864_Draw_pixel+0xcc>
		return;
 8000a7e:	bf00      	nop
		}
	}

}
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000001 	.word	0x20000001
 8000a94:	20000124 	.word	0x20000124

08000a98 <GMG12864_Update>:
/*------------------------Функция рисования пикселя-------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void GMG12864_Update(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	cs_set();
 8000a9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000aa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aa6:	619a      	str	r2, [r3, #24]
	for (uint8_t y = 0; y < 8; y++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	e027      	b.n	8000afe <GMG12864_Update+0x66>
		ST7565_SetX(0);
 8000aae:	2010      	movs	r0, #16
 8000ab0:	f7ff fef4 	bl	800089c <GMG12864_Send_command>
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fef1 	bl	800089c <GMG12864_Send_command>
		ST7565_SetY((int16_t )y);
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fee5 	bl	800089c <GMG12864_Send_command>
		for (uint8_t x = 0; x < 128; x++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71bb      	strb	r3, [r7, #6]
 8000ad6:	e00b      	b.n	8000af0 <GMG12864_Update+0x58>
			GMG12864_Send_data(Frame_buffer[x + 128 * y]);
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	01db      	lsls	r3, r3, #7
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <GMG12864_Update+0x7c>)
 8000ae2:	5cd3      	ldrb	r3, [r2, r3]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fefb 	bl	80008e0 <GMG12864_Send_data>
		for (uint8_t x = 0; x < 128; x++) {
 8000aea:	79bb      	ldrb	r3, [r7, #6]
 8000aec:	3301      	adds	r3, #1
 8000aee:	71bb      	strb	r3, [r7, #6]
 8000af0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	daef      	bge.n	8000ad8 <GMG12864_Update+0x40>
	for (uint8_t y = 0; y < 8; y++) {
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	3301      	adds	r3, #1
 8000afc:	71fb      	strb	r3, [r7, #7]
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	d9d4      	bls.n	8000aae <GMG12864_Update+0x16>
		}
	}
	cs_reset();
 8000b04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b08:	2201      	movs	r2, #1
 8000b0a:	619a      	str	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000124 	.word	0x20000124

08000b18 <GMG12864_Print_symbol_5x7>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_5x7(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4604      	mov	r4, r0
 8000b20:	4608      	mov	r0, r1
 8000b22:	4611      	mov	r1, r2
 8000b24:	461a      	mov	r2, r3
 8000b26:	4623      	mov	r3, r4
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71bb      	strb	r3, [r7, #6]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	80bb      	strh	r3, [r7, #4]
 8000b32:	4613      	mov	r3, r2
 8000b34:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 5; //конечное положение по x с учетом межсимвольного интервала
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	3305      	adds	r3, #5
 8000b3e:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000b40:	7b3b      	ldrb	r3, [r7, #12]
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e086      	b.n	8000c54 <GMG12864_Print_symbol_5x7+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8000b46:	7bfa      	ldrb	r2, [r7, #15]
 8000b48:	7afb      	ldrb	r3, [r7, #11]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d127      	bne.n	8000b9e <GMG12864_Print_symbol_5x7+0x86>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73bb      	strb	r3, [r7, #14]
 8000b52:	e020      	b.n	8000b96 <GMG12864_Print_symbol_5x7+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00d      	beq.n	8000b76 <GMG12864_Print_symbol_5x7+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	b218      	sxth	r0, r3
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4413      	add	r3, r2
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff ff20 	bl	80009b4 <GMG12864_Draw_pixel>
 8000b74:	e00c      	b.n	8000b90 <GMG12864_Print_symbol_5x7+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	b218      	sxth	r0, r3
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	7bbb      	ldrb	r3, [r7, #14]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f7ff ff12 	bl	80009b4 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000b90:	7bbb      	ldrb	r3, [r7, #14]
 8000b92:	3301      	adds	r3, #1
 8000b94:	73bb      	strb	r3, [r7, #14]
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	2b06      	cmp	r3, #6
 8000b9a:	d9db      	bls.n	8000b54 <GMG12864_Print_symbol_5x7+0x3c>
 8000b9c:	e057      	b.n	8000c4e <GMG12864_Print_symbol_5x7+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	737b      	strb	r3, [r7, #13]
 8000ba2:	e051      	b.n	8000c48 <GMG12864_Print_symbol_5x7+0x130>
				if (Font_5x7[(symbol * 5) + x - x_start] & (1 << i)) {
 8000ba4:	88ba      	ldrh	r2, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	441a      	add	r2, r3
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	441a      	add	r2, r3
 8000bb0:	7b3b      	ldrb	r3, [r7, #12]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	4a2c      	ldr	r2, [pc, #176]	; (8000c68 <GMG12864_Print_symbol_5x7+0x150>)
 8000bb6:	5cd3      	ldrb	r3, [r2, r3]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	7b7b      	ldrb	r3, [r7, #13]
 8000bbc:	fa42 f303 	asr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d01e      	beq.n	8000c06 <GMG12864_Print_symbol_5x7+0xee>
					if (inversion) {
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00d      	beq.n	8000bea <GMG12864_Print_symbol_5x7+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	b218      	sxth	r0, r3
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	7b7b      	ldrb	r3, [r7, #13]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4413      	add	r3, r2
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	2200      	movs	r2, #0
 8000be2:	4619      	mov	r1, r3
 8000be4:	f7ff fee6 	bl	80009b4 <GMG12864_Draw_pixel>
 8000be8:	e02b      	b.n	8000c42 <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	b218      	sxth	r0, r3
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f7ff fed8 	bl	80009b4 <GMG12864_Draw_pixel>
 8000c04:	e01d      	b.n	8000c42 <GMG12864_Print_symbol_5x7+0x12a>
					}
				} else {
					if (inversion) {
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00d      	beq.n	8000c28 <GMG12864_Print_symbol_5x7+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	b218      	sxth	r0, r3
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4413      	add	r3, r2
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4619      	mov	r1, r3
 8000c22:	f7ff fec7 	bl	80009b4 <GMG12864_Draw_pixel>
 8000c26:	e00c      	b.n	8000c42 <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	b218      	sxth	r0, r3
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	7b7b      	ldrb	r3, [r7, #13]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4413      	add	r3, r2
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff feb9 	bl	80009b4 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000c42:	7b7b      	ldrb	r3, [r7, #13]
 8000c44:	3301      	adds	r3, #1
 8000c46:	737b      	strb	r3, [r7, #13]
 8000c48:	7b7b      	ldrb	r3, [r7, #13]
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d9aa      	bls.n	8000ba4 <GMG12864_Print_symbol_5x7+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	3301      	adds	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
 8000c54:	7bfa      	ldrb	r2, [r7, #15]
 8000c56:	7afb      	ldrb	r3, [r7, #11]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	f67f af74 	bls.w	8000b46 <GMG12864_Print_symbol_5x7+0x2e>
					}
				}
			}
		}
	}
}
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	0800b298 	.word	0x0800b298

08000c6c <GMG12864_Print_symbol_3x5>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_3x5(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4604      	mov	r4, r0
 8000c74:	4608      	mov	r0, r1
 8000c76:	4611      	mov	r1, r2
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4623      	mov	r3, r4
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71bb      	strb	r3, [r7, #6]
 8000c82:	460b      	mov	r3, r1
 8000c84:	80bb      	strh	r3, [r7, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 3; //конечное положение по x с учетом межсимвольного интервала
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	3303      	adds	r3, #3
 8000c92:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000c94:	7b3b      	ldrb	r3, [r7, #12]
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e086      	b.n	8000da8 <GMG12864_Print_symbol_3x5+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	7afb      	ldrb	r3, [r7, #11]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d127      	bne.n	8000cf2 <GMG12864_Print_symbol_3x5+0x86>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73bb      	strb	r3, [r7, #14]
 8000ca6:	e020      	b.n	8000cea <GMG12864_Print_symbol_3x5+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00d      	beq.n	8000cca <GMG12864_Print_symbol_3x5+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	b218      	sxth	r0, r3
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	7bbb      	ldrb	r3, [r7, #14]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff fe76 	bl	80009b4 <GMG12864_Draw_pixel>
 8000cc8:	e00c      	b.n	8000ce4 <GMG12864_Print_symbol_3x5+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	b218      	sxth	r0, r3
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	7bbb      	ldrb	r3, [r7, #14]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f7ff fe68 	bl	80009b4 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	73bb      	strb	r3, [r7, #14]
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d9db      	bls.n	8000ca8 <GMG12864_Print_symbol_3x5+0x3c>
 8000cf0:	e057      	b.n	8000da2 <GMG12864_Print_symbol_3x5+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	737b      	strb	r3, [r7, #13]
 8000cf6:	e051      	b.n	8000d9c <GMG12864_Print_symbol_3x5+0x130>
				if (Font_3x5[(symbol * 3) + x - x_start] & (1 << i)) {
 8000cf8:	88ba      	ldrh	r2, [r7, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	441a      	add	r2, r3
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	441a      	add	r2, r3
 8000d04:	7b3b      	ldrb	r3, [r7, #12]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	4a2c      	ldr	r2, [pc, #176]	; (8000dbc <GMG12864_Print_symbol_3x5+0x150>)
 8000d0a:	5cd3      	ldrb	r3, [r2, r3]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	7b7b      	ldrb	r3, [r7, #13]
 8000d10:	fa42 f303 	asr.w	r3, r2, r3
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d01e      	beq.n	8000d5a <GMG12864_Print_symbol_3x5+0xee>
					if (inversion) {
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00d      	beq.n	8000d3e <GMG12864_Print_symbol_3x5+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	b218      	sxth	r0, r3
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	7b7b      	ldrb	r3, [r7, #13]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4413      	add	r3, r2
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	f7ff fe3c 	bl	80009b4 <GMG12864_Draw_pixel>
 8000d3c:	e02b      	b.n	8000d96 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	b218      	sxth	r0, r3
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	2201      	movs	r2, #1
 8000d52:	4619      	mov	r1, r3
 8000d54:	f7ff fe2e 	bl	80009b4 <GMG12864_Draw_pixel>
 8000d58:	e01d      	b.n	8000d96 <GMG12864_Print_symbol_3x5+0x12a>
					}
				} else {
					if (inversion) {
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00d      	beq.n	8000d7c <GMG12864_Print_symbol_3x5+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	b218      	sxth	r0, r3
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	7b7b      	ldrb	r3, [r7, #13]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	2201      	movs	r2, #1
 8000d74:	4619      	mov	r1, r3
 8000d76:	f7ff fe1d 	bl	80009b4 <GMG12864_Draw_pixel>
 8000d7a:	e00c      	b.n	8000d96 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	b218      	sxth	r0, r3
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	7b7b      	ldrb	r3, [r7, #13]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4413      	add	r3, r2
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4619      	mov	r1, r3
 8000d92:	f7ff fe0f 	bl	80009b4 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	737b      	strb	r3, [r7, #13]
 8000d9c:	7b7b      	ldrb	r3, [r7, #13]
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d9aa      	bls.n	8000cf8 <GMG12864_Print_symbol_3x5+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3301      	adds	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	7bfa      	ldrb	r2, [r7, #15]
 8000daa:	7afb      	ldrb	r3, [r7, #11]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f67f af74 	bls.w	8000c9a <GMG12864_Print_symbol_3x5+0x2e>
					}
				}
			}
		}
	}
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	0800b0b0 	.word	0x0800b0b0

08000dc0 <GMG12864_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/
void GMG12864_Decode_UTF8(uint8_t x, uint8_t y, uint8_t font, bool inversion, char *tx_buffer) {
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	4608      	mov	r0, r1
 8000dca:	4611      	mov	r1, r2
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4623      	mov	r3, r4
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71bb      	strb	r3, [r7, #6]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	717b      	strb	r3, [r7, #5]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	713b      	strb	r3, [r7, #4]
/// Функция декодирования UTF-8 в набор символов и последующее занесение в буфер кадра
/// \param x - координата по х. От 0 до 127
/// \param y - координата по y. от 0 до 7
/// \param font - шрифт. 0 - 3x5, 1 - 5x7
	uint16_t symbol = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	e17e      	b.n	80010ea <GMG12864_Decode_UTF8+0x32a>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000df0:	4413      	add	r3, r2
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2bbf      	cmp	r3, #191	; 0xbf
 8000df6:	d841      	bhi.n	8000e7c <GMG12864_Decode_UTF8+0xbc>
			if (flag_block) {
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <GMG12864_Decode_UTF8+0x44>
				flag_block = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	75fb      	strb	r3, [r7, #23]
 8000e02:	e16f      	b.n	80010e4 <GMG12864_Decode_UTF8+0x324>
			} else {
				symbol = tx_buffer[i];
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	81fb      	strh	r3, [r7, #14]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000e0e:	797b      	ldrb	r3, [r7, #5]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d117      	bne.n	8000e44 <GMG12864_Decode_UTF8+0x84>
					if (inversion) {
 8000e14:	793b      	ldrb	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d008      	beq.n	8000e2c <GMG12864_Decode_UTF8+0x6c>
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	3b20      	subs	r3, #32
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	79b9      	ldrb	r1, [r7, #6]
 8000e22:	79f8      	ldrb	r0, [r7, #7]
 8000e24:	2301      	movs	r3, #1
 8000e26:	f7ff ff21 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 8000e2a:	e007      	b.n	8000e3c <GMG12864_Decode_UTF8+0x7c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 8000e2c:	89fb      	ldrh	r3, [r7, #14]
 8000e2e:	3b20      	subs	r3, #32
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	79b9      	ldrb	r1, [r7, #6]
 8000e34:	79f8      	ldrb	r0, [r7, #7]
 8000e36:	2300      	movs	r3, #0
 8000e38:	f7ff ff18 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	3304      	adds	r3, #4
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	e14f      	b.n	80010e4 <GMG12864_Decode_UTF8+0x324>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000e44:	797b      	ldrb	r3, [r7, #5]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	f040 814c 	bne.w	80010e4 <GMG12864_Decode_UTF8+0x324>
					if (inversion) {
 8000e4c:	793b      	ldrb	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d008      	beq.n	8000e64 <GMG12864_Decode_UTF8+0xa4>
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	3b20      	subs	r3, #32
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	79b9      	ldrb	r1, [r7, #6]
 8000e5a:	79f8      	ldrb	r0, [r7, #7]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f7ff fe5b 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 8000e62:	e007      	b.n	8000e74 <GMG12864_Decode_UTF8+0xb4>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	3b20      	subs	r3, #32
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	79b9      	ldrb	r1, [r7, #6]
 8000e6c:	79f8      	ldrb	r0, [r7, #7]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f7ff fe52 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	3306      	adds	r3, #6
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	e133      	b.n	80010e4 <GMG12864_Decode_UTF8+0x324>
				}
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e8e:	440b      	add	r3, r1
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d843      	bhi.n	8000f2c <GMG12864_Decode_UTF8+0x16c>
 8000ea4:	89fb      	ldrh	r3, [r7, #14]
 8000ea6:	f24d 0281 	movw	r2, #53377	; 0xd081
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d93e      	bls.n	8000f2c <GMG12864_Decode_UTF8+0x16c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000eae:	797b      	ldrb	r3, [r7, #5]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d11b      	bne.n	8000eec <GMG12864_Decode_UTF8+0x12c>
					if (inversion) {
 8000eb4:	793b      	ldrb	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00a      	beq.n	8000ed0 <GMG12864_Decode_UTF8+0x110>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8000eba:	89fb      	ldrh	r3, [r7, #14]
 8000ebc:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000ec0:	330f      	adds	r3, #15
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	79b9      	ldrb	r1, [r7, #6]
 8000ec6:	79f8      	ldrb	r0, [r7, #7]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f7ff fecf 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 8000ece:	e009      	b.n	8000ee4 <GMG12864_Decode_UTF8+0x124>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
 8000ed2:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000ed6:	330f      	adds	r3, #15
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	79b9      	ldrb	r1, [r7, #6]
 8000edc:	79f8      	ldrb	r0, [r7, #7]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f7ff fec4 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000eea:	e0f8      	b.n	80010de <GMG12864_Decode_UTF8+0x31e>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000eec:	797b      	ldrb	r3, [r7, #5]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	f040 80f5 	bne.w	80010de <GMG12864_Decode_UTF8+0x31e>
					if (inversion) {
 8000ef4:	793b      	ldrb	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00a      	beq.n	8000f10 <GMG12864_Decode_UTF8+0x150>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8000efa:	89fb      	ldrh	r3, [r7, #14]
 8000efc:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000f00:	330f      	adds	r3, #15
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	79b9      	ldrb	r1, [r7, #6]
 8000f06:	79f8      	ldrb	r0, [r7, #7]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f7ff fe05 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 8000f0e:	e009      	b.n	8000f24 <GMG12864_Decode_UTF8+0x164>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000f16:	330f      	adds	r3, #15
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	79b9      	ldrb	r1, [r7, #6]
 8000f1c:	79f8      	ldrb	r0, [r7, #7]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f7ff fdfa 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	3306      	adds	r3, #6
 8000f28:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000f2a:	e0d8      	b.n	80010de <GMG12864_Decode_UTF8+0x31e>
				}
			} else if (symbol == 0xD081) {
 8000f2c:	89fb      	ldrh	r3, [r7, #14]
 8000f2e:	f24d 0281 	movw	r2, #53377	; 0xd081
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12e      	bne.n	8000f94 <GMG12864_Decode_UTF8+0x1d4>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000f36:	797b      	ldrb	r3, [r7, #5]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d113      	bne.n	8000f64 <GMG12864_Decode_UTF8+0x1a4>
					if (inversion) {
 8000f3c:	793b      	ldrb	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <GMG12864_Decode_UTF8+0x190>
						GMG12864_Print_symbol_3x5(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8000f42:	79b9      	ldrb	r1, [r7, #6]
 8000f44:	79f8      	ldrb	r0, [r7, #7]
 8000f46:	2301      	movs	r3, #1
 8000f48:	229f      	movs	r2, #159	; 0x9f
 8000f4a:	f7ff fe8f 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 8000f4e:	e005      	b.n	8000f5c <GMG12864_Decode_UTF8+0x19c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8000f50:	79b9      	ldrb	r1, [r7, #6]
 8000f52:	79f8      	ldrb	r0, [r7, #7]
 8000f54:	2300      	movs	r3, #0
 8000f56:	229f      	movs	r2, #159	; 0x9f
 8000f58:	f7ff fe88 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	e0bd      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000f64:	797b      	ldrb	r3, [r7, #5]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	f040 80ba 	bne.w	80010e0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8000f6c:	793b      	ldrb	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <GMG12864_Decode_UTF8+0x1c0>
						GMG12864_Print_symbol_5x7(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8000f72:	79b9      	ldrb	r1, [r7, #6]
 8000f74:	79f8      	ldrb	r0, [r7, #7]
 8000f76:	2301      	movs	r3, #1
 8000f78:	229f      	movs	r2, #159	; 0x9f
 8000f7a:	f7ff fdcd 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 8000f7e:	e005      	b.n	8000f8c <GMG12864_Decode_UTF8+0x1cc>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8000f80:	79b9      	ldrb	r1, [r7, #6]
 8000f82:	79f8      	ldrb	r0, [r7, #7]
 8000f84:	2300      	movs	r3, #0
 8000f86:	229f      	movs	r2, #159	; 0x9f
 8000f88:	f7ff fdc6 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	3306      	adds	r3, #6
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	e0a5      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xD191) {
 8000f94:	89fb      	ldrh	r3, [r7, #14]
 8000f96:	f24d 1291 	movw	r2, #53649	; 0xd191
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12e      	bne.n	8000ffc <GMG12864_Decode_UTF8+0x23c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000f9e:	797b      	ldrb	r3, [r7, #5]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d113      	bne.n	8000fcc <GMG12864_Decode_UTF8+0x20c>
					if (inversion) {
 8000fa4:	793b      	ldrb	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <GMG12864_Decode_UTF8+0x1f8>
						GMG12864_Print_symbol_3x5(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8000faa:	79b9      	ldrb	r1, [r7, #6]
 8000fac:	79f8      	ldrb	r0, [r7, #7]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	22a0      	movs	r2, #160	; 0xa0
 8000fb2:	f7ff fe5b 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 8000fb6:	e005      	b.n	8000fc4 <GMG12864_Decode_UTF8+0x204>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8000fb8:	79b9      	ldrb	r1, [r7, #6]
 8000fba:	79f8      	ldrb	r0, [r7, #7]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	22a0      	movs	r2, #160	; 0xa0
 8000fc0:	f7ff fe54 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	e089      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000fcc:	797b      	ldrb	r3, [r7, #5]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	f040 8086 	bne.w	80010e0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8000fd4:	793b      	ldrb	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <GMG12864_Decode_UTF8+0x228>
						GMG12864_Print_symbol_5x7(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8000fda:	79b9      	ldrb	r1, [r7, #6]
 8000fdc:	79f8      	ldrb	r0, [r7, #7]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	22a0      	movs	r2, #160	; 0xa0
 8000fe2:	f7ff fd99 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 8000fe6:	e005      	b.n	8000ff4 <GMG12864_Decode_UTF8+0x234>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8000fe8:	79b9      	ldrb	r1, [r7, #6]
 8000fea:	79f8      	ldrb	r0, [r7, #7]
 8000fec:	2300      	movs	r3, #0
 8000fee:	22a0      	movs	r2, #160	; 0xa0
 8000ff0:	f7ff fd92 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	3306      	adds	r3, #6
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	e071      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xC2B0) {
 8000ffc:	89fb      	ldrh	r3, [r7, #14]
 8000ffe:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 8001002:	4293      	cmp	r3, r2
 8001004:	d12d      	bne.n	8001062 <GMG12864_Decode_UTF8+0x2a2>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d113      	bne.n	8001034 <GMG12864_Decode_UTF8+0x274>
					if (inversion) {
 800100c:	793b      	ldrb	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <GMG12864_Decode_UTF8+0x260>
						GMG12864_Print_symbol_3x5(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8001012:	79b9      	ldrb	r1, [r7, #6]
 8001014:	79f8      	ldrb	r0, [r7, #7]
 8001016:	2301      	movs	r3, #1
 8001018:	22a1      	movs	r2, #161	; 0xa1
 800101a:	f7ff fe27 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 800101e:	e005      	b.n	800102c <GMG12864_Decode_UTF8+0x26c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 8001020:	79b9      	ldrb	r1, [r7, #6]
 8001022:	79f8      	ldrb	r0, [r7, #7]
 8001024:	2300      	movs	r3, #0
 8001026:	22a1      	movs	r2, #161	; 0xa1
 8001028:	f7ff fe20 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	3304      	adds	r3, #4
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e055      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8001034:	797b      	ldrb	r3, [r7, #5]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d152      	bne.n	80010e0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 800103a:	793b      	ldrb	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <GMG12864_Decode_UTF8+0x28e>
						GMG12864_Print_symbol_5x7(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8001040:	79b9      	ldrb	r1, [r7, #6]
 8001042:	79f8      	ldrb	r0, [r7, #7]
 8001044:	2301      	movs	r3, #1
 8001046:	22a1      	movs	r2, #161	; 0xa1
 8001048:	f7ff fd66 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 800104c:	e005      	b.n	800105a <GMG12864_Decode_UTF8+0x29a>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 800104e:	79b9      	ldrb	r1, [r7, #6]
 8001050:	79f8      	ldrb	r0, [r7, #7]
 8001052:	2300      	movs	r3, #0
 8001054:	22a1      	movs	r2, #161	; 0xa1
 8001056:	f7ff fd5f 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	3306      	adds	r3, #6
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	e03e      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				}
			}

			else {
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d11b      	bne.n	80010a0 <GMG12864_Decode_UTF8+0x2e0>
					if (inversion) {
 8001068:	793b      	ldrb	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00a      	beq.n	8001084 <GMG12864_Decode_UTF8+0x2c4>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001074:	330f      	adds	r3, #15
 8001076:	b29a      	uxth	r2, r3
 8001078:	79b9      	ldrb	r1, [r7, #6]
 800107a:	79f8      	ldrb	r0, [r7, #7]
 800107c:	2301      	movs	r3, #1
 800107e:	f7ff fdf5 	bl	8000c6c <GMG12864_Print_symbol_3x5>
 8001082:	e009      	b.n	8001098 <GMG12864_Decode_UTF8+0x2d8>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8001084:	89fb      	ldrh	r3, [r7, #14]
 8001086:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800108a:	330f      	adds	r3, #15
 800108c:	b29a      	uxth	r2, r3
 800108e:	79b9      	ldrb	r1, [r7, #6]
 8001090:	79f8      	ldrb	r0, [r7, #7]
 8001092:	2300      	movs	r3, #0
 8001094:	f7ff fdea 	bl	8000c6c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	3304      	adds	r3, #4
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	e01f      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80010a0:	797b      	ldrb	r3, [r7, #5]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d11c      	bne.n	80010e0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 80010a6:	793b      	ldrb	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00a      	beq.n	80010c2 <GMG12864_Decode_UTF8+0x302>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 80010ac:	89fb      	ldrh	r3, [r7, #14]
 80010ae:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80010b2:	330f      	adds	r3, #15
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	79b9      	ldrb	r1, [r7, #6]
 80010b8:	79f8      	ldrb	r0, [r7, #7]
 80010ba:	2301      	movs	r3, #1
 80010bc:	f7ff fd2c 	bl	8000b18 <GMG12864_Print_symbol_5x7>
 80010c0:	e009      	b.n	80010d6 <GMG12864_Decode_UTF8+0x316>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80010c8:	330f      	adds	r3, #15
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	79b9      	ldrb	r1, [r7, #6]
 80010ce:	79f8      	ldrb	r0, [r7, #7]
 80010d0:	2300      	movs	r3, #0
 80010d2:	f7ff fd21 	bl	8000b18 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	3306      	adds	r3, #6
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	e000      	b.n	80010e0 <GMG12864_Decode_UTF8+0x320>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80010de:	bf00      	nop
				}
			}
			flag_block = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	3301      	adds	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010ec:	f7ff f878 	bl	80001e0 <strlen>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f63f ae79 	bhi.w	8000dec <GMG12864_Decode_UTF8+0x2c>
		}
	}
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}

08001104 <Read16>:
uint16_t ina219_calibrationValue;
float ina219_currentDivider_mA;
float ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af04      	add	r7, sp, #16
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	b29a      	uxth	r2, r3
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2302      	movs	r3, #2
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	f002 fae4 	bl	80036f8 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8001130:	7b3b      	ldrb	r3, [r7, #12]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	7b7b      	ldrb	r3, [r7, #13]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af04      	add	r7, sp, #16
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
 8001154:	4613      	mov	r3, r2
 8001156:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8001158:	883b      	ldrh	r3, [r7, #0]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	b29b      	uxth	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8001162:	883b      	ldrh	r3, [r7, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	b29a      	uxth	r2, r3
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2302      	movs	r3, #2
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	f002 f9a4 	bl	80034d0 <HAL_I2C_Mem_Write>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001198:	2102      	movs	r1, #2
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffb2 	bl	8001104 <Read16>
 80011a0:	4603      	mov	r3, r0
 80011a2:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	08db      	lsrs	r3, r3, #3
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	b29b      	uxth	r3, r3

}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 80011be:	2104      	movs	r1, #4
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff9f 	bl	8001104 <Read16>
 80011c6:	4603      	mov	r3, r0
 80011c8:	81fb      	strh	r3, [r7, #14]

	return (result );
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ffe8 	bl	80011b6 <INA219_ReadCurrent_raw>
 80011e6:	4603      	mov	r3, r0
 80011e8:	81fb      	strh	r3, [r7, #14]

	return (result * ina219_currentDivider_mA * 1000 );
 80011ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <INA219_ReadCurrent+0x44>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001220 <INA219_ReadCurrent+0x48>
 8001204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120c:	ee17 3a90 	vmov	r3, s15
 8001210:	b21b      	sxth	r3, r3
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000528 	.word	0x20000528
 8001220:	447a0000 	.word	0x447a0000
 8001224:	00000000 	.word	0x00000000

08001228 <INA219_ReadShuntVoltage>:

uint16_t INA219_ReadShuntVoltage(INA219_t *ina219)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001230:	2101      	movs	r1, #1
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff66 	bl	8001104 <Read16>
 8001238:	4603      	mov	r3, r0
 800123a:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01);
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff faa2 	bl	8000788 <__aeabi_i2d>
 8001244:	a308      	add	r3, pc, #32	; (adr r3, 8001268 <INA219_ReadShuntVoltage+0x40>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f821 	bl	8000290 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fb01 	bl	800085c <__aeabi_d2uiz>
 800125a:	4603      	mov	r3, r0
 800125c:	b29b      	uxth	r3, r3
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	47ae147b 	.word	0x47ae147b
 800126c:	3f847ae1 	.word	0x3f847ae1

08001270 <INA219_Read_Power>:

uint16_t INA219_Read_Power(INA219_t *ina219)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_POWER);
 8001278:	2103      	movs	r1, #3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff42 	bl	8001104 <Read16>
 8001280:	4603      	mov	r3, r0
 8001282:	81fb      	strh	r3, [r7, #14]

	return (result * ina219_powerMultiplier_mW * 1000);
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <INA219_Read_Power+0x44>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012b8 <INA219_Read_Power+0x48>
 800129c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a4:	ee17 3a90 	vmov	r3, s15
 80012a8:	b29b      	uxth	r3, r3
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000052c 	.word	0x2000052c
 80012b8:	447a0000 	.word	0x447a0000

080012bc <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 80012c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012c8:	2100      	movs	r1, #0
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff3c 	bl	8001148 <Write16>
	HAL_Delay(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f001 fd7d 	bl	8002dd0 <HAL_Delay>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	461a      	mov	r2, r3
 80012ee:	2105      	movs	r1, #5
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff29 	bl	8001148 <Write16>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	461a      	mov	r2, r3
 800130e:	2100      	movs	r1, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff19 	bl	8001148 <Write16>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001328:	f643 139f 	movw	r3, #14751	; 0x399f
 800132c:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <INA219_setCalibration_32V_2A+0x40>)
 8001330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001334:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 0.0001; // Current LSB = 100uA per bit (1000/100 = 10)
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <INA219_setCalibration_32V_2A+0x44>)
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <INA219_setCalibration_32V_2A+0x48>)
 800133a:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0.002; // Power LSB = 1mW per bit (2/1)
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <INA219_setCalibration_32V_2A+0x4c>)
 800133e:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <INA219_setCalibration_32V_2A+0x50>)
 8001340:	601a      	str	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <INA219_setCalibration_32V_2A+0x40>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ffc8 	bl	80012de <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffd3 	bl	80012fe <INA219_setConfig>
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000524 	.word	0x20000524
 8001364:	20000528 	.word	0x20000528
 8001368:	38d1b717 	.word	0x38d1b717
 800136c:	2000052c 	.word	0x2000052c
 8001370:	3b03126f 	.word	0x3b03126f

08001374 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	4613      	mov	r3, r2
 8001380:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	79fa      	ldrb	r2, [r7, #7]
 800138c:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <INA219_Init+0x60>)
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <INA219_Init+0x64>)
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	601a      	str	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	b299      	uxth	r1, r3
 80013a6:	2302      	movs	r3, #2
 80013a8:	2203      	movs	r2, #3
 80013aa:	68b8      	ldr	r0, [r7, #8]
 80013ac:	f002 fabe 	bl	800392c <HAL_I2C_IsDeviceReady>
 80013b0:	4603      	mov	r3, r0
 80013b2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d107      	bne.n	80013ca <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7ff ff7e 	bl	80012bc <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff ffad 	bl	8001320 <INA219_setCalibration_32V_2A>

		return 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <INA219_Init+0x58>
	}

	else
	{
		return 0;
 80013ca:	2300      	movs	r3, #0
	}
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000528 	.word	0x20000528
 80013d8:	2000052c 	.word	0x2000052c

080013dc <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_6

/* SPI Chip Select */
static void SELECT(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2140      	movs	r1, #64	; 0x40
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f001 ffb2 	bl	8003350 <HAL_GPIO_WritePin>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2140      	movs	r1, #64	; 0x40
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f001 ffa8 	bl	8003350 <HAL_GPIO_WritePin>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800140e:	bf00      	nop
 8001410:	4808      	ldr	r0, [pc, #32]	; (8001434 <SPI_TxByte+0x30>)
 8001412:	f004 ff2b 	bl	800626c <HAL_SPI_GetState>
 8001416:	4603      	mov	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d1f9      	bne.n	8001410 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 800141c:	1df9      	adds	r1, r7, #7
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	2201      	movs	r2, #1
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <SPI_TxByte+0x30>)
 8001426:	f004 fba0 	bl	8005b6a <HAL_SPI_Transmit>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000630 	.word	0x20000630

08001438 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800143e:	23ff      	movs	r3, #255	; 0xff
 8001440:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8001446:	bf00      	nop
 8001448:	4809      	ldr	r0, [pc, #36]	; (8001470 <SPI_RxByte+0x38>)
 800144a:	f004 ff0f 	bl	800626c <HAL_SPI_GetState>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d1f9      	bne.n	8001448 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8001454:	1dba      	adds	r2, r7, #6
 8001456:	1df9      	adds	r1, r7, #7
 8001458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2301      	movs	r3, #1
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <SPI_RxByte+0x38>)
 8001462:	f004 fcf0 	bl	8005e46 <HAL_SPI_TransmitReceive>

  return data;
 8001466:	79bb      	ldrb	r3, [r7, #6]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000630 	.word	0x20000630

08001474 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800147c:	f7ff ffdc 	bl	8001438 <SPI_RxByte>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	701a      	strb	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <SD_ReadyWait+0x34>)
 8001498:	2232      	movs	r2, #50	; 0x32
 800149a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800149c:	f7ff ffcc 	bl	8001438 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80014a0:	f7ff ffca 	bl	8001438 <SPI_RxByte>
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2bff      	cmp	r3, #255	; 0xff
 80014ac:	d004      	beq.n	80014b8 <SD_ReadyWait+0x28>
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SD_ReadyWait+0x34>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f3      	bne.n	80014a0 <SD_ReadyWait+0x10>

  return res;
 80014b8:	79fb      	ldrb	r3, [r7, #7]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000279d 	.word	0x2000279d

080014c8 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80014ce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80014d2:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80014d4:	f7ff ff8c 	bl	80013f0 <DESELECT>

  for(int i = 0; i < 10; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	e005      	b.n	80014ea <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80014de:	20ff      	movs	r0, #255	; 0xff
 80014e0:	f7ff ff90 	bl	8001404 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	3301      	adds	r3, #1
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	2b09      	cmp	r3, #9
 80014ee:	ddf6      	ble.n	80014de <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80014f0:	f7ff ff74 	bl	80013dc <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001508:	2395      	movs	r3, #149	; 0x95
 800150a:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	e009      	b.n	8001526 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001512:	1d3a      	adds	r2, r7, #4
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff72 	bl	8001404 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3301      	adds	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b05      	cmp	r3, #5
 800152a:	ddf2      	ble.n	8001512 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 800152c:	e002      	b.n	8001534 <SD_PowerOn+0x6c>
  {
    Count--;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3b01      	subs	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001534:	f7ff ff80 	bl	8001438 <SPI_RxByte>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d002      	beq.n	8001544 <SD_PowerOn+0x7c>
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f4      	bne.n	800152e <SD_PowerOn+0x66>
  }

  DESELECT();
 8001544:	f7ff ff54 	bl	80013f0 <DESELECT>
  SPI_TxByte(0XFF);
 8001548:	20ff      	movs	r0, #255	; 0xff
 800154a:	f7ff ff5b 	bl	8001404 <SPI_TxByte>

  PowerFlag = 1;
 800154e:	4b03      	ldr	r3, [pc, #12]	; (800155c <SD_PowerOn+0x94>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000531 	.word	0x20000531

08001560 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <SD_PowerOff+0x14>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	20000531 	.word	0x20000531

08001578 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <SD_CheckPower+0x14>)
 800157e:	781b      	ldrb	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000531 	.word	0x20000531

08001590 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <SD_RxDataBlock+0x68>)
 800159c:	220a      	movs	r2, #10
 800159e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80015a0:	f7ff ff4a 	bl	8001438 <SPI_RxByte>
 80015a4:	4603      	mov	r3, r0
 80015a6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2bff      	cmp	r3, #255	; 0xff
 80015ac:	d104      	bne.n	80015b8 <SD_RxDataBlock+0x28>
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <SD_RxDataBlock+0x68>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f3      	bne.n	80015a0 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2bfe      	cmp	r3, #254	; 0xfe
 80015bc:	d001      	beq.n	80015c2 <SD_RxDataBlock+0x32>
    return FALSE;
 80015be:	2300      	movs	r3, #0
 80015c0:	e016      	b.n	80015f0 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff53 	bl	8001474 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff4d 	bl	8001474 <SPI_RxBytePtr>
  } while(btr -= 2);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3b02      	subs	r3, #2
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ed      	bne.n	80015c2 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80015e6:	f7ff ff27 	bl	8001438 <SPI_RxByte>
  SPI_RxByte();
 80015ea:	f7ff ff25 	bl	8001438 <SPI_RxByte>

  return TRUE;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2000279c 	.word	0x2000279c

080015fc <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800160c:	f7ff ff40 	bl	8001490 <SD_ReadyWait>
 8001610:	4603      	mov	r3, r0
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d001      	beq.n	800161a <SD_TxDataBlock+0x1e>
    return FALSE;
 8001616:	2300      	movs	r3, #0
 8001618:	e040      	b.n	800169c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fef1 	bl	8001404 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	2bfd      	cmp	r3, #253	; 0xfd
 8001626:	d031      	beq.n	800168c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fee5 	bl	8001404 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fede 	bl	8001404 <SPI_TxByte>
    } while (--wc);
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	3b01      	subs	r3, #1
 800164c:	73bb      	strb	r3, [r7, #14]
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1eb      	bne.n	800162c <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001654:	f7ff fef0 	bl	8001438 <SPI_RxByte>
    SPI_RxByte();
 8001658:	f7ff feee 	bl	8001438 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 800165c:	e00b      	b.n	8001676 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800165e:	f7ff feeb 	bl	8001438 <SPI_RxByte>
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	2b05      	cmp	r3, #5
 800166e:	d006      	beq.n	800167e <SD_TxDataBlock+0x82>
        break;

      i++;
 8001670:	7b7b      	ldrb	r3, [r7, #13]
 8001672:	3301      	adds	r3, #1
 8001674:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001676:	7b7b      	ldrb	r3, [r7, #13]
 8001678:	2b40      	cmp	r3, #64	; 0x40
 800167a:	d9f0      	bls.n	800165e <SD_TxDataBlock+0x62>
 800167c:	e000      	b.n	8001680 <SD_TxDataBlock+0x84>
        break;
 800167e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001680:	bf00      	nop
 8001682:	f7ff fed9 	bl	8001438 <SPI_RxByte>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0fa      	beq.n	8001682 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	2b05      	cmp	r3, #5
 8001694:	d101      	bne.n	800169a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80016b0:	f7ff feee 	bl	8001490 <SD_ReadyWait>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2bff      	cmp	r3, #255	; 0xff
 80016b8:	d001      	beq.n	80016be <SD_SendCmd+0x1a>
    return 0xFF;
 80016ba:	23ff      	movs	r3, #255	; 0xff
 80016bc:	e040      	b.n	8001740 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fe9f 	bl	8001404 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	0e1b      	lsrs	r3, r3, #24
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fe99 	bl	8001404 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	0c1b      	lsrs	r3, r3, #16
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe93 	bl	8001404 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fe8d 	bl	8001404 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fe88 	bl	8001404 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b40      	cmp	r3, #64	; 0x40
 80016fc:	d101      	bne.n	8001702 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80016fe:	2395      	movs	r3, #149	; 0x95
 8001700:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2b48      	cmp	r3, #72	; 0x48
 8001706:	d101      	bne.n	800170c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001708:	2387      	movs	r3, #135	; 0x87
 800170a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fe78 	bl	8001404 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b4c      	cmp	r3, #76	; 0x4c
 8001718:	d101      	bne.n	800171e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800171a:	f7ff fe8d 	bl	8001438 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800171e:	230a      	movs	r3, #10
 8001720:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001722:	f7ff fe89 	bl	8001438 <SPI_RxByte>
 8001726:	4603      	mov	r3, r0
 8001728:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800172a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800172e:	2b00      	cmp	r3, #0
 8001730:	da05      	bge.n	800173e <SD_SendCmd+0x9a>
 8001732:	7bbb      	ldrb	r3, [r7, #14]
 8001734:	3b01      	subs	r3, #1
 8001736:	73bb      	strb	r3, [r7, #14]
 8001738:	7bbb      	ldrb	r3, [r7, #14]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f1      	bne.n	8001722 <SD_SendCmd+0x7e>

  return res;
 800173e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001758:	2301      	movs	r3, #1
 800175a:	e0d5      	b.n	8001908 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800175c:	4b6c      	ldr	r3, [pc, #432]	; (8001910 <SD_disk_initialize+0x1c8>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <SD_disk_initialize+0x2a>
    return Stat;
 800176a:	4b69      	ldr	r3, [pc, #420]	; (8001910 <SD_disk_initialize+0x1c8>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	e0ca      	b.n	8001908 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001772:	f7ff fea9 	bl	80014c8 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001776:	f7ff fe31 	bl	80013dc <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800177e:	2100      	movs	r1, #0
 8001780:	2040      	movs	r0, #64	; 0x40
 8001782:	f7ff ff8f 	bl	80016a4 <SD_SendCmd>
 8001786:	4603      	mov	r3, r0
 8001788:	2b01      	cmp	r3, #1
 800178a:	f040 80a5 	bne.w	80018d8 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800178e:	4b61      	ldr	r3, [pc, #388]	; (8001914 <SD_disk_initialize+0x1cc>)
 8001790:	2264      	movs	r2, #100	; 0x64
 8001792:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001794:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001798:	2048      	movs	r0, #72	; 0x48
 800179a:	f7ff ff83 	bl	80016a4 <SD_SendCmd>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d158      	bne.n	8001856 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e00c      	b.n	80017c4 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80017aa:	7bfc      	ldrb	r4, [r7, #15]
 80017ac:	f7ff fe44 	bl	8001438 <SPI_RxByte>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	f104 0310 	add.w	r3, r4, #16
 80017b8:	443b      	add	r3, r7
 80017ba:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	3301      	adds	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d9ef      	bls.n	80017aa <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80017ca:	7abb      	ldrb	r3, [r7, #10]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	f040 8083 	bne.w	80018d8 <SD_disk_initialize+0x190>
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	2baa      	cmp	r3, #170	; 0xaa
 80017d6:	d17f      	bne.n	80018d8 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80017d8:	2100      	movs	r1, #0
 80017da:	2077      	movs	r0, #119	; 0x77
 80017dc:	f7ff ff62 	bl	80016a4 <SD_SendCmd>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d807      	bhi.n	80017f6 <SD_disk_initialize+0xae>
 80017e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017ea:	2069      	movs	r0, #105	; 0x69
 80017ec:	f7ff ff5a 	bl	80016a4 <SD_SendCmd>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <SD_disk_initialize+0x1cc>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1eb      	bne.n	80017d8 <SD_disk_initialize+0x90>
 8001800:	e000      	b.n	8001804 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001802:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001804:	4b43      	ldr	r3, [pc, #268]	; (8001914 <SD_disk_initialize+0x1cc>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d064      	beq.n	80018d8 <SD_disk_initialize+0x190>
 800180e:	2100      	movs	r1, #0
 8001810:	207a      	movs	r0, #122	; 0x7a
 8001812:	f7ff ff47 	bl	80016a4 <SD_SendCmd>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d15d      	bne.n	80018d8 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	e00c      	b.n	800183c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001822:	7bfc      	ldrb	r4, [r7, #15]
 8001824:	f7ff fe08 	bl	8001438 <SPI_RxByte>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	f104 0310 	add.w	r3, r4, #16
 8001830:	443b      	add	r3, r7
 8001832:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	3301      	adds	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d9ef      	bls.n	8001822 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001842:	7a3b      	ldrb	r3, [r7, #8]
 8001844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <SD_disk_initialize+0x108>
 800184c:	2306      	movs	r3, #6
 800184e:	e000      	b.n	8001852 <SD_disk_initialize+0x10a>
 8001850:	2302      	movs	r3, #2
 8001852:	73bb      	strb	r3, [r7, #14]
 8001854:	e040      	b.n	80018d8 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001856:	2100      	movs	r1, #0
 8001858:	2077      	movs	r0, #119	; 0x77
 800185a:	f7ff ff23 	bl	80016a4 <SD_SendCmd>
 800185e:	4603      	mov	r3, r0
 8001860:	2b01      	cmp	r3, #1
 8001862:	d808      	bhi.n	8001876 <SD_disk_initialize+0x12e>
 8001864:	2100      	movs	r1, #0
 8001866:	2069      	movs	r0, #105	; 0x69
 8001868:	f7ff ff1c 	bl	80016a4 <SD_SendCmd>
 800186c:	4603      	mov	r3, r0
 800186e:	2b01      	cmp	r3, #1
 8001870:	d801      	bhi.n	8001876 <SD_disk_initialize+0x12e>
 8001872:	2302      	movs	r3, #2
 8001874:	e000      	b.n	8001878 <SD_disk_initialize+0x130>
 8001876:	2301      	movs	r3, #1
 8001878:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800187a:	7bbb      	ldrb	r3, [r7, #14]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d10e      	bne.n	800189e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001880:	2100      	movs	r1, #0
 8001882:	2077      	movs	r0, #119	; 0x77
 8001884:	f7ff ff0e 	bl	80016a4 <SD_SendCmd>
 8001888:	4603      	mov	r3, r0
 800188a:	2b01      	cmp	r3, #1
 800188c:	d80e      	bhi.n	80018ac <SD_disk_initialize+0x164>
 800188e:	2100      	movs	r1, #0
 8001890:	2069      	movs	r0, #105	; 0x69
 8001892:	f7ff ff07 	bl	80016a4 <SD_SendCmd>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800189c:	e00d      	b.n	80018ba <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800189e:	2100      	movs	r1, #0
 80018a0:	2041      	movs	r0, #65	; 0x41
 80018a2:	f7ff feff 	bl	80016a4 <SD_SendCmd>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <SD_disk_initialize+0x1cc>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1e1      	bne.n	800187a <SD_disk_initialize+0x132>
 80018b6:	e000      	b.n	80018ba <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80018b8:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <SD_disk_initialize+0x1cc>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <SD_disk_initialize+0x18c>
 80018c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c8:	2050      	movs	r0, #80	; 0x50
 80018ca:	f7ff feeb 	bl	80016a4 <SD_SendCmd>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80018d8:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <SD_disk_initialize+0x1d0>)
 80018da:	7bbb      	ldrb	r3, [r7, #14]
 80018dc:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80018de:	f7ff fd87 	bl	80013f0 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80018e2:	f7ff fda9 	bl	8001438 <SPI_RxByte>

  if (type)
 80018e6:	7bbb      	ldrb	r3, [r7, #14]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <SD_disk_initialize+0x1c8>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SD_disk_initialize+0x1c8>)
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e001      	b.n	8001902 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80018fe:	f7ff fe2f 	bl	8001560 <SD_PowerOff>
  }

  return Stat;
 8001902:	4b03      	ldr	r3, [pc, #12]	; (8001910 <SD_disk_initialize+0x1c8>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	20000002 	.word	0x20000002
 8001914:	2000279c 	.word	0x2000279c
 8001918:	20000530 	.word	0x20000530

0800191c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SD_disk_status+0x14>
    return STA_NOINIT;
 800192c:	2301      	movs	r3, #1
 800192e:	e002      	b.n	8001936 <SD_disk_status+0x1a>

  return Stat;
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SD_disk_status+0x28>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000002 	.word	0x20000002

08001948 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <SD_disk_read+0x1c>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <SD_disk_read+0x20>
    return RES_PARERR;
 8001964:	2304      	movs	r3, #4
 8001966:	e051      	b.n	8001a0c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001968:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <SD_disk_read+0xcc>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001976:	2303      	movs	r3, #3
 8001978:	e048      	b.n	8001a0c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800197a:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <SD_disk_read+0xd0>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	025b      	lsls	r3, r3, #9
 800198a:	607b      	str	r3, [r7, #4]

  SELECT();
 800198c:	f7ff fd26 	bl	80013dc <SELECT>

  if (count == 1)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d111      	bne.n	80019ba <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	2051      	movs	r0, #81	; 0x51
 800199a:	f7ff fe83 	bl	80016a4 <SD_SendCmd>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d129      	bne.n	80019f8 <SD_disk_read+0xb0>
 80019a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a8:	68b8      	ldr	r0, [r7, #8]
 80019aa:	f7ff fdf1 	bl	8001590 <SD_RxDataBlock>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d021      	beq.n	80019f8 <SD_disk_read+0xb0>
      count = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	e01e      	b.n	80019f8 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	2052      	movs	r0, #82	; 0x52
 80019be:	f7ff fe71 	bl	80016a4 <SD_SendCmd>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d117      	bne.n	80019f8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80019c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f7ff fddf 	bl	8001590 <SD_RxDataBlock>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <SD_disk_read+0xa6>
          break;

        buff += 512;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019de:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1ed      	bne.n	80019c8 <SD_disk_read+0x80>
 80019ec:	e000      	b.n	80019f0 <SD_disk_read+0xa8>
          break;
 80019ee:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80019f0:	2100      	movs	r1, #0
 80019f2:	204c      	movs	r0, #76	; 0x4c
 80019f4:	f7ff fe56 	bl	80016a4 <SD_SendCmd>
    }
  }

  DESELECT();
 80019f8:	f7ff fcfa 	bl	80013f0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80019fc:	f7ff fd1c 	bl	8001438 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000002 	.word	0x20000002
 8001a18:	20000530 	.word	0x20000530

08001a1c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	4603      	mov	r3, r0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <SD_disk_write+0x1c>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <SD_disk_write+0x20>
    return RES_PARERR;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	e06b      	b.n	8001b14 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001a3c:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <SD_disk_write+0x100>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e062      	b.n	8001b14 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001a4e:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <SD_disk_write+0x100>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e059      	b.n	8001b14 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001a60:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <SD_disk_write+0x104>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	025b      	lsls	r3, r3, #9
 8001a70:	607b      	str	r3, [r7, #4]

  SELECT();
 8001a72:	f7ff fcb3 	bl	80013dc <SELECT>

  if (count == 1)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d110      	bne.n	8001a9e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	2058      	movs	r0, #88	; 0x58
 8001a80:	f7ff fe10 	bl	80016a4 <SD_SendCmd>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d13a      	bne.n	8001b00 <SD_disk_write+0xe4>
 8001a8a:	21fe      	movs	r1, #254	; 0xfe
 8001a8c:	68b8      	ldr	r0, [r7, #8]
 8001a8e:	f7ff fdb5 	bl	80015fc <SD_TxDataBlock>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d033      	beq.n	8001b00 <SD_disk_write+0xe4>
      count = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	e030      	b.n	8001b00 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <SD_disk_write+0x104>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2077      	movs	r0, #119	; 0x77
 8001aae:	f7ff fdf9 	bl	80016a4 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	2057      	movs	r0, #87	; 0x57
 8001ab6:	f7ff fdf5 	bl	80016a4 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	2059      	movs	r0, #89	; 0x59
 8001abe:	f7ff fdf1 	bl	80016a4 <SD_SendCmd>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11b      	bne.n	8001b00 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001ac8:	21fc      	movs	r1, #252	; 0xfc
 8001aca:	68b8      	ldr	r0, [r7, #8]
 8001acc:	f7ff fd96 	bl	80015fc <SD_TxDataBlock>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001adc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ee      	bne.n	8001ac8 <SD_disk_write+0xac>
 8001aea:	e000      	b.n	8001aee <SD_disk_write+0xd2>
          break;
 8001aec:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001aee:	21fd      	movs	r1, #253	; 0xfd
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff fd83 	bl	80015fc <SD_TxDataBlock>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <SD_disk_write+0xe4>
      {
        count = 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001b00:	f7ff fc76 	bl	80013f0 <DESELECT>
  SPI_RxByte();
 8001b04:	f7ff fc98 	bl	8001438 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	bf14      	ite	ne
 8001b0e:	2301      	movne	r3, #1
 8001b10:	2300      	moveq	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000002 	.word	0x20000002
 8001b20:	20000530 	.word	0x20000530

08001b24 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b08b      	sub	sp, #44	; 0x2c
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	603a      	str	r2, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	460b      	mov	r3, r1
 8001b32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e11b      	b.n	8001d7a <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001b48:	79bb      	ldrb	r3, [r7, #6]
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d129      	bne.n	8001ba2 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d017      	beq.n	8001b86 <SD_disk_ioctl+0x62>
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	dc1f      	bgt.n	8001b9a <SD_disk_ioctl+0x76>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <SD_disk_ioctl+0x40>
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d00b      	beq.n	8001b7a <SD_disk_ioctl+0x56>
 8001b62:	e01a      	b.n	8001b9a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001b64:	f7ff fd08 	bl	8001578 <SD_CheckPower>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001b6e:	f7ff fcf7 	bl	8001560 <SD_PowerOff>
      res = RES_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b78:	e0fd      	b.n	8001d76 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001b7a:	f7ff fca5 	bl	80014c8 <SD_PowerOn>
      res = RES_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b84:	e0f7      	b.n	8001d76 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	1c5c      	adds	r4, r3, #1
 8001b8a:	f7ff fcf5 	bl	8001578 <SD_CheckPower>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b98:	e0ed      	b.n	8001d76 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ba0:	e0e9      	b.n	8001d76 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001ba2:	4b78      	ldr	r3, [pc, #480]	; (8001d84 <SD_disk_ioctl+0x260>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0e2      	b.n	8001d7a <SD_disk_ioctl+0x256>

    SELECT();
 8001bb4:	f7ff fc12 	bl	80013dc <SELECT>

    switch (ctrl)
 8001bb8:	79bb      	ldrb	r3, [r7, #6]
 8001bba:	2b0d      	cmp	r3, #13
 8001bbc:	f200 80cc 	bhi.w	8001d58 <SD_disk_ioctl+0x234>
 8001bc0:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <SD_disk_ioctl+0xa4>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001cc3 	.word	0x08001cc3
 8001bcc:	08001c01 	.word	0x08001c01
 8001bd0:	08001cb3 	.word	0x08001cb3
 8001bd4:	08001d59 	.word	0x08001d59
 8001bd8:	08001d59 	.word	0x08001d59
 8001bdc:	08001d59 	.word	0x08001d59
 8001be0:	08001d59 	.word	0x08001d59
 8001be4:	08001d59 	.word	0x08001d59
 8001be8:	08001d59 	.word	0x08001d59
 8001bec:	08001d59 	.word	0x08001d59
 8001bf0:	08001d59 	.word	0x08001d59
 8001bf4:	08001cd5 	.word	0x08001cd5
 8001bf8:	08001cf9 	.word	0x08001cf9
 8001bfc:	08001d1d 	.word	0x08001d1d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001c00:	2100      	movs	r1, #0
 8001c02:	2049      	movs	r0, #73	; 0x49
 8001c04:	f7ff fd4e 	bl	80016a4 <SD_SendCmd>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 80a8 	bne.w	8001d60 <SD_disk_ioctl+0x23c>
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	2110      	movs	r1, #16
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fcba 	bl	8001590 <SD_RxDataBlock>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 809e 	beq.w	8001d60 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001c24:	7b3b      	ldrb	r3, [r7, #12]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10e      	bne.n	8001c4c <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001c2e:	7d7b      	ldrb	r3, [r7, #21]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	7d3b      	ldrb	r3, [r7, #20]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001c42:	8bfb      	ldrh	r3, [r7, #30]
 8001c44:	029a      	lsls	r2, r3, #10
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e02e      	b.n	8001caa <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001c4c:	7c7b      	ldrb	r3, [r7, #17]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	7dbb      	ldrb	r3, [r7, #22]
 8001c56:	09db      	lsrs	r3, r3, #7
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	7d7b      	ldrb	r3, [r7, #21]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f003 0306 	and.w	r3, r3, #6
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3302      	adds	r3, #2
 8001c70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001c74:	7d3b      	ldrb	r3, [r7, #20]
 8001c76:	099b      	lsrs	r3, r3, #6
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	7cfb      	ldrb	r3, [r7, #19]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	7cbb      	ldrb	r3, [r7, #18]
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001c9c:	8bfa      	ldrh	r2, [r7, #30]
 8001c9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ca2:	3b09      	subs	r3, #9
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001cb0:	e056      	b.n	8001d60 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001cc0:	e055      	b.n	8001d6e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001cc2:	f7ff fbe5 	bl	8001490 <SD_ReadyWait>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2bff      	cmp	r3, #255	; 0xff
 8001cca:	d14b      	bne.n	8001d64 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001cd2:	e047      	b.n	8001d64 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2049      	movs	r0, #73	; 0x49
 8001cd8:	f7ff fce4 	bl	80016a4 <SD_SendCmd>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d142      	bne.n	8001d68 <SD_disk_ioctl+0x244>
 8001ce2:	2110      	movs	r1, #16
 8001ce4:	6a38      	ldr	r0, [r7, #32]
 8001ce6:	f7ff fc53 	bl	8001590 <SD_RxDataBlock>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d03b      	beq.n	8001d68 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001cf6:	e037      	b.n	8001d68 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	204a      	movs	r0, #74	; 0x4a
 8001cfc:	f7ff fcd2 	bl	80016a4 <SD_SendCmd>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d132      	bne.n	8001d6c <SD_disk_ioctl+0x248>
 8001d06:	2110      	movs	r1, #16
 8001d08:	6a38      	ldr	r0, [r7, #32]
 8001d0a:	f7ff fc41 	bl	8001590 <SD_RxDataBlock>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d02b      	beq.n	8001d6c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001d1a:	e027      	b.n	8001d6c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	207a      	movs	r0, #122	; 0x7a
 8001d20:	f7ff fcc0 	bl	80016a4 <SD_SendCmd>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d30:	e00b      	b.n	8001d4a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001d32:	6a3c      	ldr	r4, [r7, #32]
 8001d34:	1c63      	adds	r3, r4, #1
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	f7ff fb7e 	bl	8001438 <SPI_RxByte>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001d40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d44:	3301      	adds	r3, #1
 8001d46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d9ef      	bls.n	8001d32 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d5e:	e006      	b.n	8001d6e <SD_disk_ioctl+0x24a>
      break;
 8001d60:	bf00      	nop
 8001d62:	e004      	b.n	8001d6e <SD_disk_ioctl+0x24a>
      break;
 8001d64:	bf00      	nop
 8001d66:	e002      	b.n	8001d6e <SD_disk_ioctl+0x24a>
      break;
 8001d68:	bf00      	nop
 8001d6a:	e000      	b.n	8001d6e <SD_disk_ioctl+0x24a>
      break;
 8001d6c:	bf00      	nop
    }

    DESELECT();
 8001d6e:	f7ff fb3f 	bl	80013f0 <DESELECT>
    SPI_RxByte();
 8001d72:	f7ff fb61 	bl	8001438 <SPI_RxByte>
  }

  return res;
 8001d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	372c      	adds	r7, #44	; 0x2c
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000002 	.word	0x20000002

08001d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d8c:	f000 ffba 	bl	8002d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d90:	f000 f850 	bl	8001e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d94:	f000 f9e0 	bl	8002158 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d98:	f000 f9ae 	bl	80020f8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001d9c:	f000 f930 	bl	8002000 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001da0:	f000 f8ae 	bl	8001f00 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001da4:	f000 f96a 	bl	800207c <MX_SPI2_Init>
  MX_FATFS_Init();
 8001da8:	f004 ffa6 	bl	8006cf8 <MX_FATFS_Init>
  MX_I2C2_Init();
 8001dac:	f000 f8e8 	bl	8001f80 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  GMG12864_Init();
 8001db0:	f7fe fdb0 	bl	8000914 <GMG12864_Init>
  INA219_Init(&ina219, &hi2c1, INA219_ADDRESS);
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	4917      	ldr	r1, [pc, #92]	; (8001e14 <main+0x8c>)
 8001db8:	4817      	ldr	r0, [pc, #92]	; (8001e18 <main+0x90>)
 8001dba:	f7ff fadb 	bl	8001374 <INA219_Init>
  t_ina219 = HAL_GetTick();
 8001dbe:	f000 fffb 	bl	8002db8 <HAL_GetTick>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <main+0x94>)
 8001dc6:	6013      	str	r3, [r2, #0]
  t_gmg12864 = HAL_GetTick();
 8001dc8:	f000 fff6 	bl	8002db8 <HAL_GetTick>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <main+0x98>)
 8001dd0:	6013      	str	r3, [r2, #0]
  t_sd_card = HAL_GetTick();
 8001dd2:	f000 fff1 	bl	8002db8 <HAL_GetTick>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <main+0x9c>)
 8001dda:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 8001ddc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de0:	f000 fff6 	bl	8002dd0 <HAL_Delay>
  fresult = f_mount(&fs, "", 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	4910      	ldr	r1, [pc, #64]	; (8001e28 <main+0xa0>)
 8001de8:	4810      	ldr	r0, [pc, #64]	; (8001e2c <main+0xa4>)
 8001dea:	f007 fc69 	bl	80096c0 <f_mount>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <main+0xa8>)
 8001df4:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_state_of_relays();
 8001df6:	f000 fbaf 	bl	8002558 <read_state_of_relays>
	  get_param_from_ina219();
 8001dfa:	f000 fb27 	bl	800244c <get_param_from_ina219>
	  automatik_mode();
 8001dfe:	f000 faa7 	bl	8002350 <automatik_mode>
	  manual_mode_func();
 8001e02:	f000 fa37 	bl	8002274 <manual_mode_func>
	  mode_change_func();
 8001e06:	f000 fb81 	bl	800250c <mode_change_func>
	  print_gmg12864_level_1();
 8001e0a:	f000 fbd5 	bl	80025b8 <print_gmg12864_level_1>
	  sd_card_write();
 8001e0e:	f000 fcd7 	bl	80027c0 <sd_card_write>
	  read_state_of_relays();
 8001e12:	e7f0      	b.n	8001df6 <main+0x6e>
 8001e14:	20000534 	.word	0x20000534
 8001e18:	20002778 	.word	0x20002778
 8001e1c:	20002788 	.word	0x20002788
 8001e20:	2000278c 	.word	0x2000278c
 8001e24:	20002790 	.word	0x20002790
 8001e28:	0800afb8 	.word	0x0800afb8
 8001e2c:	20000718 	.word	0x20000718
 8001e30:	20002774 	.word	0x20002774

08001e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0a6      	sub	sp, #152	; 0x98
 8001e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e3e:	2228      	movs	r2, #40	; 0x28
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f008 fc36 	bl	800a6b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2258      	movs	r2, #88	; 0x58
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f008 fc28 	bl	800a6b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e64:	2303      	movs	r3, #3
 8001e66:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e6c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e72:	2310      	movs	r3, #16
 8001e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e86:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 f913 	bl	80040c4 <HAL_RCC_OscConfig>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001ea4:	f000 fcc0 	bl	8002828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eac:	2302      	movs	r3, #2
 8001eae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ebe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 f951 	bl	800516c <HAL_RCC_ClockConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001ed0:	f000 fcaa 	bl	8002828 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001ed4:	2362      	movs	r3, #98	; 0x62
 8001ed6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 fb76 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ef2:	f000 fc99 	bl	8002828 <Error_Handler>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3798      	adds	r7, #152	; 0x98
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f06:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <MX_I2C1_Init+0x78>)
 8001f08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <MX_I2C1_Init+0x7c>)
 8001f0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f3a:	480e      	ldr	r0, [pc, #56]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f3c:	f001 fa38 	bl	80033b0 <HAL_I2C_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f46:	f000 fc6f 	bl	8002828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4809      	ldr	r0, [pc, #36]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f4e:	f002 f821 	bl	8003f94 <HAL_I2CEx_ConfigAnalogFilter>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f58:	f000 fc66 	bl	8002828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4805      	ldr	r0, [pc, #20]	; (8001f74 <MX_I2C1_Init+0x74>)
 8001f60:	f002 f863 	bl	800402a <HAL_I2CEx_ConfigDigitalFilter>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f6a:	f000 fc5d 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000534 	.word	0x20000534
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	2000090e 	.word	0x2000090e

08001f80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001f86:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <MX_I2C2_Init+0x78>)
 8001f88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <MX_I2C2_Init+0x7c>)
 8001f8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f9c:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fba:	480e      	ldr	r0, [pc, #56]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001fbc:	f001 f9f8 	bl	80033b0 <HAL_I2C_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001fc6:	f000 fc2f 	bl	8002828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001fce:	f001 ffe1 	bl	8003f94 <HAL_I2CEx_ConfigAnalogFilter>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001fd8:	f000 fc26 	bl	8002828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <MX_I2C2_Init+0x74>)
 8001fe0:	f002 f823 	bl	800402a <HAL_I2CEx_ConfigDigitalFilter>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001fea:	f000 fc1d 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000580 	.word	0x20000580
 8001ff8:	40005800 	.word	0x40005800
 8001ffc:	2000090e 	.word	0x2000090e

08002000 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MX_SPI1_Init+0x74>)
 8002006:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <MX_SPI1_Init+0x78>)
 8002008:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <MX_SPI1_Init+0x74>)
 800200c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002010:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_SPI1_Init+0x74>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <MX_SPI1_Init+0x74>)
 800201a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800201e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <MX_SPI1_Init+0x74>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <MX_SPI1_Init+0x74>)
 8002028:	2200      	movs	r2, #0
 800202a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_SPI1_Init+0x74>)
 800202e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002032:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_SPI1_Init+0x74>)
 8002036:	2210      	movs	r2, #16
 8002038:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_SPI1_Init+0x74>)
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_SPI1_Init+0x74>)
 8002042:	2200      	movs	r2, #0
 8002044:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_SPI1_Init+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_SPI1_Init+0x74>)
 800204e:	2207      	movs	r2, #7
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_SPI1_Init+0x74>)
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_SPI1_Init+0x74>)
 800205a:	2208      	movs	r2, #8
 800205c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_SPI1_Init+0x74>)
 8002060:	f003 fcd8 	bl	8005a14 <HAL_SPI_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800206a:	f000 fbdd 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200005cc 	.word	0x200005cc
 8002078:	40013000 	.word	0x40013000

0800207c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <MX_SPI2_Init+0x74>)
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <MX_SPI2_Init+0x78>)
 8002084:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <MX_SPI2_Init+0x74>)
 8002088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800208c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <MX_SPI2_Init+0x74>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <MX_SPI2_Init+0x74>)
 8002096:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800209a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <MX_SPI2_Init+0x74>)
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <MX_SPI2_Init+0x74>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_SPI2_Init+0x74>)
 80020aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <MX_SPI2_Init+0x74>)
 80020b2:	2208      	movs	r2, #8
 80020b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_SPI2_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_SPI2_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MX_SPI2_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_SPI2_Init+0x74>)
 80020ca:	2207      	movs	r2, #7
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MX_SPI2_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_SPI2_Init+0x74>)
 80020d6:	2208      	movs	r2, #8
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_SPI2_Init+0x74>)
 80020dc:	f003 fc9a 	bl	8005a14 <HAL_SPI_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80020e6:	f000 fb9f 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000630 	.word	0x20000630
 80020f4:	40003800 	.word	0x40003800

080020f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <MX_USART2_UART_Init+0x58>)
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <MX_USART2_UART_Init+0x5c>)
 8002100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002104:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_USART2_UART_Init+0x58>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_USART2_UART_Init+0x58>)
 800211e:	220c      	movs	r2, #12
 8002120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_USART2_UART_Init+0x58>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002130:	2200      	movs	r2, #0
 8002132:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002136:	2200      	movs	r2, #0
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_USART2_UART_Init+0x58>)
 800213c:	f004 fa08 	bl	8006550 <HAL_UART_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002146:	f000 fb6f 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000694 	.word	0x20000694
 8002154:	40004400 	.word	0x40004400

08002158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <MX_GPIO_Init+0x114>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	4a3e      	ldr	r2, [pc, #248]	; (800226c <MX_GPIO_Init+0x114>)
 8002174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002178:	6153      	str	r3, [r2, #20]
 800217a:	4b3c      	ldr	r3, [pc, #240]	; (800226c <MX_GPIO_Init+0x114>)
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002186:	4b39      	ldr	r3, [pc, #228]	; (800226c <MX_GPIO_Init+0x114>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4a38      	ldr	r2, [pc, #224]	; (800226c <MX_GPIO_Init+0x114>)
 800218c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002190:	6153      	str	r3, [r2, #20]
 8002192:	4b36      	ldr	r3, [pc, #216]	; (800226c <MX_GPIO_Init+0x114>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <MX_GPIO_Init+0x114>)
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	4a32      	ldr	r2, [pc, #200]	; (800226c <MX_GPIO_Init+0x114>)
 80021a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a8:	6153      	str	r3, [r2, #20]
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <MX_GPIO_Init+0x114>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <MX_GPIO_Init+0x114>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4a2c      	ldr	r2, [pc, #176]	; (800226c <MX_GPIO_Init+0x114>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c0:	6153      	str	r3, [r2, #20]
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <MX_GPIO_Init+0x114>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, high_charge_relay_Pin|low_charge_relay_Pin|discharge_relay_Pin|led_high_charge_Pin
 80021ce:	2200      	movs	r2, #0
 80021d0:	2137      	movs	r1, #55	; 0x37
 80021d2:	4827      	ldr	r0, [pc, #156]	; (8002270 <MX_GPIO_Init+0x118>)
 80021d4:	f001 f8bc 	bl	8003350 <HAL_GPIO_WritePin>
                          |led_discharge_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin|DC_Pin|user_led_Pin
 80021d8:	2200      	movs	r2, #0
 80021da:	2173      	movs	r1, #115	; 0x73
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e0:	f001 f8b6 	bl	8003350 <HAL_GPIO_WritePin>
                          |CS_SD_CARD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 80021e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	481d      	ldr	r0, [pc, #116]	; (8002270 <MX_GPIO_Init+0x118>)
 80021fc:	f000 ff1e 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pins : high_charge_relay_Pin low_charge_relay_Pin discharge_relay_Pin led_high_charge_Pin
                           led_discharge_Pin */
  GPIO_InitStruct.Pin = high_charge_relay_Pin|low_charge_relay_Pin|discharge_relay_Pin|led_high_charge_Pin
 8002200:	2337      	movs	r3, #55	; 0x37
 8002202:	617b      	str	r3, [r7, #20]
                          |led_discharge_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	2301      	movs	r3, #1
 8002206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4816      	ldr	r0, [pc, #88]	; (8002270 <MX_GPIO_Init+0x118>)
 8002218:	f000 ff10 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pin : led_low_charge_Pin */
  GPIO_InitStruct.Pin = led_low_charge_Pin;
 800221c:	2308      	movs	r3, #8
 800221e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002220:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_low_charge_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	480f      	ldr	r0, [pc, #60]	; (8002270 <MX_GPIO_Init+0x118>)
 8002232:	f000 ff03 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin RST_Pin DC_Pin user_led_Pin
                           CS_SD_CARD_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin|user_led_Pin
 8002236:	2373      	movs	r3, #115	; 0x73
 8002238:	617b      	str	r3, [r7, #20]
                          |CS_SD_CARD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223a:	2301      	movs	r3, #1
 800223c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002250:	f000 fef4 	bl	800303c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	2100      	movs	r1, #0
 8002258:	2028      	movs	r0, #40	; 0x28
 800225a:	f000 feb8 	bl	8002fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800225e:	2028      	movs	r0, #40	; 0x28
 8002260:	f000 fed1 	bl	8003006 <HAL_NVIC_EnableIRQ>

}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	48000800 	.word	0x48000800

08002274 <manual_mode_func>:

/* USER CODE BEGIN 4 */
void manual_mode_func(){
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
	if(control_mode){
 8002278:	4b32      	ldr	r3, [pc, #200]	; (8002344 <manual_mode_func+0xd0>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d05a      	beq.n	8002338 <manual_mode_func+0xc4>
		switch(manual_mode){
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <manual_mode_func+0xd4>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d857      	bhi.n	800233a <manual_mode_func+0xc6>
 800228a:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <manual_mode_func+0x1c>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	080022a1 	.word	0x080022a1
 8002294:	080022c7 	.word	0x080022c7
 8002298:	080022ed 	.word	0x080022ed
 800229c:	08002313 	.word	0x08002313
		case 0:
			high_charge_off();
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <manual_mode_func+0xd8>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a29      	ldr	r2, [pc, #164]	; (800234c <manual_mode_func+0xd8>)
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022aa:	6193      	str	r3, [r2, #24]
			low_charge_off();
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <manual_mode_func+0xd8>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a26      	ldr	r2, [pc, #152]	; (800234c <manual_mode_func+0xd8>)
 80022b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b6:	6193      	str	r3, [r2, #24]
			discharge_off();
 80022b8:	4b24      	ldr	r3, [pc, #144]	; (800234c <manual_mode_func+0xd8>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4a23      	ldr	r2, [pc, #140]	; (800234c <manual_mode_func+0xd8>)
 80022be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c2:	6193      	str	r3, [r2, #24]
			break;
 80022c4:	e039      	b.n	800233a <manual_mode_func+0xc6>
		case 1:
			high_charge_on();
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <manual_mode_func+0xd8>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	4a20      	ldr	r2, [pc, #128]	; (800234c <manual_mode_func+0xd8>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6193      	str	r3, [r2, #24]
			low_charge_off();
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <manual_mode_func+0xd8>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	4a1d      	ldr	r2, [pc, #116]	; (800234c <manual_mode_func+0xd8>)
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022dc:	6193      	str	r3, [r2, #24]
			discharge_off();
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <manual_mode_func+0xd8>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <manual_mode_func+0xd8>)
 80022e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e8:	6193      	str	r3, [r2, #24]
			break;
 80022ea:	e026      	b.n	800233a <manual_mode_func+0xc6>
		case 2:
			high_charge_off();
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <manual_mode_func+0xd8>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	4a16      	ldr	r2, [pc, #88]	; (800234c <manual_mode_func+0xd8>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f6:	6193      	str	r3, [r2, #24]
			low_charge_on();
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <manual_mode_func+0xd8>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4a13      	ldr	r2, [pc, #76]	; (800234c <manual_mode_func+0xd8>)
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	6193      	str	r3, [r2, #24]
			discharge_off();
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <manual_mode_func+0xd8>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a10      	ldr	r2, [pc, #64]	; (800234c <manual_mode_func+0xd8>)
 800230a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800230e:	6193      	str	r3, [r2, #24]
			break;
 8002310:	e013      	b.n	800233a <manual_mode_func+0xc6>
		case 3:
			high_charge_off();
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <manual_mode_func+0xd8>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	4a0d      	ldr	r2, [pc, #52]	; (800234c <manual_mode_func+0xd8>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6193      	str	r3, [r2, #24]
			low_charge_off();
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <manual_mode_func+0xd8>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <manual_mode_func+0xd8>)
 8002324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002328:	6193      	str	r3, [r2, #24]
			discharge_on();
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <manual_mode_func+0xd8>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <manual_mode_func+0xd8>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6193      	str	r3, [r2, #24]
			break;
 8002336:	e000      	b.n	800233a <manual_mode_func+0xc6>
		}
	}
 8002338:	bf00      	nop
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	20002798 	.word	0x20002798
 8002348:	20002799 	.word	0x20002799
 800234c:	48000800 	.word	0x48000800

08002350 <automatik_mode>:

void automatik_mode(){
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
	if(!control_mode){
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <automatik_mode+0xec>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d066      	beq.n	8002432 <automatik_mode+0xe2>
		if(v_bus < 5100 && (discharge_enable == 0)){
 8002364:	4b36      	ldr	r3, [pc, #216]	; (8002440 <automatik_mode+0xf0>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	f241 32eb 	movw	r2, #5099	; 0x13eb
 800236c:	4293      	cmp	r3, r2
 800236e:	d819      	bhi.n	80023a4 <automatik_mode+0x54>
 8002370:	4b34      	ldr	r3, [pc, #208]	; (8002444 <automatik_mode+0xf4>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d012      	beq.n	80023a4 <automatik_mode+0x54>
			low_charge_off();
 800237e:	4b32      	ldr	r3, [pc, #200]	; (8002448 <automatik_mode+0xf8>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	4a31      	ldr	r2, [pc, #196]	; (8002448 <automatik_mode+0xf8>)
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	6193      	str	r3, [r2, #24]
			discharge_off();
 800238a:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <automatik_mode+0xf8>)
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	4a2e      	ldr	r2, [pc, #184]	; (8002448 <automatik_mode+0xf8>)
 8002390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002394:	6193      	str	r3, [r2, #24]
			high_charge_on();
 8002396:	4b2c      	ldr	r3, [pc, #176]	; (8002448 <automatik_mode+0xf8>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <automatik_mode+0xf8>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6193      	str	r3, [r2, #24]
 80023a2:	e027      	b.n	80023f4 <automatik_mode+0xa4>
		}
		else if(v_bus > 7100 && (discharge_enable == 0)){
 80023a4:	4b26      	ldr	r3, [pc, #152]	; (8002440 <automatik_mode+0xf0>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d921      	bls.n	80023f4 <automatik_mode+0xa4>
 80023b0:	4b24      	ldr	r3, [pc, #144]	; (8002444 <automatik_mode+0xf4>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f083 0301 	eor.w	r3, r3, #1
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d01a      	beq.n	80023f4 <automatik_mode+0xa4>
			high_charge_off();
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <automatik_mode+0xf8>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	4a21      	ldr	r2, [pc, #132]	; (8002448 <automatik_mode+0xf8>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6193      	str	r3, [r2, #24]
			discharge_off();
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <automatik_mode+0xf8>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <automatik_mode+0xf8>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d4:	6193      	str	r3, [r2, #24]
			low_charge_on();
 80023d6:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <automatik_mode+0xf8>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <automatik_mode+0xf8>)
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	6193      	str	r3, [r2, #24]
			if(v_bus >= 7250){
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <automatik_mode+0xf0>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	f641 4251 	movw	r2, #7249	; 0x1c51
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d902      	bls.n	80023f4 <automatik_mode+0xa4>
				discharge_enable = 1;
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <automatik_mode+0xf4>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	701a      	strb	r2, [r3, #0]
			}
		}
		if(discharge_enable){
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <automatik_mode+0xf4>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01a      	beq.n	8002432 <automatik_mode+0xe2>
			low_charge_off();
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <automatik_mode+0xf8>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a11      	ldr	r2, [pc, #68]	; (8002448 <automatik_mode+0xf8>)
 8002402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002406:	6193      	str	r3, [r2, #24]
			high_charge_off();
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <automatik_mode+0xf8>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <automatik_mode+0xf8>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	6193      	str	r3, [r2, #24]
			discharge_on();
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <automatik_mode+0xf8>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <automatik_mode+0xf8>)
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	6193      	str	r3, [r2, #24]
			if(v_bus <= 5100){
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <automatik_mode+0xf0>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8002428:	4293      	cmp	r3, r2
 800242a:	d802      	bhi.n	8002432 <automatik_mode+0xe2>
				discharge_enable = 0;
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <automatik_mode+0xf4>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	20002798 	.word	0x20002798
 8002440:	20002780 	.word	0x20002780
 8002444:	20002797 	.word	0x20002797
 8002448:	48000800 	.word	0x48000800

0800244c <get_param_from_ina219>:

void get_param_from_ina219(){
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	if((HAL_GetTick() - t_ina219) > 100){
 8002450:	f000 fcb2 	bl	8002db8 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <get_param_from_ina219+0x5c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d920      	bls.n	80024a2 <get_param_from_ina219+0x56>
		t_ina219 = HAL_GetTick();
 8002460:	f000 fcaa 	bl	8002db8 <HAL_GetTick>
 8002464:	4603      	mov	r3, r0
 8002466:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <get_param_from_ina219+0x5c>)
 8002468:	6013      	str	r3, [r2, #0]
		v_bus = INA219_ReadBusVoltage(&ina219);
 800246a:	4810      	ldr	r0, [pc, #64]	; (80024ac <get_param_from_ina219+0x60>)
 800246c:	f7fe fe90 	bl	8001190 <INA219_ReadBusVoltage>
 8002470:	4603      	mov	r3, r0
 8002472:	461a      	mov	r2, r3
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <get_param_from_ina219+0x64>)
 8002476:	801a      	strh	r2, [r3, #0]
		v_shunt = INA219_ReadShuntVoltage(&ina219);
 8002478:	480c      	ldr	r0, [pc, #48]	; (80024ac <get_param_from_ina219+0x60>)
 800247a:	f7fe fed5 	bl	8001228 <INA219_ReadShuntVoltage>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <get_param_from_ina219+0x68>)
 8002484:	801a      	strh	r2, [r3, #0]
		current = INA219_ReadCurrent(&ina219);
 8002486:	4809      	ldr	r0, [pc, #36]	; (80024ac <get_param_from_ina219+0x60>)
 8002488:	f7fe fea6 	bl	80011d8 <INA219_ReadCurrent>
 800248c:	4603      	mov	r3, r0
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <get_param_from_ina219+0x6c>)
 8002492:	801a      	strh	r2, [r3, #0]
		power = INA219_Read_Power(&ina219);
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <get_param_from_ina219+0x60>)
 8002496:	f7fe feeb 	bl	8001270 <INA219_Read_Power>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <get_param_from_ina219+0x70>)
 80024a0:	801a      	strh	r2, [r3, #0]
	}
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20002788 	.word	0x20002788
 80024ac:	20002778 	.word	0x20002778
 80024b0:	20002780 	.word	0x20002780
 80024b4:	20002782 	.word	0x20002782
 80024b8:	20002784 	.word	0x20002784
 80024bc:	20002786 	.word	0x20002786

080024c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == (0x2000)){
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d0:	d112      	bne.n	80024f8 <HAL_GPIO_EXTI_Callback+0x38>
		control_mode = !control_mode;
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_GPIO_EXTI_Callback+0x44>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf14      	ite	ne
 80024dc:	2301      	movne	r3, #1
 80024de:	2300      	moveq	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f083 0301 	eor.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_GPIO_EXTI_Callback+0x44>)
 80024f0:	701a      	strb	r2, [r3, #0]
		flag_change_mode = 1;
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_GPIO_EXTI_Callback+0x48>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
	}
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	20002798 	.word	0x20002798
 8002508:	2000279a 	.word	0x2000279a

0800250c <mode_change_func>:

void mode_change_func(){
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	if(flag_change_mode){
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <mode_change_func+0x44>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d014      	beq.n	8002544 <mode_change_func+0x38>
		flag_change_mode = 0;
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <mode_change_func+0x44>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
		high_charge_off();
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <mode_change_func+0x48>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a0b      	ldr	r2, [pc, #44]	; (8002554 <mode_change_func+0x48>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252a:	6193      	str	r3, [r2, #24]
		low_charge_off();
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <mode_change_func+0x48>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a08      	ldr	r2, [pc, #32]	; (8002554 <mode_change_func+0x48>)
 8002532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002536:	6193      	str	r3, [r2, #24]
		discharge_off();
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <mode_change_func+0x48>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4a05      	ldr	r2, [pc, #20]	; (8002554 <mode_change_func+0x48>)
 800253e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002542:	6193      	str	r3, [r2, #24]
	}
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	2000279a 	.word	0x2000279a
 8002554:	48000800 	.word	0x48000800

08002558 <read_state_of_relays>:

void read_state_of_relays(){
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
	state_high_charge = read_state_of_high_charge();
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <read_state_of_relays+0x50>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <read_state_of_relays+0x54>)
 8002570:	701a      	strb	r2, [r3, #0]
	state_low_charge = read_state_of_low_charge();
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <read_state_of_relays+0x50>)
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf14      	ite	ne
 800257e:	2301      	movne	r3, #1
 8002580:	2300      	moveq	r3, #0
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <read_state_of_relays+0x58>)
 8002586:	701a      	strb	r2, [r3, #0]
	state_discharge = read_state_of_discharge();
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <read_state_of_relays+0x50>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <read_state_of_relays+0x5c>)
 800259c:	701a      	strb	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	48000800 	.word	0x48000800
 80025ac:	20002794 	.word	0x20002794
 80025b0:	20002795 	.word	0x20002795
 80025b4:	20002796 	.word	0x20002796

080025b8 <print_gmg12864_level_1>:

void print_gmg12864_level_1(){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	if((HAL_GetTick() - t_gmg12864) > 200){
 80025bc:	f000 fbfc 	bl	8002db8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <print_gmg12864_level_1+0x54>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2bc8      	cmp	r3, #200	; 0xc8
 80025ca:	d91c      	bls.n	8002606 <print_gmg12864_level_1+0x4e>
		t_gmg12864 = HAL_GetTick();
 80025cc:	f000 fbf4 	bl	8002db8 <HAL_GetTick>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <print_gmg12864_level_1+0x54>)
 80025d4:	6013      	str	r3, [r2, #0]
		GMG12864_first_line_level_1(0, 0);
 80025d6:	2100      	movs	r1, #0
 80025d8:	2000      	movs	r0, #0
 80025da:	f000 f819 	bl	8002610 <GMG12864_first_line_level_1>
		GMG12864_second_line_level_1(0, 10);
 80025de:	210a      	movs	r1, #10
 80025e0:	2000      	movs	r0, #0
 80025e2:	f000 f839 	bl	8002658 <GMG12864_second_line_level_1>
		GMG12864_third_line_level_1(0, 20);
 80025e6:	2114      	movs	r1, #20
 80025e8:	2000      	movs	r0, #0
 80025ea:	f000 f859 	bl	80026a0 <GMG12864_third_line_level_1>
		GMG12864_fourth_line_level_1(0, 30);
 80025ee:	211e      	movs	r1, #30
 80025f0:	2000      	movs	r0, #0
 80025f2:	f000 f879 	bl	80026e8 <GMG12864_fourth_line_level_1>
		GMG12864_fifth_line_level_1(0, 40);
 80025f6:	2128      	movs	r1, #40	; 0x28
 80025f8:	2000      	movs	r0, #0
 80025fa:	f000 f899 	bl	8002730 <GMG12864_fifth_line_level_1>
		GMG12864_sixth_line_level_1(0, 50);
 80025fe:	2132      	movs	r1, #50	; 0x32
 8002600:	2000      	movs	r0, #0
 8002602:	f000 f8b9 	bl	8002778 <GMG12864_sixth_line_level_1>
	}
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000278c 	.word	0x2000278c

08002610 <GMG12864_first_line_level_1>:

void GMG12864_first_line_level_1(uint8_t x, uint8_t y){
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af02      	add	r7, sp, #8
 8002616:	4603      	mov	r3, r0
 8002618:	460a      	mov	r2, r1
 800261a:	71fb      	strb	r3, [r7, #7]
 800261c:	4613      	mov	r3, r2
 800261e:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Voltage is %d         ", v_bus);
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <GMG12864_first_line_level_1+0x3c>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	490a      	ldr	r1, [pc, #40]	; (8002650 <GMG12864_first_line_level_1+0x40>)
 8002628:	480a      	ldr	r0, [pc, #40]	; (8002654 <GMG12864_first_line_level_1+0x44>)
 800262a:	f008 f84b 	bl	800a6c4 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 800262e:	79b9      	ldrb	r1, [r7, #6]
 8002630:	79f8      	ldrb	r0, [r7, #7]
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <GMG12864_first_line_level_1+0x44>)
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2300      	movs	r3, #0
 8002638:	2201      	movs	r2, #1
 800263a:	f7fe fbc1 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 800263e:	f7fe fa2b 	bl	8000a98 <GMG12864_Update>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20002780 	.word	0x20002780
 8002650:	0800afbc 	.word	0x0800afbc
 8002654:	200000a4 	.word	0x200000a4

08002658 <GMG12864_second_line_level_1>:

void GMG12864_second_line_level_1(uint8_t x, uint8_t y){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af02      	add	r7, sp, #8
 800265e:	4603      	mov	r3, r0
 8002660:	460a      	mov	r2, r1
 8002662:	71fb      	strb	r3, [r7, #7]
 8002664:	4613      	mov	r3, r2
 8002666:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Current is %d         ", current);
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <GMG12864_second_line_level_1+0x3c>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	490a      	ldr	r1, [pc, #40]	; (8002698 <GMG12864_second_line_level_1+0x40>)
 8002670:	480a      	ldr	r0, [pc, #40]	; (800269c <GMG12864_second_line_level_1+0x44>)
 8002672:	f008 f827 	bl	800a6c4 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8002676:	79b9      	ldrb	r1, [r7, #6]
 8002678:	79f8      	ldrb	r0, [r7, #7]
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <GMG12864_second_line_level_1+0x44>)
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2300      	movs	r3, #0
 8002680:	2201      	movs	r2, #1
 8002682:	f7fe fb9d 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002686:	f7fe fa07 	bl	8000a98 <GMG12864_Update>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20002784 	.word	0x20002784
 8002698:	0800afd4 	.word	0x0800afd4
 800269c:	200000a4 	.word	0x200000a4

080026a0 <GMG12864_third_line_level_1>:

void GMG12864_third_line_level_1(uint8_t x, uint8_t y){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	4603      	mov	r3, r0
 80026a8:	460a      	mov	r2, r1
 80026aa:	71fb      	strb	r3, [r7, #7]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Power is %d           ", power);
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <GMG12864_third_line_level_1+0x3c>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	490a      	ldr	r1, [pc, #40]	; (80026e0 <GMG12864_third_line_level_1+0x40>)
 80026b8:	480a      	ldr	r0, [pc, #40]	; (80026e4 <GMG12864_third_line_level_1+0x44>)
 80026ba:	f008 f803 	bl	800a6c4 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 80026be:	79b9      	ldrb	r1, [r7, #6]
 80026c0:	79f8      	ldrb	r0, [r7, #7]
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <GMG12864_third_line_level_1+0x44>)
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2300      	movs	r3, #0
 80026c8:	2201      	movs	r2, #1
 80026ca:	f7fe fb79 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 80026ce:	f7fe f9e3 	bl	8000a98 <GMG12864_Update>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20002786 	.word	0x20002786
 80026e0:	0800afec 	.word	0x0800afec
 80026e4:	200000a4 	.word	0x200000a4

080026e8 <GMG12864_fourth_line_level_1>:

void GMG12864_fourth_line_level_1(uint8_t x, uint8_t y){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	4603      	mov	r3, r0
 80026f0:	460a      	mov	r2, r1
 80026f2:	71fb      	strb	r3, [r7, #7]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "low charge %d         ", state_low_charge);
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <GMG12864_fourth_line_level_1+0x3c>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	490a      	ldr	r1, [pc, #40]	; (8002728 <GMG12864_fourth_line_level_1+0x40>)
 8002700:	480a      	ldr	r0, [pc, #40]	; (800272c <GMG12864_fourth_line_level_1+0x44>)
 8002702:	f007 ffdf 	bl	800a6c4 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8002706:	79b9      	ldrb	r1, [r7, #6]
 8002708:	79f8      	ldrb	r0, [r7, #7]
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <GMG12864_fourth_line_level_1+0x44>)
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2300      	movs	r3, #0
 8002710:	2201      	movs	r2, #1
 8002712:	f7fe fb55 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002716:	f7fe f9bf 	bl	8000a98 <GMG12864_Update>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20002795 	.word	0x20002795
 8002728:	0800b004 	.word	0x0800b004
 800272c:	200000a4 	.word	0x200000a4

08002730 <GMG12864_fifth_line_level_1>:

void GMG12864_fifth_line_level_1(uint8_t x, uint8_t y){
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af02      	add	r7, sp, #8
 8002736:	4603      	mov	r3, r0
 8002738:	460a      	mov	r2, r1
 800273a:	71fb      	strb	r3, [r7, #7]
 800273c:	4613      	mov	r3, r2
 800273e:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "high charge %d         ", state_high_charge);
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <GMG12864_fifth_line_level_1+0x3c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	490a      	ldr	r1, [pc, #40]	; (8002770 <GMG12864_fifth_line_level_1+0x40>)
 8002748:	480a      	ldr	r0, [pc, #40]	; (8002774 <GMG12864_fifth_line_level_1+0x44>)
 800274a:	f007 ffbb 	bl	800a6c4 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 800274e:	79b9      	ldrb	r1, [r7, #6]
 8002750:	79f8      	ldrb	r0, [r7, #7]
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <GMG12864_fifth_line_level_1+0x44>)
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2300      	movs	r3, #0
 8002758:	2201      	movs	r2, #1
 800275a:	f7fe fb31 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 800275e:	f7fe f99b 	bl	8000a98 <GMG12864_Update>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20002794 	.word	0x20002794
 8002770:	0800b01c 	.word	0x0800b01c
 8002774:	200000a4 	.word	0x200000a4

08002778 <GMG12864_sixth_line_level_1>:

void GMG12864_sixth_line_level_1(uint8_t x, uint8_t y){
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af02      	add	r7, sp, #8
 800277e:	4603      	mov	r3, r0
 8002780:	460a      	mov	r2, r1
 8002782:	71fb      	strb	r3, [r7, #7]
 8002784:	4613      	mov	r3, r2
 8002786:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "discharge %d         ", state_discharge);
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <GMG12864_sixth_line_level_1+0x3c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <GMG12864_sixth_line_level_1+0x40>)
 8002790:	480a      	ldr	r0, [pc, #40]	; (80027bc <GMG12864_sixth_line_level_1+0x44>)
 8002792:	f007 ff97 	bl	800a6c4 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8002796:	79b9      	ldrb	r1, [r7, #6]
 8002798:	79f8      	ldrb	r0, [r7, #7]
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <GMG12864_sixth_line_level_1+0x44>)
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	2201      	movs	r2, #1
 80027a2:	f7fe fb0d 	bl	8000dc0 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 80027a6:	f7fe f977 	bl	8000a98 <GMG12864_Update>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20002796 	.word	0x20002796
 80027b8:	0800b034 	.word	0x0800b034
 80027bc:	200000a4 	.word	0x200000a4

080027c0 <sd_card_write>:

void sd_card_write(){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - t_sd_card > 1000){
 80027c4:	f000 faf8 	bl	8002db8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <sd_card_write+0x54>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d4:	d91c      	bls.n	8002810 <sd_card_write+0x50>
		t_sd_card = HAL_GetTick();
 80027d6:	f000 faef 	bl	8002db8 <HAL_GetTick>
 80027da:	4603      	mov	r3, r0
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <sd_card_write+0x54>)
 80027de:	6013      	str	r3, [r2, #0]
		fresult = f_open(&fil, "parameters.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80027e0:	2213      	movs	r2, #19
 80027e2:	490d      	ldr	r1, [pc, #52]	; (8002818 <sd_card_write+0x58>)
 80027e4:	480d      	ldr	r0, [pc, #52]	; (800281c <sd_card_write+0x5c>)
 80027e6:	f006 ffb5 	bl	8009754 <f_open>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <sd_card_write+0x60>)
 80027f0:	701a      	strb	r2, [r3, #0]
		fresult = f_puts("DATA!!!/n", &fil);
 80027f2:	490a      	ldr	r1, [pc, #40]	; (800281c <sd_card_write+0x5c>)
 80027f4:	480b      	ldr	r0, [pc, #44]	; (8002824 <sd_card_write+0x64>)
 80027f6:	f007 fe34 	bl	800a462 <f_puts>
 80027fa:	4603      	mov	r3, r0
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <sd_card_write+0x60>)
 8002800:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8002802:	4806      	ldr	r0, [pc, #24]	; (800281c <sd_card_write+0x5c>)
 8002804:	f007 fdc5 	bl	800a392 <f_close>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <sd_card_write+0x60>)
 800280e:	701a      	strb	r2, [r3, #0]
	}
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20002790 	.word	0x20002790
 8002818:	0800b04c 	.word	0x0800b04c
 800281c:	20001748 	.word	0x20001748
 8002820:	20002774 	.word	0x20002774
 8002824:	0800b05c 	.word	0x0800b05c

08002828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800282c:	b672      	cpsid	i
}
 800282e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002830:	e7fe      	b.n	8002830 <Error_Handler+0x8>
	...

08002834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_MspInit+0x44>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_MspInit+0x44>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6193      	str	r3, [r2, #24]
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <HAL_MspInit+0x44>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_MspInit+0x44>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4a08      	ldr	r2, [pc, #32]	; (8002878 <HAL_MspInit+0x44>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	61d3      	str	r3, [r2, #28]
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_MspInit+0x44>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800286a:	2007      	movs	r0, #7
 800286c:	f000 fba4 	bl	8002fb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	; 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a3e      	ldr	r2, [pc, #248]	; (8002994 <HAL_I2C_MspInit+0x118>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d146      	bne.n	800292c <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	4a3d      	ldr	r2, [pc, #244]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a8:	6153      	str	r3, [r2, #20]
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	4b38      	ldr	r3, [pc, #224]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	4a37      	ldr	r2, [pc, #220]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c0:	6153      	str	r3, [r2, #20]
 80028c2:	4b35      	ldr	r3, [pc, #212]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d4:	2312      	movs	r3, #18
 80028d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028e0:	2304      	movs	r3, #4
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ee:	f000 fba5 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f6:	2312      	movs	r3, #18
 80028f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028fe:	2303      	movs	r3, #3
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002902:	2304      	movs	r3, #4
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	4619      	mov	r1, r3
 800290c:	4823      	ldr	r0, [pc, #140]	; (800299c <HAL_I2C_MspInit+0x120>)
 800290e:	f000 fb95 	bl	800303c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002912:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a20      	ldr	r2, [pc, #128]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 8002918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800291c:	61d3      	str	r3, [r2, #28]
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800292a:	e02e      	b.n	800298a <HAL_I2C_MspInit+0x10e>
  else if(hi2c->Instance==I2C2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <HAL_I2C_MspInit+0x124>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d129      	bne.n	800298a <HAL_I2C_MspInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	4b18      	ldr	r3, [pc, #96]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 800293c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002940:	6153      	str	r3, [r2, #20]
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800294e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002954:	2312      	movs	r3, #18
 8002956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800295c:	2303      	movs	r3, #3
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002960:	2304      	movs	r3, #4
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	4619      	mov	r1, r3
 800296a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296e:	f000 fb65 	bl	800303c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 8002978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800297c:	61d3      	str	r3, [r2, #28]
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_I2C_MspInit+0x11c>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
}
 800298a:	bf00      	nop
 800298c:	3730      	adds	r7, #48	; 0x30
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40005400 	.word	0x40005400
 8002998:	40021000 	.word	0x40021000
 800299c:	48000400 	.word	0x48000400
 80029a0:	40005800 	.word	0x40005800

080029a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	; 0x30
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3d      	ldr	r2, [pc, #244]	; (8002ab8 <HAL_SPI_MspInit+0x114>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d145      	bne.n	8002a52 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029c6:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <HAL_SPI_MspInit+0x118>)
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	4a3c      	ldr	r2, [pc, #240]	; (8002abc <HAL_SPI_MspInit+0x118>)
 80029cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029d0:	6193      	str	r3, [r2, #24]
 80029d2:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_SPI_MspInit+0x118>)
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_SPI_MspInit+0x118>)
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	4a36      	ldr	r2, [pc, #216]	; (8002abc <HAL_SPI_MspInit+0x118>)
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e8:	6153      	str	r3, [r2, #20]
 80029ea:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_SPI_MspInit+0x118>)
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f6:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_SPI_MspInit+0x118>)
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	4a30      	ldr	r2, [pc, #192]	; (8002abc <HAL_SPI_MspInit+0x118>)
 80029fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a00:	6153      	str	r3, [r2, #20]
 8002a02:	4b2e      	ldr	r3, [pc, #184]	; (8002abc <HAL_SPI_MspInit+0x118>)
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a1e:	2305      	movs	r3, #5
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	4619      	mov	r1, r3
 8002a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2c:	f000 fb06 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a30:	2308      	movs	r3, #8
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a40:	2305      	movs	r3, #5
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	4619      	mov	r1, r3
 8002a4a:	481d      	ldr	r0, [pc, #116]	; (8002ac0 <HAL_SPI_MspInit+0x11c>)
 8002a4c:	f000 faf6 	bl	800303c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a50:	e02d      	b.n	8002aae <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_SPI_MspInit+0x120>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d128      	bne.n	8002aae <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a5c:	4b17      	ldr	r3, [pc, #92]	; (8002abc <HAL_SPI_MspInit+0x118>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	4a16      	ldr	r2, [pc, #88]	; (8002abc <HAL_SPI_MspInit+0x118>)
 8002a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a66:	61d3      	str	r3, [r2, #28]
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_SPI_MspInit+0x118>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <HAL_SPI_MspInit+0x118>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	4a10      	ldr	r2, [pc, #64]	; (8002abc <HAL_SPI_MspInit+0x118>)
 8002a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7e:	6153      	str	r3, [r2, #20]
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_SPI_MspInit+0x118>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a8c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <HAL_SPI_MspInit+0x11c>)
 8002aaa:	f000 fac7 	bl	800303c <HAL_GPIO_Init>
}
 8002aae:	bf00      	nop
 8002ab0:	3730      	adds	r7, #48	; 0x30
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40013000 	.word	0x40013000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	48000400 	.word	0x48000400
 8002ac4:	40003800 	.word	0x40003800

08002ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <HAL_UART_MspInit+0x7c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d128      	bne.n	8002b3c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_UART_MspInit+0x80>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <HAL_UART_MspInit+0x80>)
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	61d3      	str	r3, [r2, #28]
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_UART_MspInit+0x80>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_UART_MspInit+0x80>)
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	4a10      	ldr	r2, [pc, #64]	; (8002b48 <HAL_UART_MspInit+0x80>)
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0c:	6153      	str	r3, [r2, #20]
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <HAL_UART_MspInit+0x80>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b1a:	230c      	movs	r3, #12
 8002b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b2a:	2307      	movs	r3, #7
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	f107 0314 	add.w	r3, r7, #20
 8002b32:	4619      	mov	r1, r3
 8002b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b38:	f000 fa80 	bl	800303c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b3c:	bf00      	nop
 8002b3e:	3728      	adds	r7, #40	; 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40004400 	.word	0x40004400
 8002b48:	40021000 	.word	0x40021000

08002b4c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <SDTimer_Handler+0x40>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <SDTimer_Handler+0x1c>
    Timer1--;
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <SDTimer_Handler+0x40>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <SDTimer_Handler+0x40>)
 8002b66:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <SDTimer_Handler+0x44>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <SDTimer_Handler+0x34>
    Timer2--;
 8002b72:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <SDTimer_Handler+0x44>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <SDTimer_Handler+0x44>)
 8002b7e:	701a      	strb	r2, [r3, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000279c 	.word	0x2000279c
 8002b90:	2000279d 	.word	0x2000279d

08002b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <NMI_Handler+0x4>

08002b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <HardFault_Handler+0x4>

08002ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <MemManage_Handler+0x4>

08002ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002baa:	e7fe      	b.n	8002baa <BusFault_Handler+0x4>

08002bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <UsageFault_Handler+0x4>

08002bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <SysTick_Handler+0x30>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <SysTick_Handler+0x30>)
 8002bec:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <SysTick_Handler+0x30>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b09      	cmp	r3, #9
 8002bf6:	d904      	bls.n	8002c02 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <SysTick_Handler+0x30>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002bfe:	f7ff ffa5 	bl	8002b4c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c02:	f000 f8c5 	bl	8002d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2000279b 	.word	0x2000279b

08002c10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(user_button_Pin);
 8002c14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c18:	f000 fbb2 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <_sbrk+0x5c>)
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <_sbrk+0x60>)
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c34:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <_sbrk+0x64>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <_sbrk+0x64>)
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <_sbrk+0x68>)
 8002c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <_sbrk+0x64>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d207      	bcs.n	8002c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c50:	f007 fd06 	bl	800a660 <__errno>
 8002c54:	4603      	mov	r3, r0
 8002c56:	220c      	movs	r2, #12
 8002c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5e:	e009      	b.n	8002c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <_sbrk+0x64>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <_sbrk+0x64>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <_sbrk+0x64>)
 8002c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c72:	68fb      	ldr	r3, [r7, #12]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20010000 	.word	0x20010000
 8002c80:	00000400 	.word	0x00000400
 8002c84:	200027a0 	.word	0x200027a0
 8002c88:	200029f0 	.word	0x200029f0

08002c8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <SystemInit+0x20>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	4a05      	ldr	r2, [pc, #20]	; (8002cac <SystemInit+0x20>)
 8002c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb4:	480d      	ldr	r0, [pc, #52]	; (8002cec <LoopForever+0x6>)
  ldr r1, =_edata
 8002cb6:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <LoopForever+0xe>)
  movs r3, #0
 8002cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cbc:	e002      	b.n	8002cc4 <LoopCopyDataInit>

08002cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc2:	3304      	adds	r3, #4

08002cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc8:	d3f9      	bcc.n	8002cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cca:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ccc:	4c0b      	ldr	r4, [pc, #44]	; (8002cfc <LoopForever+0x16>)
  movs r3, #0
 8002cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd0:	e001      	b.n	8002cd6 <LoopFillZerobss>

08002cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd4:	3204      	adds	r2, #4

08002cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd8:	d3fb      	bcc.n	8002cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cda:	f7ff ffd7 	bl	8002c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cde:	f007 fcc5 	bl	800a66c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ce2:	f7ff f851 	bl	8001d88 <main>

08002ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ce6:	e7fe      	b.n	8002ce6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ce8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002cf4:	0800bb88 	.word	0x0800bb88
  ldr r2, =_sbss
 8002cf8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002cfc:	200029ec 	.word	0x200029ec

08002d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d00:	e7fe      	b.n	8002d00 <ADC1_2_IRQHandler>
	...

08002d04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <HAL_Init+0x28>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a07      	ldr	r2, [pc, #28]	; (8002d2c <HAL_Init+0x28>)
 8002d0e:	f043 0310 	orr.w	r3, r3, #16
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d14:	2003      	movs	r0, #3
 8002d16:	f000 f94f 	bl	8002fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f000 f808 	bl	8002d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d20:	f7ff fd88 	bl	8002834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40022000 	.word	0x40022000

08002d30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_InitTick+0x54>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_InitTick+0x58>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f967 	bl	8003022 <HAL_SYSTICK_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00e      	b.n	8002d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d80a      	bhi.n	8002d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d64:	2200      	movs	r2, #0
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f000 f92f 	bl	8002fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d70:	4a06      	ldr	r2, [pc, #24]	; (8002d8c <HAL_InitTick+0x5c>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000004 	.word	0x20000004
 8002d88:	2000000c 	.word	0x2000000c
 8002d8c:	20000008 	.word	0x20000008

08002d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_IncTick+0x20>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_IncTick+0x24>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <HAL_IncTick+0x24>)
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	2000000c 	.word	0x2000000c
 8002db4:	200027a4 	.word	0x200027a4

08002db8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;  
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_GetTick+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	200027a4 	.word	0x200027a4

08002dd0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff ffee 	bl	8002db8 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d005      	beq.n	8002df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_Delay+0x44>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002df6:	bf00      	nop
 8002df8:	f7ff ffde 	bl	8002db8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d8f7      	bhi.n	8002df8 <HAL_Delay+0x28>
  {
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2000000c 	.word	0x2000000c

08002e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e34:	4013      	ands	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4a:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	60d3      	str	r3, [r2, #12]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <__NVIC_GetPriorityGrouping+0x18>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	f003 0307 	and.w	r3, r3, #7
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	db0b      	blt.n	8002ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	4907      	ldr	r1, [pc, #28]	; (8002eb4 <__NVIC_EnableIRQ+0x38>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000e100 	.word	0xe000e100

08002eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db0a      	blt.n	8002ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	490c      	ldr	r1, [pc, #48]	; (8002f04 <__NVIC_SetPriority+0x4c>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	440b      	add	r3, r1
 8002edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee0:	e00a      	b.n	8002ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	4908      	ldr	r1, [pc, #32]	; (8002f08 <__NVIC_SetPriority+0x50>)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	761a      	strb	r2, [r3, #24]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000e100 	.word	0xe000e100
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf28      	it	cs
 8002f2a:	2304      	movcs	r3, #4
 8002f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d902      	bls.n	8002f3c <NVIC_EncodePriority+0x30>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	e000      	b.n	8002f3e <NVIC_EncodePriority+0x32>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	401a      	ands	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f54:	f04f 31ff 	mov.w	r1, #4294967295
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43d9      	mvns	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	4313      	orrs	r3, r2
         );
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f84:	d301      	bcc.n	8002f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00f      	b.n	8002faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <SysTick_Config+0x40>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f92:	210f      	movs	r1, #15
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f7ff ff8e 	bl	8002eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <SysTick_Config+0x40>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <SysTick_Config+0x40>)
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	e000e010 	.word	0xe000e010

08002fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ff29 	bl	8002e18 <__NVIC_SetPriorityGrouping>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe0:	f7ff ff3e 	bl	8002e60 <__NVIC_GetPriorityGrouping>
 8002fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	f7ff ff8e 	bl	8002f0c <NVIC_EncodePriority>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff5d 	bl	8002eb8 <__NVIC_SetPriority>
}
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff31 	bl	8002e7c <__NVIC_EnableIRQ>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ffa2 	bl	8002f74 <SysTick_Config>
 8003030:	4603      	mov	r3, r0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304a:	e160      	b.n	800330e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	2101      	movs	r1, #1
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	4013      	ands	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8152 	beq.w	8003308 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d005      	beq.n	800307c <HAL_GPIO_Init+0x40>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d130      	bne.n	80030de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	2203      	movs	r2, #3
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b2:	2201      	movs	r2, #1
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 0201 	and.w	r2, r3, #1
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d017      	beq.n	800311a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d123      	bne.n	800316e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	08da      	lsrs	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3208      	adds	r2, #8
 800312e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	220f      	movs	r2, #15
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	08da      	lsrs	r2, r3, #3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3208      	adds	r2, #8
 8003168:	6939      	ldr	r1, [r7, #16]
 800316a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	2203      	movs	r2, #3
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0203 	and.w	r2, r3, #3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80ac 	beq.w	8003308 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b0:	4b5e      	ldr	r3, [pc, #376]	; (800332c <HAL_GPIO_Init+0x2f0>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	4a5d      	ldr	r2, [pc, #372]	; (800332c <HAL_GPIO_Init+0x2f0>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6193      	str	r3, [r2, #24]
 80031bc:	4b5b      	ldr	r3, [pc, #364]	; (800332c <HAL_GPIO_Init+0x2f0>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031c8:	4a59      	ldr	r2, [pc, #356]	; (8003330 <HAL_GPIO_Init+0x2f4>)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	3302      	adds	r3, #2
 80031d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031f2:	d025      	beq.n	8003240 <HAL_GPIO_Init+0x204>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a4f      	ldr	r2, [pc, #316]	; (8003334 <HAL_GPIO_Init+0x2f8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d01f      	beq.n	800323c <HAL_GPIO_Init+0x200>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a4e      	ldr	r2, [pc, #312]	; (8003338 <HAL_GPIO_Init+0x2fc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d019      	beq.n	8003238 <HAL_GPIO_Init+0x1fc>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a4d      	ldr	r2, [pc, #308]	; (800333c <HAL_GPIO_Init+0x300>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <HAL_GPIO_Init+0x1f8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a4c      	ldr	r2, [pc, #304]	; (8003340 <HAL_GPIO_Init+0x304>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00d      	beq.n	8003230 <HAL_GPIO_Init+0x1f4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a4b      	ldr	r2, [pc, #300]	; (8003344 <HAL_GPIO_Init+0x308>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d007      	beq.n	800322c <HAL_GPIO_Init+0x1f0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a4a      	ldr	r2, [pc, #296]	; (8003348 <HAL_GPIO_Init+0x30c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_GPIO_Init+0x1ec>
 8003224:	2306      	movs	r3, #6
 8003226:	e00c      	b.n	8003242 <HAL_GPIO_Init+0x206>
 8003228:	2307      	movs	r3, #7
 800322a:	e00a      	b.n	8003242 <HAL_GPIO_Init+0x206>
 800322c:	2305      	movs	r3, #5
 800322e:	e008      	b.n	8003242 <HAL_GPIO_Init+0x206>
 8003230:	2304      	movs	r3, #4
 8003232:	e006      	b.n	8003242 <HAL_GPIO_Init+0x206>
 8003234:	2303      	movs	r3, #3
 8003236:	e004      	b.n	8003242 <HAL_GPIO_Init+0x206>
 8003238:	2302      	movs	r3, #2
 800323a:	e002      	b.n	8003242 <HAL_GPIO_Init+0x206>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_GPIO_Init+0x206>
 8003240:	2300      	movs	r3, #0
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	f002 0203 	and.w	r2, r2, #3
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	4093      	lsls	r3, r2
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003252:	4937      	ldr	r1, [pc, #220]	; (8003330 <HAL_GPIO_Init+0x2f4>)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003260:	4b3a      	ldr	r3, [pc, #232]	; (800334c <HAL_GPIO_Init+0x310>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003284:	4a31      	ldr	r2, [pc, #196]	; (800334c <HAL_GPIO_Init+0x310>)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800328a:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_GPIO_Init+0x310>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032ae:	4a27      	ldr	r2, [pc, #156]	; (800334c <HAL_GPIO_Init+0x310>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032b4:	4b25      	ldr	r3, [pc, #148]	; (800334c <HAL_GPIO_Init+0x310>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <HAL_GPIO_Init+0x310>)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032de:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_GPIO_Init+0x310>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <HAL_GPIO_Init+0x310>)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3301      	adds	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f ae97 	bne.w	800304c <HAL_GPIO_Init+0x10>
  }
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40021000 	.word	0x40021000
 8003330:	40010000 	.word	0x40010000
 8003334:	48000400 	.word	0x48000400
 8003338:	48000800 	.word	0x48000800
 800333c:	48000c00 	.word	0x48000c00
 8003340:	48001000 	.word	0x48001000
 8003344:	48001400 	.word	0x48001400
 8003348:	48001800 	.word	0x48001800
 800334c:	40010400 	.word	0x40010400

08003350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
 800335c:	4613      	mov	r3, r2
 800335e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003360:	787b      	ldrb	r3, [r7, #1]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800336c:	e002      	b.n	8003374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003396:	4a05      	ldr	r2, [pc, #20]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff f88e 	bl	80024c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e081      	b.n	80034c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fa50 	bl	800287c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2224      	movs	r2, #36	; 0x24
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003400:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003410:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	e006      	b.n	8003438 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003436:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d104      	bne.n	800344a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003448:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69d9      	ldr	r1, [r3, #28]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1a      	ldr	r2, [r3, #32]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	4608      	mov	r0, r1
 80034da:	4611      	mov	r1, r2
 80034dc:	461a      	mov	r2, r3
 80034de:	4603      	mov	r3, r0
 80034e0:	817b      	strh	r3, [r7, #10]
 80034e2:	460b      	mov	r3, r1
 80034e4:	813b      	strh	r3, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	f040 80f9 	bne.w	80036ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_I2C_Mem_Write+0x34>
 80034fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d105      	bne.n	8003510 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0ed      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_I2C_Mem_Write+0x4e>
 800351a:	2302      	movs	r3, #2
 800351c:	e0e6      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003526:	f7ff fc47 	bl	8002db8 <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2319      	movs	r3, #25
 8003532:	2201      	movs	r2, #1
 8003534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fbcb 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0d1      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2221      	movs	r2, #33	; 0x21
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2240      	movs	r2, #64	; 0x40
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a3a      	ldr	r2, [r7, #32]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003570:	88f8      	ldrh	r0, [r7, #6]
 8003572:	893a      	ldrh	r2, [r7, #8]
 8003574:	8979      	ldrh	r1, [r7, #10]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	4603      	mov	r3, r0
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 fadb 	bl	8003b3c <I2C_RequestMemoryWrite>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0a9      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	2bff      	cmp	r3, #255	; 0xff
 80035a0:	d90e      	bls.n	80035c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	22ff      	movs	r2, #255	; 0xff
 80035a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	8979      	ldrh	r1, [r7, #10]
 80035b0:	2300      	movs	r3, #0
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fcbd 	bl	8003f38 <I2C_TransferConfig>
 80035be:	e00f      	b.n	80035e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	8979      	ldrh	r1, [r7, #10]
 80035d2:	2300      	movs	r3, #0
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fcac 	bl	8003f38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fbb5 	bl	8003d54 <I2C_WaitOnTXISFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e07b      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d034      	beq.n	8003698 <HAL_I2C_Mem_Write+0x1c8>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	d130      	bne.n	8003698 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	2200      	movs	r2, #0
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fb47 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e04d      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	2bff      	cmp	r3, #255	; 0xff
 8003658:	d90e      	bls.n	8003678 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	22ff      	movs	r2, #255	; 0xff
 800365e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	b2da      	uxtb	r2, r3
 8003666:	8979      	ldrh	r1, [r7, #10]
 8003668:	2300      	movs	r3, #0
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fc61 	bl	8003f38 <I2C_TransferConfig>
 8003676:	e00f      	b.n	8003698 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003686:	b2da      	uxtb	r2, r3
 8003688:	8979      	ldrh	r1, [r7, #10]
 800368a:	2300      	movs	r3, #0
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fc50 	bl	8003f38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d19e      	bne.n	80035e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fb94 	bl	8003dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e01a      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2220      	movs	r2, #32
 80036bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6859      	ldr	r1, [r3, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <HAL_I2C_Mem_Write+0x224>)
 80036ca:	400b      	ands	r3, r1
 80036cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e000      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	fe00e800 	.word	0xfe00e800

080036f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	461a      	mov	r2, r3
 8003706:	4603      	mov	r3, r0
 8003708:	817b      	strh	r3, [r7, #10]
 800370a:	460b      	mov	r3, r1
 800370c:	813b      	strh	r3, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b20      	cmp	r3, #32
 800371c:	f040 80fd 	bne.w	800391a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_I2C_Mem_Read+0x34>
 8003726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003732:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0f1      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Mem_Read+0x4e>
 8003742:	2302      	movs	r3, #2
 8003744:	e0ea      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800374e:	f7ff fb33 	bl	8002db8 <HAL_GetTick>
 8003752:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2319      	movs	r3, #25
 800375a:	2201      	movs	r2, #1
 800375c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fab7 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0d5      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2222      	movs	r2, #34	; 0x22
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2240      	movs	r2, #64	; 0x40
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a3a      	ldr	r2, [r7, #32]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003790:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003798:	88f8      	ldrh	r0, [r7, #6]
 800379a:	893a      	ldrh	r2, [r7, #8]
 800379c:	8979      	ldrh	r1, [r7, #10]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	4603      	mov	r3, r0
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fa1b 	bl	8003be4 <I2C_RequestMemoryRead>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0ad      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2bff      	cmp	r3, #255	; 0xff
 80037c8:	d90e      	bls.n	80037e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	8979      	ldrh	r1, [r7, #10]
 80037d8:	4b52      	ldr	r3, [pc, #328]	; (8003924 <HAL_I2C_Mem_Read+0x22c>)
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fba9 	bl	8003f38 <I2C_TransferConfig>
 80037e6:	e00f      	b.n	8003808 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	8979      	ldrh	r1, [r7, #10]
 80037fa:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <HAL_I2C_Mem_Read+0x22c>)
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fb98 	bl	8003f38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	2200      	movs	r2, #0
 8003810:	2104      	movs	r1, #4
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 fa5e 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07c      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d034      	beq.n	80038c8 <HAL_I2C_Mem_Read+0x1d0>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	2b00      	cmp	r3, #0
 8003864:	d130      	bne.n	80038c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	2200      	movs	r2, #0
 800386e:	2180      	movs	r1, #128	; 0x80
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fa2f 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e04d      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2bff      	cmp	r3, #255	; 0xff
 8003888:	d90e      	bls.n	80038a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	22ff      	movs	r2, #255	; 0xff
 800388e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	b2da      	uxtb	r2, r3
 8003896:	8979      	ldrh	r1, [r7, #10]
 8003898:	2300      	movs	r3, #0
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fb49 	bl	8003f38 <I2C_TransferConfig>
 80038a6:	e00f      	b.n	80038c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	8979      	ldrh	r1, [r7, #10]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fb38 	bl	8003f38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d19a      	bne.n	8003808 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa7c 	bl	8003dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e01a      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2220      	movs	r2, #32
 80038ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_I2C_Mem_Read+0x230>)
 80038fa:	400b      	ands	r3, r1
 80038fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e000      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
  }
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	80002400 	.word	0x80002400
 8003928:	fe00e800 	.word	0xfe00e800

0800392c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	; 0x28
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	460b      	mov	r3, r1
 800393a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b20      	cmp	r3, #32
 800394a:	f040 80f1 	bne.w	8003b30 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395c:	d101      	bne.n	8003962 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
 8003960:	e0e7      	b.n	8003b32 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_I2C_IsDeviceReady+0x44>
 800396c:	2302      	movs	r3, #2
 800396e:	e0e0      	b.n	8003b32 <HAL_I2C_IsDeviceReady+0x206>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_I2C_IsDeviceReady+0x72>
 800398e:	897b      	ldrh	r3, [r7, #10]
 8003990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003994:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800399c:	e004      	b.n	80039a8 <HAL_I2C_IsDeviceReady+0x7c>
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80039ae:	f7ff fa03 	bl	8002db8 <HAL_GetTick>
 80039b2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b20      	cmp	r3, #32
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80039e0:	e034      	b.n	8003a4c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d01a      	beq.n	8003a20 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039ea:	f7ff f9e5 	bl	8002db8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d302      	bcc.n	8003a00 <HAL_I2C_IsDeviceReady+0xd4>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10f      	bne.n	8003a20 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	f043 0220 	orr.w	r2, r3, #32
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e088      	b.n	8003b32 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003a4c:	7ffb      	ldrb	r3, [r7, #31]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d102      	bne.n	8003a58 <HAL_I2C_IsDeviceReady+0x12c>
 8003a52:	7fbb      	ldrb	r3, [r7, #30]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0c4      	beq.n	80039e2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d01a      	beq.n	8003a9c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2120      	movs	r1, #32
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f92f 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e058      	b.n	8003b32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2220      	movs	r2, #32
 8003a86:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e04a      	b.n	8003b32 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2120      	movs	r1, #32
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f914 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e03d      	b.n	8003b32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2210      	movs	r2, #16
 8003abc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d118      	bne.n	8003b00 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003adc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2120      	movs	r1, #32
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f8f3 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e01c      	b.n	8003b32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2220      	movs	r2, #32
 8003afe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	3301      	adds	r3, #1
 8003b04:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	f63f af3b 	bhi.w	8003986 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <I2C_RequestMemoryWrite+0xa4>)
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f9e7 	bl	8003f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f8f0 	bl	8003d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e02c      	b.n	8003bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d105      	bne.n	8003b90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b84:	893b      	ldrh	r3, [r7, #8]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b8e:	e015      	b.n	8003bbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b90:	893b      	ldrh	r3, [r7, #8]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f8d6 	bl	8003d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e012      	b.n	8003bd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb2:	893b      	ldrh	r3, [r7, #8]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f884 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	80002000 	.word	0x80002000

08003be4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	817b      	strh	r3, [r7, #10]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	813b      	strh	r3, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	8979      	ldrh	r1, [r7, #10]
 8003c04:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <I2C_RequestMemoryRead+0xa4>)
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f994 	bl	8003f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	69b9      	ldr	r1, [r7, #24]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f89d 	bl	8003d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e02c      	b.n	8003c7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d105      	bne.n	8003c36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c2a:	893b      	ldrh	r3, [r7, #8]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28
 8003c34:	e015      	b.n	8003c62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c36:	893b      	ldrh	r3, [r7, #8]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	69b9      	ldr	r1, [r7, #24]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f883 	bl	8003d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e012      	b.n	8003c7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c58:	893b      	ldrh	r3, [r7, #8]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2140      	movs	r1, #64	; 0x40
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f831 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	80002000 	.word	0x80002000

08003c8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d103      	bne.n	8003caa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d007      	beq.n	8003cc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	619a      	str	r2, [r3, #24]
  }
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce4:	e022      	b.n	8003d2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cec:	d01e      	beq.n	8003d2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cee:	f7ff f863 	bl	8002db8 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d302      	bcc.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d113      	bne.n	8003d2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e00f      	b.n	8003d4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4013      	ands	r3, r2
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d0cd      	beq.n	8003ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d60:	e02c      	b.n	8003dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f870 	bl	8003e4c <I2C_IsAcknowledgeFailed>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e02a      	b.n	8003dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d01e      	beq.n	8003dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7e:	f7ff f81b 	bl	8002db8 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d113      	bne.n	8003dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	f043 0220 	orr.w	r2, r3, #32
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e007      	b.n	8003dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d1cb      	bne.n	8003d62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003de0:	e028      	b.n	8003e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f830 	bl	8003e4c <I2C_IsAcknowledgeFailed>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e026      	b.n	8003e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df6:	f7fe ffdf 	bl	8002db8 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d302      	bcc.n	8003e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d113      	bne.n	8003e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e007      	b.n	8003e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d1cf      	bne.n	8003de2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d161      	bne.n	8003f2a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e74:	d02b      	beq.n	8003ece <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e84:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e86:	e022      	b.n	8003ece <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8e:	d01e      	beq.n	8003ece <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e90:	f7fe ff92 	bl	8002db8 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <I2C_IsAcknowledgeFailed+0x5a>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d113      	bne.n	8003ece <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e02e      	b.n	8003f2c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d1d5      	bne.n	8003e88 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f7ff fecd 	bl	8003c8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6859      	ldr	r1, [r3, #4]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <I2C_IsAcknowledgeFailed+0xe8>)
 8003efe:	400b      	ands	r3, r1
 8003f00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	f043 0204 	orr.w	r2, r3, #4
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	fe00e800 	.word	0xfe00e800

08003f38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	460b      	mov	r3, r1
 8003f44:	817b      	strh	r3, [r7, #10]
 8003f46:	4613      	mov	r3, r2
 8003f48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	0d5b      	lsrs	r3, r3, #21
 8003f54:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f58:	4b0d      	ldr	r3, [pc, #52]	; (8003f90 <I2C_TransferConfig+0x58>)
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	ea02 0103 	and.w	r1, r2, r3
 8003f62:	897b      	ldrh	r3, [r7, #10]
 8003f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f68:	7a7b      	ldrb	r3, [r7, #9]
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	03ff63ff 	.word	0x03ff63ff

08003f94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d138      	bne.n	800401c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e032      	b.n	800401e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2224      	movs	r2, #36	; 0x24
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fe6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6819      	ldr	r1, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b20      	cmp	r3, #32
 800403e:	d139      	bne.n	80040b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800404a:	2302      	movs	r3, #2
 800404c:	e033      	b.n	80040b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2224      	movs	r2, #36	; 0x24
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800407c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
  }
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f001 b83a 	b.w	800515e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 816f 	beq.w	80043de <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004100:	4bb5      	ldr	r3, [pc, #724]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b04      	cmp	r3, #4
 800410a:	d00c      	beq.n	8004126 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800410c:	4bb2      	ldr	r3, [pc, #712]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 030c 	and.w	r3, r3, #12
 8004114:	2b08      	cmp	r3, #8
 8004116:	d15c      	bne.n	80041d2 <HAL_RCC_OscConfig+0x10e>
 8004118:	4baf      	ldr	r3, [pc, #700]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004124:	d155      	bne.n	80041d2 <HAL_RCC_OscConfig+0x10e>
 8004126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800412a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800413a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b01      	cmp	r3, #1
 8004150:	d102      	bne.n	8004158 <HAL_RCC_OscConfig+0x94>
 8004152:	4ba1      	ldr	r3, [pc, #644]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	e015      	b.n	8004184 <HAL_RCC_OscConfig+0xc0>
 8004158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800415c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004164:	fa93 f3a3 	rbit	r3, r3
 8004168:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800416c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004170:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004174:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004180:	4b95      	ldr	r3, [pc, #596]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004188:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800418c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004190:	fa92 f2a2 	rbit	r2, r2
 8004194:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004198:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800419c:	fab2 f282 	clz	r2, r2
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	f042 0220 	orr.w	r2, r2, #32
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	f002 021f 	and.w	r2, r2, #31
 80041ac:	2101      	movs	r1, #1
 80041ae:	fa01 f202 	lsl.w	r2, r1, r2
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8111 	beq.w	80043dc <HAL_RCC_OscConfig+0x318>
 80041ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 8108 	bne.w	80043dc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f000 bfc6 	b.w	800515e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x12e>
 80041e4:	4b7c      	ldr	r3, [pc, #496]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a7b      	ldr	r2, [pc, #492]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 80041ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	e036      	b.n	8004260 <HAL_RCC_OscConfig+0x19c>
 80041f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x158>
 8004202:	4b75      	ldr	r3, [pc, #468]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a74      	ldr	r2, [pc, #464]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b72      	ldr	r3, [pc, #456]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a71      	ldr	r2, [pc, #452]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e021      	b.n	8004260 <HAL_RCC_OscConfig+0x19c>
 800421c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004220:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0x184>
 800422e:	4b6a      	ldr	r3, [pc, #424]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a69      	ldr	r2, [pc, #420]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b67      	ldr	r3, [pc, #412]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a66      	ldr	r2, [pc, #408]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e00b      	b.n	8004260 <HAL_RCC_OscConfig+0x19c>
 8004248:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a62      	ldr	r2, [pc, #392]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 800424e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4b60      	ldr	r3, [pc, #384]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a5f      	ldr	r2, [pc, #380]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 800425a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004264:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d059      	beq.n	8004324 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fe fda2 	bl	8002db8 <HAL_GetTick>
 8004274:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800427a:	f7fe fd9d 	bl	8002db8 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d902      	bls.n	8004290 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	f000 bf67 	b.w	800515e <HAL_RCC_OscConfig+0x109a>
 8004290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004294:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80042a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a8:	fab3 f383 	clz	r3, r3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d102      	bne.n	80042c2 <HAL_RCC_OscConfig+0x1fe>
 80042bc:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	e015      	b.n	80042ee <HAL_RCC_OscConfig+0x22a>
 80042c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80042ce:	fa93 f3a3 	rbit	r3, r3
 80042d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80042d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80042de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80042ea:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042f2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80042f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80042fa:	fa92 f2a2 	rbit	r2, r2
 80042fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004302:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004306:	fab2 f282 	clz	r2, r2
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	f042 0220 	orr.w	r2, r2, #32
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	f002 021f 	and.w	r2, r2, #31
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f202 	lsl.w	r2, r1, r2
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0ab      	beq.n	800427a <HAL_RCC_OscConfig+0x1b6>
 8004322:	e05c      	b.n	80043de <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7fe fd48 	bl	8002db8 <HAL_GetTick>
 8004328:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432c:	e00a      	b.n	8004344 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800432e:	f7fe fd43 	bl	8002db8 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d902      	bls.n	8004344 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	f000 bf0d 	b.w	800515e <HAL_RCC_OscConfig+0x109a>
 8004344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004348:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004350:	fa93 f3a3 	rbit	r3, r3
 8004354:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004358:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435c:	fab3 f383 	clz	r3, r3
 8004360:	b2db      	uxtb	r3, r3
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d102      	bne.n	8004376 <HAL_RCC_OscConfig+0x2b2>
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	e015      	b.n	80043a2 <HAL_RCC_OscConfig+0x2de>
 8004376:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800437a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004382:	fa93 f3a3 	rbit	r3, r3
 8004386:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800438a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800438e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004392:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004396:	fa93 f3a3 	rbit	r3, r3
 800439a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <HAL_RCC_OscConfig+0x314>)
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043a6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80043aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80043ae:	fa92 f2a2 	rbit	r2, r2
 80043b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80043b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80043ba:	fab2 f282 	clz	r2, r2
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	f042 0220 	orr.w	r2, r2, #32
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	f002 021f 	and.w	r2, r2, #31
 80043ca:	2101      	movs	r1, #1
 80043cc:	fa01 f202 	lsl.w	r2, r1, r2
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1ab      	bne.n	800432e <HAL_RCC_OscConfig+0x26a>
 80043d6:	e002      	b.n	80043de <HAL_RCC_OscConfig+0x31a>
 80043d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 817f 	beq.w	80046f2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043f4:	4ba7      	ldr	r3, [pc, #668]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00c      	beq.n	800441a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004400:	4ba4      	ldr	r3, [pc, #656]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b08      	cmp	r3, #8
 800440a:	d173      	bne.n	80044f4 <HAL_RCC_OscConfig+0x430>
 800440c:	4ba1      	ldr	r3, [pc, #644]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004418:	d16c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x430>
 800441a:	2302      	movs	r3, #2
 800441c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004424:	fa93 f3a3 	rbit	r3, r3
 8004428:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800442c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004430:	fab3 f383 	clz	r3, r3
 8004434:	b2db      	uxtb	r3, r3
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	b2db      	uxtb	r3, r3
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d102      	bne.n	800444a <HAL_RCC_OscConfig+0x386>
 8004444:	4b93      	ldr	r3, [pc, #588]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	e013      	b.n	8004472 <HAL_RCC_OscConfig+0x3ae>
 800444a:	2302      	movs	r3, #2
 800444c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004450:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800445c:	2302      	movs	r3, #2
 800445e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004462:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004466:	fa93 f3a3 	rbit	r3, r3
 800446a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800446e:	4b89      	ldr	r3, [pc, #548]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2202      	movs	r2, #2
 8004474:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004478:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800447c:	fa92 f2a2 	rbit	r2, r2
 8004480:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004484:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004488:	fab2 f282 	clz	r2, r2
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	f042 0220 	orr.w	r2, r2, #32
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	f002 021f 	and.w	r2, r2, #31
 8004498:	2101      	movs	r1, #1
 800449a:	fa01 f202 	lsl.w	r2, r1, r2
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <HAL_RCC_OscConfig+0x3f6>
 80044a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d002      	beq.n	80044ba <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f000 be52 	b.w	800515e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ba:	4b76      	ldr	r3, [pc, #472]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	21f8      	movs	r1, #248	; 0xf8
 80044d0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80044d8:	fa91 f1a1 	rbit	r1, r1
 80044dc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80044e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80044e4:	fab1 f181 	clz	r1, r1
 80044e8:	b2c9      	uxtb	r1, r1
 80044ea:	408b      	lsls	r3, r1
 80044ec:	4969      	ldr	r1, [pc, #420]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f2:	e0fe      	b.n	80046f2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8088 	beq.w	8004616 <HAL_RCC_OscConfig+0x552>
 8004506:	2301      	movs	r3, #1
 8004508:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004518:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004526:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	461a      	mov	r2, r3
 800452e:	2301      	movs	r3, #1
 8004530:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004532:	f7fe fc41 	bl	8002db8 <HAL_GetTick>
 8004536:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800453c:	f7fe fc3c 	bl	8002db8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d902      	bls.n	8004552 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	f000 be06 	b.w	800515e <HAL_RCC_OscConfig+0x109a>
 8004552:	2302      	movs	r3, #2
 8004554:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800455c:	fa93 f3a3 	rbit	r3, r3
 8004560:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004564:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004568:	fab3 f383 	clz	r3, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	b2db      	uxtb	r3, r3
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d102      	bne.n	8004582 <HAL_RCC_OscConfig+0x4be>
 800457c:	4b45      	ldr	r3, [pc, #276]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	e013      	b.n	80045aa <HAL_RCC_OscConfig+0x4e6>
 8004582:	2302      	movs	r3, #2
 8004584:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004588:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004594:	2302      	movs	r3, #2
 8004596:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800459a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80045a6:	4b3b      	ldr	r3, [pc, #236]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2202      	movs	r2, #2
 80045ac:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80045b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80045b4:	fa92 f2a2 	rbit	r2, r2
 80045b8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80045bc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80045c0:	fab2 f282 	clz	r2, r2
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	f042 0220 	orr.w	r2, r2, #32
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	f002 021f 	and.w	r2, r2, #31
 80045d0:	2101      	movs	r1, #1
 80045d2:	fa01 f202 	lsl.w	r2, r1, r2
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0af      	beq.n	800453c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045dc:	4b2d      	ldr	r3, [pc, #180]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	21f8      	movs	r1, #248	; 0xf8
 80045f2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80045fa:	fa91 f1a1 	rbit	r1, r1
 80045fe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004602:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004606:	fab1 f181 	clz	r1, r1
 800460a:	b2c9      	uxtb	r1, r1
 800460c:	408b      	lsls	r3, r1
 800460e:	4921      	ldr	r1, [pc, #132]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 8004610:	4313      	orrs	r3, r2
 8004612:	600b      	str	r3, [r1, #0]
 8004614:	e06d      	b.n	80046f2 <HAL_RCC_OscConfig+0x62e>
 8004616:	2301      	movs	r3, #1
 8004618:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004628:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462c:	fab3 f383 	clz	r3, r3
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004636:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	461a      	mov	r2, r3
 800463e:	2300      	movs	r3, #0
 8004640:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7fe fbb9 	bl	8002db8 <HAL_GetTick>
 8004646:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464a:	e00a      	b.n	8004662 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800464c:	f7fe fbb4 	bl	8002db8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d902      	bls.n	8004662 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	f000 bd7e 	b.w	800515e <HAL_RCC_OscConfig+0x109a>
 8004662:	2302      	movs	r3, #2
 8004664:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800466c:	fa93 f3a3 	rbit	r3, r3
 8004670:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004674:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <HAL_RCC_OscConfig+0x5d4>
 800468c:	4b01      	ldr	r3, [pc, #4]	; (8004694 <HAL_RCC_OscConfig+0x5d0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	e016      	b.n	80046c0 <HAL_RCC_OscConfig+0x5fc>
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000
 8004698:	2302      	movs	r3, #2
 800469a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046a2:	fa93 f3a3 	rbit	r3, r3
 80046a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80046aa:	2302      	movs	r3, #2
 80046ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80046b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046bc:	4bbf      	ldr	r3, [pc, #764]	; (80049bc <HAL_RCC_OscConfig+0x8f8>)
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2202      	movs	r2, #2
 80046c2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80046c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80046ca:	fa92 f2a2 	rbit	r2, r2
 80046ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80046d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80046d6:	fab2 f282 	clz	r2, r2
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	f042 0220 	orr.w	r2, r2, #32
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	f002 021f 	and.w	r2, r2, #31
 80046e6:	2101      	movs	r1, #1
 80046e8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ac      	bne.n	800464c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8113 	beq.w	800492e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800470c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d07c      	beq.n	8004812 <HAL_RCC_OscConfig+0x74e>
 8004718:	2301      	movs	r3, #1
 800471a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800472a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	4ba2      	ldr	r3, [pc, #648]	; (80049c0 <HAL_RCC_OscConfig+0x8fc>)
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	461a      	mov	r2, r3
 800473e:	2301      	movs	r3, #1
 8004740:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004742:	f7fe fb39 	bl	8002db8 <HAL_GetTick>
 8004746:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474a:	e00a      	b.n	8004762 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800474c:	f7fe fb34 	bl	8002db8 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d902      	bls.n	8004762 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	f000 bcfe 	b.w	800515e <HAL_RCC_OscConfig+0x109a>
 8004762:	2302      	movs	r3, #2
 8004764:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800476c:	fa93 f2a3 	rbit	r2, r3
 8004770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004774:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800477e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004782:	2202      	movs	r2, #2
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800478a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	fa93 f2a3 	rbit	r2, r3
 8004794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047a6:	2202      	movs	r2, #2
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	fa93 f2a3 	rbit	r2, r3
 80047b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80047c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c2:	4b7e      	ldr	r3, [pc, #504]	; (80049bc <HAL_RCC_OscConfig+0x8f8>)
 80047c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80047ce:	2102      	movs	r1, #2
 80047d0:	6019      	str	r1, [r3, #0]
 80047d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	fa93 f1a3 	rbit	r1, r3
 80047e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047e8:	6019      	str	r1, [r3, #0]
  return result;
 80047ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	fab3 f383 	clz	r3, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2101      	movs	r1, #1
 8004806:	fa01 f303 	lsl.w	r3, r1, r3
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d09d      	beq.n	800474c <HAL_RCC_OscConfig+0x688>
 8004810:	e08d      	b.n	800492e <HAL_RCC_OscConfig+0x86a>
 8004812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004816:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004822:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	fa93 f2a3 	rbit	r2, r3
 800482c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004830:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004834:	601a      	str	r2, [r3, #0]
  return result;
 8004836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800483a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800483e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	4b5d      	ldr	r3, [pc, #372]	; (80049c0 <HAL_RCC_OscConfig+0x8fc>)
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	461a      	mov	r2, r3
 8004850:	2300      	movs	r3, #0
 8004852:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004854:	f7fe fab0 	bl	8002db8 <HAL_GetTick>
 8004858:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485c:	e00a      	b.n	8004874 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485e:	f7fe faab 	bl	8002db8 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d902      	bls.n	8004874 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	f000 bc75 	b.w	800515e <HAL_RCC_OscConfig+0x109a>
 8004874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004878:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800487c:	2202      	movs	r2, #2
 800487e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004884:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	fa93 f2a3 	rbit	r2, r3
 800488e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004892:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800489c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048a0:	2202      	movs	r2, #2
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	fa93 f2a3 	rbit	r2, r3
 80048b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80048c4:	2202      	movs	r2, #2
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	fa93 f2a3 	rbit	r2, r3
 80048d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80048de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e0:	4b36      	ldr	r3, [pc, #216]	; (80049bc <HAL_RCC_OscConfig+0x8f8>)
 80048e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80048ec:	2102      	movs	r1, #2
 80048ee:	6019      	str	r1, [r3, #0]
 80048f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	fa93 f1a3 	rbit	r1, r3
 80048fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004902:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004906:	6019      	str	r1, [r3, #0]
  return result;
 8004908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800490c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2101      	movs	r1, #1
 8004924:	fa01 f303 	lsl.w	r3, r1, r3
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d197      	bne.n	800485e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800492e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004932:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 81a5 	beq.w	8004c8e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004944:	2300      	movs	r3, #0
 8004946:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494a:	4b1c      	ldr	r3, [pc, #112]	; (80049bc <HAL_RCC_OscConfig+0x8f8>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004956:	4b19      	ldr	r3, [pc, #100]	; (80049bc <HAL_RCC_OscConfig+0x8f8>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	4a18      	ldr	r2, [pc, #96]	; (80049bc <HAL_RCC_OscConfig+0x8f8>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	61d3      	str	r3, [r2, #28]
 8004962:	4b16      	ldr	r3, [pc, #88]	; (80049bc <HAL_RCC_OscConfig+0x8f8>)
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800496a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800496e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004978:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800497c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <HAL_RCC_OscConfig+0x900>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d121      	bne.n	80049d4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004990:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <HAL_RCC_OscConfig+0x900>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a0b      	ldr	r2, [pc, #44]	; (80049c4 <HAL_RCC_OscConfig+0x900>)
 8004996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499c:	f7fe fa0c 	bl	8002db8 <HAL_GetTick>
 80049a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a4:	e010      	b.n	80049c8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a6:	f7fe fa07 	bl	8002db8 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d908      	bls.n	80049c8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e3d1      	b.n	800515e <HAL_RCC_OscConfig+0x109a>
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000
 80049c0:	10908120 	.word	0x10908120
 80049c4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c8:	4b8d      	ldr	r3, [pc, #564]	; (8004c00 <HAL_RCC_OscConfig+0xb3c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0e8      	beq.n	80049a6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d106      	bne.n	80049f2 <HAL_RCC_OscConfig+0x92e>
 80049e4:	4b87      	ldr	r3, [pc, #540]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	4a86      	ldr	r2, [pc, #536]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	6213      	str	r3, [r2, #32]
 80049f0:	e035      	b.n	8004a5e <HAL_RCC_OscConfig+0x99a>
 80049f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x958>
 8004a02:	4b80      	ldr	r3, [pc, #512]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4a7f      	ldr	r2, [pc, #508]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	6213      	str	r3, [r2, #32]
 8004a0e:	4b7d      	ldr	r3, [pc, #500]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	4a7c      	ldr	r2, [pc, #496]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a14:	f023 0304 	bic.w	r3, r3, #4
 8004a18:	6213      	str	r3, [r2, #32]
 8004a1a:	e020      	b.n	8004a5e <HAL_RCC_OscConfig+0x99a>
 8004a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	d10c      	bne.n	8004a46 <HAL_RCC_OscConfig+0x982>
 8004a2c:	4b75      	ldr	r3, [pc, #468]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	4a74      	ldr	r2, [pc, #464]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a32:	f043 0304 	orr.w	r3, r3, #4
 8004a36:	6213      	str	r3, [r2, #32]
 8004a38:	4b72      	ldr	r3, [pc, #456]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	4a71      	ldr	r2, [pc, #452]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	6213      	str	r3, [r2, #32]
 8004a44:	e00b      	b.n	8004a5e <HAL_RCC_OscConfig+0x99a>
 8004a46:	4b6f      	ldr	r3, [pc, #444]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	4a6e      	ldr	r2, [pc, #440]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	6213      	str	r3, [r2, #32]
 8004a52:	4b6c      	ldr	r3, [pc, #432]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	4a6b      	ldr	r2, [pc, #428]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004a58:	f023 0304 	bic.w	r3, r3, #4
 8004a5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8081 	beq.w	8004b72 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a70:	f7fe f9a2 	bl	8002db8 <HAL_GetTick>
 8004a74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a78:	e00b      	b.n	8004a92 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a7a:	f7fe f99d 	bl	8002db8 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e365      	b.n	800515e <HAL_RCC_OscConfig+0x109a>
 8004a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aa2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	fa93 f2a3 	rbit	r2, r3
 8004aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ab0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004abe:	2202      	movs	r2, #2
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	fa93 f2a3 	rbit	r2, r3
 8004ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004ad8:	601a      	str	r2, [r3, #0]
  return result;
 8004ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ade:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004ae2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae4:	fab3 f383 	clz	r3, r3
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f043 0302 	orr.w	r3, r3, #2
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d102      	bne.n	8004afe <HAL_RCC_OscConfig+0xa3a>
 8004af8:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	e013      	b.n	8004b26 <HAL_RCC_OscConfig+0xa62>
 8004afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004b06:	2202      	movs	r2, #2
 8004b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b0e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	fa93 f2a3 	rbit	r2, r3
 8004b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b1c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	4b38      	ldr	r3, [pc, #224]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b2a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b2e:	2102      	movs	r1, #2
 8004b30:	6011      	str	r1, [r2, #0]
 8004b32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b36:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	fa92 f1a2 	rbit	r1, r2
 8004b40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b44:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004b48:	6011      	str	r1, [r2, #0]
  return result;
 8004b4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b4e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	fab2 f282 	clz	r2, r2
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	f002 021f 	and.w	r2, r2, #31
 8004b64:	2101      	movs	r1, #1
 8004b66:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d084      	beq.n	8004a7a <HAL_RCC_OscConfig+0x9b6>
 8004b70:	e083      	b.n	8004c7a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b72:	f7fe f921 	bl	8002db8 <HAL_GetTick>
 8004b76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7c:	f7fe f91c 	bl	8002db8 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e2e4      	b.n	800515e <HAL_RCC_OscConfig+0x109a>
 8004b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ba4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	fa93 f2a3 	rbit	r2, r3
 8004bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bbc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	fa93 f2a3 	rbit	r2, r3
 8004bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bd6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004bda:	601a      	str	r2, [r3, #0]
  return result;
 8004bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004be0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004be4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be6:	fab3 f383 	clz	r3, r3
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCC_OscConfig+0xb44>
 8004bfa:	4b02      	ldr	r3, [pc, #8]	; (8004c04 <HAL_RCC_OscConfig+0xb40>)
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	e017      	b.n	8004c30 <HAL_RCC_OscConfig+0xb6c>
 8004c00:	40007000 	.word	0x40007000
 8004c04:	40021000 	.word	0x40021000
 8004c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c10:	2202      	movs	r2, #2
 8004c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c18:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	fa93 f2a3 	rbit	r2, r3
 8004c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c26:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	4bb3      	ldr	r3, [pc, #716]	; (8004efc <HAL_RCC_OscConfig+0xe38>)
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c38:	2102      	movs	r1, #2
 8004c3a:	6011      	str	r1, [r2, #0]
 8004c3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c40:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	fa92 f1a2 	rbit	r1, r2
 8004c4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c4e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004c52:	6011      	str	r1, [r2, #0]
  return result;
 8004c54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c58:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	fab2 f282 	clz	r2, r2
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	f002 021f 	and.w	r2, r2, #31
 8004c6e:	2101      	movs	r1, #1
 8004c70:	fa01 f202 	lsl.w	r2, r1, r2
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d180      	bne.n	8004b7c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c7a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d105      	bne.n	8004c8e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c82:	4b9e      	ldr	r3, [pc, #632]	; (8004efc <HAL_RCC_OscConfig+0xe38>)
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	4a9d      	ldr	r2, [pc, #628]	; (8004efc <HAL_RCC_OscConfig+0xe38>)
 8004c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 825e 	beq.w	800515c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ca0:	4b96      	ldr	r3, [pc, #600]	; (8004efc <HAL_RCC_OscConfig+0xe38>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	f000 821f 	beq.w	80050ec <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	f040 8170 	bne.w	8004fa0 <HAL_RCC_OscConfig+0xedc>
 8004cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cc4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cd2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	fa93 f2a3 	rbit	r2, r3
 8004cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ce4:	601a      	str	r2, [r3, #0]
  return result;
 8004ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004cee:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf0:	fab3 f383 	clz	r3, r3
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	461a      	mov	r2, r3
 8004d02:	2300      	movs	r3, #0
 8004d04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d06:	f7fe f857 	bl	8002db8 <HAL_GetTick>
 8004d0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d0e:	e009      	b.n	8004d24 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fe f852 	bl	8002db8 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e21c      	b.n	800515e <HAL_RCC_OscConfig+0x109a>
 8004d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d28:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d36:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	fa93 f2a3 	rbit	r2, r3
 8004d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004d48:	601a      	str	r2, [r3, #0]
  return result;
 8004d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d4e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004d52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d54:	fab3 f383 	clz	r3, r3
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d102      	bne.n	8004d6e <HAL_RCC_OscConfig+0xcaa>
 8004d68:	4b64      	ldr	r3, [pc, #400]	; (8004efc <HAL_RCC_OscConfig+0xe38>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	e027      	b.n	8004dbe <HAL_RCC_OscConfig+0xcfa>
 8004d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d72:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d80:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	fa93 f2a3 	rbit	r2, r3
 8004d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d8e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d98:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004d9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004da6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	fa93 f2a3 	rbit	r2, r3
 8004db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004db4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	4b50      	ldr	r3, [pc, #320]	; (8004efc <HAL_RCC_OscConfig+0xe38>)
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dc2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004dc6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dca:	6011      	str	r1, [r2, #0]
 8004dcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dd0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	fa92 f1a2 	rbit	r1, r2
 8004dda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dde:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004de2:	6011      	str	r1, [r2, #0]
  return result;
 8004de4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004de8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	fab2 f282 	clz	r2, r2
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	f042 0220 	orr.w	r2, r2, #32
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	f002 021f 	and.w	r2, r2, #31
 8004dfe:	2101      	movs	r1, #1
 8004e00:	fa01 f202 	lsl.w	r2, r1, r2
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d182      	bne.n	8004d10 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e0a:	4b3c      	ldr	r3, [pc, #240]	; (8004efc <HAL_RCC_OscConfig+0xe38>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	f023 020f 	bic.w	r2, r3, #15
 8004e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	4937      	ldr	r1, [pc, #220]	; (8004efc <HAL_RCC_OscConfig+0xe38>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004e24:	4b35      	ldr	r3, [pc, #212]	; (8004efc <HAL_RCC_OscConfig+0xe38>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a19      	ldr	r1, [r3, #32]
 8004e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	430b      	orrs	r3, r1
 8004e46:	492d      	ldr	r1, [pc, #180]	; (8004efc <HAL_RCC_OscConfig+0xe38>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	604b      	str	r3, [r1, #4]
 8004e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e50:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	fa93 f2a3 	rbit	r2, r3
 8004e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e6c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e70:	601a      	str	r2, [r3, #0]
  return result;
 8004e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e76:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e7a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e7c:	fab3 f383 	clz	r3, r3
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	2301      	movs	r3, #1
 8004e90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e92:	f7fd ff91 	bl	8002db8 <HAL_GetTick>
 8004e96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e9a:	e009      	b.n	8004eb0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fd ff8c 	bl	8002db8 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e156      	b.n	800515e <HAL_RCC_OscConfig+0x109a>
 8004eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eb4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ec2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	fa93 f2a3 	rbit	r2, r3
 8004ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ed0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ed4:	601a      	str	r2, [r3, #0]
  return result;
 8004ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eda:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ede:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ee0:	fab3 f383 	clz	r3, r3
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d105      	bne.n	8004f00 <HAL_RCC_OscConfig+0xe3c>
 8004ef4:	4b01      	ldr	r3, [pc, #4]	; (8004efc <HAL_RCC_OscConfig+0xe38>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	e02a      	b.n	8004f50 <HAL_RCC_OscConfig+0xe8c>
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000
 8004f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f12:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	fa93 f2a3 	rbit	r2, r3
 8004f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f20:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f2a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f38:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	fa93 f2a3 	rbit	r2, r3
 8004f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f46:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	4b86      	ldr	r3, [pc, #536]	; (8005168 <HAL_RCC_OscConfig+0x10a4>)
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f54:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f5c:	6011      	str	r1, [r2, #0]
 8004f5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f62:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	fa92 f1a2 	rbit	r1, r2
 8004f6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f70:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004f74:	6011      	str	r1, [r2, #0]
  return result;
 8004f76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f7a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	fab2 f282 	clz	r2, r2
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	f042 0220 	orr.w	r2, r2, #32
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	f002 021f 	and.w	r2, r2, #31
 8004f90:	2101      	movs	r1, #1
 8004f92:	fa01 f202 	lsl.w	r2, r1, r2
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f43f af7f 	beq.w	8004e9c <HAL_RCC_OscConfig+0xdd8>
 8004f9e:	e0dd      	b.n	800515c <HAL_RCC_OscConfig+0x1098>
 8004fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fa4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fb2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	fa93 f2a3 	rbit	r2, r3
 8004fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fc0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004fc4:	601a      	str	r2, [r3, #0]
  return result;
 8004fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004fce:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd0:	fab3 f383 	clz	r3, r3
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe6:	f7fd fee7 	bl	8002db8 <HAL_GetTick>
 8004fea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fee:	e009      	b.n	8005004 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff0:	f7fd fee2 	bl	8002db8 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0ac      	b.n	800515e <HAL_RCC_OscConfig+0x109a>
 8005004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005008:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800500c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005016:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	fa93 f2a3 	rbit	r2, r3
 8005020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005024:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005028:	601a      	str	r2, [r3, #0]
  return result;
 800502a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800502e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005032:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005034:	fab3 f383 	clz	r3, r3
 8005038:	b2db      	uxtb	r3, r3
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	b2db      	uxtb	r3, r3
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b01      	cmp	r3, #1
 8005046:	d102      	bne.n	800504e <HAL_RCC_OscConfig+0xf8a>
 8005048:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_RCC_OscConfig+0x10a4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	e027      	b.n	800509e <HAL_RCC_OscConfig+0xfda>
 800504e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005052:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005056:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800505a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005060:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	fa93 f2a3 	rbit	r2, r3
 800506a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800506e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005078:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800507c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005086:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	fa93 f2a3 	rbit	r2, r3
 8005090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005094:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	4b33      	ldr	r3, [pc, #204]	; (8005168 <HAL_RCC_OscConfig+0x10a4>)
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050a2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80050a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050aa:	6011      	str	r1, [r2, #0]
 80050ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	fa92 f1a2 	rbit	r1, r2
 80050ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050be:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80050c2:	6011      	str	r1, [r2, #0]
  return result;
 80050c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050c8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	fab2 f282 	clz	r2, r2
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	f042 0220 	orr.w	r2, r2, #32
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	f002 021f 	and.w	r2, r2, #31
 80050de:	2101      	movs	r1, #1
 80050e0:	fa01 f202 	lsl.w	r2, r1, r2
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d182      	bne.n	8004ff0 <HAL_RCC_OscConfig+0xf2c>
 80050ea:	e037      	b.n	800515c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e02e      	b.n	800515e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RCC_OscConfig+0x10a4>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005108:	4b17      	ldr	r3, [pc, #92]	; (8005168 <HAL_RCC_OscConfig+0x10a4>)
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005110:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005114:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800511c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	429a      	cmp	r2, r3
 8005126:	d117      	bne.n	8005158 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005128:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800512c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005134:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800513c:	429a      	cmp	r2, r3
 800513e:	d10b      	bne.n	8005158 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800514c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021000 	.word	0x40021000

0800516c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b09e      	sub	sp, #120	; 0x78
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e162      	b.n	800544a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005184:	4b90      	ldr	r3, [pc, #576]	; (80053c8 <HAL_RCC_ClockConfig+0x25c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d910      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b8d      	ldr	r3, [pc, #564]	; (80053c8 <HAL_RCC_ClockConfig+0x25c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 0207 	bic.w	r2, r3, #7
 800519a:	498b      	ldr	r1, [pc, #556]	; (80053c8 <HAL_RCC_ClockConfig+0x25c>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b89      	ldr	r3, [pc, #548]	; (80053c8 <HAL_RCC_ClockConfig+0x25c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e14a      	b.n	800544a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c0:	4b82      	ldr	r3, [pc, #520]	; (80053cc <HAL_RCC_ClockConfig+0x260>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	497f      	ldr	r1, [pc, #508]	; (80053cc <HAL_RCC_ClockConfig+0x260>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 80dc 	beq.w	8005398 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d13c      	bne.n	8005262 <HAL_RCC_ClockConfig+0xf6>
 80051e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f0:	fa93 f3a3 	rbit	r3, r3
 80051f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80051f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f8:	fab3 f383 	clz	r3, r3
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d102      	bne.n	8005212 <HAL_RCC_ClockConfig+0xa6>
 800520c:	4b6f      	ldr	r3, [pc, #444]	; (80053cc <HAL_RCC_ClockConfig+0x260>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	e00f      	b.n	8005232 <HAL_RCC_ClockConfig+0xc6>
 8005212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005216:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800521a:	fa93 f3a3 	rbit	r3, r3
 800521e:	667b      	str	r3, [r7, #100]	; 0x64
 8005220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005224:	663b      	str	r3, [r7, #96]	; 0x60
 8005226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005228:	fa93 f3a3 	rbit	r3, r3
 800522c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800522e:	4b67      	ldr	r3, [pc, #412]	; (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005236:	65ba      	str	r2, [r7, #88]	; 0x58
 8005238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800523a:	fa92 f2a2 	rbit	r2, r2
 800523e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005242:	fab2 f282 	clz	r2, r2
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	f042 0220 	orr.w	r2, r2, #32
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	f002 021f 	and.w	r2, r2, #31
 8005252:	2101      	movs	r1, #1
 8005254:	fa01 f202 	lsl.w	r2, r1, r2
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d17b      	bne.n	8005356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e0f3      	b.n	800544a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d13c      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x178>
 800526a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800526e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005272:	fa93 f3a3 	rbit	r3, r3
 8005276:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527a:	fab3 f383 	clz	r3, r3
 800527e:	b2db      	uxtb	r3, r3
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	d102      	bne.n	8005294 <HAL_RCC_ClockConfig+0x128>
 800528e:	4b4f      	ldr	r3, [pc, #316]	; (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	e00f      	b.n	80052b4 <HAL_RCC_ClockConfig+0x148>
 8005294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005298:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529c:	fa93 f3a3 	rbit	r3, r3
 80052a0:	647b      	str	r3, [r7, #68]	; 0x44
 80052a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052a6:	643b      	str	r3, [r7, #64]	; 0x40
 80052a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052aa:	fa93 f3a3 	rbit	r3, r3
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b0:	4b46      	ldr	r3, [pc, #280]	; (80053cc <HAL_RCC_ClockConfig+0x260>)
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80052ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052bc:	fa92 f2a2 	rbit	r2, r2
 80052c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80052c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052c4:	fab2 f282 	clz	r2, r2
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	f042 0220 	orr.w	r2, r2, #32
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	f002 021f 	and.w	r2, r2, #31
 80052d4:	2101      	movs	r1, #1
 80052d6:	fa01 f202 	lsl.w	r2, r1, r2
 80052da:	4013      	ands	r3, r2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d13a      	bne.n	8005356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e0b2      	b.n	800544a <HAL_RCC_ClockConfig+0x2de>
 80052e4:	2302      	movs	r3, #2
 80052e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	fa93 f3a3 	rbit	r3, r3
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f2:	fab3 f383 	clz	r3, r3
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	095b      	lsrs	r3, r3, #5
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d102      	bne.n	800530c <HAL_RCC_ClockConfig+0x1a0>
 8005306:	4b31      	ldr	r3, [pc, #196]	; (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	e00d      	b.n	8005328 <HAL_RCC_ClockConfig+0x1bc>
 800530c:	2302      	movs	r3, #2
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	fa93 f3a3 	rbit	r3, r3
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
 8005318:	2302      	movs	r3, #2
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	fa93 f3a3 	rbit	r3, r3
 8005322:	61fb      	str	r3, [r7, #28]
 8005324:	4b29      	ldr	r3, [pc, #164]	; (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	2202      	movs	r2, #2
 800532a:	61ba      	str	r2, [r7, #24]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	fa92 f2a2 	rbit	r2, r2
 8005332:	617a      	str	r2, [r7, #20]
  return result;
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	fab2 f282 	clz	r2, r2
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	f042 0220 	orr.w	r2, r2, #32
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	f002 021f 	and.w	r2, r2, #31
 8005346:	2101      	movs	r1, #1
 8005348:	fa01 f202 	lsl.w	r2, r1, r2
 800534c:	4013      	ands	r3, r2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e079      	b.n	800544a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005356:	4b1d      	ldr	r3, [pc, #116]	; (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f023 0203 	bic.w	r2, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	491a      	ldr	r1, [pc, #104]	; (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005364:	4313      	orrs	r3, r2
 8005366:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005368:	f7fd fd26 	bl	8002db8 <HAL_GetTick>
 800536c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536e:	e00a      	b.n	8005386 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005370:	f7fd fd22 	bl	8002db8 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	; 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e061      	b.n	800544a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005386:	4b11      	ldr	r3, [pc, #68]	; (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 020c 	and.w	r2, r3, #12
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	429a      	cmp	r2, r3
 8005396:	d1eb      	bne.n	8005370 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <HAL_RCC_ClockConfig+0x25c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d214      	bcs.n	80053d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a6:	4b08      	ldr	r3, [pc, #32]	; (80053c8 <HAL_RCC_ClockConfig+0x25c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 0207 	bic.w	r2, r3, #7
 80053ae:	4906      	ldr	r1, [pc, #24]	; (80053c8 <HAL_RCC_ClockConfig+0x25c>)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b6:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <HAL_RCC_ClockConfig+0x25c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e040      	b.n	800544a <HAL_RCC_ClockConfig+0x2de>
 80053c8:	40022000 	.word	0x40022000
 80053cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053dc:	4b1d      	ldr	r3, [pc, #116]	; (8005454 <HAL_RCC_ClockConfig+0x2e8>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	491a      	ldr	r1, [pc, #104]	; (8005454 <HAL_RCC_ClockConfig+0x2e8>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053fa:	4b16      	ldr	r3, [pc, #88]	; (8005454 <HAL_RCC_ClockConfig+0x2e8>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4912      	ldr	r1, [pc, #72]	; (8005454 <HAL_RCC_ClockConfig+0x2e8>)
 800540a:	4313      	orrs	r3, r2
 800540c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800540e:	f000 f829 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 8005412:	4601      	mov	r1, r0
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <HAL_RCC_ClockConfig+0x2e8>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800541c:	22f0      	movs	r2, #240	; 0xf0
 800541e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	fa92 f2a2 	rbit	r2, r2
 8005426:	60fa      	str	r2, [r7, #12]
  return result;
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	fab2 f282 	clz	r2, r2
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	40d3      	lsrs	r3, r2
 8005432:	4a09      	ldr	r2, [pc, #36]	; (8005458 <HAL_RCC_ClockConfig+0x2ec>)
 8005434:	5cd3      	ldrb	r3, [r2, r3]
 8005436:	fa21 f303 	lsr.w	r3, r1, r3
 800543a:	4a08      	ldr	r2, [pc, #32]	; (800545c <HAL_RCC_ClockConfig+0x2f0>)
 800543c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800543e:	4b08      	ldr	r3, [pc, #32]	; (8005460 <HAL_RCC_ClockConfig+0x2f4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f7fd fc74 	bl	8002d30 <HAL_InitTick>
  
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3778      	adds	r7, #120	; 0x78
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000
 8005458:	0800b5c4 	.word	0x0800b5c4
 800545c:	20000004 	.word	0x20000004
 8005460:	20000008 	.word	0x20000008

08005464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005464:	b480      	push	{r7}
 8005466:	b08b      	sub	sp, #44	; 0x2c
 8005468:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	2300      	movs	r3, #0
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	2300      	movs	r3, #0
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800547e:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b04      	cmp	r3, #4
 800548c:	d002      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x30>
 800548e:	2b08      	cmp	r3, #8
 8005490:	d003      	beq.n	800549a <HAL_RCC_GetSysClockFreq+0x36>
 8005492:	e03f      	b.n	8005514 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005494:	4b25      	ldr	r3, [pc, #148]	; (800552c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005496:	623b      	str	r3, [r7, #32]
      break;
 8005498:	e03f      	b.n	800551a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80054a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80054a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	fa92 f2a2 	rbit	r2, r2
 80054ac:	607a      	str	r2, [r7, #4]
  return result;
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	fab2 f282 	clz	r2, r2
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	40d3      	lsrs	r3, r2
 80054b8:	4a1d      	ldr	r2, [pc, #116]	; (8005530 <HAL_RCC_GetSysClockFreq+0xcc>)
 80054ba:	5cd3      	ldrb	r3, [r2, r3]
 80054bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80054be:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <HAL_RCC_GetSysClockFreq+0xc4>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	220f      	movs	r2, #15
 80054c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	fa92 f2a2 	rbit	r2, r2
 80054d0:	60fa      	str	r2, [r7, #12]
  return result;
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	fab2 f282 	clz	r2, r2
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	40d3      	lsrs	r3, r2
 80054dc:	4a15      	ldr	r2, [pc, #84]	; (8005534 <HAL_RCC_GetSysClockFreq+0xd0>)
 80054de:	5cd3      	ldrb	r3, [r2, r3]
 80054e0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054ec:	4a0f      	ldr	r2, [pc, #60]	; (800552c <HAL_RCC_GetSysClockFreq+0xc8>)
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	fb02 f303 	mul.w	r3, r2, r3
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
 80054fc:	e007      	b.n	800550e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054fe:	4a0b      	ldr	r2, [pc, #44]	; (800552c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	fbb2 f2f3 	udiv	r2, r2, r3
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	fb02 f303 	mul.w	r3, r2, r3
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	623b      	str	r3, [r7, #32]
      break;
 8005512:	e002      	b.n	800551a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005516:	623b      	str	r3, [r7, #32]
      break;
 8005518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800551a:	6a3b      	ldr	r3, [r7, #32]
}
 800551c:	4618      	mov	r0, r3
 800551e:	372c      	adds	r7, #44	; 0x2c
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	40021000 	.word	0x40021000
 800552c:	007a1200 	.word	0x007a1200
 8005530:	0800b5dc 	.word	0x0800b5dc
 8005534:	0800b5ec 	.word	0x0800b5ec

08005538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <HAL_RCC_GetHCLKFreq+0x14>)
 800553e:	681b      	ldr	r3, [r3, #0]
}
 8005540:	4618      	mov	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20000004 	.word	0x20000004

08005550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005556:	f7ff ffef 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 800555a:	4601      	mov	r1, r0
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005564:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005568:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	fa92 f2a2 	rbit	r2, r2
 8005570:	603a      	str	r2, [r7, #0]
  return result;
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	fab2 f282 	clz	r2, r2
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	40d3      	lsrs	r3, r2
 800557c:	4a04      	ldr	r2, [pc, #16]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x40>)
 800557e:	5cd3      	ldrb	r3, [r2, r3]
 8005580:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40021000 	.word	0x40021000
 8005590:	0800b5d4 	.word	0x0800b5d4

08005594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800559a:	f7ff ffcd 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 800559e:	4601      	mov	r1, r0
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80055a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80055ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	fa92 f2a2 	rbit	r2, r2
 80055b4:	603a      	str	r2, [r7, #0]
  return result;
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	fab2 f282 	clz	r2, r2
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	40d3      	lsrs	r3, r2
 80055c0:	4a04      	ldr	r2, [pc, #16]	; (80055d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80055c2:	5cd3      	ldrb	r3, [r2, r3]
 80055c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40021000 	.word	0x40021000
 80055d4:	0800b5d4 	.word	0x0800b5d4

080055d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b092      	sub	sp, #72	; 0x48
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80d4 	beq.w	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fc:	4b4e      	ldr	r3, [pc, #312]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10e      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005608:	4b4b      	ldr	r3, [pc, #300]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	4a4a      	ldr	r2, [pc, #296]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005612:	61d3      	str	r3, [r2, #28]
 8005614:	4b48      	ldr	r3, [pc, #288]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005626:	4b45      	ldr	r3, [pc, #276]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d118      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005632:	4b42      	ldr	r3, [pc, #264]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a41      	ldr	r2, [pc, #260]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800563e:	f7fd fbbb 	bl	8002db8 <HAL_GetTick>
 8005642:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005644:	e008      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005646:	f7fd fbb7 	bl	8002db8 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b64      	cmp	r3, #100	; 0x64
 8005652:	d901      	bls.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e1d6      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005658:	4b38      	ldr	r3, [pc, #224]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0f0      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005664:	4b34      	ldr	r3, [pc, #208]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8084 	beq.w	800577e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005680:	429a      	cmp	r2, r3
 8005682:	d07c      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005684:	4b2c      	ldr	r3, [pc, #176]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005692:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	fa93 f3a3 	rbit	r3, r3
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800569e:	fab3 f383 	clz	r3, r3
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	4b26      	ldr	r3, [pc, #152]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	461a      	mov	r2, r3
 80056ae:	2301      	movs	r3, #1
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	fa93 f3a3 	rbit	r3, r3
 80056be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056c2:	fab3 f383 	clz	r3, r3
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	461a      	mov	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056d6:	4a18      	ldr	r2, [pc, #96]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d04b      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e6:	f7fd fb67 	bl	8002db8 <HAL_GetTick>
 80056ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ec:	e00a      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ee:	f7fd fb63 	bl	8002db8 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e180      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005704:	2302      	movs	r3, #2
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	fa93 f3a3 	rbit	r3, r3
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
 8005710:	2302      	movs	r3, #2
 8005712:	623b      	str	r3, [r7, #32]
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	fa93 f3a3 	rbit	r3, r3
 800571a:	61fb      	str	r3, [r7, #28]
  return result;
 800571c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800571e:	fab3 f383 	clz	r3, r3
 8005722:	b2db      	uxtb	r3, r3
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	b2db      	uxtb	r3, r3
 8005728:	f043 0302 	orr.w	r3, r3, #2
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d108      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005732:	4b01      	ldr	r3, [pc, #4]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	e00d      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005738:	40021000 	.word	0x40021000
 800573c:	40007000 	.word	0x40007000
 8005740:	10908100 	.word	0x10908100
 8005744:	2302      	movs	r3, #2
 8005746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	fa93 f3a3 	rbit	r3, r3
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	4b9a      	ldr	r3, [pc, #616]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	2202      	movs	r2, #2
 8005756:	613a      	str	r2, [r7, #16]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	fa92 f2a2 	rbit	r2, r2
 800575e:	60fa      	str	r2, [r7, #12]
  return result;
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	fab2 f282 	clz	r2, r2
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	f002 021f 	and.w	r2, r2, #31
 8005772:	2101      	movs	r1, #1
 8005774:	fa01 f202 	lsl.w	r2, r1, r2
 8005778:	4013      	ands	r3, r2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0b7      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800577e:	4b8f      	ldr	r3, [pc, #572]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	498c      	ldr	r1, [pc, #560]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800578c:	4313      	orrs	r3, r2
 800578e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005790:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005794:	2b01      	cmp	r3, #1
 8005796:	d105      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005798:	4b88      	ldr	r3, [pc, #544]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	4a87      	ldr	r2, [pc, #540]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800579e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d008      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057b0:	4b82      	ldr	r3, [pc, #520]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	f023 0203 	bic.w	r2, r3, #3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	497f      	ldr	r1, [pc, #508]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d008      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057ce:	4b7b      	ldr	r3, [pc, #492]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	4978      	ldr	r1, [pc, #480]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057ec:	4b73      	ldr	r3, [pc, #460]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	4970      	ldr	r1, [pc, #448]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800580a:	4b6c      	ldr	r3, [pc, #432]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	f023 0210 	bic.w	r2, r3, #16
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	4969      	ldr	r1, [pc, #420]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005818:	4313      	orrs	r3, r2
 800581a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005828:	4b64      	ldr	r3, [pc, #400]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005834:	4961      	ldr	r1, [pc, #388]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005836:	4313      	orrs	r3, r2
 8005838:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d008      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005846:	4b5d      	ldr	r3, [pc, #372]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	f023 0220 	bic.w	r2, r3, #32
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	495a      	ldr	r1, [pc, #360]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005854:	4313      	orrs	r3, r2
 8005856:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005864:	4b55      	ldr	r3, [pc, #340]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	4952      	ldr	r1, [pc, #328]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005872:	4313      	orrs	r3, r2
 8005874:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005882:	4b4e      	ldr	r3, [pc, #312]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	494b      	ldr	r1, [pc, #300]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005890:	4313      	orrs	r3, r2
 8005892:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058a0:	4b46      	ldr	r3, [pc, #280]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	4943      	ldr	r1, [pc, #268]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058be:	4b3f      	ldr	r3, [pc, #252]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	493c      	ldr	r1, [pc, #240]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058dc:	4b37      	ldr	r3, [pc, #220]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	4934      	ldr	r1, [pc, #208]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80058fa:	4b30      	ldr	r3, [pc, #192]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	492d      	ldr	r1, [pc, #180]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005908:	4313      	orrs	r3, r2
 800590a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005918:	4b28      	ldr	r3, [pc, #160]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	4925      	ldr	r1, [pc, #148]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005926:	4313      	orrs	r3, r2
 8005928:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005936:	4b21      	ldr	r3, [pc, #132]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	491e      	ldr	r1, [pc, #120]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005944:	4313      	orrs	r3, r2
 8005946:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	4916      	ldr	r1, [pc, #88]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005962:	4313      	orrs	r3, r2
 8005964:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d008      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	490f      	ldr	r1, [pc, #60]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005980:	4313      	orrs	r3, r2
 8005982:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005990:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599c:	4907      	ldr	r1, [pc, #28]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00c      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80059ae:	4b03      	ldr	r3, [pc, #12]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	e002      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80059ba:	bf00      	nop
 80059bc:	40021000 	.word	0x40021000
 80059c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c2:	4913      	ldr	r1, [pc, #76]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80059d4:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e0:	490b      	ldr	r1, [pc, #44]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d008      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80059f2:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fe:	4904      	ldr	r1, [pc, #16]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3748      	adds	r7, #72	; 0x48
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40021000 	.word	0x40021000

08005a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e09d      	b.n	8005b62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d108      	bne.n	8005a40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a36:	d009      	beq.n	8005a4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	61da      	str	r2, [r3, #28]
 8005a3e:	e005      	b.n	8005a4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fc ff9c 	bl	80029a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a8c:	d902      	bls.n	8005a94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	e002      	b.n	8005a9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005aa2:	d007      	beq.n	8005ab4 <HAL_SPI_Init+0xa0>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aac:	d002      	beq.n	8005ab4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af6:	ea42 0103 	orr.w	r1, r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	0c1b      	lsrs	r3, r3, #16
 8005b10:	f003 0204 	and.w	r2, r3, #4
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b30:	ea42 0103 	orr.w	r1, r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b088      	sub	sp, #32
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	603b      	str	r3, [r7, #0]
 8005b76:	4613      	mov	r3, r2
 8005b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_SPI_Transmit+0x22>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e158      	b.n	8005e3e <HAL_SPI_Transmit+0x2d4>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b94:	f7fd f910 	bl	8002db8 <HAL_GetTick>
 8005b98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d002      	beq.n	8005bb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005baa:	2302      	movs	r3, #2
 8005bac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bae:	e13d      	b.n	8005e2c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_SPI_Transmit+0x52>
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bc0:	e134      	b.n	8005e2c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2203      	movs	r2, #3
 8005bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	88fa      	ldrh	r2, [r7, #6]
 8005bda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	88fa      	ldrh	r2, [r7, #6]
 8005be0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0c:	d10f      	bne.n	8005c2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	2b40      	cmp	r3, #64	; 0x40
 8005c3a:	d007      	beq.n	8005c4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c54:	d94b      	bls.n	8005cee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <HAL_SPI_Transmit+0xfa>
 8005c5e:	8afb      	ldrh	r3, [r7, #22]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d13e      	bne.n	8005ce2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	881a      	ldrh	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	1c9a      	adds	r2, r3, #2
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c88:	e02b      	b.n	8005ce2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d112      	bne.n	8005cbe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	881a      	ldrh	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	1c9a      	adds	r2, r3, #2
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cbc:	e011      	b.n	8005ce2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cbe:	f7fd f87b 	bl	8002db8 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d803      	bhi.n	8005cd6 <HAL_SPI_Transmit+0x16c>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d102      	bne.n	8005cdc <HAL_SPI_Transmit+0x172>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ce0:	e0a4      	b.n	8005e2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1ce      	bne.n	8005c8a <HAL_SPI_Transmit+0x120>
 8005cec:	e07c      	b.n	8005de8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <HAL_SPI_Transmit+0x192>
 8005cf6:	8afb      	ldrh	r3, [r7, #22]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d170      	bne.n	8005dde <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d912      	bls.n	8005d2c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	881a      	ldrh	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	1c9a      	adds	r2, r3, #2
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b02      	subs	r3, #2
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d2a:	e058      	b.n	8005dde <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	7812      	ldrb	r2, [r2, #0]
 8005d38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d52:	e044      	b.n	8005dde <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d12b      	bne.n	8005dba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d912      	bls.n	8005d92 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	881a      	ldrh	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	1c9a      	adds	r2, r3, #2
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b02      	subs	r3, #2
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d90:	e025      	b.n	8005dde <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005db8:	e011      	b.n	8005dde <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dba:	f7fc fffd 	bl	8002db8 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d803      	bhi.n	8005dd2 <HAL_SPI_Transmit+0x268>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd0:	d102      	bne.n	8005dd8 <HAL_SPI_Transmit+0x26e>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ddc:	e026      	b.n	8005e2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1b5      	bne.n	8005d54 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fb69 	bl	80064c4 <SPI_EndRxTxTransaction>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e000      	b.n	8005e2c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005e2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3720      	adds	r7, #32
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b08a      	sub	sp, #40	; 0x28
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	607a      	str	r2, [r7, #4]
 8005e52:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e54:	2301      	movs	r3, #1
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_SPI_TransmitReceive+0x26>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e1fb      	b.n	8006264 <HAL_SPI_TransmitReceive+0x41e>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e74:	f7fc ffa0 	bl	8002db8 <HAL_GetTick>
 8005e78:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e80:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e88:	887b      	ldrh	r3, [r7, #2]
 8005e8a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005e8c:	887b      	ldrh	r3, [r7, #2]
 8005e8e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e90:	7efb      	ldrb	r3, [r7, #27]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d00e      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0x6e>
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e9c:	d106      	bne.n	8005eac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d102      	bne.n	8005eac <HAL_SPI_TransmitReceive+0x66>
 8005ea6:	7efb      	ldrb	r3, [r7, #27]
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d003      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005eb2:	e1cd      	b.n	8006250 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <HAL_SPI_TransmitReceive+0x80>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_SPI_TransmitReceive+0x80>
 8005ec0:	887b      	ldrh	r3, [r7, #2]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d103      	bne.n	8005ece <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ecc:	e1c0      	b.n	8006250 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d003      	beq.n	8005ee2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2205      	movs	r2, #5
 8005ede:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	887a      	ldrh	r2, [r7, #2]
 8005ef2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	887a      	ldrh	r2, [r7, #2]
 8005efa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	887a      	ldrh	r2, [r7, #2]
 8005f08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	887a      	ldrh	r2, [r7, #2]
 8005f0e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f24:	d802      	bhi.n	8005f2c <HAL_SPI_TransmitReceive+0xe6>
 8005f26:	8a3b      	ldrh	r3, [r7, #16]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d908      	bls.n	8005f3e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f3a:	605a      	str	r2, [r3, #4]
 8005f3c:	e007      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f4c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	d007      	beq.n	8005f6c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f74:	d97c      	bls.n	8006070 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_SPI_TransmitReceive+0x13e>
 8005f7e:	8a7b      	ldrh	r3, [r7, #18]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d169      	bne.n	8006058 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	881a      	ldrh	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	1c9a      	adds	r2, r3, #2
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fa8:	e056      	b.n	8006058 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x1aa>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d016      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0x1aa>
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d113      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	881a      	ldrh	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	1c9a      	adds	r2, r3, #2
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d11c      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x1f2>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	b292      	uxth	r2, r2
 8006016:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	1c9a      	adds	r2, r3, #2
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006034:	2301      	movs	r3, #1
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006038:	f7fc febe 	bl	8002db8 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006044:	429a      	cmp	r2, r3
 8006046:	d807      	bhi.n	8006058 <HAL_SPI_TransmitReceive+0x212>
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604e:	d003      	beq.n	8006058 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006056:	e0fb      	b.n	8006250 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1a3      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x164>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d19d      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x164>
 800606e:	e0df      	b.n	8006230 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_SPI_TransmitReceive+0x23a>
 8006078:	8a7b      	ldrh	r3, [r7, #18]
 800607a:	2b01      	cmp	r3, #1
 800607c:	f040 80cb 	bne.w	8006216 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b01      	cmp	r3, #1
 8006088:	d912      	bls.n	80060b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	881a      	ldrh	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	1c9a      	adds	r2, r3, #2
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b02      	subs	r3, #2
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ae:	e0b2      	b.n	8006216 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	7812      	ldrb	r2, [r2, #0]
 80060bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060d6:	e09e      	b.n	8006216 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d134      	bne.n	8006150 <HAL_SPI_TransmitReceive+0x30a>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d02f      	beq.n	8006150 <HAL_SPI_TransmitReceive+0x30a>
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d12c      	bne.n	8006150 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d912      	bls.n	8006126 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	881a      	ldrh	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	1c9a      	adds	r2, r3, #2
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b02      	subs	r3, #2
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006124:	e012      	b.n	800614c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	7812      	ldrb	r2, [r2, #0]
 8006132:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b01      	cmp	r3, #1
 800615c:	d148      	bne.n	80061f0 <HAL_SPI_TransmitReceive+0x3aa>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d042      	beq.n	80061f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	d923      	bls.n	80061be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	b292      	uxth	r2, r2
 8006182:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006188:	1c9a      	adds	r2, r3, #2
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b02      	subs	r3, #2
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d81f      	bhi.n	80061ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061ba:	605a      	str	r2, [r3, #4]
 80061bc:	e016      	b.n	80061ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f103 020c 	add.w	r2, r3, #12
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	7812      	ldrb	r2, [r2, #0]
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061ec:	2301      	movs	r3, #1
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061f0:	f7fc fde2 	bl	8002db8 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d803      	bhi.n	8006208 <HAL_SPI_TransmitReceive+0x3c2>
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006206:	d102      	bne.n	800620e <HAL_SPI_TransmitReceive+0x3c8>
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	2b00      	cmp	r3, #0
 800620c:	d103      	bne.n	8006216 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006214:	e01c      	b.n	8006250 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621a:	b29b      	uxth	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	f47f af5b 	bne.w	80060d8 <HAL_SPI_TransmitReceive+0x292>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	f47f af54 	bne.w	80060d8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 f945 	bl	80064c4 <SPI_EndRxTxTransaction>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2220      	movs	r2, #32
 800624a:	661a      	str	r2, [r3, #96]	; 0x60
 800624c:	e000      	b.n	8006250 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800624e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006264:	4618      	mov	r0, r3
 8006266:	3728      	adds	r7, #40	; 0x28
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800627a:	b2db      	uxtb	r3, r3
}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	4613      	mov	r3, r2
 8006296:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006298:	f7fc fd8e 	bl	8002db8 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	4413      	add	r3, r2
 80062a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062a8:	f7fc fd86 	bl	8002db8 <HAL_GetTick>
 80062ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062ae:	4b39      	ldr	r3, [pc, #228]	; (8006394 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	015b      	lsls	r3, r3, #5
 80062b4:	0d1b      	lsrs	r3, r3, #20
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	fb02 f303 	mul.w	r3, r2, r3
 80062bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062be:	e054      	b.n	800636a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	d050      	beq.n	800636a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062c8:	f7fc fd76 	bl	8002db8 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d902      	bls.n	80062de <SPI_WaitFlagStateUntilTimeout+0x56>
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d13d      	bne.n	800635a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f6:	d111      	bne.n	800631c <SPI_WaitFlagStateUntilTimeout+0x94>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006300:	d004      	beq.n	800630c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800630a:	d107      	bne.n	800631c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800631a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006324:	d10f      	bne.n	8006346 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006344:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e017      	b.n	800638a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	3b01      	subs	r3, #1
 8006368:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4013      	ands	r3, r2
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	429a      	cmp	r2, r3
 8006378:	bf0c      	ite	eq
 800637a:	2301      	moveq	r3, #1
 800637c:	2300      	movne	r3, #0
 800637e:	b2db      	uxtb	r3, r3
 8006380:	461a      	mov	r2, r3
 8006382:	79fb      	ldrb	r3, [r7, #7]
 8006384:	429a      	cmp	r2, r3
 8006386:	d19b      	bne.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3720      	adds	r7, #32
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000004 	.word	0x20000004

08006398 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	; 0x28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063aa:	f7fc fd05 	bl	8002db8 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	4413      	add	r3, r2
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80063ba:	f7fc fcfd 	bl	8002db8 <HAL_GetTick>
 80063be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063c8:	4b3d      	ldr	r3, [pc, #244]	; (80064c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	00da      	lsls	r2, r3, #3
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	0d1b      	lsrs	r3, r3, #20
 80063d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063da:	fb02 f303 	mul.w	r3, r2, r3
 80063de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063e0:	e060      	b.n	80064a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063e8:	d107      	bne.n	80063fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d104      	bne.n	80063fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d050      	beq.n	80064a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006402:	f7fc fcd9 	bl	8002db8 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640e:	429a      	cmp	r2, r3
 8006410:	d902      	bls.n	8006418 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	d13d      	bne.n	8006494 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006426:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006430:	d111      	bne.n	8006456 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643a:	d004      	beq.n	8006446 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006444:	d107      	bne.n	8006456 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006454:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645e:	d10f      	bne.n	8006480 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800647e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e010      	b.n	80064b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4013      	ands	r3, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d196      	bne.n	80063e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3728      	adds	r7, #40	; 0x28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000004 	.word	0x20000004

080064c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff ff5b 	bl	8006398 <SPI_WaitFifoStateUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d007      	beq.n	80064f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ec:	f043 0220 	orr.w	r2, r3, #32
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e027      	b.n	8006548 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	2180      	movs	r1, #128	; 0x80
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff fec0 	bl	8006288 <SPI_WaitFlagStateUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d007      	beq.n	800651e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006512:	f043 0220 	orr.w	r2, r3, #32
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e014      	b.n	8006548 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2200      	movs	r2, #0
 8006526:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f7ff ff34 	bl	8006398 <SPI_WaitFifoStateUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653a:	f043 0220 	orr.w	r2, r3, #32
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e000      	b.n	8006548 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e040      	b.n	80065e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fc faa8 	bl	8002ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2224      	movs	r2, #36	; 0x24
 800657c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0201 	bic.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f82c 	bl	80065ec <UART_SetConfig>
 8006594:	4603      	mov	r3, r0
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e022      	b.n	80065e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f9f6 	bl	8006998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fa7d 	bl	8006adc <UART_CheckIdleState>
 80065e2:	4603      	mov	r3, r0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b92      	ldr	r3, [pc, #584]	; (8006860 <UART_SetConfig+0x274>)
 8006618:	4013      	ands	r3, r2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	6979      	ldr	r1, [r7, #20]
 8006620:	430b      	orrs	r3, r1
 8006622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	430a      	orrs	r2, r1
 800665c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a80      	ldr	r2, [pc, #512]	; (8006864 <UART_SetConfig+0x278>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d120      	bne.n	80066aa <UART_SetConfig+0xbe>
 8006668:	4b7f      	ldr	r3, [pc, #508]	; (8006868 <UART_SetConfig+0x27c>)
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	f003 0303 	and.w	r3, r3, #3
 8006670:	2b03      	cmp	r3, #3
 8006672:	d817      	bhi.n	80066a4 <UART_SetConfig+0xb8>
 8006674:	a201      	add	r2, pc, #4	; (adr r2, 800667c <UART_SetConfig+0x90>)
 8006676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667a:	bf00      	nop
 800667c:	0800668d 	.word	0x0800668d
 8006680:	08006699 	.word	0x08006699
 8006684:	0800669f 	.word	0x0800669f
 8006688:	08006693 	.word	0x08006693
 800668c:	2301      	movs	r3, #1
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e0b5      	b.n	80067fe <UART_SetConfig+0x212>
 8006692:	2302      	movs	r3, #2
 8006694:	77fb      	strb	r3, [r7, #31]
 8006696:	e0b2      	b.n	80067fe <UART_SetConfig+0x212>
 8006698:	2304      	movs	r3, #4
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	e0af      	b.n	80067fe <UART_SetConfig+0x212>
 800669e:	2308      	movs	r3, #8
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e0ac      	b.n	80067fe <UART_SetConfig+0x212>
 80066a4:	2310      	movs	r3, #16
 80066a6:	77fb      	strb	r3, [r7, #31]
 80066a8:	e0a9      	b.n	80067fe <UART_SetConfig+0x212>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a6f      	ldr	r2, [pc, #444]	; (800686c <UART_SetConfig+0x280>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d124      	bne.n	80066fe <UART_SetConfig+0x112>
 80066b4:	4b6c      	ldr	r3, [pc, #432]	; (8006868 <UART_SetConfig+0x27c>)
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066c0:	d011      	beq.n	80066e6 <UART_SetConfig+0xfa>
 80066c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066c6:	d817      	bhi.n	80066f8 <UART_SetConfig+0x10c>
 80066c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066cc:	d011      	beq.n	80066f2 <UART_SetConfig+0x106>
 80066ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d2:	d811      	bhi.n	80066f8 <UART_SetConfig+0x10c>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <UART_SetConfig+0xf4>
 80066d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066dc:	d006      	beq.n	80066ec <UART_SetConfig+0x100>
 80066de:	e00b      	b.n	80066f8 <UART_SetConfig+0x10c>
 80066e0:	2300      	movs	r3, #0
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e08b      	b.n	80067fe <UART_SetConfig+0x212>
 80066e6:	2302      	movs	r3, #2
 80066e8:	77fb      	strb	r3, [r7, #31]
 80066ea:	e088      	b.n	80067fe <UART_SetConfig+0x212>
 80066ec:	2304      	movs	r3, #4
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e085      	b.n	80067fe <UART_SetConfig+0x212>
 80066f2:	2308      	movs	r3, #8
 80066f4:	77fb      	strb	r3, [r7, #31]
 80066f6:	e082      	b.n	80067fe <UART_SetConfig+0x212>
 80066f8:	2310      	movs	r3, #16
 80066fa:	77fb      	strb	r3, [r7, #31]
 80066fc:	e07f      	b.n	80067fe <UART_SetConfig+0x212>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a5b      	ldr	r2, [pc, #364]	; (8006870 <UART_SetConfig+0x284>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d124      	bne.n	8006752 <UART_SetConfig+0x166>
 8006708:	4b57      	ldr	r3, [pc, #348]	; (8006868 <UART_SetConfig+0x27c>)
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006710:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006714:	d011      	beq.n	800673a <UART_SetConfig+0x14e>
 8006716:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800671a:	d817      	bhi.n	800674c <UART_SetConfig+0x160>
 800671c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006720:	d011      	beq.n	8006746 <UART_SetConfig+0x15a>
 8006722:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006726:	d811      	bhi.n	800674c <UART_SetConfig+0x160>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <UART_SetConfig+0x148>
 800672c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006730:	d006      	beq.n	8006740 <UART_SetConfig+0x154>
 8006732:	e00b      	b.n	800674c <UART_SetConfig+0x160>
 8006734:	2300      	movs	r3, #0
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e061      	b.n	80067fe <UART_SetConfig+0x212>
 800673a:	2302      	movs	r3, #2
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e05e      	b.n	80067fe <UART_SetConfig+0x212>
 8006740:	2304      	movs	r3, #4
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e05b      	b.n	80067fe <UART_SetConfig+0x212>
 8006746:	2308      	movs	r3, #8
 8006748:	77fb      	strb	r3, [r7, #31]
 800674a:	e058      	b.n	80067fe <UART_SetConfig+0x212>
 800674c:	2310      	movs	r3, #16
 800674e:	77fb      	strb	r3, [r7, #31]
 8006750:	e055      	b.n	80067fe <UART_SetConfig+0x212>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a47      	ldr	r2, [pc, #284]	; (8006874 <UART_SetConfig+0x288>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d124      	bne.n	80067a6 <UART_SetConfig+0x1ba>
 800675c:	4b42      	ldr	r3, [pc, #264]	; (8006868 <UART_SetConfig+0x27c>)
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006764:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006768:	d011      	beq.n	800678e <UART_SetConfig+0x1a2>
 800676a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800676e:	d817      	bhi.n	80067a0 <UART_SetConfig+0x1b4>
 8006770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006774:	d011      	beq.n	800679a <UART_SetConfig+0x1ae>
 8006776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800677a:	d811      	bhi.n	80067a0 <UART_SetConfig+0x1b4>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <UART_SetConfig+0x19c>
 8006780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006784:	d006      	beq.n	8006794 <UART_SetConfig+0x1a8>
 8006786:	e00b      	b.n	80067a0 <UART_SetConfig+0x1b4>
 8006788:	2300      	movs	r3, #0
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e037      	b.n	80067fe <UART_SetConfig+0x212>
 800678e:	2302      	movs	r3, #2
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e034      	b.n	80067fe <UART_SetConfig+0x212>
 8006794:	2304      	movs	r3, #4
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e031      	b.n	80067fe <UART_SetConfig+0x212>
 800679a:	2308      	movs	r3, #8
 800679c:	77fb      	strb	r3, [r7, #31]
 800679e:	e02e      	b.n	80067fe <UART_SetConfig+0x212>
 80067a0:	2310      	movs	r3, #16
 80067a2:	77fb      	strb	r3, [r7, #31]
 80067a4:	e02b      	b.n	80067fe <UART_SetConfig+0x212>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a33      	ldr	r2, [pc, #204]	; (8006878 <UART_SetConfig+0x28c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d124      	bne.n	80067fa <UART_SetConfig+0x20e>
 80067b0:	4b2d      	ldr	r3, [pc, #180]	; (8006868 <UART_SetConfig+0x27c>)
 80067b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80067b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067bc:	d011      	beq.n	80067e2 <UART_SetConfig+0x1f6>
 80067be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067c2:	d817      	bhi.n	80067f4 <UART_SetConfig+0x208>
 80067c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067c8:	d011      	beq.n	80067ee <UART_SetConfig+0x202>
 80067ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067ce:	d811      	bhi.n	80067f4 <UART_SetConfig+0x208>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <UART_SetConfig+0x1f0>
 80067d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067d8:	d006      	beq.n	80067e8 <UART_SetConfig+0x1fc>
 80067da:	e00b      	b.n	80067f4 <UART_SetConfig+0x208>
 80067dc:	2300      	movs	r3, #0
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e00d      	b.n	80067fe <UART_SetConfig+0x212>
 80067e2:	2302      	movs	r3, #2
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e00a      	b.n	80067fe <UART_SetConfig+0x212>
 80067e8:	2304      	movs	r3, #4
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e007      	b.n	80067fe <UART_SetConfig+0x212>
 80067ee:	2308      	movs	r3, #8
 80067f0:	77fb      	strb	r3, [r7, #31]
 80067f2:	e004      	b.n	80067fe <UART_SetConfig+0x212>
 80067f4:	2310      	movs	r3, #16
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e001      	b.n	80067fe <UART_SetConfig+0x212>
 80067fa:	2310      	movs	r3, #16
 80067fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006806:	d16c      	bne.n	80068e2 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8006808:	7ffb      	ldrb	r3, [r7, #31]
 800680a:	2b08      	cmp	r3, #8
 800680c:	d838      	bhi.n	8006880 <UART_SetConfig+0x294>
 800680e:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <UART_SetConfig+0x228>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006839 	.word	0x08006839
 8006818:	08006841 	.word	0x08006841
 800681c:	08006849 	.word	0x08006849
 8006820:	08006881 	.word	0x08006881
 8006824:	0800684f 	.word	0x0800684f
 8006828:	08006881 	.word	0x08006881
 800682c:	08006881 	.word	0x08006881
 8006830:	08006881 	.word	0x08006881
 8006834:	08006857 	.word	0x08006857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006838:	f7fe fe8a 	bl	8005550 <HAL_RCC_GetPCLK1Freq>
 800683c:	61b8      	str	r0, [r7, #24]
        break;
 800683e:	e024      	b.n	800688a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006840:	f7fe fea8 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8006844:	61b8      	str	r0, [r7, #24]
        break;
 8006846:	e020      	b.n	800688a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <UART_SetConfig+0x290>)
 800684a:	61bb      	str	r3, [r7, #24]
        break;
 800684c:	e01d      	b.n	800688a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684e:	f7fe fe09 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 8006852:	61b8      	str	r0, [r7, #24]
        break;
 8006854:	e019      	b.n	800688a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800685a:	61bb      	str	r3, [r7, #24]
        break;
 800685c:	e015      	b.n	800688a <UART_SetConfig+0x29e>
 800685e:	bf00      	nop
 8006860:	efff69f3 	.word	0xefff69f3
 8006864:	40013800 	.word	0x40013800
 8006868:	40021000 	.word	0x40021000
 800686c:	40004400 	.word	0x40004400
 8006870:	40004800 	.word	0x40004800
 8006874:	40004c00 	.word	0x40004c00
 8006878:	40005000 	.word	0x40005000
 800687c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	77bb      	strb	r3, [r7, #30]
        break;
 8006888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d075      	beq.n	800697c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	005a      	lsls	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	085b      	lsrs	r3, r3, #1
 800689a:	441a      	add	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2b0f      	cmp	r3, #15
 80068ac:	d916      	bls.n	80068dc <UART_SetConfig+0x2f0>
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b4:	d212      	bcs.n	80068dc <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f023 030f 	bic.w	r3, r3, #15
 80068be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	89fb      	ldrh	r3, [r7, #14]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	89fa      	ldrh	r2, [r7, #14]
 80068d8:	60da      	str	r2, [r3, #12]
 80068da:	e04f      	b.n	800697c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	77bb      	strb	r3, [r7, #30]
 80068e0:	e04c      	b.n	800697c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068e2:	7ffb      	ldrb	r3, [r7, #31]
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d828      	bhi.n	800693a <UART_SetConfig+0x34e>
 80068e8:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <UART_SetConfig+0x304>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006915 	.word	0x08006915
 80068f4:	0800691d 	.word	0x0800691d
 80068f8:	08006925 	.word	0x08006925
 80068fc:	0800693b 	.word	0x0800693b
 8006900:	0800692b 	.word	0x0800692b
 8006904:	0800693b 	.word	0x0800693b
 8006908:	0800693b 	.word	0x0800693b
 800690c:	0800693b 	.word	0x0800693b
 8006910:	08006933 	.word	0x08006933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006914:	f7fe fe1c 	bl	8005550 <HAL_RCC_GetPCLK1Freq>
 8006918:	61b8      	str	r0, [r7, #24]
        break;
 800691a:	e013      	b.n	8006944 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800691c:	f7fe fe3a 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8006920:	61b8      	str	r0, [r7, #24]
        break;
 8006922:	e00f      	b.n	8006944 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006924:	4b1b      	ldr	r3, [pc, #108]	; (8006994 <UART_SetConfig+0x3a8>)
 8006926:	61bb      	str	r3, [r7, #24]
        break;
 8006928:	e00c      	b.n	8006944 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800692a:	f7fe fd9b 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 800692e:	61b8      	str	r0, [r7, #24]
        break;
 8006930:	e008      	b.n	8006944 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006936:	61bb      	str	r3, [r7, #24]
        break;
 8006938:	e004      	b.n	8006944 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	77bb      	strb	r3, [r7, #30]
        break;
 8006942:	bf00      	nop
    }

    if (pclk != 0U)
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d018      	beq.n	800697c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	085a      	lsrs	r2, r3, #1
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	441a      	add	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	fbb2 f3f3 	udiv	r3, r2, r3
 800695c:	b29b      	uxth	r3, r3
 800695e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	2b0f      	cmp	r3, #15
 8006964:	d908      	bls.n	8006978 <UART_SetConfig+0x38c>
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800696c:	d204      	bcs.n	8006978 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	60da      	str	r2, [r3, #12]
 8006976:	e001      	b.n	800697c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006988:	7fbb      	ldrb	r3, [r7, #30]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3720      	adds	r7, #32
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	007a1200 	.word	0x007a1200

08006998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01a      	beq.n	8006aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a96:	d10a      	bne.n	8006aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aec:	f7fc f964 	bl	8002db8 <HAL_GetTick>
 8006af0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d10e      	bne.n	8006b1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f82d 	bl	8006b6e <UART_WaitOnFlagUntilTimeout>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e023      	b.n	8006b66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d10e      	bne.n	8006b4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f817 	bl	8006b6e <UART_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e00d      	b.n	8006b66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b09c      	sub	sp, #112	; 0x70
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7e:	e0a5      	b.n	8006ccc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	f000 80a1 	beq.w	8006ccc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8a:	f7fc f915 	bl	8002db8 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d302      	bcc.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d13e      	bne.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bb4:	667b      	str	r3, [r7, #100]	; 0x64
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bc0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e6      	bne.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	663b      	str	r3, [r7, #96]	; 0x60
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e5      	bne.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e067      	b.n	8006cee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d04f      	beq.n	8006ccc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c3a:	d147      	bne.n	8006ccc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
 8006c66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e6      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	613b      	str	r3, [r7, #16]
   return(result);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f023 0301 	bic.w	r3, r3, #1
 8006c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3308      	adds	r3, #8
 8006c96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c98:	623a      	str	r2, [r7, #32]
 8006c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	69f9      	ldr	r1, [r7, #28]
 8006c9e:	6a3a      	ldr	r2, [r7, #32]
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e5      	bne.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e010      	b.n	8006cee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69da      	ldr	r2, [r3, #28]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	bf0c      	ite	eq
 8006cdc:	2301      	moveq	r3, #1
 8006cde:	2300      	movne	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	f43f af4a 	beq.w	8006b80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3770      	adds	r7, #112	; 0x70
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006cfc:	4904      	ldr	r1, [pc, #16]	; (8006d10 <MX_FATFS_Init+0x18>)
 8006cfe:	4805      	ldr	r0, [pc, #20]	; (8006d14 <MX_FATFS_Init+0x1c>)
 8006d00:	f003 fc34 	bl	800a56c <FATFS_LinkDriver>
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <MX_FATFS_Init+0x20>)
 8006d0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006d0c:	bf00      	nop
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	200027ac 	.word	0x200027ac
 8006d14:	20000010 	.word	0x20000010
 8006d18:	200027a8 	.word	0x200027a8

08006d1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006d20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//return SD_disk_initialize(pdrv);
	return SD_disk_initialize(pdrv);
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fa fd05 	bl	8001748 <SD_disk_initialize>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	4603      	mov	r3, r0
 8006d52:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	//return SD_disk_status(pdrv);
	return SD_disk_status(pdrv);
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fa fde0 	bl	800191c <SD_disk_status>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	4603      	mov	r3, r0
 8006d76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	//return SD_disk_read(pdrv, buff, sector, count);
	return SD_disk_read(pdrv, buff, sector, count);
 8006d78:	7bf8      	ldrb	r0, [r7, #15]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	68b9      	ldr	r1, [r7, #8]
 8006d80:	f7fa fde2 	bl	8001948 <SD_disk_read>
 8006d84:	4603      	mov	r3, r0
 8006d86:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	607a      	str	r2, [r7, #4]
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	//return SD_disk_write(pdrv, buff, sector, count);
	return SD_disk_write(pdrv, buff, sector, count);
 8006da0:	7bf8      	ldrb	r0, [r7, #15]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	f7fa fe38 	bl	8001a1c <SD_disk_write>
 8006dac:	4603      	mov	r3, r0
 8006dae:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	603a      	str	r2, [r7, #0]
 8006dc2:	71fb      	strb	r3, [r7, #7]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	//return SD_disk_ioctl(pdrv, cmd, buff);
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	79b9      	ldrb	r1, [r7, #6]
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fa fea8 	bl	8001b24 <SD_disk_ioctl>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	4a08      	ldr	r2, [pc, #32]	; (8006e10 <disk_status+0x30>)
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	79fa      	ldrb	r2, [r7, #7]
 8006df8:	4905      	ldr	r1, [pc, #20]	; (8006e10 <disk_status+0x30>)
 8006dfa:	440a      	add	r2, r1
 8006dfc:	7a12      	ldrb	r2, [r2, #8]
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4798      	blx	r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	200029d0 	.word	0x200029d0

08006e14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	4a0d      	ldr	r2, [pc, #52]	; (8006e5c <disk_initialize+0x48>)
 8006e26:	5cd3      	ldrb	r3, [r2, r3]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d111      	bne.n	8006e50 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	4a0b      	ldr	r2, [pc, #44]	; (8006e5c <disk_initialize+0x48>)
 8006e30:	2101      	movs	r1, #1
 8006e32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	4a09      	ldr	r2, [pc, #36]	; (8006e5c <disk_initialize+0x48>)
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	79fa      	ldrb	r2, [r7, #7]
 8006e42:	4906      	ldr	r1, [pc, #24]	; (8006e5c <disk_initialize+0x48>)
 8006e44:	440a      	add	r2, r1
 8006e46:	7a12      	ldrb	r2, [r2, #8]
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	200029d0 	.word	0x200029d0

08006e60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006e60:	b590      	push	{r4, r7, lr}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <disk_read+0x3c>)
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	689c      	ldr	r4, [r3, #8]
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	4a07      	ldr	r2, [pc, #28]	; (8006e9c <disk_read+0x3c>)
 8006e80:	4413      	add	r3, r2
 8006e82:	7a18      	ldrb	r0, [r3, #8]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	47a0      	blx	r4
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd90      	pop	{r4, r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	200029d0 	.word	0x200029d0

08006ea0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006ea0:	b590      	push	{r4, r7, lr}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	4603      	mov	r3, r0
 8006eae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	4a0a      	ldr	r2, [pc, #40]	; (8006edc <disk_write+0x3c>)
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	68dc      	ldr	r4, [r3, #12]
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	4a07      	ldr	r2, [pc, #28]	; (8006edc <disk_write+0x3c>)
 8006ec0:	4413      	add	r3, r2
 8006ec2:	7a18      	ldrb	r0, [r3, #8]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	68b9      	ldr	r1, [r7, #8]
 8006eca:	47a0      	blx	r4
 8006ecc:	4603      	mov	r3, r0
 8006ece:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	371c      	adds	r7, #28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd90      	pop	{r4, r7, pc}
 8006eda:	bf00      	nop
 8006edc:	200029d0 	.word	0x200029d0

08006ee0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	603a      	str	r2, [r7, #0]
 8006eea:	71fb      	strb	r3, [r7, #7]
 8006eec:	460b      	mov	r3, r1
 8006eee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <disk_ioctl+0x38>)
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	79fa      	ldrb	r2, [r7, #7]
 8006efe:	4906      	ldr	r1, [pc, #24]	; (8006f18 <disk_ioctl+0x38>)
 8006f00:	440a      	add	r2, r1
 8006f02:	7a10      	ldrb	r0, [r2, #8]
 8006f04:	79b9      	ldrb	r1, [r7, #6]
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	4798      	blx	r3
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	200029d0 	.word	0x200029d0

08006f1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006f30:	e007      	b.n	8006f42 <mem_cpy+0x26>
		*d++ = *s++;
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	1c53      	adds	r3, r2, #1
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	1c59      	adds	r1, r3, #1
 8006f3c:	6179      	str	r1, [r7, #20]
 8006f3e:	7812      	ldrb	r2, [r2, #0]
 8006f40:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	1e5a      	subs	r2, r3, #1
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f2      	bne.n	8006f32 <mem_cpy+0x16>
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006f5a:	b480      	push	{r7}
 8006f5c:	b087      	sub	sp, #28
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006f6a:	e005      	b.n	8006f78 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	617a      	str	r2, [r7, #20]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	1e5a      	subs	r2, r3, #1
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f4      	bne.n	8006f6c <mem_set+0x12>
}
 8006f82:	bf00      	nop
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006f90:	b480      	push	{r7}
 8006f92:	b089      	sub	sp, #36	; 0x24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	61fb      	str	r3, [r7, #28]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006fa8:	bf00      	nop
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	1e5a      	subs	r2, r3, #1
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00d      	beq.n	8006fd0 <mem_cmp+0x40>
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	61fa      	str	r2, [r7, #28]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	61ba      	str	r2, [r7, #24]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	1acb      	subs	r3, r1, r3
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0ec      	beq.n	8006faa <mem_cmp+0x1a>
	return r;
 8006fd0:	697b      	ldr	r3, [r7, #20]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3724      	adds	r7, #36	; 0x24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006fe8:	e002      	b.n	8006ff0 <chk_chr+0x12>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3301      	adds	r3, #1
 8006fee:	607b      	str	r3, [r7, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <chk_chr+0x26>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	4293      	cmp	r3, r2
 8007002:	d1f2      	bne.n	8006fea <chk_chr+0xc>
	return *str;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	781b      	ldrb	r3, [r3, #0]
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800701e:	2300      	movs	r3, #0
 8007020:	60bb      	str	r3, [r7, #8]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e03b      	b.n	80070a0 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8007028:	4931      	ldr	r1, [pc, #196]	; (80070f0 <chk_lock+0xdc>)
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4613      	mov	r3, r2
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d02c      	beq.n	8007096 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800703c:	492c      	ldr	r1, [pc, #176]	; (80070f0 <chk_lock+0xdc>)
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4613      	mov	r3, r2
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d120      	bne.n	800709a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8007058:	4925      	ldr	r1, [pc, #148]	; (80070f0 <chk_lock+0xdc>)
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	4613      	mov	r3, r2
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	440b      	add	r3, r1
 8007066:	3304      	adds	r3, #4
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007070:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007072:	429a      	cmp	r2, r3
 8007074:	d111      	bne.n	800709a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8007076:	491e      	ldr	r1, [pc, #120]	; (80070f0 <chk_lock+0xdc>)
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4613      	mov	r3, r2
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	3308      	adds	r3, #8
 8007086:	881a      	ldrh	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8007090:	429a      	cmp	r2, r3
 8007092:	d102      	bne.n	800709a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8007094:	e007      	b.n	80070a6 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8007096:	2301      	movs	r3, #1
 8007098:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3301      	adds	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d9c0      	bls.n	8007028 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d109      	bne.n	80070c0 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <chk_lock+0xa4>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d101      	bne.n	80070bc <chk_lock+0xa8>
 80070b8:	2300      	movs	r3, #0
 80070ba:	e013      	b.n	80070e4 <chk_lock+0xd0>
 80070bc:	2312      	movs	r3, #18
 80070be:	e011      	b.n	80070e4 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10b      	bne.n	80070de <chk_lock+0xca>
 80070c6:	490a      	ldr	r1, [pc, #40]	; (80070f0 <chk_lock+0xdc>)
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4613      	mov	r3, r2
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	4413      	add	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	440b      	add	r3, r1
 80070d4:	330a      	adds	r3, #10
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070dc:	d101      	bne.n	80070e2 <chk_lock+0xce>
 80070de:	2310      	movs	r3, #16
 80070e0:	e000      	b.n	80070e4 <chk_lock+0xd0>
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	200027b8 	.word	0x200027b8

080070f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80070fa:	2300      	movs	r3, #0
 80070fc:	607b      	str	r3, [r7, #4]
 80070fe:	e002      	b.n	8007106 <enq_lock+0x12>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3301      	adds	r3, #1
 8007104:	607b      	str	r3, [r7, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d809      	bhi.n	8007120 <enq_lock+0x2c>
 800710c:	490a      	ldr	r1, [pc, #40]	; (8007138 <enq_lock+0x44>)
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	4613      	mov	r3, r2
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1ef      	bne.n	8007100 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b02      	cmp	r3, #2
 8007124:	bf14      	ite	ne
 8007126:	2301      	movne	r3, #1
 8007128:	2300      	moveq	r3, #0
 800712a:	b2db      	uxtb	r3, r3
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	200027b8 	.word	0x200027b8

0800713c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	e02e      	b.n	80071aa <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800714c:	4959      	ldr	r1, [pc, #356]	; (80072b4 <inc_lock+0x178>)
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4613      	mov	r3, r2
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	d11d      	bne.n	80071a4 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8007168:	4952      	ldr	r1, [pc, #328]	; (80072b4 <inc_lock+0x178>)
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4613      	mov	r3, r2
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	4413      	add	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	3304      	adds	r3, #4
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007180:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8007182:	429a      	cmp	r2, r3
 8007184:	d10e      	bne.n	80071a4 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8007186:	494b      	ldr	r1, [pc, #300]	; (80072b4 <inc_lock+0x178>)
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4613      	mov	r3, r2
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	3308      	adds	r3, #8
 8007196:	881a      	ldrh	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800719e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d006      	beq.n	80071b2 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3301      	adds	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d9cd      	bls.n	800714c <inc_lock+0x10>
 80071b0:	e000      	b.n	80071b4 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80071b2:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d148      	bne.n	800724c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	e002      	b.n	80071c6 <inc_lock+0x8a>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d809      	bhi.n	80071e0 <inc_lock+0xa4>
 80071cc:	4939      	ldr	r1, [pc, #228]	; (80072b4 <inc_lock+0x178>)
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4613      	mov	r3, r2
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1ef      	bne.n	80071c0 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d101      	bne.n	80071ea <inc_lock+0xae>
 80071e6:	2300      	movs	r3, #0
 80071e8:	e05d      	b.n	80072a6 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f0:	6819      	ldr	r1, [r3, #0]
 80071f2:	4830      	ldr	r0, [pc, #192]	; (80072b4 <inc_lock+0x178>)
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4613      	mov	r3, r2
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	4413      	add	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4403      	add	r3, r0
 8007200:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007208:	6899      	ldr	r1, [r3, #8]
 800720a:	482a      	ldr	r0, [pc, #168]	; (80072b4 <inc_lock+0x178>)
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4613      	mov	r3, r2
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4403      	add	r3, r0
 8007218:	3304      	adds	r3, #4
 800721a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007222:	88d8      	ldrh	r0, [r3, #6]
 8007224:	4923      	ldr	r1, [pc, #140]	; (80072b4 <inc_lock+0x178>)
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4613      	mov	r3, r2
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	440b      	add	r3, r1
 8007232:	3308      	adds	r3, #8
 8007234:	4602      	mov	r2, r0
 8007236:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8007238:	491e      	ldr	r1, [pc, #120]	; (80072b4 <inc_lock+0x178>)
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4613      	mov	r3, r2
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	440b      	add	r3, r1
 8007246:	330a      	adds	r3, #10
 8007248:	2200      	movs	r2, #0
 800724a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00c      	beq.n	800726c <inc_lock+0x130>
 8007252:	4918      	ldr	r1, [pc, #96]	; (80072b4 <inc_lock+0x178>)
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4613      	mov	r3, r2
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	330a      	adds	r3, #10
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <inc_lock+0x130>
 8007268:	2300      	movs	r3, #0
 800726a:	e01c      	b.n	80072a6 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <inc_lock+0x14e>
 8007272:	4910      	ldr	r1, [pc, #64]	; (80072b4 <inc_lock+0x178>)
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4613      	mov	r3, r2
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	4413      	add	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	440b      	add	r3, r1
 8007280:	330a      	adds	r3, #10
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	b299      	uxth	r1, r3
 8007288:	e001      	b.n	800728e <inc_lock+0x152>
 800728a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800728e:	4809      	ldr	r0, [pc, #36]	; (80072b4 <inc_lock+0x178>)
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4613      	mov	r3, r2
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4403      	add	r3, r0
 800729c:	330a      	adds	r3, #10
 800729e:	460a      	mov	r2, r1
 80072a0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	200027b8 	.word	0x200027b8

080072b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	607b      	str	r3, [r7, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d82e      	bhi.n	800732a <dec_lock+0x72>
		n = Files[i].ctr;
 80072cc:	491b      	ldr	r1, [pc, #108]	; (800733c <dec_lock+0x84>)
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	4613      	mov	r3, r2
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	4413      	add	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	440b      	add	r3, r1
 80072da:	330a      	adds	r3, #10
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80072e0:	89fb      	ldrh	r3, [r7, #14]
 80072e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e6:	d101      	bne.n	80072ec <dec_lock+0x34>
 80072e8:	2300      	movs	r3, #0
 80072ea:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80072ec:	89fb      	ldrh	r3, [r7, #14]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <dec_lock+0x40>
 80072f2:	89fb      	ldrh	r3, [r7, #14]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80072f8:	4910      	ldr	r1, [pc, #64]	; (800733c <dec_lock+0x84>)
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	330a      	adds	r3, #10
 8007308:	89fa      	ldrh	r2, [r7, #14]
 800730a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800730c:	89fb      	ldrh	r3, [r7, #14]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d108      	bne.n	8007324 <dec_lock+0x6c>
 8007312:	490a      	ldr	r1, [pc, #40]	; (800733c <dec_lock+0x84>)
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	737b      	strb	r3, [r7, #13]
 8007328:	e001      	b.n	800732e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800732a:	2302      	movs	r3, #2
 800732c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800732e:	7b7b      	ldrb	r3, [r7, #13]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	200027b8 	.word	0x200027b8

08007340 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e016      	b.n	800737c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800734e:	4910      	ldr	r1, [pc, #64]	; (8007390 <clear_lock+0x50>)
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4613      	mov	r3, r2
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	440b      	add	r3, r1
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d108      	bne.n	8007376 <clear_lock+0x36>
 8007364:	490a      	ldr	r1, [pc, #40]	; (8007390 <clear_lock+0x50>)
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4613      	mov	r3, r2
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d9e5      	bls.n	800734e <clear_lock+0xe>
	}
}
 8007382:	bf00      	nop
 8007384:	bf00      	nop
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	200027b8 	.word	0x200027b8

08007394 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a6:	791b      	ldrb	r3, [r3, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d040      	beq.n	800742e <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073bc:	7858      	ldrb	r0, [r3, #1]
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	2301      	movs	r3, #1
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	f7ff fd6c 	bl	8006ea0 <disk_write>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <sync_window+0x40>
			res = FR_DISK_ERR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	73fb      	strb	r3, [r7, #15]
 80073d2:	e02c      	b.n	800742e <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073da:	2200      	movs	r2, #0
 80073dc:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	1ad2      	subs	r2, r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d21b      	bcs.n	800742e <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073fc:	78db      	ldrb	r3, [r3, #3]
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	e012      	b.n	8007428 <sync_window+0x94>
					wsect += fs->fsize;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	4413      	add	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007416:	7858      	ldrb	r0, [r3, #1]
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	2301      	movs	r3, #1
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	f7ff fd3f 	bl	8006ea0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	3b01      	subs	r3, #1
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d8e9      	bhi.n	8007402 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	429a      	cmp	r2, r3
 8007452:	d01e      	beq.n	8007492 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff ff9d 	bl	8007394 <sync_window>
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d116      	bne.n	8007492 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746a:	7858      	ldrb	r0, [r3, #1]
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	2301      	movs	r3, #1
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	f7ff fcf5 	bl	8006e60 <disk_read>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800747c:	f04f 33ff 	mov.w	r3, #4294967295
 8007480:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007482:	2301      	movs	r3, #1
 8007484:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800748c:	461a      	mov	r2, r3
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff ff75 	bl	8007394 <sync_window>
 80074aa:	4603      	mov	r3, r0
 80074ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f040 80ad 	bne.w	8007610 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b03      	cmp	r3, #3
 80074c0:	f040 8098 	bne.w	80075f4 <sync_fs+0x158>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ca:	795b      	ldrb	r3, [r3, #5]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	f040 8091 	bne.w	80075f4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074da:	895b      	ldrh	r3, [r3, #10]
 80074dc:	461a      	mov	r2, r3
 80074de:	2100      	movs	r1, #0
 80074e0:	f7ff fd3b 	bl	8006f5a <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2255      	movs	r2, #85	; 0x55
 80074e8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	22aa      	movs	r2, #170	; 0xaa
 80074f0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2252      	movs	r2, #82	; 0x52
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2252      	movs	r2, #82	; 0x52
 80074fe:	705a      	strb	r2, [r3, #1]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2261      	movs	r2, #97	; 0x61
 8007504:	709a      	strb	r2, [r3, #2]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2241      	movs	r2, #65	; 0x41
 800750a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2272      	movs	r2, #114	; 0x72
 8007510:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2272      	movs	r2, #114	; 0x72
 8007518:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2241      	movs	r2, #65	; 0x41
 8007520:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2261      	movs	r2, #97	; 0x61
 8007528:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	b2da      	uxtb	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	b29b      	uxth	r3, r3
 8007546:	0a1b      	lsrs	r3, r3, #8
 8007548:	b29b      	uxth	r3, r3
 800754a:	b2da      	uxtb	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	0c1b      	lsrs	r3, r3, #16
 800755c:	b2da      	uxtb	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	0e1b      	lsrs	r3, r3, #24
 800756e:	b2da      	uxtb	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	b29b      	uxth	r3, r3
 8007590:	0a1b      	lsrs	r3, r3, #8
 8007592:	b29b      	uxth	r3, r3
 8007594:	b2da      	uxtb	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	0c1b      	lsrs	r3, r3, #16
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	0e1b      	lsrs	r3, r3, #24
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	3301      	adds	r3, #1
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075d0:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d8:	7858      	ldrb	r0, [r3, #1]
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e4:	2301      	movs	r3, #1
 80075e6:	f7ff fc5b 	bl	8006ea0 <disk_write>
			fs->fsi_flag = 0;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f0:	2200      	movs	r2, #0
 80075f2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fa:	785b      	ldrb	r3, [r3, #1]
 80075fc:	2200      	movs	r2, #0
 80075fe:	2100      	movs	r1, #0
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fc6d 	bl	8006ee0 <disk_ioctl>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800760c:	2301      	movs	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007610:	7bfb      	ldrb	r3, [r7, #15]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	3b02      	subs	r3, #2
 8007628:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	3b02      	subs	r3, #2
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d301      	bcc.n	800763e <clust2sect+0x24>
 800763a:	2300      	movs	r3, #0
 800763c:	e00c      	b.n	8007658 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007644:	789b      	ldrb	r3, [r3, #2]
 8007646:	461a      	mov	r2, r3
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	fb03 f202 	mul.w	r2, r3, r2
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	4413      	add	r3, r2
}
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d906      	bls.n	8007682 <get_fat+0x1e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d302      	bcc.n	8007688 <get_fat+0x24>
		val = 1;	/* Internal error */
 8007682:	2301      	movs	r3, #1
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e0e4      	b.n	8007852 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007688:	f04f 33ff 	mov.w	r3, #4294967295
 800768c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b03      	cmp	r3, #3
 8007698:	f000 8098 	beq.w	80077cc <get_fat+0x168>
 800769c:	2b03      	cmp	r3, #3
 800769e:	f300 80ce 	bgt.w	800783e <get_fat+0x1da>
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d002      	beq.n	80076ac <get_fat+0x48>
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d05f      	beq.n	800776a <get_fat+0x106>
 80076aa:	e0c8      	b.n	800783e <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	085b      	lsrs	r3, r3, #1
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c0:	6a1a      	ldr	r2, [r3, #32]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c8:	895b      	ldrh	r3, [r3, #10]
 80076ca:	4619      	mov	r1, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80076d2:	4413      	add	r3, r2
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff feae 	bl	8007438 <move_window>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f040 80b0 	bne.w	8007844 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	60fa      	str	r2, [r7, #12]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076f0:	8952      	ldrh	r2, [r2, #10]
 80076f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80076f6:	fb01 f202 	mul.w	r2, r1, r2
 80076fa:	1a9b      	subs	r3, r3, r2
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	5cd3      	ldrb	r3, [r2, r3]
 8007700:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007708:	6a1a      	ldr	r2, [r3, #32]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007710:	895b      	ldrh	r3, [r3, #10]
 8007712:	4619      	mov	r1, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	fbb3 f3f1 	udiv	r3, r3, r1
 800771a:	4413      	add	r3, r2
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff fe8a 	bl	8007438 <move_window>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	f040 808e 	bne.w	8007848 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007732:	895b      	ldrh	r3, [r3, #10]
 8007734:	461a      	mov	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	fbb3 f1f2 	udiv	r1, r3, r2
 800773c:	fb01 f202 	mul.w	r2, r1, r2
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	5cd3      	ldrb	r3, [r2, r3]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	461a      	mov	r2, r3
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4313      	orrs	r3, r2
 800774e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <get_fat+0xfc>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	091b      	lsrs	r3, r3, #4
 800775e:	e002      	b.n	8007766 <get_fat+0x102>
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007766:	617b      	str	r3, [r7, #20]
			break;
 8007768:	e073      	b.n	8007852 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007770:	6a1a      	ldr	r2, [r3, #32]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007778:	895b      	ldrh	r3, [r3, #10]
 800777a:	085b      	lsrs	r3, r3, #1
 800777c:	b29b      	uxth	r3, r3
 800777e:	4619      	mov	r1, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	fbb3 f3f1 	udiv	r3, r3, r1
 8007786:	4413      	add	r3, r2
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff fe54 	bl	8007438 <move_window>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d15a      	bne.n	800784c <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077a0:	8952      	ldrh	r2, [r2, #10]
 80077a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80077a6:	fb01 f202 	mul.w	r2, r1, r2
 80077aa:	1a9b      	subs	r3, r3, r2
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	4413      	add	r3, r2
 80077b0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	3301      	adds	r3, #1
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	b21a      	sxth	r2, r3
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	b21b      	sxth	r3, r3
 80077c2:	4313      	orrs	r3, r2
 80077c4:	b21b      	sxth	r3, r3
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	617b      	str	r3, [r7, #20]
			break;
 80077ca:	e042      	b.n	8007852 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d2:	6a1a      	ldr	r2, [r3, #32]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077da:	895b      	ldrh	r3, [r3, #10]
 80077dc:	089b      	lsrs	r3, r3, #2
 80077de:	b29b      	uxth	r3, r3
 80077e0:	4619      	mov	r1, r3
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80077e8:	4413      	add	r3, r2
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff fe23 	bl	8007438 <move_window>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d12b      	bne.n	8007850 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007802:	8952      	ldrh	r2, [r2, #10]
 8007804:	fbb3 f1f2 	udiv	r1, r3, r2
 8007808:	fb01 f202 	mul.w	r2, r1, r2
 800780c:	1a9b      	subs	r3, r3, r2
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4413      	add	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	3303      	adds	r3, #3
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	061a      	lsls	r2, r3, #24
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	3302      	adds	r3, #2
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	4313      	orrs	r3, r2
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	3201      	adds	r2, #1
 800782a:	7812      	ldrb	r2, [r2, #0]
 800782c:	0212      	lsls	r2, r2, #8
 800782e:	4313      	orrs	r3, r2
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	7812      	ldrb	r2, [r2, #0]
 8007834:	4313      	orrs	r3, r2
 8007836:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800783a:	617b      	str	r3, [r7, #20]
			break;
 800783c:	e009      	b.n	8007852 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800783e:	2301      	movs	r3, #1
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	e006      	b.n	8007852 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007844:	bf00      	nop
 8007846:	e004      	b.n	8007852 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007848:	bf00      	nop
 800784a:	e002      	b.n	8007852 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800784c:	bf00      	nop
 800784e:	e000      	b.n	8007852 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007850:	bf00      	nop
		}
	}

	return val;
 8007852:	697b      	ldr	r3, [r7, #20]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b088      	sub	sp, #32
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d906      	bls.n	800787c <put_fat+0x20>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	429a      	cmp	r2, r3
 800787a:	d302      	bcc.n	8007882 <put_fat+0x26>
		res = FR_INT_ERR;
 800787c:	2302      	movs	r3, #2
 800787e:	77fb      	strb	r3, [r7, #31]
 8007880:	e13a      	b.n	8007af8 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b03      	cmp	r3, #3
 800788c:	f000 80d0 	beq.w	8007a30 <put_fat+0x1d4>
 8007890:	2b03      	cmp	r3, #3
 8007892:	f300 8127 	bgt.w	8007ae4 <put_fat+0x288>
 8007896:	2b01      	cmp	r3, #1
 8007898:	d003      	beq.n	80078a2 <put_fat+0x46>
 800789a:	2b02      	cmp	r3, #2
 800789c:	f000 808f 	beq.w	80079be <put_fat+0x162>
 80078a0:	e120      	b.n	8007ae4 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	085b      	lsrs	r3, r3, #1
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	4413      	add	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b6:	6a1a      	ldr	r2, [r3, #32]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078be:	895b      	ldrh	r3, [r3, #10]
 80078c0:	4619      	mov	r1, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80078c8:	4413      	add	r3, r2
 80078ca:	4619      	mov	r1, r3
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f7ff fdb3 	bl	8007438 <move_window>
 80078d2:	4603      	mov	r3, r0
 80078d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078d6:	7ffb      	ldrb	r3, [r7, #31]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f040 8106 	bne.w	8007aea <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	617a      	str	r2, [r7, #20]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078ea:	8952      	ldrh	r2, [r2, #10]
 80078ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80078f0:	fb01 f202 	mul.w	r2, r1, r2
 80078f4:	1a9b      	subs	r3, r3, r2
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	4413      	add	r3, r2
 80078fa:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00d      	beq.n	8007922 <put_fat+0xc6>
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	b25b      	sxtb	r3, r3
 800790c:	f003 030f 	and.w	r3, r3, #15
 8007910:	b25a      	sxtb	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	b25b      	sxtb	r3, r3
 800791a:	4313      	orrs	r3, r2
 800791c:	b25b      	sxtb	r3, r3
 800791e:	b2db      	uxtb	r3, r3
 8007920:	e001      	b.n	8007926 <put_fat+0xca>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007930:	2201      	movs	r2, #1
 8007932:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793a:	6a1a      	ldr	r2, [r3, #32]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007942:	895b      	ldrh	r3, [r3, #10]
 8007944:	4619      	mov	r1, r3
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	fbb3 f3f1 	udiv	r3, r3, r1
 800794c:	4413      	add	r3, r2
 800794e:	4619      	mov	r1, r3
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7ff fd71 	bl	8007438 <move_window>
 8007956:	4603      	mov	r3, r0
 8007958:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800795a:	7ffb      	ldrb	r3, [r7, #31]
 800795c:	2b00      	cmp	r3, #0
 800795e:	f040 80c6 	bne.w	8007aee <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007968:	895b      	ldrh	r3, [r3, #10]
 800796a:	461a      	mov	r2, r3
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007972:	fb01 f202 	mul.w	r2, r1, r2
 8007976:	1a9b      	subs	r3, r3, r2
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <put_fat+0x134>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	091b      	lsrs	r3, r3, #4
 800798c:	b2db      	uxtb	r3, r3
 800798e:	e00e      	b.n	80079ae <put_fat+0x152>
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	b25b      	sxtb	r3, r3
 8007996:	f023 030f 	bic.w	r3, r3, #15
 800799a:	b25a      	sxtb	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	0a1b      	lsrs	r3, r3, #8
 80079a0:	b25b      	sxtb	r3, r3
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	b25b      	sxtb	r3, r3
 80079a8:	4313      	orrs	r3, r2
 80079aa:	b25b      	sxtb	r3, r3
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b8:	2201      	movs	r2, #1
 80079ba:	711a      	strb	r2, [r3, #4]
			break;
 80079bc:	e09c      	b.n	8007af8 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c4:	6a1a      	ldr	r2, [r3, #32]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079cc:	895b      	ldrh	r3, [r3, #10]
 80079ce:	085b      	lsrs	r3, r3, #1
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	4619      	mov	r1, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80079da:	4413      	add	r3, r2
 80079dc:	4619      	mov	r1, r3
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f7ff fd2a 	bl	8007438 <move_window>
 80079e4:	4603      	mov	r3, r0
 80079e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079e8:	7ffb      	ldrb	r3, [r7, #31]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f040 8081 	bne.w	8007af2 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079fa:	8952      	ldrh	r2, [r2, #10]
 80079fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a00:	fb01 f202 	mul.w	r2, r1, r2
 8007a04:	1a9b      	subs	r3, r3, r2
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4413      	add	r3, r2
 8007a0a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	0a1b      	lsrs	r3, r3, #8
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	b2d2      	uxtb	r2, r2
 8007a22:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	711a      	strb	r2, [r3, #4]
			break;
 8007a2e:	e063      	b.n	8007af8 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a36:	6a1a      	ldr	r2, [r3, #32]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a3e:	895b      	ldrh	r3, [r3, #10]
 8007a40:	089b      	lsrs	r3, r3, #2
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	4619      	mov	r1, r3
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a4c:	4413      	add	r3, r2
 8007a4e:	4619      	mov	r1, r3
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7ff fcf1 	bl	8007438 <move_window>
 8007a56:	4603      	mov	r3, r0
 8007a58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a5a:	7ffb      	ldrb	r3, [r7, #31]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d14a      	bne.n	8007af6 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a6a:	8952      	ldrh	r2, [r2, #10]
 8007a6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a70:	fb01 f202 	mul.w	r2, r1, r2
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	3303      	adds	r3, #3
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	061a      	lsls	r2, r3, #24
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	3302      	adds	r3, #2
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	041b      	lsls	r3, r3, #16
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	3201      	adds	r2, #1
 8007a92:	7812      	ldrb	r2, [r2, #0]
 8007a94:	0212      	lsls	r2, r2, #8
 8007a96:	4313      	orrs	r3, r2
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	7812      	ldrb	r2, [r2, #0]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	701a      	strb	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	0a1b      	lsrs	r3, r3, #8
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	3301      	adds	r3, #1
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	0c1a      	lsrs	r2, r3, #16
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	3302      	adds	r3, #2
 8007ac8:	b2d2      	uxtb	r2, r2
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	0e1a      	lsrs	r2, r3, #24
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	3303      	adds	r3, #3
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ade:	2201      	movs	r2, #1
 8007ae0:	711a      	strb	r2, [r3, #4]
			break;
 8007ae2:	e009      	b.n	8007af8 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	77fb      	strb	r3, [r7, #31]
 8007ae8:	e006      	b.n	8007af8 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007aea:	bf00      	nop
 8007aec:	e004      	b.n	8007af8 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007aee:	bf00      	nop
 8007af0:	e002      	b.n	8007af8 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007af2:	bf00      	nop
 8007af4:	e000      	b.n	8007af8 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007af6:	bf00      	nop
		}
	}

	return res;
 8007af8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3720      	adds	r7, #32
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d906      	bls.n	8007b20 <remove_chain+0x1e>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d302      	bcc.n	8007b26 <remove_chain+0x24>
		res = FR_INT_ERR;
 8007b20:	2302      	movs	r3, #2
 8007b22:	73fb      	strb	r3, [r7, #15]
 8007b24:	e049      	b.n	8007bba <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007b2a:	e03b      	b.n	8007ba4 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff fd98 	bl	8007664 <get_fat>
 8007b34:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d03b      	beq.n	8007bb4 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d102      	bne.n	8007b48 <remove_chain+0x46>
 8007b42:	2302      	movs	r3, #2
 8007b44:	73fb      	strb	r3, [r7, #15]
 8007b46:	e038      	b.n	8007bba <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4e:	d102      	bne.n	8007b56 <remove_chain+0x54>
 8007b50:	2301      	movs	r3, #1
 8007b52:	73fb      	strb	r3, [r7, #15]
 8007b54:	e031      	b.n	8007bba <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007b56:	2200      	movs	r2, #0
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7ff fe7e 	bl	800785c <put_fat>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d126      	bne.n	8007bb8 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b76:	d013      	beq.n	8007ba0 <remove_chain+0x9e>
				fs->free_clust++;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	3301      	adds	r3, #1
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b88:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b90:	795b      	ldrb	r3, [r3, #5]
 8007b92:	f043 0301 	orr.w	r3, r3, #1
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b9e:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d3bc      	bcc.n	8007b2c <remove_chain+0x2a>
 8007bb2:	e002      	b.n	8007bba <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8007bb4:	bf00      	nop
 8007bb6:	e000      	b.n	8007bba <remove_chain+0xb8>
			if (res != FR_OK) break;
 8007bb8:	bf00      	nop
		}
	}

	return res;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d111      	bne.n	8007bf8 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d006      	beq.n	8007bf2 <create_chain+0x2e>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d31d      	bcc.n	8007c2e <create_chain+0x6a>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	e01a      	b.n	8007c2e <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff fd32 	bl	8007664 <get_fat>
 8007c00:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d801      	bhi.n	8007c0c <create_chain+0x48>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e07f      	b.n	8007d0c <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c12:	d101      	bne.n	8007c18 <create_chain+0x54>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	e079      	b.n	8007d0c <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d201      	bcs.n	8007c2a <create_chain+0x66>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	e070      	b.n	8007d0c <create_chain+0x148>
		scl = clst;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	3301      	adds	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d307      	bcc.n	8007c56 <create_chain+0x92>
			ncl = 2;
 8007c46:	2302      	movs	r3, #2
 8007c48:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d901      	bls.n	8007c56 <create_chain+0x92>
 8007c52:	2300      	movs	r3, #0
 8007c54:	e05a      	b.n	8007d0c <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007c56:	6979      	ldr	r1, [r7, #20]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff fd03 	bl	8007664 <get_fat>
 8007c5e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00e      	beq.n	8007c84 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d002      	beq.n	8007c74 <create_chain+0xb0>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <create_chain+0xb4>
			return cs;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	e049      	b.n	8007d0c <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d1d8      	bne.n	8007c32 <create_chain+0x6e>
 8007c80:	2300      	movs	r3, #0
 8007c82:	e043      	b.n	8007d0c <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8007c84:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007c86:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007c8a:	6979      	ldr	r1, [r7, #20]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff fde5 	bl	800785c <put_fat>
 8007c92:	4603      	mov	r3, r0
 8007c94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d109      	bne.n	8007cb0 <create_chain+0xec>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d006      	beq.n	8007cb0 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff fdd8 	bl	800785c <put_fat>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d121      	bne.n	8007cfa <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cce:	d01c      	beq.n	8007d0a <create_chain+0x146>
			fs->free_clust--;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ce0:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce8:	795b      	ldrb	r3, [r3, #5]
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf6:	715a      	strb	r2, [r3, #5]
 8007cf8:	e007      	b.n	8007d0a <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d102      	bne.n	8007d06 <create_chain+0x142>
 8007d00:	f04f 33ff 	mov.w	r3, #4294967295
 8007d04:	e000      	b.n	8007d08 <create_chain+0x144>
 8007d06:	2301      	movs	r3, #1
 8007d08:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007d0a:	697b      	ldr	r3, [r7, #20]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	3304      	adds	r3, #4
 8007d28:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d36:	895b      	ldrh	r3, [r3, #10]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d46:	6812      	ldr	r2, [r2, #0]
 8007d48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d4c:	7892      	ldrb	r2, [r2, #2]
 8007d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d52:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1d1a      	adds	r2, r3, #4
 8007d58:	613a      	str	r2, [r7, #16]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <clmt_clust+0x54>
 8007d64:	2300      	movs	r3, #0
 8007d66:	e010      	b.n	8007d8a <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d307      	bcc.n	8007d80 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d7e:	e7e9      	b.n	8007d54 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8007d80:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	4413      	add	r3, r2
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b086      	sub	sp, #24
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007daa:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d009      	beq.n	8007dd0 <dir_sdi+0x3a>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d301      	bcc.n	8007dd4 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e0aa      	b.n	8007f2a <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d110      	bne.n	8007dfc <dir_sdi+0x66>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d107      	bne.n	8007dfc <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d115      	bne.n	8007e2e <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0e:	891b      	ldrh	r3, [r3, #8]
 8007e10:	461a      	mov	r2, r3
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d301      	bcc.n	8007e1c <dir_sdi+0x86>
			return FR_INT_ERR;
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e086      	b.n	8007f2a <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	613b      	str	r3, [r7, #16]
 8007e2c:	e043      	b.n	8007eb6 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e3a:	895b      	ldrh	r3, [r3, #10]
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e4e:	789b      	ldrb	r3, [r3, #2]
 8007e50:	fb02 f303 	mul.w	r3, r2, r3
 8007e54:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007e56:	e021      	b.n	8007e9c <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6979      	ldr	r1, [r7, #20]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff fbfe 	bl	8007664 <get_fat>
 8007e68:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d101      	bne.n	8007e76 <dir_sdi+0xe0>
 8007e72:	2301      	movs	r3, #1
 8007e74:	e059      	b.n	8007f2a <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d909      	bls.n	8007e90 <dir_sdi+0xfa>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d301      	bcc.n	8007e94 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8007e90:	2302      	movs	r3, #2
 8007e92:	e04a      	b.n	8007f2a <dir_sdi+0x194>
			idx -= ic;
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d2d9      	bcs.n	8007e58 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6979      	ldr	r1, [r7, #20]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff fbb3 	bl	800761a <clust2sect>
 8007eb4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <dir_sdi+0x136>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e02e      	b.n	8007f2a <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed8:	895b      	ldrh	r3, [r3, #10]
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	4413      	add	r3, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ef0:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4618      	mov	r0, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f08:	895b      	ldrh	r3, [r3, #10]
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f16:	fb01 f202 	mul.w	r2, r1, r2
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	015b      	lsls	r3, r3, #5
 8007f1e:	4403      	add	r3, r0
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f26:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007f32:	b590      	push	{r4, r7, lr}
 8007f34:	b087      	sub	sp, #28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f42:	88db      	ldrh	r3, [r3, #6]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <dir_next+0x2a>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <dir_next+0x2e>
		return FR_NO_FILE;
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	e12e      	b.n	80081be <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f6c:	895b      	ldrh	r3, [r3, #10]
 8007f6e:	095b      	lsrs	r3, r3, #5
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	461a      	mov	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f7a:	fb01 f202 	mul.w	r2, r1, r2
 8007f7e:	1a9b      	subs	r3, r3, r2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f040 80fa 	bne.w	800817a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f96:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10d      	bne.n	8007fc0 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb0:	891b      	ldrh	r3, [r3, #8]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	f0c0 80df 	bcc.w	800817a <dir_next+0x248>
				return FR_NO_FILE;
 8007fbc:	2304      	movs	r3, #4
 8007fbe:	e0fe      	b.n	80081be <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fcc:	895b      	ldrh	r3, [r3, #10]
 8007fce:	095b      	lsrs	r3, r3, #5
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fe0:	6812      	ldr	r2, [r2, #0]
 8007fe2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fe6:	7892      	ldrb	r2, [r2, #2]
 8007fe8:	3a01      	subs	r2, #1
 8007fea:	4013      	ands	r3, r2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f040 80c4 	bne.w	800817a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	4619      	mov	r1, r3
 8008004:	4610      	mov	r0, r2
 8008006:	f7ff fb2d 	bl	8007664 <get_fat>
 800800a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d801      	bhi.n	8008016 <dir_next+0xe4>
 8008012:	2302      	movs	r3, #2
 8008014:	e0d3      	b.n	80081be <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801c:	d101      	bne.n	8008022 <dir_next+0xf0>
 800801e:	2301      	movs	r3, #1
 8008020:	e0cd      	b.n	80081be <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	429a      	cmp	r2, r3
 8008034:	f0c0 808e 	bcc.w	8008154 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <dir_next+0x110>
 800803e:	2304      	movs	r3, #4
 8008040:	e0bd      	b.n	80081be <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	4619      	mov	r1, r3
 8008054:	4610      	mov	r0, r2
 8008056:	f7ff fdb5 	bl	8007bc4 <create_chain>
 800805a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <dir_next+0x134>
 8008062:	2307      	movs	r3, #7
 8008064:	e0ab      	b.n	80081be <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <dir_next+0x13e>
 800806c:	2302      	movs	r3, #2
 800806e:	e0a6      	b.n	80081be <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d101      	bne.n	800807c <dir_next+0x14a>
 8008078:	2301      	movs	r3, #1
 800807a:	e0a0      	b.n	80081be <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff f985 	bl	8007394 <sync_window>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <dir_next+0x162>
 8008090:	2301      	movs	r3, #1
 8008092:	e094      	b.n	80081be <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4618      	mov	r0, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080aa:	895b      	ldrh	r3, [r3, #10]
 80080ac:	461a      	mov	r2, r3
 80080ae:	2100      	movs	r1, #0
 80080b0:	f7fe ff53 	bl	8006f5a <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c2:	681c      	ldr	r4, [r3, #0]
 80080c4:	6979      	ldr	r1, [r7, #20]
 80080c6:	4610      	mov	r0, r2
 80080c8:	f7ff faa7 	bl	800761a <clust2sect>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80080d2:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80080d4:	2300      	movs	r3, #0
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	e021      	b.n	800811e <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e6:	2201      	movs	r2, #1
 80080e8:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff f94e 	bl	8007394 <sync_window>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <dir_next+0x1d0>
 80080fe:	2301      	movs	r3, #1
 8008100:	e05d      	b.n	80081be <dir_next+0x28c>
						dp->fs->winsect++;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800810e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008110:	3201      	adds	r2, #1
 8008112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008116:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	3301      	adds	r3, #1
 800811c:	613b      	str	r3, [r7, #16]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800812a:	789b      	ldrb	r3, [r3, #2]
 800812c:	461a      	mov	r2, r3
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	4293      	cmp	r3, r2
 8008132:	d3d2      	bcc.n	80080da <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1acb      	subs	r3, r1, r3
 800814e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008152:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800815a:	461a      	mov	r2, r3
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6979      	ldr	r1, [r7, #20]
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff fa55 	bl	800761a <clust2sect>
 8008170:	4602      	mov	r2, r0
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008178:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	b29a      	uxth	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008184:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800819c:	895b      	ldrh	r3, [r3, #10]
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	461a      	mov	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80081aa:	fb01 f202 	mul.w	r2, r1, r2
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	015b      	lsls	r3, r3, #5
 80081b2:	4403      	add	r3, r0
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081ba:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd90      	pop	{r4, r7, pc}

080081c6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80081d0:	2100      	movs	r1, #0
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff fddf 	bl	8007d96 <dir_sdi>
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d135      	bne.n	800824e <dir_alloc+0x88>
		n = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	4619      	mov	r1, r3
 80081f8:	4610      	mov	r0, r2
 80081fa:	f7ff f91d 	bl	8007438 <move_window>
 80081fe:	4603      	mov	r3, r0
 8008200:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d121      	bne.n	800824c <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2be5      	cmp	r3, #229	; 0xe5
 8008214:	d006      	beq.n	8008224 <dir_alloc+0x5e>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d107      	bne.n	8008234 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	3301      	adds	r3, #1
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d102      	bne.n	8008238 <dir_alloc+0x72>
 8008232:	e00c      	b.n	800824e <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008234:	2300      	movs	r3, #0
 8008236:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008238:	2101      	movs	r1, #1
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7ff fe79 	bl	8007f32 <dir_next>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0cd      	beq.n	80081e6 <dir_alloc+0x20>
 800824a:	e000      	b.n	800824e <dir_alloc+0x88>
			if (res != FR_OK) break;
 800824c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	2b04      	cmp	r3, #4
 8008252:	d101      	bne.n	8008258 <dir_alloc+0x92>
 8008254:	2307      	movs	r3, #7
 8008256:	73fb      	strb	r3, [r7, #15]
	return res;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	331b      	adds	r3, #27
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	b21a      	sxth	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	331a      	adds	r3, #26
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	b21b      	sxth	r3, r3
 800827e:	4313      	orrs	r3, r2
 8008280:	b21b      	sxth	r3, r3
 8008282:	b29b      	uxth	r3, r3
 8008284:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b03      	cmp	r3, #3
 8008290:	d10f      	bne.n	80082b2 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	3315      	adds	r3, #21
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	b21a      	sxth	r2, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	3314      	adds	r3, #20
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	b21b      	sxth	r3, r3
 80082a4:	4313      	orrs	r3, r2
 80082a6:	b21b      	sxth	r3, r3
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	041b      	lsls	r3, r3, #16
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]

	return cl;
 80082b2:	68fb      	ldr	r3, [r7, #12]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	331a      	adds	r3, #26
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	701a      	strb	r2, [r3, #0]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	0a1b      	lsrs	r3, r3, #8
 80082da:	b29a      	uxth	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	331b      	adds	r3, #27
 80082e0:	b2d2      	uxtb	r2, r2
 80082e2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	0c1a      	lsrs	r2, r3, #16
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3314      	adds	r3, #20
 80082ec:	b2d2      	uxtb	r2, r2
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	0c1b      	lsrs	r3, r3, #16
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	0a1b      	lsrs	r3, r3, #8
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3315      	adds	r3, #21
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	701a      	strb	r2, [r3, #0]
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
	...

08008310 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008322:	1e5a      	subs	r2, r3, #1
 8008324:	4613      	mov	r3, r2
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	4413      	add	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8008330:	2300      	movs	r3, #0
 8008332:	613b      	str	r3, [r7, #16]
 8008334:	2301      	movs	r3, #1
 8008336:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8008338:	4a2b      	ldr	r2, [pc, #172]	; (80083e8 <cmp_lfn+0xd8>)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	4413      	add	r3, r2
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	3301      	adds	r3, #1
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	4413      	add	r3, r2
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	b21a      	sxth	r2, r3
 800834c:	4926      	ldr	r1, [pc, #152]	; (80083e8 <cmp_lfn+0xd8>)
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	440b      	add	r3, r1
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	4619      	mov	r1, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	440b      	add	r3, r1
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	b21b      	sxth	r3, r3
 800835e:	4313      	orrs	r3, r2
 8008360:	b21b      	sxth	r3, r3
 8008362:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8008364:	89fb      	ldrh	r3, [r7, #14]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d019      	beq.n	800839e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800836a:	89bb      	ldrh	r3, [r7, #12]
 800836c:	4618      	mov	r0, r3
 800836e:	f002 f949 	bl	800a604 <ff_wtoupper>
 8008372:	4603      	mov	r3, r0
 8008374:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2bfe      	cmp	r3, #254	; 0xfe
 800837a:	d80e      	bhi.n	800839a <cmp_lfn+0x8a>
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	617a      	str	r2, [r7, #20]
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	4413      	add	r3, r2
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	4618      	mov	r0, r3
 800838c:	f002 f93a 	bl	800a604 <ff_wtoupper>
 8008390:	4603      	mov	r3, r0
 8008392:	461a      	mov	r2, r3
 8008394:	89fb      	ldrh	r3, [r7, #14]
 8008396:	4293      	cmp	r3, r2
 8008398:	d008      	beq.n	80083ac <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800839a:	2300      	movs	r3, #0
 800839c:	e01f      	b.n	80083de <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800839e:	89bb      	ldrh	r3, [r7, #12]
 80083a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d001      	beq.n	80083ac <cmp_lfn+0x9c>
 80083a8:	2300      	movs	r3, #0
 80083aa:	e018      	b.n	80083de <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	3301      	adds	r3, #1
 80083b0:	613b      	str	r3, [r7, #16]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b0c      	cmp	r3, #12
 80083b6:	d9bf      	bls.n	8008338 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <cmp_lfn+0xcc>
 80083c4:	89fb      	ldrh	r3, [r7, #14]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d008      	beq.n	80083dc <cmp_lfn+0xcc>
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	4413      	add	r3, r2
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <cmp_lfn+0xcc>
		return 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	e000      	b.n	80083de <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80083dc:	2301      	movs	r3, #1
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	0800b67c 	.word	0x0800b67c

080083ec <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b089      	sub	sp, #36	; 0x24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	4611      	mov	r1, r2
 80083f8:	461a      	mov	r2, r3
 80083fa:	460b      	mov	r3, r1
 80083fc:	71fb      	strb	r3, [r7, #7]
 80083fe:	4613      	mov	r3, r2
 8008400:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	330d      	adds	r3, #13
 8008406:	79ba      	ldrb	r2, [r7, #6]
 8008408:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	330b      	adds	r3, #11
 800840e:	220f      	movs	r2, #15
 8008410:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	330c      	adds	r3, #12
 8008416:	2200      	movs	r2, #0
 8008418:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	331a      	adds	r3, #26
 800841e:	2200      	movs	r2, #0
 8008420:	701a      	strb	r2, [r3, #0]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	331b      	adds	r3, #27
 8008426:	2200      	movs	r2, #0
 8008428:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	1e5a      	subs	r2, r3, #1
 800842e:	4613      	mov	r3, r2
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	82fb      	strh	r3, [r7, #22]
 800843e:	2300      	movs	r3, #0
 8008440:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8008442:	8afb      	ldrh	r3, [r7, #22]
 8008444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008448:	4293      	cmp	r3, r2
 800844a:	d007      	beq.n	800845c <fit_lfn+0x70>
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	61fa      	str	r2, [r7, #28]
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800845c:	4a1d      	ldr	r2, [pc, #116]	; (80084d4 <fit_lfn+0xe8>)
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	4413      	add	r3, r2
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4413      	add	r3, r2
 800846a:	8afa      	ldrh	r2, [r7, #22]
 800846c:	b2d2      	uxtb	r2, r2
 800846e:	701a      	strb	r2, [r3, #0]
 8008470:	8afb      	ldrh	r3, [r7, #22]
 8008472:	0a1b      	lsrs	r3, r3, #8
 8008474:	b299      	uxth	r1, r3
 8008476:	4a17      	ldr	r2, [pc, #92]	; (80084d4 <fit_lfn+0xe8>)
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	4413      	add	r3, r2
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	3301      	adds	r3, #1
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	4413      	add	r3, r2
 8008484:	b2ca      	uxtb	r2, r1
 8008486:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8008488:	8afb      	ldrh	r3, [r7, #22]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d102      	bne.n	8008494 <fit_lfn+0xa8>
 800848e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008492:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	3301      	adds	r3, #1
 8008498:	61bb      	str	r3, [r7, #24]
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	2b0c      	cmp	r3, #12
 800849e:	d9d0      	bls.n	8008442 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80084a0:	8afb      	ldrh	r3, [r7, #22]
 80084a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d006      	beq.n	80084b8 <fit_lfn+0xcc>
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <fit_lfn+0xd4>
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	79fa      	ldrb	r2, [r7, #7]
 80084c4:	701a      	strb	r2, [r3, #0]
}
 80084c6:	bf00      	nop
 80084c8:	3724      	adds	r7, #36	; 0x24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	0800b67c 	.word	0x0800b67c

080084d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08c      	sub	sp, #48	; 0x30
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80084e6:	220b      	movs	r2, #11
 80084e8:	68b9      	ldr	r1, [r7, #8]
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f7fe fd16 	bl	8006f1c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2b05      	cmp	r3, #5
 80084f4:	d92b      	bls.n	800854e <gen_numname+0x76>
		sr = seq;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80084fa:	e022      	b.n	8008542 <gen_numname+0x6a>
			wc = *lfn++;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	1c9a      	adds	r2, r3, #2
 8008500:	607a      	str	r2, [r7, #4]
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008506:	2300      	movs	r3, #0
 8008508:	62bb      	str	r3, [r7, #40]	; 0x28
 800850a:	e017      	b.n	800853c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	005a      	lsls	r2, r3, #1
 8008510:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	4413      	add	r3, r2
 8008518:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800851a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800851c:	085b      	lsrs	r3, r3, #1
 800851e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d005      	beq.n	8008536 <gen_numname+0x5e>
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008530:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008534:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	3301      	adds	r3, #1
 800853a:	62bb      	str	r3, [r7, #40]	; 0x28
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	2b0f      	cmp	r3, #15
 8008540:	d9e4      	bls.n	800850c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1d8      	bne.n	80084fc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800854e:	2307      	movs	r3, #7
 8008550:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f003 030f 	and.w	r3, r3, #15
 800855a:	b2db      	uxtb	r3, r3
 800855c:	3330      	adds	r3, #48	; 0x30
 800855e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008566:	2b39      	cmp	r3, #57	; 0x39
 8008568:	d904      	bls.n	8008574 <gen_numname+0x9c>
 800856a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800856e:	3307      	adds	r3, #7
 8008570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	1e5a      	subs	r2, r3, #1
 8008578:	62ba      	str	r2, [r7, #40]	; 0x28
 800857a:	3330      	adds	r3, #48	; 0x30
 800857c:	443b      	add	r3, r7
 800857e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008582:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	091b      	lsrs	r3, r3, #4
 800858a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1df      	bne.n	8008552 <gen_numname+0x7a>
	ns[i] = '~';
 8008592:	f107 0214 	add.w	r2, r7, #20
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	4413      	add	r3, r2
 800859a:	227e      	movs	r2, #126	; 0x7e
 800859c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800859e:	2300      	movs	r3, #0
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
 80085a2:	e002      	b.n	80085aa <gen_numname+0xd2>
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	3301      	adds	r3, #1
 80085a8:	627b      	str	r3, [r7, #36]	; 0x24
 80085aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d205      	bcs.n	80085be <gen_numname+0xe6>
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	4413      	add	r3, r2
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	d1f2      	bne.n	80085a4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80085be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c0:	2b07      	cmp	r3, #7
 80085c2:	d807      	bhi.n	80085d4 <gen_numname+0xfc>
 80085c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80085ca:	3330      	adds	r3, #48	; 0x30
 80085cc:	443b      	add	r3, r7
 80085ce:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80085d2:	e000      	b.n	80085d6 <gen_numname+0xfe>
 80085d4:	2120      	movs	r1, #32
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	1c5a      	adds	r2, r3, #1
 80085da:	627a      	str	r2, [r7, #36]	; 0x24
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4413      	add	r3, r2
 80085e0:	460a      	mov	r2, r1
 80085e2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	2b07      	cmp	r3, #7
 80085e8:	d9e9      	bls.n	80085be <gen_numname+0xe6>
}
 80085ea:	bf00      	nop
 80085ec:	bf00      	nop
 80085ee:	3730      	adds	r7, #48	; 0x30
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008600:	230b      	movs	r3, #11
 8008602:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	b2da      	uxtb	r2, r3
 8008608:	0852      	lsrs	r2, r2, #1
 800860a:	01db      	lsls	r3, r3, #7
 800860c:	4313      	orrs	r3, r2
 800860e:	b2da      	uxtb	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	1c59      	adds	r1, r3, #1
 8008614:	6079      	str	r1, [r7, #4]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	4413      	add	r3, r2
 800861a:	73fb      	strb	r3, [r7, #15]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	3b01      	subs	r3, #1
 8008620:	60bb      	str	r3, [r7, #8]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1ed      	bne.n	8008604 <sum_sfn+0x10>
	return sum;
 8008628:	7bfb      	ldrb	r3, [r7, #15]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b086      	sub	sp, #24
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800863e:	2100      	movs	r1, #0
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff fba8 	bl	8007d96 <dir_sdi>
 8008646:	4603      	mov	r3, r0
 8008648:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800864a:	7dfb      	ldrb	r3, [r7, #23]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <dir_find+0x1e>
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	e0b8      	b.n	80087c6 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008654:	23ff      	movs	r3, #255	; 0xff
 8008656:	753b      	strb	r3, [r7, #20]
 8008658:	7d3b      	ldrb	r3, [r7, #20]
 800865a:	757b      	strb	r3, [r7, #21]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008666:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	4619      	mov	r1, r3
 800867a:	4610      	mov	r0, r2
 800867c:	f7fe fedc 	bl	8007438 <move_window>
 8008680:	4603      	mov	r3, r0
 8008682:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f040 8097 	bne.w	80087ba <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800869c:	7dbb      	ldrb	r3, [r7, #22]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d102      	bne.n	80086a8 <dir_find+0x72>
 80086a2:	2304      	movs	r3, #4
 80086a4:	75fb      	strb	r3, [r7, #23]
 80086a6:	e08d      	b.n	80087c4 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	330b      	adds	r3, #11
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086b2:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80086b4:	7dbb      	ldrb	r3, [r7, #22]
 80086b6:	2be5      	cmp	r3, #229	; 0xe5
 80086b8:	d007      	beq.n	80086ca <dir_find+0x94>
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <dir_find+0xa6>
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	2b0f      	cmp	r3, #15
 80086c8:	d008      	beq.n	80086dc <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80086ca:	23ff      	movs	r3, #255	; 0xff
 80086cc:	757b      	strb	r3, [r7, #21]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086d8:	849a      	strh	r2, [r3, #36]	; 0x24
 80086da:	e063      	b.n	80087a4 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2b0f      	cmp	r3, #15
 80086e0:	d137      	bne.n	8008752 <dir_find+0x11c>
				if (dp->lfn) {
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d05a      	beq.n	80087a4 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80086ee:	7dbb      	ldrb	r3, [r7, #22]
 80086f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d010      	beq.n	800871a <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	7b5b      	ldrb	r3, [r3, #13]
 80086fc:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80086fe:	7dbb      	ldrb	r3, [r7, #22]
 8008700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008704:	75bb      	strb	r3, [r7, #22]
 8008706:	7dbb      	ldrb	r3, [r7, #22]
 8008708:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008710:	88da      	ldrh	r2, [r3, #6]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008718:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800871a:	7dba      	ldrb	r2, [r7, #22]
 800871c:	7d7b      	ldrb	r3, [r7, #21]
 800871e:	429a      	cmp	r2, r3
 8008720:	d114      	bne.n	800874c <dir_find+0x116>
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	330d      	adds	r3, #13
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	7d3a      	ldrb	r2, [r7, #20]
 800872a:	429a      	cmp	r2, r3
 800872c:	d10e      	bne.n	800874c <dir_find+0x116>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	6939      	ldr	r1, [r7, #16]
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fde9 	bl	8008310 <cmp_lfn>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d003      	beq.n	800874c <dir_find+0x116>
 8008744:	7d7b      	ldrb	r3, [r7, #21]
 8008746:	3b01      	subs	r3, #1
 8008748:	b2db      	uxtb	r3, r3
 800874a:	e000      	b.n	800874e <dir_find+0x118>
 800874c:	23ff      	movs	r3, #255	; 0xff
 800874e:	757b      	strb	r3, [r7, #21]
 8008750:	e028      	b.n	80087a4 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8008752:	7d7b      	ldrb	r3, [r7, #21]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d107      	bne.n	8008768 <dir_find+0x132>
 8008758:	6938      	ldr	r0, [r7, #16]
 800875a:	f7ff ff4b 	bl	80085f4 <sum_sfn>
 800875e:	4603      	mov	r3, r0
 8008760:	461a      	mov	r2, r3
 8008762:	7d3b      	ldrb	r3, [r7, #20]
 8008764:	4293      	cmp	r3, r2
 8008766:	d02a      	beq.n	80087be <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	330b      	adds	r3, #11
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10b      	bne.n	8008794 <dir_find+0x15e>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	220b      	movs	r2, #11
 8008786:	4619      	mov	r1, r3
 8008788:	6938      	ldr	r0, [r7, #16]
 800878a:	f7fe fc01 	bl	8006f90 <mem_cmp>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d016      	beq.n	80087c2 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008794:	23ff      	movs	r3, #255	; 0xff
 8008796:	757b      	strb	r3, [r7, #21]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800879e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087a2:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fbc3 	bl	8007f32 <dir_next>
 80087ac:	4603      	mov	r3, r0
 80087ae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f43f af58 	beq.w	8008668 <dir_find+0x32>
 80087b8:	e004      	b.n	80087c4 <dir_find+0x18e>
		if (res != FR_OK) break;
 80087ba:	bf00      	nop
 80087bc:	e002      	b.n	80087c4 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80087be:	bf00      	nop
 80087c0:	e000      	b.n	80087c4 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80087c2:	bf00      	nop

	return res;
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08c      	sub	sp, #48	; 0x30
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	623b      	str	r3, [r7, #32]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80087ec:	f107 030c 	add.w	r3, r7, #12
 80087f0:	220c      	movs	r2, #12
 80087f2:	6a39      	ldr	r1, [r7, #32]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe fb91 	bl	8006f1c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d03b      	beq.n	800887c <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	330b      	adds	r3, #11
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008812:	461a      	mov	r2, r3
 8008814:	2300      	movs	r3, #0
 8008816:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8008818:	2301      	movs	r3, #1
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28
 800881c:	e013      	b.n	8008846 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800881e:	f107 010c 	add.w	r1, r7, #12
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	69fa      	ldr	r2, [r7, #28]
 8008826:	6a38      	ldr	r0, [r7, #32]
 8008828:	f7ff fe56 	bl	80084d8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff ff02 	bl	8008636 <dir_find>
 8008832:	4603      	mov	r3, r0
 8008834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800883c:	2b00      	cmp	r3, #0
 800883e:	d106      	bne.n	800884e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	3301      	adds	r3, #1
 8008844:	62bb      	str	r3, [r7, #40]	; 0x28
 8008846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008848:	2b63      	cmp	r3, #99	; 0x63
 800884a:	d9e8      	bls.n	800881e <dir_register+0x4e>
 800884c:	e000      	b.n	8008850 <dir_register+0x80>
			if (res != FR_OK) break;
 800884e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	2b64      	cmp	r3, #100	; 0x64
 8008854:	d101      	bne.n	800885a <dir_register+0x8a>
 8008856:	2307      	movs	r3, #7
 8008858:	e0d8      	b.n	8008a0c <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800885a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800885e:	2b04      	cmp	r3, #4
 8008860:	d002      	beq.n	8008868 <dir_register+0x98>
 8008862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008866:	e0d1      	b.n	8008a0c <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	330b      	adds	r3, #11
 800886c:	7dfa      	ldrb	r2, [r7, #23]
 800886e:	701a      	strb	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008876:	461a      	mov	r2, r3
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d014      	beq.n	80088b0 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8008886:	2300      	movs	r3, #0
 8008888:	62bb      	str	r3, [r7, #40]	; 0x28
 800888a:	e002      	b.n	8008892 <dir_register+0xc2>
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	3301      	adds	r3, #1
 8008890:	62bb      	str	r3, [r7, #40]	; 0x28
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	4413      	add	r3, r2
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f5      	bne.n	800888c <dir_register+0xbc>
		nent = (n + 25) / 13;
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	3319      	adds	r3, #25
 80088a4:	4a5b      	ldr	r2, [pc, #364]	; (8008a14 <dir_register+0x244>)
 80088a6:	fba2 2303 	umull	r2, r3, r2, r3
 80088aa:	089b      	lsrs	r3, r3, #2
 80088ac:	627b      	str	r3, [r7, #36]	; 0x24
 80088ae:	e001      	b.n	80088b4 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80088b0:	2301      	movs	r3, #1
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80088b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff fc85 	bl	80081c6 <dir_alloc>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80088c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d15b      	bne.n	8008982 <dir_register+0x1b2>
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	3b01      	subs	r3, #1
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d055      	beq.n	8008982 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088dc:	88db      	ldrh	r3, [r3, #6]
 80088de:	461a      	mov	r2, r3
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff fa55 	bl	8007d96 <dir_sdi>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80088f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d143      	bne.n	8008982 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	4618      	mov	r0, r3
 8008904:	f7ff fe76 	bl	80085f4 <sum_sfn>
 8008908:	4603      	mov	r3, r0
 800890a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	4619      	mov	r1, r3
 800891e:	4610      	mov	r0, r2
 8008920:	f7fe fd8a 	bl	8007438 <move_window>
 8008924:	4603      	mov	r3, r0
 8008926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800892a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800892e:	2b00      	cmp	r3, #0
 8008930:	d126      	bne.n	8008980 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008938:	6a18      	ldr	r0, [r3, #32]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008940:	6959      	ldr	r1, [r3, #20]
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	b2da      	uxtb	r2, r3
 8008946:	7efb      	ldrb	r3, [r7, #27]
 8008948:	f7ff fd50 	bl	80083ec <fit_lfn>
				dp->fs->wflag = 1;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008958:	2201      	movs	r2, #1
 800895a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800895c:	2100      	movs	r1, #0
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff fae7 	bl	8007f32 <dir_next>
 8008964:	4603      	mov	r3, r0
 8008966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800896a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800896e:	2b00      	cmp	r3, #0
 8008970:	d107      	bne.n	8008982 <dir_register+0x1b2>
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	3b01      	subs	r3, #1
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1c6      	bne.n	800890c <dir_register+0x13c>
 800897e:	e000      	b.n	8008982 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8008980:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8008982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008986:	2b00      	cmp	r3, #0
 8008988:	d13e      	bne.n	8008a08 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	4619      	mov	r1, r3
 800899c:	4610      	mov	r0, r2
 800899e:	f7fe fd4b 	bl	8007438 <move_window>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80089a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d12b      	bne.n	8008a08 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	2220      	movs	r2, #32
 80089ba:	2100      	movs	r1, #0
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe facc 	bl	8006f5a <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c8:	6958      	ldr	r0, [r3, #20]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	220b      	movs	r2, #11
 80089d4:	4619      	mov	r1, r3
 80089d6:	f7fe faa1 	bl	8006f1c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	330b      	adds	r3, #11
 80089e4:	781a      	ldrb	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	330c      	adds	r3, #12
 80089f0:	f002 0218 	and.w	r2, r2, #24
 80089f4:	b2d2      	uxtb	r2, r2
 80089f6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a04:	2201      	movs	r2, #1
 8008a06:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8008a08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3730      	adds	r7, #48	; 0x30
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	4ec4ec4f 	.word	0x4ec4ec4f

08008a18 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08a      	sub	sp, #40	; 0x28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	e002      	b.n	8008a30 <create_name+0x18>
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b2f      	cmp	r3, #47	; 0x2f
 8008a36:	d0f8      	beq.n	8008a2a <create_name+0x12>
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b5c      	cmp	r3, #92	; 0x5c
 8008a3e:	d0f4      	beq.n	8008a2a <create_name+0x12>
	lfn = dp->lfn;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	617b      	str	r3, [r7, #20]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	61ba      	str	r2, [r7, #24]
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8008a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a62:	2b1f      	cmp	r3, #31
 8008a64:	d92f      	bls.n	8008ac6 <create_name+0xae>
 8008a66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a68:	2b2f      	cmp	r3, #47	; 0x2f
 8008a6a:	d02c      	beq.n	8008ac6 <create_name+0xae>
 8008a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a6e:	2b5c      	cmp	r3, #92	; 0x5c
 8008a70:	d029      	beq.n	8008ac6 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2bfe      	cmp	r3, #254	; 0xfe
 8008a76:	d901      	bls.n	8008a7c <create_name+0x64>
			return FR_INVALID_NAME;
 8008a78:	2306      	movs	r3, #6
 8008a7a:	e186      	b.n	8008d8a <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008a82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a84:	2101      	movs	r1, #1
 8008a86:	4618      	mov	r0, r3
 8008a88:	f001 fd80 	bl	800a58c <ff_convert>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <create_name+0x82>
 8008a96:	2306      	movs	r3, #6
 8008a98:	e177      	b.n	8008d8a <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8008a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8008a9e:	d809      	bhi.n	8008ab4 <create_name+0x9c>
 8008aa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	488e      	ldr	r0, [pc, #568]	; (8008ce0 <create_name+0x2c8>)
 8008aa6:	f7fe fa9a 	bl	8006fde <chk_chr>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <create_name+0x9c>
			return FR_INVALID_NAME;
 8008ab0:	2306      	movs	r3, #6
 8008ab2:	e16a      	b.n	8008d8a <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	617a      	str	r2, [r7, #20]
 8008aba:	005b      	lsls	r3, r3, #1
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ac2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008ac4:	e7c5      	b.n	8008a52 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	441a      	add	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8008ad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ad2:	2b1f      	cmp	r3, #31
 8008ad4:	d801      	bhi.n	8008ada <create_name+0xc2>
 8008ad6:	2304      	movs	r3, #4
 8008ad8:	e000      	b.n	8008adc <create_name+0xc4>
 8008ada:	2300      	movs	r3, #0
 8008adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8008ae0:	e011      	b.n	8008b06 <create_name+0xee>
		w = lfn[di - 1];
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4413      	add	r3, r2
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008af6:	2b20      	cmp	r3, #32
 8008af8:	d002      	beq.n	8008b00 <create_name+0xe8>
 8008afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008afc:	2b2e      	cmp	r3, #46	; 0x2e
 8008afe:	d106      	bne.n	8008b0e <create_name+0xf6>
		di--;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1ea      	bne.n	8008ae2 <create_name+0xca>
 8008b0c:	e000      	b.n	8008b10 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8008b0e:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <create_name+0x102>
 8008b16:	2306      	movs	r3, #6
 8008b18:	e137      	b.n	8008d8a <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	2200      	movs	r2, #0
 8008b24:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	220b      	movs	r2, #11
 8008b30:	2120      	movs	r1, #32
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fa11 	bl	8006f5a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61bb      	str	r3, [r7, #24]
 8008b3c:	e002      	b.n	8008b44 <create_name+0x12c>
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	3301      	adds	r3, #1
 8008b42:	61bb      	str	r3, [r7, #24]
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	d0f5      	beq.n	8008b3e <create_name+0x126>
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	4413      	add	r3, r2
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008b5e:	d0ee      	beq.n	8008b3e <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d009      	beq.n	8008b7a <create_name+0x162>
 8008b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b6a:	f043 0303 	orr.w	r3, r3, #3
 8008b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008b72:	e002      	b.n	8008b7a <create_name+0x162>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d009      	beq.n	8008b94 <create_name+0x17c>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b86:	3b01      	subs	r3, #1
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	2b2e      	cmp	r3, #46	; 0x2e
 8008b92:	d1ef      	bne.n	8008b74 <create_name+0x15c>

	b = i = 0; ni = 8;
 8008b94:	2300      	movs	r3, #0
 8008b96:	623b      	str	r3, [r7, #32]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b9e:	2308      	movs	r3, #8
 8008ba0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	61ba      	str	r2, [r7, #24]
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4413      	add	r3, r2
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 8091 	beq.w	8008cdc <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bbc:	2b20      	cmp	r3, #32
 8008bbe:	d006      	beq.n	8008bce <create_name+0x1b6>
 8008bc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc4:	d10a      	bne.n	8008bdc <create_name+0x1c4>
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d006      	beq.n	8008bdc <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8008bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bd2:	f043 0303 	orr.w	r3, r3, #3
 8008bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008bda:	e07e      	b.n	8008cda <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d203      	bcs.n	8008bec <create_name+0x1d4>
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d123      	bne.n	8008c34 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	2b0b      	cmp	r3, #11
 8008bf0:	d106      	bne.n	8008c00 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8008bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf6:	f043 0303 	orr.w	r3, r3, #3
 8008bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008bfe:	e076      	b.n	8008cee <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d005      	beq.n	8008c14 <create_name+0x1fc>
 8008c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c0c:	f043 0303 	orr.w	r3, r3, #3
 8008c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d867      	bhi.n	8008cec <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	61bb      	str	r3, [r7, #24]
 8008c20:	2308      	movs	r3, #8
 8008c22:	623b      	str	r3, [r7, #32]
 8008c24:	230b      	movs	r3, #11
 8008c26:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008c28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008c32:	e052      	b.n	8008cda <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008c34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c36:	2b7f      	cmp	r3, #127	; 0x7f
 8008c38:	d914      	bls.n	8008c64 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 fca4 	bl	800a58c <ff_convert>
 8008c44:	4603      	mov	r3, r0
 8008c46:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d004      	beq.n	8008c58 <create_name+0x240>
 8008c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c50:	3b80      	subs	r3, #128	; 0x80
 8008c52:	4a24      	ldr	r2, [pc, #144]	; (8008ce4 <create_name+0x2cc>)
 8008c54:	5cd3      	ldrb	r3, [r2, r3]
 8008c56:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c5c:	f043 0302 	orr.w	r3, r3, #2
 8008c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d007      	beq.n	8008c7a <create_name+0x262>
 8008c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	481e      	ldr	r0, [pc, #120]	; (8008ce8 <create_name+0x2d0>)
 8008c70:	f7fe f9b5 	bl	8006fde <chk_chr>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d008      	beq.n	8008c8c <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008c7a:	235f      	movs	r3, #95	; 0x5f
 8008c7c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c82:	f043 0303 	orr.w	r3, r3, #3
 8008c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c8a:	e01b      	b.n	8008cc4 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008c8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c8e:	2b40      	cmp	r3, #64	; 0x40
 8008c90:	d909      	bls.n	8008ca6 <create_name+0x28e>
 8008c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c94:	2b5a      	cmp	r3, #90	; 0x5a
 8008c96:	d806      	bhi.n	8008ca6 <create_name+0x28e>
					b |= 2;
 8008c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c9c:	f043 0302 	orr.w	r3, r3, #2
 8008ca0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008ca4:	e00e      	b.n	8008cc4 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008ca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ca8:	2b60      	cmp	r3, #96	; 0x60
 8008caa:	d90b      	bls.n	8008cc4 <create_name+0x2ac>
 8008cac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cae:	2b7a      	cmp	r3, #122	; 0x7a
 8008cb0:	d808      	bhi.n	8008cc4 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8008cb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008cb6:	f043 0301 	orr.w	r3, r3, #1
 8008cba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008cbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cc0:	3b20      	subs	r3, #32
 8008cc2:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cca:	699a      	ldr	r2, [r3, #24]
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	1c59      	adds	r1, r3, #1
 8008cd0:	6239      	str	r1, [r7, #32]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8008cda:	e762      	b.n	8008ba2 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8008cdc:	bf00      	nop
 8008cde:	e006      	b.n	8008cee <create_name+0x2d6>
 8008ce0:	0800b068 	.word	0x0800b068
 8008ce4:	0800b5fc 	.word	0x0800b5fc
 8008ce8:	0800b074 	.word	0x0800b074
			if (si > di) break;			/* No extension */
 8008cec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2be5      	cmp	r3, #229	; 0xe5
 8008cfa:	d105      	bne.n	8008d08 <create_name+0x2f0>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	2205      	movs	r2, #5
 8008d06:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	2b08      	cmp	r3, #8
 8008d0c:	d104      	bne.n	8008d18 <create_name+0x300>
 8008d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8008d18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d1c:	f003 030c 	and.w	r3, r3, #12
 8008d20:	2b0c      	cmp	r3, #12
 8008d22:	d005      	beq.n	8008d30 <create_name+0x318>
 8008d24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d105      	bne.n	8008d3c <create_name+0x324>
		cf |= NS_LFN;
 8008d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d34:	f043 0302 	orr.w	r3, r3, #2
 8008d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d117      	bne.n	8008d78 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008d48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d105      	bne.n	8008d60 <create_name+0x348>
 8008d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d58:	f043 0310 	orr.w	r3, r3, #16
 8008d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008d60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d64:	f003 030c 	and.w	r3, r3, #12
 8008d68:	2b04      	cmp	r3, #4
 8008d6a:	d105      	bne.n	8008d78 <create_name+0x360>
 8008d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d70:	f043 0308 	orr.w	r3, r3, #8
 8008d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	330b      	adds	r3, #11
 8008d82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008d86:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008d88:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3728      	adds	r7, #40	; 0x28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop

08008d94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b2f      	cmp	r3, #47	; 0x2f
 8008da4:	d003      	beq.n	8008dae <follow_path+0x1a>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b5c      	cmp	r3, #92	; 0x5c
 8008dac:	d102      	bne.n	8008db4 <follow_path+0x20>
		path++;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	3301      	adds	r3, #1
 8008db2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dba:	461a      	mov	r2, r3
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b1f      	cmp	r3, #31
 8008dc6:	d80c      	bhi.n	8008de2 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8008dc8:	2100      	movs	r1, #0
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7fe ffe3 	bl	8007d96 <dir_sdi>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dda:	461a      	mov	r2, r3
 8008ddc:	2300      	movs	r3, #0
 8008dde:	6153      	str	r3, [r2, #20]
 8008de0:	e049      	b.n	8008e76 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008de2:	463b      	mov	r3, r7
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff fe16 	bl	8008a18 <create_name>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d13a      	bne.n	8008e6c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff fc1d 	bl	8008636 <dir_find>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	7adb      	ldrb	r3, [r3, #11]
 8008e0a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d12b      	bne.n	8008e70 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	f003 0304 	and.w	r3, r3, #4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d126      	bne.n	8008e70 <follow_path+0xdc>
 8008e22:	2305      	movs	r3, #5
 8008e24:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8008e26:	e023      	b.n	8008e70 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	f003 0304 	and.w	r3, r3, #4
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d120      	bne.n	8008e74 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	330b      	adds	r3, #11
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	f003 0310 	and.w	r3, r3, #16
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d102      	bne.n	8008e50 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8008e4a:	2305      	movs	r3, #5
 8008e4c:	73fb      	strb	r3, [r7, #15]
 8008e4e:	e012      	b.n	8008e76 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68b9      	ldr	r1, [r7, #8]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff fa01 	bl	8008262 <ld_clust>
 8008e60:	4602      	mov	r2, r0
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e68:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e6a:	e7ba      	b.n	8008de2 <follow_path+0x4e>
			if (res != FR_OK) break;
 8008e6c:	bf00      	nop
 8008e6e:	e002      	b.n	8008e76 <follow_path+0xe2>
				break;
 8008e70:	bf00      	nop
 8008e72:	e000      	b.n	8008e76 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e74:	bf00      	nop
		}
	}

	return res;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008e88:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d031      	beq.n	8008efa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	617b      	str	r3, [r7, #20]
 8008e9c:	e002      	b.n	8008ea4 <get_ldnumber+0x24>
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	617b      	str	r3, [r7, #20]
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b1f      	cmp	r3, #31
 8008eaa:	d903      	bls.n	8008eb4 <get_ldnumber+0x34>
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b3a      	cmp	r3, #58	; 0x3a
 8008eb2:	d1f4      	bne.n	8008e9e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b3a      	cmp	r3, #58	; 0x3a
 8008eba:	d11c      	bne.n	8008ef6 <get_ldnumber+0x76>
			tp = *path;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	60fa      	str	r2, [r7, #12]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	3b30      	subs	r3, #48	; 0x30
 8008ecc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b09      	cmp	r3, #9
 8008ed2:	d80e      	bhi.n	8008ef2 <get_ldnumber+0x72>
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d10a      	bne.n	8008ef2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d107      	bne.n	8008ef2 <get_ldnumber+0x72>
					vol = (int)i;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	e002      	b.n	8008efc <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008efa:	693b      	ldr	r3, [r7, #16]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f18:	2200      	movs	r2, #0
 8008f1a:	711a      	strb	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f22:	461a      	mov	r2, r3
 8008f24:	f04f 33ff 	mov.w	r3, #4294967295
 8008f28:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7fe fa83 	bl	8007438 <move_window>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d001      	beq.n	8008f3c <check_fs+0x34>
		return 3;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e04a      	b.n	8008fd2 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f42:	3301      	adds	r3, #1
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	021b      	lsls	r3, r3, #8
 8008f48:	b21a      	sxth	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008f50:	b21b      	sxth	r3, r3
 8008f52:	4313      	orrs	r3, r2
 8008f54:	b21b      	sxth	r3, r3
 8008f56:	4a21      	ldr	r2, [pc, #132]	; (8008fdc <check_fs+0xd4>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d001      	beq.n	8008f60 <check_fs+0x58>
		return 2;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e038      	b.n	8008fd2 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3336      	adds	r3, #54	; 0x36
 8008f64:	3303      	adds	r3, #3
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	061a      	lsls	r2, r3, #24
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	3336      	adds	r3, #54	; 0x36
 8008f6e:	3302      	adds	r3, #2
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	041b      	lsls	r3, r3, #16
 8008f74:	4313      	orrs	r3, r2
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	3236      	adds	r2, #54	; 0x36
 8008f7a:	3201      	adds	r2, #1
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	0212      	lsls	r2, r2, #8
 8008f80:	4313      	orrs	r3, r2
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f8e:	4a14      	ldr	r2, [pc, #80]	; (8008fe0 <check_fs+0xd8>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d101      	bne.n	8008f98 <check_fs+0x90>
		return 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	e01c      	b.n	8008fd2 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3352      	adds	r3, #82	; 0x52
 8008f9c:	3303      	adds	r3, #3
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	061a      	lsls	r2, r3, #24
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3352      	adds	r3, #82	; 0x52
 8008fa6:	3302      	adds	r3, #2
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	041b      	lsls	r3, r3, #16
 8008fac:	4313      	orrs	r3, r2
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	3252      	adds	r2, #82	; 0x52
 8008fb2:	3201      	adds	r2, #1
 8008fb4:	7812      	ldrb	r2, [r2, #0]
 8008fb6:	0212      	lsls	r2, r2, #8
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008fc6:	4a06      	ldr	r2, [pc, #24]	; (8008fe0 <check_fs+0xd8>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d101      	bne.n	8008fd0 <check_fs+0xc8>
		return 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	e000      	b.n	8008fd2 <check_fs+0xca>

	return 1;
 8008fd0:	2301      	movs	r3, #1
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	ffffaa55 	.word	0xffffaa55
 8008fe0:	00544146 	.word	0x00544146

08008fe4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b096      	sub	sp, #88	; 0x58
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008ff8:	68b8      	ldr	r0, [r7, #8]
 8008ffa:	f7ff ff41 	bl	8008e80 <get_ldnumber>
 8008ffe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009002:	2b00      	cmp	r3, #0
 8009004:	da01      	bge.n	800900a <find_volume+0x26>
 8009006:	230b      	movs	r3, #11
 8009008:	e311      	b.n	800962e <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800900a:	4a98      	ldr	r2, [pc, #608]	; (800926c <find_volume+0x288>)
 800900c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009012:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <find_volume+0x3a>
 800901a:	230c      	movs	r3, #12
 800901c:	e307      	b.n	800962e <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009022:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01c      	beq.n	800906a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009036:	785b      	ldrb	r3, [r3, #1]
 8009038:	4618      	mov	r0, r3
 800903a:	f7fd fed1 	bl	8006de0 <disk_status>
 800903e:	4603      	mov	r3, r0
 8009040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009044:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10c      	bne.n	800906a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d007      	beq.n	8009066 <find_volume+0x82>
 8009056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800905a:	f003 0304 	and.w	r3, r3, #4
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009062:	230a      	movs	r3, #10
 8009064:	e2e3      	b.n	800962e <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8009066:	2300      	movs	r3, #0
 8009068:	e2e1      	b.n	800962e <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009070:	2200      	movs	r2, #0
 8009072:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009076:	b2da      	uxtb	r2, r3
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800907e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009086:	785b      	ldrb	r3, [r3, #1]
 8009088:	4618      	mov	r0, r3
 800908a:	f7fd fec3 	bl	8006e14 <disk_initialize>
 800908e:	4603      	mov	r3, r0
 8009090:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80090a0:	2303      	movs	r3, #3
 80090a2:	e2c4      	b.n	800962e <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d007      	beq.n	80090ba <find_volume+0xd6>
 80090aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80090b6:	230a      	movs	r3, #10
 80090b8:	e2b9      	b.n	800962e <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80090ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c0:	7858      	ldrb	r0, [r3, #1]
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c8:	330a      	adds	r3, #10
 80090ca:	461a      	mov	r2, r3
 80090cc:	2102      	movs	r1, #2
 80090ce:	f7fd ff07 	bl	8006ee0 <disk_ioctl>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10d      	bne.n	80090f4 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090de:	895b      	ldrh	r3, [r3, #10]
 80090e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090e4:	d306      	bcc.n	80090f4 <find_volume+0x110>
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ec:	895b      	ldrh	r3, [r3, #10]
 80090ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090f2:	d901      	bls.n	80090f8 <find_volume+0x114>
 80090f4:	2301      	movs	r3, #1
 80090f6:	e29a      	b.n	800962e <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80090fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009100:	f7ff ff02 	bl	8008f08 <check_fs>
 8009104:	4603      	mov	r3, r0
 8009106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800910a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800910e:	2b01      	cmp	r3, #1
 8009110:	d153      	bne.n	80091ba <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009112:	2300      	movs	r3, #0
 8009114:	643b      	str	r3, [r7, #64]	; 0x40
 8009116:	e028      	b.n	800916a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8009118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800911a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009122:	4413      	add	r3, r2
 8009124:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	3304      	adds	r3, #4
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d012      	beq.n	8009156 <find_volume+0x172>
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	330b      	adds	r3, #11
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	061a      	lsls	r2, r3, #24
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	330a      	adds	r3, #10
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	041b      	lsls	r3, r3, #16
 8009140:	4313      	orrs	r3, r2
 8009142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009144:	3209      	adds	r2, #9
 8009146:	7812      	ldrb	r2, [r2, #0]
 8009148:	0212      	lsls	r2, r2, #8
 800914a:	4313      	orrs	r3, r2
 800914c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914e:	3208      	adds	r2, #8
 8009150:	7812      	ldrb	r2, [r2, #0]
 8009152:	431a      	orrs	r2, r3
 8009154:	e000      	b.n	8009158 <find_volume+0x174>
 8009156:	2200      	movs	r2, #0
 8009158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	3358      	adds	r3, #88	; 0x58
 800915e:	443b      	add	r3, r7
 8009160:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009166:	3301      	adds	r3, #1
 8009168:	643b      	str	r3, [r7, #64]	; 0x40
 800916a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800916c:	2b03      	cmp	r3, #3
 800916e:	d9d3      	bls.n	8009118 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8009170:	2300      	movs	r3, #0
 8009172:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <find_volume+0x19c>
 800917a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800917c:	3b01      	subs	r3, #1
 800917e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8009180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	3358      	adds	r3, #88	; 0x58
 8009186:	443b      	add	r3, r7
 8009188:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800918c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800918e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009190:	2b00      	cmp	r3, #0
 8009192:	d005      	beq.n	80091a0 <find_volume+0x1bc>
 8009194:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009196:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009198:	f7ff feb6 	bl	8008f08 <check_fs>
 800919c:	4603      	mov	r3, r0
 800919e:	e000      	b.n	80091a2 <find_volume+0x1be>
 80091a0:	2302      	movs	r3, #2
 80091a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80091a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d005      	beq.n	80091ba <find_volume+0x1d6>
 80091ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b0:	3301      	adds	r3, #1
 80091b2:	643b      	str	r3, [r7, #64]	; 0x40
 80091b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d9e2      	bls.n	8009180 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80091ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d101      	bne.n	80091c6 <find_volume+0x1e2>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e233      	b.n	800962e <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80091c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <find_volume+0x1ee>
 80091ce:	230d      	movs	r3, #13
 80091d0:	e22d      	b.n	800962e <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	7b1b      	ldrb	r3, [r3, #12]
 80091d6:	021b      	lsls	r3, r3, #8
 80091d8:	b21a      	sxth	r2, r3
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	7adb      	ldrb	r3, [r3, #11]
 80091de:	b21b      	sxth	r3, r3
 80091e0:	4313      	orrs	r3, r2
 80091e2:	b21a      	sxth	r2, r3
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ea:	895b      	ldrh	r3, [r3, #10]
 80091ec:	b21b      	sxth	r3, r3
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d001      	beq.n	80091f6 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80091f2:	230d      	movs	r3, #13
 80091f4:	e21b      	b.n	800962e <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	7ddb      	ldrb	r3, [r3, #23]
 80091fa:	021b      	lsls	r3, r3, #8
 80091fc:	b21a      	sxth	r2, r3
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	7d9b      	ldrb	r3, [r3, #22]
 8009202:	b21b      	sxth	r3, r3
 8009204:	4313      	orrs	r3, r2
 8009206:	b21b      	sxth	r3, r3
 8009208:	b29b      	uxth	r3, r3
 800920a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800920c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800920e:	2b00      	cmp	r3, #0
 8009210:	d112      	bne.n	8009238 <find_volume+0x254>
 8009212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009214:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009218:	061a      	lsls	r2, r3, #24
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009220:	041b      	lsls	r3, r3, #16
 8009222:	4313      	orrs	r3, r2
 8009224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009226:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800922a:	0212      	lsls	r2, r2, #8
 800922c:	4313      	orrs	r3, r2
 800922e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009230:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009234:	4313      	orrs	r3, r2
 8009236:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800923e:	461a      	mov	r2, r3
 8009240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009242:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009246:	7c1a      	ldrb	r2, [r3, #16]
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800924e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009256:	78db      	ldrb	r3, [r3, #3]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d009      	beq.n	8009270 <find_volume+0x28c>
 800925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009262:	78db      	ldrb	r3, [r3, #3]
 8009264:	2b02      	cmp	r3, #2
 8009266:	d003      	beq.n	8009270 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8009268:	230d      	movs	r3, #13
 800926a:	e1e0      	b.n	800962e <find_volume+0x64a>
 800926c:	200027b0 	.word	0x200027b0
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009276:	78db      	ldrb	r3, [r3, #3]
 8009278:	461a      	mov	r2, r3
 800927a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800927c:	fb02 f303 	mul.w	r3, r2, r3
 8009280:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	7b5a      	ldrb	r2, [r3, #13]
 8009286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800928c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009294:	789b      	ldrb	r3, [r3, #2]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00c      	beq.n	80092b4 <find_volume+0x2d0>
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a0:	789b      	ldrb	r3, [r3, #2]
 80092a2:	461a      	mov	r2, r3
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092aa:	789b      	ldrb	r3, [r3, #2]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	4013      	ands	r3, r2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 80092b4:	230d      	movs	r3, #13
 80092b6:	e1ba      	b.n	800962e <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80092b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ba:	7c9b      	ldrb	r3, [r3, #18]
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	b21a      	sxth	r2, r3
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	7c5b      	ldrb	r3, [r3, #17]
 80092c4:	b21b      	sxth	r3, r3
 80092c6:	4313      	orrs	r3, r2
 80092c8:	b21b      	sxth	r3, r3
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092da:	891b      	ldrh	r3, [r3, #8]
 80092dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092e2:	8952      	ldrh	r2, [r2, #10]
 80092e4:	0952      	lsrs	r2, r2, #5
 80092e6:	b292      	uxth	r2, r2
 80092e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80092ec:	fb01 f202 	mul.w	r2, r1, r2
 80092f0:	1a9b      	subs	r3, r3, r2
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80092f8:	230d      	movs	r3, #13
 80092fa:	e198      	b.n	800962e <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	7d1b      	ldrb	r3, [r3, #20]
 8009300:	021b      	lsls	r3, r3, #8
 8009302:	b21a      	sxth	r2, r3
 8009304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009306:	7cdb      	ldrb	r3, [r3, #19]
 8009308:	b21b      	sxth	r3, r3
 800930a:	4313      	orrs	r3, r2
 800930c:	b21b      	sxth	r3, r3
 800930e:	b29b      	uxth	r3, r3
 8009310:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8009312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009314:	2b00      	cmp	r3, #0
 8009316:	d112      	bne.n	800933e <find_volume+0x35a>
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800931e:	061a      	lsls	r2, r3, #24
 8009320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009322:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009326:	041b      	lsls	r3, r3, #16
 8009328:	4313      	orrs	r3, r2
 800932a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800932c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8009330:	0212      	lsls	r2, r2, #8
 8009332:	4313      	orrs	r3, r2
 8009334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009336:	f892 2020 	ldrb.w	r2, [r2, #32]
 800933a:	4313      	orrs	r3, r2
 800933c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	7bdb      	ldrb	r3, [r3, #15]
 8009342:	021b      	lsls	r3, r3, #8
 8009344:	b21a      	sxth	r2, r3
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	7b9b      	ldrb	r3, [r3, #14]
 800934a:	b21b      	sxth	r3, r3
 800934c:	4313      	orrs	r3, r2
 800934e:	b21b      	sxth	r3, r3
 8009350:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8009352:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <find_volume+0x378>
 8009358:	230d      	movs	r3, #13
 800935a:	e168      	b.n	800962e <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800935c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800935e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009360:	4413      	add	r3, r2
 8009362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009364:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009368:	8911      	ldrh	r1, [r2, #8]
 800936a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800936c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009370:	8952      	ldrh	r2, [r2, #10]
 8009372:	0952      	lsrs	r2, r2, #5
 8009374:	b292      	uxth	r2, r2
 8009376:	fbb1 f2f2 	udiv	r2, r1, r2
 800937a:	b292      	uxth	r2, r2
 800937c:	4413      	add	r3, r2
 800937e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009384:	429a      	cmp	r2, r3
 8009386:	d201      	bcs.n	800938c <find_volume+0x3a8>
 8009388:	230d      	movs	r3, #13
 800938a:	e150      	b.n	800962e <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800938c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009394:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009398:	7892      	ldrb	r2, [r2, #2]
 800939a:	fbb3 f3f2 	udiv	r3, r3, r2
 800939e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <find_volume+0x3c6>
 80093a6:	230d      	movs	r3, #13
 80093a8:	e141      	b.n	800962e <find_volume+0x64a>
	fmt = FS_FAT12;
 80093aa:	2301      	movs	r3, #1
 80093ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d902      	bls.n	80093c0 <find_volume+0x3dc>
 80093ba:	2302      	movs	r3, #2
 80093bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d902      	bls.n	80093d0 <find_volume+0x3ec>
 80093ca:	2303      	movs	r3, #3
 80093cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	3302      	adds	r3, #2
 80093d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80093da:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e2:	461a      	mov	r2, r3
 80093e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093e6:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80093e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ec:	4413      	add	r3, r2
 80093ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80093f4:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80093f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	4413      	add	r3, r2
 80093fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009402:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8009404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009408:	2b03      	cmp	r3, #3
 800940a:	d124      	bne.n	8009456 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009412:	891b      	ldrh	r3, [r3, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <find_volume+0x438>
 8009418:	230d      	movs	r3, #13
 800941a:	e108      	b.n	800962e <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009422:	061a      	lsls	r2, r3, #24
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800942a:	041b      	lsls	r3, r3, #16
 800942c:	4313      	orrs	r3, r2
 800942e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009430:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8009434:	0212      	lsls	r2, r2, #8
 8009436:	4313      	orrs	r3, r2
 8009438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800943a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800943e:	4313      	orrs	r3, r2
 8009440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009442:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009446:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	647b      	str	r3, [r7, #68]	; 0x44
 8009454:	e02b      	b.n	80094ae <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800945c:	891b      	ldrh	r3, [r3, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <find_volume+0x482>
 8009462:	230d      	movs	r3, #13
 8009464:	e0e3      	b.n	800962e <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946c:	6a1a      	ldr	r2, [r3, #32]
 800946e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009470:	4413      	add	r3, r2
 8009472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009474:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009478:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800947a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800947e:	2b02      	cmp	r3, #2
 8009480:	d105      	bne.n	800948e <find_volume+0x4aa>
 8009482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	e00e      	b.n	80094ac <find_volume+0x4c8>
 800948e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009494:	695a      	ldr	r2, [r3, #20]
 8009496:	4613      	mov	r3, r2
 8009498:	005b      	lsls	r3, r3, #1
 800949a:	4413      	add	r3, r2
 800949c:	085a      	lsrs	r2, r3, #1
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80094ac:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80094ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094b4:	699a      	ldr	r2, [r3, #24]
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094bc:	895b      	ldrh	r3, [r3, #10]
 80094be:	4619      	mov	r1, r3
 80094c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094c2:	440b      	add	r3, r1
 80094c4:	3b01      	subs	r3, #1
 80094c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094c8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80094cc:	8949      	ldrh	r1, [r1, #10]
 80094ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d201      	bcs.n	80094da <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80094d6:	230d      	movs	r3, #13
 80094d8:	e0a9      	b.n	800962e <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80094da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e0:	461a      	mov	r2, r3
 80094e2:	f04f 33ff 	mov.w	r3, #4294967295
 80094e6:	6113      	str	r3, [r2, #16]
 80094e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094f6:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80094f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094fe:	2280      	movs	r2, #128	; 0x80
 8009500:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009502:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009506:	2b03      	cmp	r3, #3
 8009508:	d17a      	bne.n	8009600 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009510:	021b      	lsls	r3, r3, #8
 8009512:	b21a      	sxth	r2, r3
 8009514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009516:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800951a:	b21b      	sxth	r3, r3
 800951c:	4313      	orrs	r3, r2
 800951e:	b21b      	sxth	r3, r3
 8009520:	2b01      	cmp	r3, #1
 8009522:	d16d      	bne.n	8009600 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8009524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009526:	3301      	adds	r3, #1
 8009528:	4619      	mov	r1, r3
 800952a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800952c:	f7fd ff84 	bl	8007438 <move_window>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d164      	bne.n	8009600 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800953c:	2200      	movs	r2, #0
 800953e:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8009546:	021b      	lsls	r3, r3, #8
 8009548:	b21a      	sxth	r2, r3
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8009550:	b21b      	sxth	r3, r3
 8009552:	4313      	orrs	r3, r2
 8009554:	b21b      	sxth	r3, r3
 8009556:	4a38      	ldr	r2, [pc, #224]	; (8009638 <find_volume+0x654>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d151      	bne.n	8009600 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955e:	78db      	ldrb	r3, [r3, #3]
 8009560:	061a      	lsls	r2, r3, #24
 8009562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009564:	789b      	ldrb	r3, [r3, #2]
 8009566:	041b      	lsls	r3, r3, #16
 8009568:	4313      	orrs	r3, r2
 800956a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800956c:	7852      	ldrb	r2, [r2, #1]
 800956e:	0212      	lsls	r2, r2, #8
 8009570:	4313      	orrs	r3, r2
 8009572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009574:	7812      	ldrb	r2, [r2, #0]
 8009576:	4313      	orrs	r3, r2
 8009578:	4a30      	ldr	r2, [pc, #192]	; (800963c <find_volume+0x658>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d140      	bne.n	8009600 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8009584:	061a      	lsls	r2, r3, #24
 8009586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009588:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800958c:	041b      	lsls	r3, r3, #16
 800958e:	4313      	orrs	r3, r2
 8009590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009592:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8009596:	0212      	lsls	r2, r2, #8
 8009598:	4313      	orrs	r3, r2
 800959a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800959c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80095a0:	4313      	orrs	r3, r2
 80095a2:	4a27      	ldr	r2, [pc, #156]	; (8009640 <find_volume+0x65c>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d12b      	bne.n	8009600 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80095ae:	061a      	lsls	r2, r3, #24
 80095b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80095b6:	041b      	lsls	r3, r3, #16
 80095b8:	4313      	orrs	r3, r2
 80095ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095bc:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80095c0:	0212      	lsls	r2, r2, #8
 80095c2:	4313      	orrs	r3, r2
 80095c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095c6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80095ca:	4313      	orrs	r3, r2
 80095cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095d2:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80095da:	061a      	lsls	r2, r3, #24
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80095e2:	041b      	lsls	r3, r3, #16
 80095e4:	4313      	orrs	r3, r2
 80095e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095e8:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80095ec:	0212      	lsls	r2, r2, #8
 80095ee:	4313      	orrs	r3, r2
 80095f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095f2:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80095f6:	4313      	orrs	r3, r2
 80095f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095fe:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009606:	461a      	mov	r2, r3
 8009608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800960c:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800960e:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <find_volume+0x660>)
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	3301      	adds	r3, #1
 8009614:	b29a      	uxth	r2, r3
 8009616:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <find_volume+0x660>)
 8009618:	801a      	strh	r2, [r3, #0]
 800961a:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <find_volume+0x660>)
 800961c:	881a      	ldrh	r2, [r3, #0]
 800961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009624:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8009626:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009628:	f7fd fe8a 	bl	8007340 <clear_lock>
#endif

	return FR_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3758      	adds	r7, #88	; 0x58
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	ffffaa55 	.word	0xffffaa55
 800963c:	41615252 	.word	0x41615252
 8009640:	61417272 	.word	0x61417272
 8009644:	200027b4 	.word	0x200027b4

08009648 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d02a      	beq.n	80096b0 <validate+0x68>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d024      	beq.n	80096b0 <validate+0x68>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d01b      	beq.n	80096b0 <validate+0x68>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009684:	88da      	ldrh	r2, [r3, #6]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800968c:	889b      	ldrh	r3, [r3, #4]
 800968e:	429a      	cmp	r2, r3
 8009690:	d10e      	bne.n	80096b0 <validate+0x68>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800969e:	785b      	ldrb	r3, [r3, #1]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fd fb9d 	bl	8006de0 <disk_status>
 80096a6:	4603      	mov	r3, r0
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <validate+0x6c>
		return FR_INVALID_OBJECT;
 80096b0:	2309      	movs	r3, #9
 80096b2:	e000      	b.n	80096b6 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4613      	mov	r3, r2
 80096cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80096d2:	f107 0310 	add.w	r3, r7, #16
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7ff fbd2 	bl	8008e80 <get_ldnumber>
 80096dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	da01      	bge.n	80096e8 <f_mount+0x28>
 80096e4:	230b      	movs	r3, #11
 80096e6:	e02f      	b.n	8009748 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80096e8:	4a19      	ldr	r2, [pc, #100]	; (8009750 <f_mount+0x90>)
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d007      	beq.n	8009708 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80096f8:	69b8      	ldr	r0, [r7, #24]
 80096fa:	f7fd fe21 	bl	8007340 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009704:	2200      	movs	r2, #0
 8009706:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d004      	beq.n	8009718 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	490d      	ldr	r1, [pc, #52]	; (8009750 <f_mount+0x90>)
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d002      	beq.n	800972e <f_mount+0x6e>
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d001      	beq.n	8009732 <f_mount+0x72>
 800972e:	2300      	movs	r3, #0
 8009730:	e00a      	b.n	8009748 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009732:	f107 0108 	add.w	r1, r7, #8
 8009736:	f107 030c 	add.w	r3, r7, #12
 800973a:	2200      	movs	r2, #0
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff fc51 	bl	8008fe4 <find_volume>
 8009742:	4603      	mov	r3, r0
 8009744:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009746:	7dfb      	ldrb	r3, [r7, #23]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3720      	adds	r7, #32
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	200027b0 	.word	0x200027b0

08009754 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009762:	f843 0c4c 	str.w	r0, [r3, #-76]
 8009766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800976a:	f843 1c50 	str.w	r1, [r3, #-80]
 800976e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009772:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8009776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800977a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <f_open+0x32>
 8009782:	2309      	movs	r3, #9
 8009784:	e2f7      	b.n	8009d76 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8009786:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800978a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800978e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009792:	461a      	mov	r2, r3
 8009794:	2300      	movs	r3, #0
 8009796:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8009798:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800979c:	461a      	mov	r2, r3
 800979e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80097a2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80097a6:	f003 031f 	and.w	r3, r3, #31
 80097aa:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80097ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80097b2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80097b6:	f023 0301 	bic.w	r3, r3, #1
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	f107 0118 	add.w	r1, r7, #24
 80097c0:	3910      	subs	r1, #16
 80097c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80097c6:	3b18      	subs	r3, #24
 80097c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff fc09 	bl	8008fe4 <find_volume>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80097d8:	f102 0217 	add.w	r2, r2, #23
 80097dc:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80097de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80097e2:	f103 0317 	add.w	r3, r3, #23
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f040 82bf 	bne.w	8009d6c <f_open+0x618>
		INIT_BUF(dj);
 80097ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80097f2:	461a      	mov	r2, r3
 80097f4:	f107 0318 	add.w	r3, r7, #24
 80097f8:	3b04      	subs	r3, #4
 80097fa:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 80097fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009802:	461a      	mov	r2, r3
 8009804:	4bd4      	ldr	r3, [pc, #848]	; (8009b58 <f_open+0x404>)
 8009806:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800980a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800980e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8009812:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009816:	3b18      	subs	r3, #24
 8009818:	4611      	mov	r1, r2
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff faba 	bl	8008d94 <follow_path>
 8009820:	4603      	mov	r3, r0
 8009822:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009826:	f102 0217 	add.w	r2, r2, #23
 800982a:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800982c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009830:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8009834:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009838:	f102 0210 	add.w	r2, r2, #16
 800983c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800983e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009842:	f103 0317 	add.w	r3, r3, #23
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d126      	bne.n	800989a <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800984c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009850:	f103 0310 	add.w	r3, r3, #16
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d106      	bne.n	8009868 <f_open+0x114>
				res = FR_INVALID_NAME;
 800985a:	2306      	movs	r3, #6
 800985c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009860:	f102 0217 	add.w	r2, r2, #23
 8009864:	7013      	strb	r3, [r2, #0]
 8009866:	e018      	b.n	800989a <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009868:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800986c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009870:	f023 0301 	bic.w	r3, r3, #1
 8009874:	2b00      	cmp	r3, #0
 8009876:	bf14      	ite	ne
 8009878:	2301      	movne	r3, #1
 800987a:	2300      	moveq	r3, #0
 800987c:	b2db      	uxtb	r3, r3
 800987e:	461a      	mov	r2, r3
 8009880:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009884:	3b18      	subs	r3, #24
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f7fd fbc3 	bl	8007014 <chk_lock>
 800988e:	4603      	mov	r3, r0
 8009890:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009894:	f102 0217 	add.w	r2, r2, #23
 8009898:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800989a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800989e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80098a2:	f003 031c 	and.w	r3, r3, #28
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f000 813c 	beq.w	8009b24 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 80098ac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80098b0:	f103 0317 	add.w	r3, r3, #23
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d02e      	beq.n	8009918 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80098ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80098be:	f103 0317 	add.w	r3, r3, #23
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d112      	bne.n	80098ee <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80098c8:	f7fd fc14 	bl	80070f4 <enq_lock>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d007      	beq.n	80098e2 <f_open+0x18e>
 80098d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80098d6:	3b18      	subs	r3, #24
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fe ff79 	bl	80087d0 <dir_register>
 80098de:	4603      	mov	r3, r0
 80098e0:	e000      	b.n	80098e4 <f_open+0x190>
 80098e2:	2312      	movs	r3, #18
 80098e4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80098e8:	f102 0217 	add.w	r2, r2, #23
 80098ec:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80098ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80098f2:	461a      	mov	r2, r3
 80098f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80098f8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80098fc:	f043 0308 	orr.w	r3, r3, #8
 8009900:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8009904:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009908:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800990c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009910:	f102 0210 	add.w	r2, r2, #16
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	e01f      	b.n	8009958 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009918:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800991c:	f103 0310 	add.w	r3, r3, #16
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	330b      	adds	r3, #11
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	f003 0311 	and.w	r3, r3, #17
 800992a:	2b00      	cmp	r3, #0
 800992c:	d006      	beq.n	800993c <f_open+0x1e8>
					res = FR_DENIED;
 800992e:	2307      	movs	r3, #7
 8009930:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009934:	f102 0217 	add.w	r2, r2, #23
 8009938:	7013      	strb	r3, [r2, #0]
 800993a:	e00d      	b.n	8009958 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800993c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009940:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d005      	beq.n	8009958 <f_open+0x204>
						res = FR_EXIST;
 800994c:	2308      	movs	r3, #8
 800994e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009952:	f102 0217 	add.w	r2, r2, #23
 8009956:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009958:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800995c:	f103 0317 	add.w	r3, r3, #23
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	f040 8113 	bne.w	8009b8e <f_open+0x43a>
 8009968:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800996c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009970:	f003 0308 	and.w	r3, r3, #8
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 810a 	beq.w	8009b8e <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800997a:	f7fd f9cf 	bl	8006d1c <get_fattime>
 800997e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009982:	f103 030c 	add.w	r3, r3, #12
 8009986:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009988:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800998c:	f103 0310 	add.w	r3, r3, #16
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	330e      	adds	r3, #14
 8009994:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009998:	f102 020c 	add.w	r2, r2, #12
 800999c:	6812      	ldr	r2, [r2, #0]
 800999e:	b2d2      	uxtb	r2, r2
 80099a0:	701a      	strb	r2, [r3, #0]
 80099a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80099a6:	f103 030c 	add.w	r3, r3, #12
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	0a1b      	lsrs	r3, r3, #8
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80099b6:	f103 0310 	add.w	r3, r3, #16
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	330f      	adds	r3, #15
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	701a      	strb	r2, [r3, #0]
 80099c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80099c6:	f103 030c 	add.w	r3, r3, #12
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	0c1a      	lsrs	r2, r3, #16
 80099ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80099d2:	f103 0310 	add.w	r3, r3, #16
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3310      	adds	r3, #16
 80099da:	b2d2      	uxtb	r2, r2
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80099e2:	f103 030c 	add.w	r3, r3, #12
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	0e1a      	lsrs	r2, r3, #24
 80099ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80099ee:	f103 0310 	add.w	r3, r3, #16
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3311      	adds	r3, #17
 80099f6:	b2d2      	uxtb	r2, r2
 80099f8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80099fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80099fe:	f103 0310 	add.w	r3, r3, #16
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	330b      	adds	r3, #11
 8009a06:	2200      	movs	r2, #0
 8009a08:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8009a0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009a0e:	f103 0310 	add.w	r3, r3, #16
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	331c      	adds	r3, #28
 8009a16:	2200      	movs	r2, #0
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009a1e:	f103 0310 	add.w	r3, r3, #16
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	331d      	adds	r3, #29
 8009a26:	2200      	movs	r2, #0
 8009a28:	701a      	strb	r2, [r3, #0]
 8009a2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009a2e:	f103 0310 	add.w	r3, r3, #16
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	331e      	adds	r3, #30
 8009a36:	2200      	movs	r2, #0
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009a3e:	f103 0310 	add.w	r3, r3, #16
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	331f      	adds	r3, #31
 8009a46:	2200      	movs	r2, #0
 8009a48:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009a4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a4e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009a52:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009a56:	f102 0210 	add.w	r2, r2, #16
 8009a5a:	6811      	ldr	r1, [r2, #0]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7fe fc00 	bl	8008262 <ld_clust>
 8009a62:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009a66:	f103 0308 	add.w	r3, r3, #8
 8009a6a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009a72:	f103 0310 	add.w	r3, r3, #16
 8009a76:	6818      	ldr	r0, [r3, #0]
 8009a78:	f7fe fc22 	bl	80082c0 <st_clust>
				dj.fs->wflag = 1;
 8009a7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a80:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a88:	2201      	movs	r2, #1
 8009a8a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8009a8c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009a90:	f103 0308 	add.w	r3, r3, #8
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d079      	beq.n	8009b8e <f_open+0x43a>
					dw = dj.fs->winsect;
 8009a9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a9e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009aac:	f102 020c 	add.w	r2, r2, #12
 8009ab0:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8009ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ab6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009aba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009abe:	f102 0208 	add.w	r2, r2, #8
 8009ac2:	6811      	ldr	r1, [r2, #0]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fe f81c 	bl	8007b02 <remove_chain>
 8009aca:	4603      	mov	r3, r0
 8009acc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009ad0:	f102 0217 	add.w	r2, r2, #23
 8009ad4:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8009ad6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009ada:	f103 0317 	add.w	r3, r3, #23
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d154      	bne.n	8009b8e <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009ae4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ae8:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8009aec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009af0:	f103 0308 	add.w	r3, r3, #8
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009afc:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8009afe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b02:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009b06:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009b0a:	f102 020c 	add.w	r2, r2, #12
 8009b0e:	6811      	ldr	r1, [r2, #0]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fd fc91 	bl	8007438 <move_window>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009b1c:	f102 0217 	add.w	r2, r2, #23
 8009b20:	7013      	strb	r3, [r2, #0]
 8009b22:	e034      	b.n	8009b8e <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8009b24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009b28:	f103 0317 	add.w	r3, r3, #23
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d12d      	bne.n	8009b8e <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8009b32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009b36:	f103 0310 	add.w	r3, r3, #16
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	330b      	adds	r3, #11
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	f003 0310 	and.w	r3, r3, #16
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d009      	beq.n	8009b5c <f_open+0x408>
					res = FR_NO_FILE;
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009b4e:	f102 0217 	add.w	r2, r2, #23
 8009b52:	7013      	strb	r3, [r2, #0]
 8009b54:	e01b      	b.n	8009b8e <f_open+0x43a>
 8009b56:	bf00      	nop
 8009b58:	200027d0 	.word	0x200027d0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8009b5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b60:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009b64:	f003 0302 	and.w	r3, r3, #2
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d010      	beq.n	8009b8e <f_open+0x43a>
 8009b6c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009b70:	f103 0310 	add.w	r3, r3, #16
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	330b      	adds	r3, #11
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d005      	beq.n	8009b8e <f_open+0x43a>
						res = FR_DENIED;
 8009b82:	2307      	movs	r3, #7
 8009b84:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009b88:	f102 0217 	add.w	r2, r2, #23
 8009b8c:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8009b8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009b92:	f103 0317 	add.w	r3, r3, #23
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d157      	bne.n	8009c4c <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009b9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ba0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009ba4:	f003 0308 	and.w	r3, r3, #8
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00a      	beq.n	8009bc2 <f_open+0x46e>
				mode |= FA__WRITTEN;
 8009bac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009bb6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009bba:	f043 0320 	orr.w	r3, r3, #32
 8009bbe:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009bc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009bc6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009bd4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8009bd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009bdc:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8009bde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009be2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bea:	461a      	mov	r2, r3
 8009bec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009bf0:	f103 0310 	add.w	r3, r3, #16
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009bf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009bfc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009c00:	f023 0301 	bic.w	r3, r3, #1
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	bf14      	ite	ne
 8009c08:	2301      	movne	r3, #1
 8009c0a:	2300      	moveq	r3, #0
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c14:	3b18      	subs	r3, #24
 8009c16:	4611      	mov	r1, r2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fd fa8f 	bl	800713c <inc_lock>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009c24:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c2c:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8009c2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009c32:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d105      	bne.n	8009c4c <f_open+0x4f8>
 8009c40:	2302      	movs	r3, #2
 8009c42:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009c46:	f102 0217 	add.w	r2, r2, #23
 8009c4a:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8009c4c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009c50:	f103 0317 	add.w	r3, r3, #23
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f040 8088 	bne.w	8009d6c <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8009c5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009c60:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c68:	461a      	mov	r2, r3
 8009c6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009c6e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009c72:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8009c74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009c78:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c80:	2200      	movs	r2, #0
 8009c82:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009c84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009c88:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009c8c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009c90:	f102 0210 	add.w	r2, r2, #16
 8009c94:	6811      	ldr	r1, [r2, #0]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe fae3 	bl	8008262 <ld_clust>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ca2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009caa:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009cac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009cb0:	f103 0310 	add.w	r3, r3, #16
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	331f      	adds	r3, #31
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	061a      	lsls	r2, r3, #24
 8009cbc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009cc0:	f103 0310 	add.w	r3, r3, #16
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	331e      	adds	r3, #30
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	041b      	lsls	r3, r3, #16
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009cd2:	f102 0210 	add.w	r2, r2, #16
 8009cd6:	6812      	ldr	r2, [r2, #0]
 8009cd8:	321d      	adds	r2, #29
 8009cda:	7812      	ldrb	r2, [r2, #0]
 8009cdc:	0212      	lsls	r2, r2, #8
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009ce4:	f102 0210 	add.w	r2, r2, #16
 8009ce8:	6812      	ldr	r2, [r2, #0]
 8009cea:	321c      	adds	r2, #28
 8009cec:	7812      	ldrb	r2, [r2, #0]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009cf4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8009cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009cfc:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8009cfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d02:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8009d10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d14:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	2300      	movs	r3, #0
 8009d20:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009d22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d26:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2e:	461a      	mov	r2, r3
 8009d30:	2300      	movs	r3, #0
 8009d32:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009d34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d38:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8009d3c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009d40:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8009d44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d48:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8009d4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d4e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d5c:	88da      	ldrh	r2, [r3, #6]
 8009d5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d62:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d6a:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8009d6c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009d70:	f103 0317 	add.w	r3, r3, #23
 8009d74:	781b      	ldrb	r3, [r3, #0]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop

08009d84 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b08a      	sub	sp, #40	; 0x28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f7ff fc53 	bl	8009648 <validate>
 8009da2:	4603      	mov	r3, r0
 8009da4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <f_write+0x2c>
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
 8009dae:	e21e      	b.n	800a1ee <f_write+0x46a>
	if (fp->err)							/* Check error */
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db6:	79db      	ldrb	r3, [r3, #7]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d004      	beq.n	8009dc6 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc2:	79db      	ldrb	r3, [r3, #7]
 8009dc4:	e213      	b.n	800a1ee <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dcc:	799b      	ldrb	r3, [r3, #6]
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009dd6:	2307      	movs	r3, #7
 8009dd8:	e209      	b.n	800a1ee <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	441a      	add	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	f080 81d9 	bcs.w	800a1a6 <f_write+0x422>
 8009df4:	2300      	movs	r3, #0
 8009df6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8009df8:	e1d5      	b.n	800a1a6 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e08:	6812      	ldr	r2, [r2, #0]
 8009e0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e0e:	8952      	ldrh	r2, [r2, #10]
 8009e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e14:	fb01 f202 	mul.w	r2, r1, r2
 8009e18:	1a9b      	subs	r3, r3, r2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f040 8169 	bne.w	800a0f2 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e2e:	6812      	ldr	r2, [r2, #0]
 8009e30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e34:	8952      	ldrh	r2, [r2, #10]
 8009e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e48:	789b      	ldrb	r3, [r3, #2]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	4013      	ands	r3, r2
 8009e50:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8009e52:	7dbb      	ldrb	r3, [r7, #22]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d15f      	bne.n	8009f18 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d111      	bne.n	8009e88 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d126      	bne.n	8009ec2 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fd fea0 	bl	8007bc4 <create_chain>
 8009e84:	6278      	str	r0, [r7, #36]	; 0x24
 8009e86:	e01c      	b.n	8009ec2 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d009      	beq.n	8009ea8 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f7fd ff38 	bl	8007d14 <clmt_clust>
 8009ea4:	6278      	str	r0, [r7, #36]	; 0x24
 8009ea6:	e00c      	b.n	8009ec2 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4610      	mov	r0, r2
 8009ebc:	f7fd fe82 	bl	8007bc4 <create_chain>
 8009ec0:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 8173 	beq.w	800a1b0 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d106      	bne.n	8009ede <f_write+0x15a>
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	71da      	strb	r2, [r3, #7]
 8009eda:	2302      	movs	r3, #2
 8009edc:	e187      	b.n	800a1ee <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee4:	d106      	bne.n	8009ef4 <f_write+0x170>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eec:	2201      	movs	r2, #1
 8009eee:	71da      	strb	r2, [r3, #7]
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e17c      	b.n	800a1ee <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009efa:	461a      	mov	r2, r3
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d105      	bne.n	8009f18 <f_write+0x194>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f12:	461a      	mov	r2, r3
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1e:	799b      	ldrb	r3, [r3, #6]
 8009f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d023      	beq.n	8009f70 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f34:	7858      	ldrb	r0, [r3, #1]
 8009f36:	68f9      	ldr	r1, [r7, #12]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f3e:	699a      	ldr	r2, [r3, #24]
 8009f40:	2301      	movs	r3, #1
 8009f42:	f7fc ffad 	bl	8006ea0 <disk_write>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d006      	beq.n	8009f5a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f52:	2201      	movs	r2, #1
 8009f54:	71da      	strb	r2, [r3, #7]
 8009f56:	2301      	movs	r3, #1
 8009f58:	e149      	b.n	800a1ee <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f60:	799b      	ldrb	r3, [r3, #6]
 8009f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f6e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	4619      	mov	r1, r3
 8009f82:	4610      	mov	r0, r2
 8009f84:	f7fd fb49 	bl	800761a <clust2sect>
 8009f88:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d106      	bne.n	8009f9e <f_write+0x21a>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f96:	2202      	movs	r2, #2
 8009f98:	71da      	strb	r2, [r3, #7]
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	e127      	b.n	800a1ee <f_write+0x46a>
			sect += csect;
 8009f9e:	7dbb      	ldrb	r3, [r7, #22]
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb2:	895b      	ldrh	r3, [r3, #10]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fbc:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d069      	beq.n	800a098 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009fc4:	7dba      	ldrb	r2, [r7, #22]
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	4413      	add	r3, r2
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fd0:	6812      	ldr	r2, [r2, #0]
 8009fd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fd6:	7892      	ldrb	r2, [r2, #2]
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d90a      	bls.n	8009ff2 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe8:	789b      	ldrb	r3, [r3, #2]
 8009fea:	461a      	mov	r2, r3
 8009fec:	7dbb      	ldrb	r3, [r7, #22]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ffe:	7858      	ldrb	r0, [r3, #1]
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	69b9      	ldr	r1, [r7, #24]
 800a006:	f7fc ff4b 	bl	8006ea0 <disk_write>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d006      	beq.n	800a01e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a016:	2201      	movs	r2, #1
 800a018:	71da      	strb	r2, [r3, #7]
 800a01a:	2301      	movs	r3, #1
 800a01c:	e0e7      	b.n	800a1ee <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a024:	699a      	ldr	r2, [r3, #24]
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	69fa      	ldr	r2, [r7, #28]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d926      	bls.n	800a07e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a044:	6812      	ldr	r2, [r2, #0]
 800a046:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a04a:	8952      	ldrh	r2, [r2, #10]
 800a04c:	fb02 f303 	mul.w	r3, r2, r3
 800a050:	69ba      	ldr	r2, [r7, #24]
 800a052:	18d1      	adds	r1, r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a060:	895b      	ldrh	r3, [r3, #10]
 800a062:	461a      	mov	r2, r3
 800a064:	f7fc ff5a 	bl	8006f1c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06e:	799b      	ldrb	r3, [r3, #6]
 800a070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a074:	b2da      	uxtb	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a07c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a08a:	895b      	ldrh	r3, [r3, #10]
 800a08c:	461a      	mov	r2, r3
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	fb02 f303 	mul.w	r3, r2, r3
 800a094:	623b      	str	r3, [r7, #32]
				continue;
 800a096:	e06e      	b.n	800a176 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d01f      	beq.n	800a0e6 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ac:	689a      	ldr	r2, [r3, #8]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d215      	bcs.n	800a0e6 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c6:	7858      	ldrb	r0, [r3, #1]
 800a0c8:	68f9      	ldr	r1, [r7, #12]
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	f7fc fec7 	bl	8006e60 <disk_read>
 800a0d2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d006      	beq.n	800a0e6 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0de:	2201      	movs	r2, #1
 800a0e0:	71da      	strb	r2, [r3, #7]
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e083      	b.n	800a1ee <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0fe:	895b      	ldrh	r3, [r3, #10]
 800a100:	4618      	mov	r0, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a110:	6812      	ldr	r2, [r2, #0]
 800a112:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a116:	8952      	ldrh	r2, [r2, #10]
 800a118:	fbb3 f1f2 	udiv	r1, r3, r2
 800a11c:	fb01 f202 	mul.w	r2, r1, r2
 800a120:	1a9b      	subs	r3, r3, r2
 800a122:	1ac3      	subs	r3, r0, r3
 800a124:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800a126:	6a3a      	ldr	r2, [r7, #32]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d901      	bls.n	800a132 <f_write+0x3ae>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a140:	6812      	ldr	r2, [r2, #0]
 800a142:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a146:	8952      	ldrh	r2, [r2, #10]
 800a148:	fbb3 f1f2 	udiv	r1, r3, r2
 800a14c:	fb01 f202 	mul.w	r2, r1, r2
 800a150:	1a9b      	subs	r3, r3, r2
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	4413      	add	r3, r2
 800a156:	6a3a      	ldr	r2, [r7, #32]
 800a158:	69b9      	ldr	r1, [r7, #24]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fc fede 	bl	8006f1c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a166:	799b      	ldrb	r3, [r3, #6]
 800a168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a174:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800a176:	69ba      	ldr	r2, [r7, #24]
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	4413      	add	r3, r2
 800a17c:	61bb      	str	r3, [r7, #24]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	4413      	add	r3, r2
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a190:	6093      	str	r3, [r2, #8]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	441a      	add	r2, r3
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6a3b      	ldr	r3, [r7, #32]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f47f ae26 	bne.w	8009dfa <f_write+0x76>
 800a1ae:	e000      	b.n	800a1b2 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a1b0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b8:	689a      	ldr	r2, [r3, #8]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d907      	bls.n	800a1d6 <f_write+0x452>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a1d4:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1dc:	799b      	ldrb	r3, [r3, #6]
 800a1de:	f043 0320 	orr.w	r3, r3, #32
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ea:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3728      	adds	r7, #40	; 0x28
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b086      	sub	sp, #24
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7ff fa22 	bl	8009648 <validate>
 800a204:	4603      	mov	r3, r0
 800a206:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a208:	7dfb      	ldrb	r3, [r7, #23]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f040 80bc 	bne.w	800a388 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a216:	799b      	ldrb	r3, [r3, #6]
 800a218:	f003 0320 	and.w	r3, r3, #32
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 80b3 	beq.w	800a388 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a228:	799b      	ldrb	r3, [r3, #6]
 800a22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d01e      	beq.n	800a270 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a23e:	7858      	ldrb	r0, [r3, #1]
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a248:	699a      	ldr	r2, [r3, #24]
 800a24a:	2301      	movs	r3, #1
 800a24c:	f7fc fe28 	bl	8006ea0 <disk_write>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800a256:	2301      	movs	r3, #1
 800a258:	e097      	b.n	800a38a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a260:	799b      	ldrb	r3, [r3, #6]
 800a262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a266:	b2da      	uxtb	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a26e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27e:	69db      	ldr	r3, [r3, #28]
 800a280:	4619      	mov	r1, r3
 800a282:	4610      	mov	r0, r2
 800a284:	f7fd f8d8 	bl	8007438 <move_window>
 800a288:	4603      	mov	r3, r0
 800a28a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d17a      	bne.n	800a388 <f_sync+0x192>
				dir = fp->dir_ptr;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a298:	6a1b      	ldr	r3, [r3, #32]
 800a29a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	330b      	adds	r3, #11
 800a2a0:	781a      	ldrb	r2, [r3, #0]
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	330b      	adds	r3, #11
 800a2a6:	f042 0220 	orr.w	r2, r2, #32
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b4:	68da      	ldr	r2, [r3, #12]
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	331c      	adds	r3, #28
 800a2ba:	b2d2      	uxtb	r2, r2
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	0a1b      	lsrs	r3, r3, #8
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	331d      	adds	r3, #29
 800a2d0:	b2d2      	uxtb	r2, r2
 800a2d2:	701a      	strb	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	0c1a      	lsrs	r2, r3, #16
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	331e      	adds	r3, #30
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	0e1a      	lsrs	r2, r3, #24
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	331f      	adds	r3, #31
 800a2f4:	b2d2      	uxtb	r2, r2
 800a2f6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	4619      	mov	r1, r3
 800a302:	6938      	ldr	r0, [r7, #16]
 800a304:	f7fd ffdc 	bl	80082c0 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800a308:	f7fc fd08 	bl	8006d1c <get_fattime>
 800a30c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	3316      	adds	r3, #22
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	b2d2      	uxtb	r2, r2
 800a316:	701a      	strb	r2, [r3, #0]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	0a1b      	lsrs	r3, r3, #8
 800a31e:	b29a      	uxth	r2, r3
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	3317      	adds	r3, #23
 800a324:	b2d2      	uxtb	r2, r2
 800a326:	701a      	strb	r2, [r3, #0]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	0c1a      	lsrs	r2, r3, #16
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	3318      	adds	r3, #24
 800a330:	b2d2      	uxtb	r2, r2
 800a332:	701a      	strb	r2, [r3, #0]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	0e1a      	lsrs	r2, r3, #24
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	3319      	adds	r3, #25
 800a33c:	b2d2      	uxtb	r2, r2
 800a33e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	3312      	adds	r3, #18
 800a344:	2200      	movs	r2, #0
 800a346:	701a      	strb	r2, [r3, #0]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	3313      	adds	r3, #19
 800a34c:	2200      	movs	r2, #0
 800a34e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a356:	799b      	ldrb	r3, [r3, #6]
 800a358:	f023 0320 	bic.w	r3, r3, #32
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a364:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a372:	2201      	movs	r2, #1
 800a374:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fd f88c 	bl	800749c <sync_fs>
 800a384:	4603      	mov	r3, r0
 800a386:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800a388:	7dfb      	ldrb	r3, [r7, #23]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7ff ff2b 	bl	800a1f6 <f_sync>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d119      	bne.n	800a3de <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff f94c 	bl	8009648 <validate>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d111      	bne.n	800a3de <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7fc ff78 	bl	80072b8 <dec_lock>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d105      	bne.n	800a3de <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d8:	461a      	mov	r2, r3
 800a3da:	2300      	movs	r3, #0
 800a3dc:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800a3f4:	78fb      	ldrb	r3, [r7, #3]
 800a3f6:	2b0a      	cmp	r3, #10
 800a3f8:	d103      	bne.n	800a402 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a3fa:	210d      	movs	r1, #13
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7ff fff3 	bl	800a3e8 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	db25      	blt.n	800a45a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	60fa      	str	r2, [r7, #12]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	4413      	add	r3, r2
 800a418:	78fa      	ldrb	r2, [r7, #3]
 800a41a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b3c      	cmp	r3, #60	; 0x3c
 800a420:	dd12      	ble.n	800a448 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6818      	ldr	r0, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f103 010c 	add.w	r1, r3, #12
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	f107 0308 	add.w	r3, r7, #8
 800a432:	f7ff fca7 	bl	8009d84 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d101      	bne.n	800a442 <putc_bfd+0x5a>
 800a43e:	2300      	movs	r3, #0
 800a440:	e001      	b.n	800a446 <putc_bfd+0x5e>
 800a442:	f04f 33ff 	mov.w	r3, #4294967295
 800a446:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	609a      	str	r2, [r3, #8]
 800a458:	e000      	b.n	800a45c <putc_bfd+0x74>
	if (i < 0) return;
 800a45a:	bf00      	nop
}
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a462:	b590      	push	{r4, r7, lr}
 800a464:	b097      	sub	sp, #92	; 0x5c
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	613b      	str	r3, [r7, #16]
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800a478:	e009      	b.n	800a48e <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	781a      	ldrb	r2, [r3, #0]
 800a482:	f107 030c 	add.w	r3, r7, #12
 800a486:	4611      	mov	r1, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f7ff ffad 	bl	800a3e8 <putc_bfd>
	while (*str)			/* Put the string */
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1f1      	bne.n	800a47a <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	db15      	blt.n	800a4c8 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	461c      	mov	r4, r3
 800a4a2:	f107 0208 	add.w	r2, r7, #8
 800a4a6:	f107 030c 	add.w	r3, r7, #12
 800a4aa:	f103 010c 	add.w	r1, r3, #12
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	4622      	mov	r2, r4
 800a4b2:	f7ff fc67 	bl	8009d84 <f_write>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d105      	bne.n	800a4c8 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d101      	bne.n	800a4c8 <f_puts+0x66>
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	e001      	b.n	800a4cc <f_puts+0x6a>
	return EOF;
 800a4c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	375c      	adds	r7, #92	; 0x5c
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd90      	pop	{r4, r7, pc}

0800a4d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a4ea:	4b1f      	ldr	r3, [pc, #124]	; (800a568 <FATFS_LinkDriverEx+0x94>)
 800a4ec:	7a5b      	ldrb	r3, [r3, #9]
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d831      	bhi.n	800a558 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a4f4:	4b1c      	ldr	r3, [pc, #112]	; (800a568 <FATFS_LinkDriverEx+0x94>)
 800a4f6:	7a5b      	ldrb	r3, [r3, #9]
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	4b1a      	ldr	r3, [pc, #104]	; (800a568 <FATFS_LinkDriverEx+0x94>)
 800a4fe:	2100      	movs	r1, #0
 800a500:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a502:	4b19      	ldr	r3, [pc, #100]	; (800a568 <FATFS_LinkDriverEx+0x94>)
 800a504:	7a5b      	ldrb	r3, [r3, #9]
 800a506:	b2db      	uxtb	r3, r3
 800a508:	4a17      	ldr	r2, [pc, #92]	; (800a568 <FATFS_LinkDriverEx+0x94>)
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a512:	4b15      	ldr	r3, [pc, #84]	; (800a568 <FATFS_LinkDriverEx+0x94>)
 800a514:	7a5b      	ldrb	r3, [r3, #9]
 800a516:	b2db      	uxtb	r3, r3
 800a518:	461a      	mov	r2, r3
 800a51a:	4b13      	ldr	r3, [pc, #76]	; (800a568 <FATFS_LinkDriverEx+0x94>)
 800a51c:	4413      	add	r3, r2
 800a51e:	79fa      	ldrb	r2, [r7, #7]
 800a520:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a522:	4b11      	ldr	r3, [pc, #68]	; (800a568 <FATFS_LinkDriverEx+0x94>)
 800a524:	7a5b      	ldrb	r3, [r3, #9]
 800a526:	b2db      	uxtb	r3, r3
 800a528:	1c5a      	adds	r2, r3, #1
 800a52a:	b2d1      	uxtb	r1, r2
 800a52c:	4a0e      	ldr	r2, [pc, #56]	; (800a568 <FATFS_LinkDriverEx+0x94>)
 800a52e:	7251      	strb	r1, [r2, #9]
 800a530:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a532:	7dbb      	ldrb	r3, [r7, #22]
 800a534:	3330      	adds	r3, #48	; 0x30
 800a536:	b2da      	uxtb	r2, r3
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	3301      	adds	r3, #1
 800a540:	223a      	movs	r2, #58	; 0x3a
 800a542:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	3302      	adds	r3, #2
 800a548:	222f      	movs	r2, #47	; 0x2f
 800a54a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	3303      	adds	r3, #3
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a558:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	371c      	adds	r7, #28
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	200029d0 	.word	0x200029d0

0800a56c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a576:	2200      	movs	r2, #0
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff ffaa 	bl	800a4d4 <FATFS_LinkDriverEx>
 800a580:	4603      	mov	r3, r0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
	...

0800a58c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	6039      	str	r1, [r7, #0]
 800a596:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a598:	88fb      	ldrh	r3, [r7, #6]
 800a59a:	2b7f      	cmp	r3, #127	; 0x7f
 800a59c:	d802      	bhi.n	800a5a4 <ff_convert+0x18>
		c = chr;
 800a59e:	88fb      	ldrh	r3, [r7, #6]
 800a5a0:	81fb      	strh	r3, [r7, #14]
 800a5a2:	e025      	b.n	800a5f0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00b      	beq.n	800a5c2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a5aa:	88fb      	ldrh	r3, [r7, #6]
 800a5ac:	2bff      	cmp	r3, #255	; 0xff
 800a5ae:	d805      	bhi.n	800a5bc <ff_convert+0x30>
 800a5b0:	88fb      	ldrh	r3, [r7, #6]
 800a5b2:	3b80      	subs	r3, #128	; 0x80
 800a5b4:	4a12      	ldr	r2, [pc, #72]	; (800a600 <ff_convert+0x74>)
 800a5b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ba:	e000      	b.n	800a5be <ff_convert+0x32>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	81fb      	strh	r3, [r7, #14]
 800a5c0:	e016      	b.n	800a5f0 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	81fb      	strh	r3, [r7, #14]
 800a5c6:	e009      	b.n	800a5dc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a5c8:	89fb      	ldrh	r3, [r7, #14]
 800a5ca:	4a0d      	ldr	r2, [pc, #52]	; (800a600 <ff_convert+0x74>)
 800a5cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5d0:	88fa      	ldrh	r2, [r7, #6]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d006      	beq.n	800a5e4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a5d6:	89fb      	ldrh	r3, [r7, #14]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	81fb      	strh	r3, [r7, #14]
 800a5dc:	89fb      	ldrh	r3, [r7, #14]
 800a5de:	2b7f      	cmp	r3, #127	; 0x7f
 800a5e0:	d9f2      	bls.n	800a5c8 <ff_convert+0x3c>
 800a5e2:	e000      	b.n	800a5e6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a5e4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a5e6:	89fb      	ldrh	r3, [r7, #14]
 800a5e8:	3380      	adds	r3, #128	; 0x80
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a5f0:	89fb      	ldrh	r3, [r7, #14]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	0800b68c 	.word	0x0800b68c

0800a604 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	4603      	mov	r3, r0
 800a60c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800a60e:	2300      	movs	r3, #0
 800a610:	60fb      	str	r3, [r7, #12]
 800a612:	e002      	b.n	800a61a <ff_wtoupper+0x16>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3301      	adds	r3, #1
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	4a0f      	ldr	r2, [pc, #60]	; (800a658 <ff_wtoupper+0x54>)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d006      	beq.n	800a634 <ff_wtoupper+0x30>
 800a626:	4a0c      	ldr	r2, [pc, #48]	; (800a658 <ff_wtoupper+0x54>)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a62e:	88fa      	ldrh	r2, [r7, #6]
 800a630:	429a      	cmp	r2, r3
 800a632:	d1ef      	bne.n	800a614 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800a634:	4a08      	ldr	r2, [pc, #32]	; (800a658 <ff_wtoupper+0x54>)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d004      	beq.n	800a64a <ff_wtoupper+0x46>
 800a640:	4a06      	ldr	r2, [pc, #24]	; (800a65c <ff_wtoupper+0x58>)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a648:	e000      	b.n	800a64c <ff_wtoupper+0x48>
 800a64a:	88fb      	ldrh	r3, [r7, #6]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	0800b78c 	.word	0x0800b78c
 800a65c:	0800b96c 	.word	0x0800b96c

0800a660 <__errno>:
 800a660:	4b01      	ldr	r3, [pc, #4]	; (800a668 <__errno+0x8>)
 800a662:	6818      	ldr	r0, [r3, #0]
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	20000024 	.word	0x20000024

0800a66c <__libc_init_array>:
 800a66c:	b570      	push	{r4, r5, r6, lr}
 800a66e:	4d0d      	ldr	r5, [pc, #52]	; (800a6a4 <__libc_init_array+0x38>)
 800a670:	4c0d      	ldr	r4, [pc, #52]	; (800a6a8 <__libc_init_array+0x3c>)
 800a672:	1b64      	subs	r4, r4, r5
 800a674:	10a4      	asrs	r4, r4, #2
 800a676:	2600      	movs	r6, #0
 800a678:	42a6      	cmp	r6, r4
 800a67a:	d109      	bne.n	800a690 <__libc_init_array+0x24>
 800a67c:	4d0b      	ldr	r5, [pc, #44]	; (800a6ac <__libc_init_array+0x40>)
 800a67e:	4c0c      	ldr	r4, [pc, #48]	; (800a6b0 <__libc_init_array+0x44>)
 800a680:	f000 fc8e 	bl	800afa0 <_init>
 800a684:	1b64      	subs	r4, r4, r5
 800a686:	10a4      	asrs	r4, r4, #2
 800a688:	2600      	movs	r6, #0
 800a68a:	42a6      	cmp	r6, r4
 800a68c:	d105      	bne.n	800a69a <__libc_init_array+0x2e>
 800a68e:	bd70      	pop	{r4, r5, r6, pc}
 800a690:	f855 3b04 	ldr.w	r3, [r5], #4
 800a694:	4798      	blx	r3
 800a696:	3601      	adds	r6, #1
 800a698:	e7ee      	b.n	800a678 <__libc_init_array+0xc>
 800a69a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a69e:	4798      	blx	r3
 800a6a0:	3601      	adds	r6, #1
 800a6a2:	e7f2      	b.n	800a68a <__libc_init_array+0x1e>
 800a6a4:	0800bb80 	.word	0x0800bb80
 800a6a8:	0800bb80 	.word	0x0800bb80
 800a6ac:	0800bb80 	.word	0x0800bb80
 800a6b0:	0800bb84 	.word	0x0800bb84

0800a6b4 <memset>:
 800a6b4:	4402      	add	r2, r0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d100      	bne.n	800a6be <memset+0xa>
 800a6bc:	4770      	bx	lr
 800a6be:	f803 1b01 	strb.w	r1, [r3], #1
 800a6c2:	e7f9      	b.n	800a6b8 <memset+0x4>

0800a6c4 <siprintf>:
 800a6c4:	b40e      	push	{r1, r2, r3}
 800a6c6:	b500      	push	{lr}
 800a6c8:	b09c      	sub	sp, #112	; 0x70
 800a6ca:	ab1d      	add	r3, sp, #116	; 0x74
 800a6cc:	9002      	str	r0, [sp, #8]
 800a6ce:	9006      	str	r0, [sp, #24]
 800a6d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6d4:	4809      	ldr	r0, [pc, #36]	; (800a6fc <siprintf+0x38>)
 800a6d6:	9107      	str	r1, [sp, #28]
 800a6d8:	9104      	str	r1, [sp, #16]
 800a6da:	4909      	ldr	r1, [pc, #36]	; (800a700 <siprintf+0x3c>)
 800a6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e0:	9105      	str	r1, [sp, #20]
 800a6e2:	6800      	ldr	r0, [r0, #0]
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	a902      	add	r1, sp, #8
 800a6e8:	f000 f868 	bl	800a7bc <_svfiprintf_r>
 800a6ec:	9b02      	ldr	r3, [sp, #8]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	b01c      	add	sp, #112	; 0x70
 800a6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6f8:	b003      	add	sp, #12
 800a6fa:	4770      	bx	lr
 800a6fc:	20000024 	.word	0x20000024
 800a700:	ffff0208 	.word	0xffff0208

0800a704 <__ssputs_r>:
 800a704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a708:	688e      	ldr	r6, [r1, #8]
 800a70a:	429e      	cmp	r6, r3
 800a70c:	4682      	mov	sl, r0
 800a70e:	460c      	mov	r4, r1
 800a710:	4690      	mov	r8, r2
 800a712:	461f      	mov	r7, r3
 800a714:	d838      	bhi.n	800a788 <__ssputs_r+0x84>
 800a716:	898a      	ldrh	r2, [r1, #12]
 800a718:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a71c:	d032      	beq.n	800a784 <__ssputs_r+0x80>
 800a71e:	6825      	ldr	r5, [r4, #0]
 800a720:	6909      	ldr	r1, [r1, #16]
 800a722:	eba5 0901 	sub.w	r9, r5, r1
 800a726:	6965      	ldr	r5, [r4, #20]
 800a728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a72c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a730:	3301      	adds	r3, #1
 800a732:	444b      	add	r3, r9
 800a734:	106d      	asrs	r5, r5, #1
 800a736:	429d      	cmp	r5, r3
 800a738:	bf38      	it	cc
 800a73a:	461d      	movcc	r5, r3
 800a73c:	0553      	lsls	r3, r2, #21
 800a73e:	d531      	bpl.n	800a7a4 <__ssputs_r+0xa0>
 800a740:	4629      	mov	r1, r5
 800a742:	f000 fb63 	bl	800ae0c <_malloc_r>
 800a746:	4606      	mov	r6, r0
 800a748:	b950      	cbnz	r0, 800a760 <__ssputs_r+0x5c>
 800a74a:	230c      	movs	r3, #12
 800a74c:	f8ca 3000 	str.w	r3, [sl]
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a756:	81a3      	strh	r3, [r4, #12]
 800a758:	f04f 30ff 	mov.w	r0, #4294967295
 800a75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a760:	6921      	ldr	r1, [r4, #16]
 800a762:	464a      	mov	r2, r9
 800a764:	f000 fabe 	bl	800ace4 <memcpy>
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a76e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a772:	81a3      	strh	r3, [r4, #12]
 800a774:	6126      	str	r6, [r4, #16]
 800a776:	6165      	str	r5, [r4, #20]
 800a778:	444e      	add	r6, r9
 800a77a:	eba5 0509 	sub.w	r5, r5, r9
 800a77e:	6026      	str	r6, [r4, #0]
 800a780:	60a5      	str	r5, [r4, #8]
 800a782:	463e      	mov	r6, r7
 800a784:	42be      	cmp	r6, r7
 800a786:	d900      	bls.n	800a78a <__ssputs_r+0x86>
 800a788:	463e      	mov	r6, r7
 800a78a:	6820      	ldr	r0, [r4, #0]
 800a78c:	4632      	mov	r2, r6
 800a78e:	4641      	mov	r1, r8
 800a790:	f000 fab6 	bl	800ad00 <memmove>
 800a794:	68a3      	ldr	r3, [r4, #8]
 800a796:	1b9b      	subs	r3, r3, r6
 800a798:	60a3      	str	r3, [r4, #8]
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	4433      	add	r3, r6
 800a79e:	6023      	str	r3, [r4, #0]
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	e7db      	b.n	800a75c <__ssputs_r+0x58>
 800a7a4:	462a      	mov	r2, r5
 800a7a6:	f000 fba5 	bl	800aef4 <_realloc_r>
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d1e1      	bne.n	800a774 <__ssputs_r+0x70>
 800a7b0:	6921      	ldr	r1, [r4, #16]
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	f000 fabe 	bl	800ad34 <_free_r>
 800a7b8:	e7c7      	b.n	800a74a <__ssputs_r+0x46>
	...

0800a7bc <_svfiprintf_r>:
 800a7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c0:	4698      	mov	r8, r3
 800a7c2:	898b      	ldrh	r3, [r1, #12]
 800a7c4:	061b      	lsls	r3, r3, #24
 800a7c6:	b09d      	sub	sp, #116	; 0x74
 800a7c8:	4607      	mov	r7, r0
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	4614      	mov	r4, r2
 800a7ce:	d50e      	bpl.n	800a7ee <_svfiprintf_r+0x32>
 800a7d0:	690b      	ldr	r3, [r1, #16]
 800a7d2:	b963      	cbnz	r3, 800a7ee <_svfiprintf_r+0x32>
 800a7d4:	2140      	movs	r1, #64	; 0x40
 800a7d6:	f000 fb19 	bl	800ae0c <_malloc_r>
 800a7da:	6028      	str	r0, [r5, #0]
 800a7dc:	6128      	str	r0, [r5, #16]
 800a7de:	b920      	cbnz	r0, 800a7ea <_svfiprintf_r+0x2e>
 800a7e0:	230c      	movs	r3, #12
 800a7e2:	603b      	str	r3, [r7, #0]
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e8:	e0d1      	b.n	800a98e <_svfiprintf_r+0x1d2>
 800a7ea:	2340      	movs	r3, #64	; 0x40
 800a7ec:	616b      	str	r3, [r5, #20]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f2:	2320      	movs	r3, #32
 800a7f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7fc:	2330      	movs	r3, #48	; 0x30
 800a7fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a9a8 <_svfiprintf_r+0x1ec>
 800a802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a806:	f04f 0901 	mov.w	r9, #1
 800a80a:	4623      	mov	r3, r4
 800a80c:	469a      	mov	sl, r3
 800a80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a812:	b10a      	cbz	r2, 800a818 <_svfiprintf_r+0x5c>
 800a814:	2a25      	cmp	r2, #37	; 0x25
 800a816:	d1f9      	bne.n	800a80c <_svfiprintf_r+0x50>
 800a818:	ebba 0b04 	subs.w	fp, sl, r4
 800a81c:	d00b      	beq.n	800a836 <_svfiprintf_r+0x7a>
 800a81e:	465b      	mov	r3, fp
 800a820:	4622      	mov	r2, r4
 800a822:	4629      	mov	r1, r5
 800a824:	4638      	mov	r0, r7
 800a826:	f7ff ff6d 	bl	800a704 <__ssputs_r>
 800a82a:	3001      	adds	r0, #1
 800a82c:	f000 80aa 	beq.w	800a984 <_svfiprintf_r+0x1c8>
 800a830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a832:	445a      	add	r2, fp
 800a834:	9209      	str	r2, [sp, #36]	; 0x24
 800a836:	f89a 3000 	ldrb.w	r3, [sl]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 80a2 	beq.w	800a984 <_svfiprintf_r+0x1c8>
 800a840:	2300      	movs	r3, #0
 800a842:	f04f 32ff 	mov.w	r2, #4294967295
 800a846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a84a:	f10a 0a01 	add.w	sl, sl, #1
 800a84e:	9304      	str	r3, [sp, #16]
 800a850:	9307      	str	r3, [sp, #28]
 800a852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a856:	931a      	str	r3, [sp, #104]	; 0x68
 800a858:	4654      	mov	r4, sl
 800a85a:	2205      	movs	r2, #5
 800a85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a860:	4851      	ldr	r0, [pc, #324]	; (800a9a8 <_svfiprintf_r+0x1ec>)
 800a862:	f7f5 fcc5 	bl	80001f0 <memchr>
 800a866:	9a04      	ldr	r2, [sp, #16]
 800a868:	b9d8      	cbnz	r0, 800a8a2 <_svfiprintf_r+0xe6>
 800a86a:	06d0      	lsls	r0, r2, #27
 800a86c:	bf44      	itt	mi
 800a86e:	2320      	movmi	r3, #32
 800a870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a874:	0711      	lsls	r1, r2, #28
 800a876:	bf44      	itt	mi
 800a878:	232b      	movmi	r3, #43	; 0x2b
 800a87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a87e:	f89a 3000 	ldrb.w	r3, [sl]
 800a882:	2b2a      	cmp	r3, #42	; 0x2a
 800a884:	d015      	beq.n	800a8b2 <_svfiprintf_r+0xf6>
 800a886:	9a07      	ldr	r2, [sp, #28]
 800a888:	4654      	mov	r4, sl
 800a88a:	2000      	movs	r0, #0
 800a88c:	f04f 0c0a 	mov.w	ip, #10
 800a890:	4621      	mov	r1, r4
 800a892:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a896:	3b30      	subs	r3, #48	; 0x30
 800a898:	2b09      	cmp	r3, #9
 800a89a:	d94e      	bls.n	800a93a <_svfiprintf_r+0x17e>
 800a89c:	b1b0      	cbz	r0, 800a8cc <_svfiprintf_r+0x110>
 800a89e:	9207      	str	r2, [sp, #28]
 800a8a0:	e014      	b.n	800a8cc <_svfiprintf_r+0x110>
 800a8a2:	eba0 0308 	sub.w	r3, r0, r8
 800a8a6:	fa09 f303 	lsl.w	r3, r9, r3
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	9304      	str	r3, [sp, #16]
 800a8ae:	46a2      	mov	sl, r4
 800a8b0:	e7d2      	b.n	800a858 <_svfiprintf_r+0x9c>
 800a8b2:	9b03      	ldr	r3, [sp, #12]
 800a8b4:	1d19      	adds	r1, r3, #4
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	9103      	str	r1, [sp, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bfbb      	ittet	lt
 800a8be:	425b      	neglt	r3, r3
 800a8c0:	f042 0202 	orrlt.w	r2, r2, #2
 800a8c4:	9307      	strge	r3, [sp, #28]
 800a8c6:	9307      	strlt	r3, [sp, #28]
 800a8c8:	bfb8      	it	lt
 800a8ca:	9204      	strlt	r2, [sp, #16]
 800a8cc:	7823      	ldrb	r3, [r4, #0]
 800a8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a8d0:	d10c      	bne.n	800a8ec <_svfiprintf_r+0x130>
 800a8d2:	7863      	ldrb	r3, [r4, #1]
 800a8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d6:	d135      	bne.n	800a944 <_svfiprintf_r+0x188>
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	1d1a      	adds	r2, r3, #4
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	9203      	str	r2, [sp, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bfb8      	it	lt
 800a8e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8e8:	3402      	adds	r4, #2
 800a8ea:	9305      	str	r3, [sp, #20]
 800a8ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a9b8 <_svfiprintf_r+0x1fc>
 800a8f0:	7821      	ldrb	r1, [r4, #0]
 800a8f2:	2203      	movs	r2, #3
 800a8f4:	4650      	mov	r0, sl
 800a8f6:	f7f5 fc7b 	bl	80001f0 <memchr>
 800a8fa:	b140      	cbz	r0, 800a90e <_svfiprintf_r+0x152>
 800a8fc:	2340      	movs	r3, #64	; 0x40
 800a8fe:	eba0 000a 	sub.w	r0, r0, sl
 800a902:	fa03 f000 	lsl.w	r0, r3, r0
 800a906:	9b04      	ldr	r3, [sp, #16]
 800a908:	4303      	orrs	r3, r0
 800a90a:	3401      	adds	r4, #1
 800a90c:	9304      	str	r3, [sp, #16]
 800a90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a912:	4826      	ldr	r0, [pc, #152]	; (800a9ac <_svfiprintf_r+0x1f0>)
 800a914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a918:	2206      	movs	r2, #6
 800a91a:	f7f5 fc69 	bl	80001f0 <memchr>
 800a91e:	2800      	cmp	r0, #0
 800a920:	d038      	beq.n	800a994 <_svfiprintf_r+0x1d8>
 800a922:	4b23      	ldr	r3, [pc, #140]	; (800a9b0 <_svfiprintf_r+0x1f4>)
 800a924:	bb1b      	cbnz	r3, 800a96e <_svfiprintf_r+0x1b2>
 800a926:	9b03      	ldr	r3, [sp, #12]
 800a928:	3307      	adds	r3, #7
 800a92a:	f023 0307 	bic.w	r3, r3, #7
 800a92e:	3308      	adds	r3, #8
 800a930:	9303      	str	r3, [sp, #12]
 800a932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a934:	4433      	add	r3, r6
 800a936:	9309      	str	r3, [sp, #36]	; 0x24
 800a938:	e767      	b.n	800a80a <_svfiprintf_r+0x4e>
 800a93a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a93e:	460c      	mov	r4, r1
 800a940:	2001      	movs	r0, #1
 800a942:	e7a5      	b.n	800a890 <_svfiprintf_r+0xd4>
 800a944:	2300      	movs	r3, #0
 800a946:	3401      	adds	r4, #1
 800a948:	9305      	str	r3, [sp, #20]
 800a94a:	4619      	mov	r1, r3
 800a94c:	f04f 0c0a 	mov.w	ip, #10
 800a950:	4620      	mov	r0, r4
 800a952:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a956:	3a30      	subs	r2, #48	; 0x30
 800a958:	2a09      	cmp	r2, #9
 800a95a:	d903      	bls.n	800a964 <_svfiprintf_r+0x1a8>
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d0c5      	beq.n	800a8ec <_svfiprintf_r+0x130>
 800a960:	9105      	str	r1, [sp, #20]
 800a962:	e7c3      	b.n	800a8ec <_svfiprintf_r+0x130>
 800a964:	fb0c 2101 	mla	r1, ip, r1, r2
 800a968:	4604      	mov	r4, r0
 800a96a:	2301      	movs	r3, #1
 800a96c:	e7f0      	b.n	800a950 <_svfiprintf_r+0x194>
 800a96e:	ab03      	add	r3, sp, #12
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	462a      	mov	r2, r5
 800a974:	4b0f      	ldr	r3, [pc, #60]	; (800a9b4 <_svfiprintf_r+0x1f8>)
 800a976:	a904      	add	r1, sp, #16
 800a978:	4638      	mov	r0, r7
 800a97a:	f3af 8000 	nop.w
 800a97e:	1c42      	adds	r2, r0, #1
 800a980:	4606      	mov	r6, r0
 800a982:	d1d6      	bne.n	800a932 <_svfiprintf_r+0x176>
 800a984:	89ab      	ldrh	r3, [r5, #12]
 800a986:	065b      	lsls	r3, r3, #25
 800a988:	f53f af2c 	bmi.w	800a7e4 <_svfiprintf_r+0x28>
 800a98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a98e:	b01d      	add	sp, #116	; 0x74
 800a990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a994:	ab03      	add	r3, sp, #12
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	462a      	mov	r2, r5
 800a99a:	4b06      	ldr	r3, [pc, #24]	; (800a9b4 <_svfiprintf_r+0x1f8>)
 800a99c:	a904      	add	r1, sp, #16
 800a99e:	4638      	mov	r0, r7
 800a9a0:	f000 f87a 	bl	800aa98 <_printf_i>
 800a9a4:	e7eb      	b.n	800a97e <_svfiprintf_r+0x1c2>
 800a9a6:	bf00      	nop
 800a9a8:	0800bb4c 	.word	0x0800bb4c
 800a9ac:	0800bb56 	.word	0x0800bb56
 800a9b0:	00000000 	.word	0x00000000
 800a9b4:	0800a705 	.word	0x0800a705
 800a9b8:	0800bb52 	.word	0x0800bb52

0800a9bc <_printf_common>:
 800a9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c0:	4616      	mov	r6, r2
 800a9c2:	4699      	mov	r9, r3
 800a9c4:	688a      	ldr	r2, [r1, #8]
 800a9c6:	690b      	ldr	r3, [r1, #16]
 800a9c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	bfb8      	it	lt
 800a9d0:	4613      	movlt	r3, r2
 800a9d2:	6033      	str	r3, [r6, #0]
 800a9d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9d8:	4607      	mov	r7, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	b10a      	cbz	r2, 800a9e2 <_printf_common+0x26>
 800a9de:	3301      	adds	r3, #1
 800a9e0:	6033      	str	r3, [r6, #0]
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	0699      	lsls	r1, r3, #26
 800a9e6:	bf42      	ittt	mi
 800a9e8:	6833      	ldrmi	r3, [r6, #0]
 800a9ea:	3302      	addmi	r3, #2
 800a9ec:	6033      	strmi	r3, [r6, #0]
 800a9ee:	6825      	ldr	r5, [r4, #0]
 800a9f0:	f015 0506 	ands.w	r5, r5, #6
 800a9f4:	d106      	bne.n	800aa04 <_printf_common+0x48>
 800a9f6:	f104 0a19 	add.w	sl, r4, #25
 800a9fa:	68e3      	ldr	r3, [r4, #12]
 800a9fc:	6832      	ldr	r2, [r6, #0]
 800a9fe:	1a9b      	subs	r3, r3, r2
 800aa00:	42ab      	cmp	r3, r5
 800aa02:	dc26      	bgt.n	800aa52 <_printf_common+0x96>
 800aa04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa08:	1e13      	subs	r3, r2, #0
 800aa0a:	6822      	ldr	r2, [r4, #0]
 800aa0c:	bf18      	it	ne
 800aa0e:	2301      	movne	r3, #1
 800aa10:	0692      	lsls	r2, r2, #26
 800aa12:	d42b      	bmi.n	800aa6c <_printf_common+0xb0>
 800aa14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa18:	4649      	mov	r1, r9
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	47c0      	blx	r8
 800aa1e:	3001      	adds	r0, #1
 800aa20:	d01e      	beq.n	800aa60 <_printf_common+0xa4>
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	68e5      	ldr	r5, [r4, #12]
 800aa26:	6832      	ldr	r2, [r6, #0]
 800aa28:	f003 0306 	and.w	r3, r3, #6
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	bf08      	it	eq
 800aa30:	1aad      	subeq	r5, r5, r2
 800aa32:	68a3      	ldr	r3, [r4, #8]
 800aa34:	6922      	ldr	r2, [r4, #16]
 800aa36:	bf0c      	ite	eq
 800aa38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa3c:	2500      	movne	r5, #0
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	bfc4      	itt	gt
 800aa42:	1a9b      	subgt	r3, r3, r2
 800aa44:	18ed      	addgt	r5, r5, r3
 800aa46:	2600      	movs	r6, #0
 800aa48:	341a      	adds	r4, #26
 800aa4a:	42b5      	cmp	r5, r6
 800aa4c:	d11a      	bne.n	800aa84 <_printf_common+0xc8>
 800aa4e:	2000      	movs	r0, #0
 800aa50:	e008      	b.n	800aa64 <_printf_common+0xa8>
 800aa52:	2301      	movs	r3, #1
 800aa54:	4652      	mov	r2, sl
 800aa56:	4649      	mov	r1, r9
 800aa58:	4638      	mov	r0, r7
 800aa5a:	47c0      	blx	r8
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d103      	bne.n	800aa68 <_printf_common+0xac>
 800aa60:	f04f 30ff 	mov.w	r0, #4294967295
 800aa64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa68:	3501      	adds	r5, #1
 800aa6a:	e7c6      	b.n	800a9fa <_printf_common+0x3e>
 800aa6c:	18e1      	adds	r1, r4, r3
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	2030      	movs	r0, #48	; 0x30
 800aa72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa76:	4422      	add	r2, r4
 800aa78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa80:	3302      	adds	r3, #2
 800aa82:	e7c7      	b.n	800aa14 <_printf_common+0x58>
 800aa84:	2301      	movs	r3, #1
 800aa86:	4622      	mov	r2, r4
 800aa88:	4649      	mov	r1, r9
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	47c0      	blx	r8
 800aa8e:	3001      	adds	r0, #1
 800aa90:	d0e6      	beq.n	800aa60 <_printf_common+0xa4>
 800aa92:	3601      	adds	r6, #1
 800aa94:	e7d9      	b.n	800aa4a <_printf_common+0x8e>
	...

0800aa98 <_printf_i>:
 800aa98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa9c:	7e0f      	ldrb	r7, [r1, #24]
 800aa9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aaa0:	2f78      	cmp	r7, #120	; 0x78
 800aaa2:	4691      	mov	r9, r2
 800aaa4:	4680      	mov	r8, r0
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	469a      	mov	sl, r3
 800aaaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aaae:	d807      	bhi.n	800aac0 <_printf_i+0x28>
 800aab0:	2f62      	cmp	r7, #98	; 0x62
 800aab2:	d80a      	bhi.n	800aaca <_printf_i+0x32>
 800aab4:	2f00      	cmp	r7, #0
 800aab6:	f000 80d8 	beq.w	800ac6a <_printf_i+0x1d2>
 800aaba:	2f58      	cmp	r7, #88	; 0x58
 800aabc:	f000 80a3 	beq.w	800ac06 <_printf_i+0x16e>
 800aac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aac8:	e03a      	b.n	800ab40 <_printf_i+0xa8>
 800aaca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aace:	2b15      	cmp	r3, #21
 800aad0:	d8f6      	bhi.n	800aac0 <_printf_i+0x28>
 800aad2:	a101      	add	r1, pc, #4	; (adr r1, 800aad8 <_printf_i+0x40>)
 800aad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aad8:	0800ab31 	.word	0x0800ab31
 800aadc:	0800ab45 	.word	0x0800ab45
 800aae0:	0800aac1 	.word	0x0800aac1
 800aae4:	0800aac1 	.word	0x0800aac1
 800aae8:	0800aac1 	.word	0x0800aac1
 800aaec:	0800aac1 	.word	0x0800aac1
 800aaf0:	0800ab45 	.word	0x0800ab45
 800aaf4:	0800aac1 	.word	0x0800aac1
 800aaf8:	0800aac1 	.word	0x0800aac1
 800aafc:	0800aac1 	.word	0x0800aac1
 800ab00:	0800aac1 	.word	0x0800aac1
 800ab04:	0800ac51 	.word	0x0800ac51
 800ab08:	0800ab75 	.word	0x0800ab75
 800ab0c:	0800ac33 	.word	0x0800ac33
 800ab10:	0800aac1 	.word	0x0800aac1
 800ab14:	0800aac1 	.word	0x0800aac1
 800ab18:	0800ac73 	.word	0x0800ac73
 800ab1c:	0800aac1 	.word	0x0800aac1
 800ab20:	0800ab75 	.word	0x0800ab75
 800ab24:	0800aac1 	.word	0x0800aac1
 800ab28:	0800aac1 	.word	0x0800aac1
 800ab2c:	0800ac3b 	.word	0x0800ac3b
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	1d1a      	adds	r2, r3, #4
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	602a      	str	r2, [r5, #0]
 800ab38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab40:	2301      	movs	r3, #1
 800ab42:	e0a3      	b.n	800ac8c <_printf_i+0x1f4>
 800ab44:	6820      	ldr	r0, [r4, #0]
 800ab46:	6829      	ldr	r1, [r5, #0]
 800ab48:	0606      	lsls	r6, r0, #24
 800ab4a:	f101 0304 	add.w	r3, r1, #4
 800ab4e:	d50a      	bpl.n	800ab66 <_printf_i+0xce>
 800ab50:	680e      	ldr	r6, [r1, #0]
 800ab52:	602b      	str	r3, [r5, #0]
 800ab54:	2e00      	cmp	r6, #0
 800ab56:	da03      	bge.n	800ab60 <_printf_i+0xc8>
 800ab58:	232d      	movs	r3, #45	; 0x2d
 800ab5a:	4276      	negs	r6, r6
 800ab5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab60:	485e      	ldr	r0, [pc, #376]	; (800acdc <_printf_i+0x244>)
 800ab62:	230a      	movs	r3, #10
 800ab64:	e019      	b.n	800ab9a <_printf_i+0x102>
 800ab66:	680e      	ldr	r6, [r1, #0]
 800ab68:	602b      	str	r3, [r5, #0]
 800ab6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab6e:	bf18      	it	ne
 800ab70:	b236      	sxthne	r6, r6
 800ab72:	e7ef      	b.n	800ab54 <_printf_i+0xbc>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	6820      	ldr	r0, [r4, #0]
 800ab78:	1d19      	adds	r1, r3, #4
 800ab7a:	6029      	str	r1, [r5, #0]
 800ab7c:	0601      	lsls	r1, r0, #24
 800ab7e:	d501      	bpl.n	800ab84 <_printf_i+0xec>
 800ab80:	681e      	ldr	r6, [r3, #0]
 800ab82:	e002      	b.n	800ab8a <_printf_i+0xf2>
 800ab84:	0646      	lsls	r6, r0, #25
 800ab86:	d5fb      	bpl.n	800ab80 <_printf_i+0xe8>
 800ab88:	881e      	ldrh	r6, [r3, #0]
 800ab8a:	4854      	ldr	r0, [pc, #336]	; (800acdc <_printf_i+0x244>)
 800ab8c:	2f6f      	cmp	r7, #111	; 0x6f
 800ab8e:	bf0c      	ite	eq
 800ab90:	2308      	moveq	r3, #8
 800ab92:	230a      	movne	r3, #10
 800ab94:	2100      	movs	r1, #0
 800ab96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab9a:	6865      	ldr	r5, [r4, #4]
 800ab9c:	60a5      	str	r5, [r4, #8]
 800ab9e:	2d00      	cmp	r5, #0
 800aba0:	bfa2      	ittt	ge
 800aba2:	6821      	ldrge	r1, [r4, #0]
 800aba4:	f021 0104 	bicge.w	r1, r1, #4
 800aba8:	6021      	strge	r1, [r4, #0]
 800abaa:	b90e      	cbnz	r6, 800abb0 <_printf_i+0x118>
 800abac:	2d00      	cmp	r5, #0
 800abae:	d04d      	beq.n	800ac4c <_printf_i+0x1b4>
 800abb0:	4615      	mov	r5, r2
 800abb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800abb6:	fb03 6711 	mls	r7, r3, r1, r6
 800abba:	5dc7      	ldrb	r7, [r0, r7]
 800abbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abc0:	4637      	mov	r7, r6
 800abc2:	42bb      	cmp	r3, r7
 800abc4:	460e      	mov	r6, r1
 800abc6:	d9f4      	bls.n	800abb2 <_printf_i+0x11a>
 800abc8:	2b08      	cmp	r3, #8
 800abca:	d10b      	bne.n	800abe4 <_printf_i+0x14c>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	07de      	lsls	r6, r3, #31
 800abd0:	d508      	bpl.n	800abe4 <_printf_i+0x14c>
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	6861      	ldr	r1, [r4, #4]
 800abd6:	4299      	cmp	r1, r3
 800abd8:	bfde      	ittt	le
 800abda:	2330      	movle	r3, #48	; 0x30
 800abdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abe0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800abe4:	1b52      	subs	r2, r2, r5
 800abe6:	6122      	str	r2, [r4, #16]
 800abe8:	f8cd a000 	str.w	sl, [sp]
 800abec:	464b      	mov	r3, r9
 800abee:	aa03      	add	r2, sp, #12
 800abf0:	4621      	mov	r1, r4
 800abf2:	4640      	mov	r0, r8
 800abf4:	f7ff fee2 	bl	800a9bc <_printf_common>
 800abf8:	3001      	adds	r0, #1
 800abfa:	d14c      	bne.n	800ac96 <_printf_i+0x1fe>
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ac00:	b004      	add	sp, #16
 800ac02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac06:	4835      	ldr	r0, [pc, #212]	; (800acdc <_printf_i+0x244>)
 800ac08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac0c:	6829      	ldr	r1, [r5, #0]
 800ac0e:	6823      	ldr	r3, [r4, #0]
 800ac10:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac14:	6029      	str	r1, [r5, #0]
 800ac16:	061d      	lsls	r5, r3, #24
 800ac18:	d514      	bpl.n	800ac44 <_printf_i+0x1ac>
 800ac1a:	07df      	lsls	r7, r3, #31
 800ac1c:	bf44      	itt	mi
 800ac1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac22:	6023      	strmi	r3, [r4, #0]
 800ac24:	b91e      	cbnz	r6, 800ac2e <_printf_i+0x196>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	f023 0320 	bic.w	r3, r3, #32
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	2310      	movs	r3, #16
 800ac30:	e7b0      	b.n	800ab94 <_printf_i+0xfc>
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	f043 0320 	orr.w	r3, r3, #32
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	2378      	movs	r3, #120	; 0x78
 800ac3c:	4828      	ldr	r0, [pc, #160]	; (800ace0 <_printf_i+0x248>)
 800ac3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac42:	e7e3      	b.n	800ac0c <_printf_i+0x174>
 800ac44:	0659      	lsls	r1, r3, #25
 800ac46:	bf48      	it	mi
 800ac48:	b2b6      	uxthmi	r6, r6
 800ac4a:	e7e6      	b.n	800ac1a <_printf_i+0x182>
 800ac4c:	4615      	mov	r5, r2
 800ac4e:	e7bb      	b.n	800abc8 <_printf_i+0x130>
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	6826      	ldr	r6, [r4, #0]
 800ac54:	6961      	ldr	r1, [r4, #20]
 800ac56:	1d18      	adds	r0, r3, #4
 800ac58:	6028      	str	r0, [r5, #0]
 800ac5a:	0635      	lsls	r5, r6, #24
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	d501      	bpl.n	800ac64 <_printf_i+0x1cc>
 800ac60:	6019      	str	r1, [r3, #0]
 800ac62:	e002      	b.n	800ac6a <_printf_i+0x1d2>
 800ac64:	0670      	lsls	r0, r6, #25
 800ac66:	d5fb      	bpl.n	800ac60 <_printf_i+0x1c8>
 800ac68:	8019      	strh	r1, [r3, #0]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	6123      	str	r3, [r4, #16]
 800ac6e:	4615      	mov	r5, r2
 800ac70:	e7ba      	b.n	800abe8 <_printf_i+0x150>
 800ac72:	682b      	ldr	r3, [r5, #0]
 800ac74:	1d1a      	adds	r2, r3, #4
 800ac76:	602a      	str	r2, [r5, #0]
 800ac78:	681d      	ldr	r5, [r3, #0]
 800ac7a:	6862      	ldr	r2, [r4, #4]
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f7f5 fab6 	bl	80001f0 <memchr>
 800ac84:	b108      	cbz	r0, 800ac8a <_printf_i+0x1f2>
 800ac86:	1b40      	subs	r0, r0, r5
 800ac88:	6060      	str	r0, [r4, #4]
 800ac8a:	6863      	ldr	r3, [r4, #4]
 800ac8c:	6123      	str	r3, [r4, #16]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac94:	e7a8      	b.n	800abe8 <_printf_i+0x150>
 800ac96:	6923      	ldr	r3, [r4, #16]
 800ac98:	462a      	mov	r2, r5
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	47d0      	blx	sl
 800aca0:	3001      	adds	r0, #1
 800aca2:	d0ab      	beq.n	800abfc <_printf_i+0x164>
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	079b      	lsls	r3, r3, #30
 800aca8:	d413      	bmi.n	800acd2 <_printf_i+0x23a>
 800acaa:	68e0      	ldr	r0, [r4, #12]
 800acac:	9b03      	ldr	r3, [sp, #12]
 800acae:	4298      	cmp	r0, r3
 800acb0:	bfb8      	it	lt
 800acb2:	4618      	movlt	r0, r3
 800acb4:	e7a4      	b.n	800ac00 <_printf_i+0x168>
 800acb6:	2301      	movs	r3, #1
 800acb8:	4632      	mov	r2, r6
 800acba:	4649      	mov	r1, r9
 800acbc:	4640      	mov	r0, r8
 800acbe:	47d0      	blx	sl
 800acc0:	3001      	adds	r0, #1
 800acc2:	d09b      	beq.n	800abfc <_printf_i+0x164>
 800acc4:	3501      	adds	r5, #1
 800acc6:	68e3      	ldr	r3, [r4, #12]
 800acc8:	9903      	ldr	r1, [sp, #12]
 800acca:	1a5b      	subs	r3, r3, r1
 800accc:	42ab      	cmp	r3, r5
 800acce:	dcf2      	bgt.n	800acb6 <_printf_i+0x21e>
 800acd0:	e7eb      	b.n	800acaa <_printf_i+0x212>
 800acd2:	2500      	movs	r5, #0
 800acd4:	f104 0619 	add.w	r6, r4, #25
 800acd8:	e7f5      	b.n	800acc6 <_printf_i+0x22e>
 800acda:	bf00      	nop
 800acdc:	0800bb5d 	.word	0x0800bb5d
 800ace0:	0800bb6e 	.word	0x0800bb6e

0800ace4 <memcpy>:
 800ace4:	440a      	add	r2, r1
 800ace6:	4291      	cmp	r1, r2
 800ace8:	f100 33ff 	add.w	r3, r0, #4294967295
 800acec:	d100      	bne.n	800acf0 <memcpy+0xc>
 800acee:	4770      	bx	lr
 800acf0:	b510      	push	{r4, lr}
 800acf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acfa:	4291      	cmp	r1, r2
 800acfc:	d1f9      	bne.n	800acf2 <memcpy+0xe>
 800acfe:	bd10      	pop	{r4, pc}

0800ad00 <memmove>:
 800ad00:	4288      	cmp	r0, r1
 800ad02:	b510      	push	{r4, lr}
 800ad04:	eb01 0402 	add.w	r4, r1, r2
 800ad08:	d902      	bls.n	800ad10 <memmove+0x10>
 800ad0a:	4284      	cmp	r4, r0
 800ad0c:	4623      	mov	r3, r4
 800ad0e:	d807      	bhi.n	800ad20 <memmove+0x20>
 800ad10:	1e43      	subs	r3, r0, #1
 800ad12:	42a1      	cmp	r1, r4
 800ad14:	d008      	beq.n	800ad28 <memmove+0x28>
 800ad16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad1e:	e7f8      	b.n	800ad12 <memmove+0x12>
 800ad20:	4402      	add	r2, r0
 800ad22:	4601      	mov	r1, r0
 800ad24:	428a      	cmp	r2, r1
 800ad26:	d100      	bne.n	800ad2a <memmove+0x2a>
 800ad28:	bd10      	pop	{r4, pc}
 800ad2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad32:	e7f7      	b.n	800ad24 <memmove+0x24>

0800ad34 <_free_r>:
 800ad34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad36:	2900      	cmp	r1, #0
 800ad38:	d044      	beq.n	800adc4 <_free_r+0x90>
 800ad3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad3e:	9001      	str	r0, [sp, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f1a1 0404 	sub.w	r4, r1, #4
 800ad46:	bfb8      	it	lt
 800ad48:	18e4      	addlt	r4, r4, r3
 800ad4a:	f000 f913 	bl	800af74 <__malloc_lock>
 800ad4e:	4a1e      	ldr	r2, [pc, #120]	; (800adc8 <_free_r+0x94>)
 800ad50:	9801      	ldr	r0, [sp, #4]
 800ad52:	6813      	ldr	r3, [r2, #0]
 800ad54:	b933      	cbnz	r3, 800ad64 <_free_r+0x30>
 800ad56:	6063      	str	r3, [r4, #4]
 800ad58:	6014      	str	r4, [r2, #0]
 800ad5a:	b003      	add	sp, #12
 800ad5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad60:	f000 b90e 	b.w	800af80 <__malloc_unlock>
 800ad64:	42a3      	cmp	r3, r4
 800ad66:	d908      	bls.n	800ad7a <_free_r+0x46>
 800ad68:	6825      	ldr	r5, [r4, #0]
 800ad6a:	1961      	adds	r1, r4, r5
 800ad6c:	428b      	cmp	r3, r1
 800ad6e:	bf01      	itttt	eq
 800ad70:	6819      	ldreq	r1, [r3, #0]
 800ad72:	685b      	ldreq	r3, [r3, #4]
 800ad74:	1949      	addeq	r1, r1, r5
 800ad76:	6021      	streq	r1, [r4, #0]
 800ad78:	e7ed      	b.n	800ad56 <_free_r+0x22>
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	b10b      	cbz	r3, 800ad84 <_free_r+0x50>
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	d9fa      	bls.n	800ad7a <_free_r+0x46>
 800ad84:	6811      	ldr	r1, [r2, #0]
 800ad86:	1855      	adds	r5, r2, r1
 800ad88:	42a5      	cmp	r5, r4
 800ad8a:	d10b      	bne.n	800ada4 <_free_r+0x70>
 800ad8c:	6824      	ldr	r4, [r4, #0]
 800ad8e:	4421      	add	r1, r4
 800ad90:	1854      	adds	r4, r2, r1
 800ad92:	42a3      	cmp	r3, r4
 800ad94:	6011      	str	r1, [r2, #0]
 800ad96:	d1e0      	bne.n	800ad5a <_free_r+0x26>
 800ad98:	681c      	ldr	r4, [r3, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	6053      	str	r3, [r2, #4]
 800ad9e:	4421      	add	r1, r4
 800ada0:	6011      	str	r1, [r2, #0]
 800ada2:	e7da      	b.n	800ad5a <_free_r+0x26>
 800ada4:	d902      	bls.n	800adac <_free_r+0x78>
 800ada6:	230c      	movs	r3, #12
 800ada8:	6003      	str	r3, [r0, #0]
 800adaa:	e7d6      	b.n	800ad5a <_free_r+0x26>
 800adac:	6825      	ldr	r5, [r4, #0]
 800adae:	1961      	adds	r1, r4, r5
 800adb0:	428b      	cmp	r3, r1
 800adb2:	bf04      	itt	eq
 800adb4:	6819      	ldreq	r1, [r3, #0]
 800adb6:	685b      	ldreq	r3, [r3, #4]
 800adb8:	6063      	str	r3, [r4, #4]
 800adba:	bf04      	itt	eq
 800adbc:	1949      	addeq	r1, r1, r5
 800adbe:	6021      	streq	r1, [r4, #0]
 800adc0:	6054      	str	r4, [r2, #4]
 800adc2:	e7ca      	b.n	800ad5a <_free_r+0x26>
 800adc4:	b003      	add	sp, #12
 800adc6:	bd30      	pop	{r4, r5, pc}
 800adc8:	200029dc 	.word	0x200029dc

0800adcc <sbrk_aligned>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	4e0e      	ldr	r6, [pc, #56]	; (800ae08 <sbrk_aligned+0x3c>)
 800add0:	460c      	mov	r4, r1
 800add2:	6831      	ldr	r1, [r6, #0]
 800add4:	4605      	mov	r5, r0
 800add6:	b911      	cbnz	r1, 800adde <sbrk_aligned+0x12>
 800add8:	f000 f8bc 	bl	800af54 <_sbrk_r>
 800addc:	6030      	str	r0, [r6, #0]
 800adde:	4621      	mov	r1, r4
 800ade0:	4628      	mov	r0, r5
 800ade2:	f000 f8b7 	bl	800af54 <_sbrk_r>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	d00a      	beq.n	800ae00 <sbrk_aligned+0x34>
 800adea:	1cc4      	adds	r4, r0, #3
 800adec:	f024 0403 	bic.w	r4, r4, #3
 800adf0:	42a0      	cmp	r0, r4
 800adf2:	d007      	beq.n	800ae04 <sbrk_aligned+0x38>
 800adf4:	1a21      	subs	r1, r4, r0
 800adf6:	4628      	mov	r0, r5
 800adf8:	f000 f8ac 	bl	800af54 <_sbrk_r>
 800adfc:	3001      	adds	r0, #1
 800adfe:	d101      	bne.n	800ae04 <sbrk_aligned+0x38>
 800ae00:	f04f 34ff 	mov.w	r4, #4294967295
 800ae04:	4620      	mov	r0, r4
 800ae06:	bd70      	pop	{r4, r5, r6, pc}
 800ae08:	200029e0 	.word	0x200029e0

0800ae0c <_malloc_r>:
 800ae0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae10:	1ccd      	adds	r5, r1, #3
 800ae12:	f025 0503 	bic.w	r5, r5, #3
 800ae16:	3508      	adds	r5, #8
 800ae18:	2d0c      	cmp	r5, #12
 800ae1a:	bf38      	it	cc
 800ae1c:	250c      	movcc	r5, #12
 800ae1e:	2d00      	cmp	r5, #0
 800ae20:	4607      	mov	r7, r0
 800ae22:	db01      	blt.n	800ae28 <_malloc_r+0x1c>
 800ae24:	42a9      	cmp	r1, r5
 800ae26:	d905      	bls.n	800ae34 <_malloc_r+0x28>
 800ae28:	230c      	movs	r3, #12
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	2600      	movs	r6, #0
 800ae2e:	4630      	mov	r0, r6
 800ae30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae34:	4e2e      	ldr	r6, [pc, #184]	; (800aef0 <_malloc_r+0xe4>)
 800ae36:	f000 f89d 	bl	800af74 <__malloc_lock>
 800ae3a:	6833      	ldr	r3, [r6, #0]
 800ae3c:	461c      	mov	r4, r3
 800ae3e:	bb34      	cbnz	r4, 800ae8e <_malloc_r+0x82>
 800ae40:	4629      	mov	r1, r5
 800ae42:	4638      	mov	r0, r7
 800ae44:	f7ff ffc2 	bl	800adcc <sbrk_aligned>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	d14d      	bne.n	800aeea <_malloc_r+0xde>
 800ae4e:	6834      	ldr	r4, [r6, #0]
 800ae50:	4626      	mov	r6, r4
 800ae52:	2e00      	cmp	r6, #0
 800ae54:	d140      	bne.n	800aed8 <_malloc_r+0xcc>
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	4631      	mov	r1, r6
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	eb04 0803 	add.w	r8, r4, r3
 800ae60:	f000 f878 	bl	800af54 <_sbrk_r>
 800ae64:	4580      	cmp	r8, r0
 800ae66:	d13a      	bne.n	800aede <_malloc_r+0xd2>
 800ae68:	6821      	ldr	r1, [r4, #0]
 800ae6a:	3503      	adds	r5, #3
 800ae6c:	1a6d      	subs	r5, r5, r1
 800ae6e:	f025 0503 	bic.w	r5, r5, #3
 800ae72:	3508      	adds	r5, #8
 800ae74:	2d0c      	cmp	r5, #12
 800ae76:	bf38      	it	cc
 800ae78:	250c      	movcc	r5, #12
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	f7ff ffa5 	bl	800adcc <sbrk_aligned>
 800ae82:	3001      	adds	r0, #1
 800ae84:	d02b      	beq.n	800aede <_malloc_r+0xd2>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	442b      	add	r3, r5
 800ae8a:	6023      	str	r3, [r4, #0]
 800ae8c:	e00e      	b.n	800aeac <_malloc_r+0xa0>
 800ae8e:	6822      	ldr	r2, [r4, #0]
 800ae90:	1b52      	subs	r2, r2, r5
 800ae92:	d41e      	bmi.n	800aed2 <_malloc_r+0xc6>
 800ae94:	2a0b      	cmp	r2, #11
 800ae96:	d916      	bls.n	800aec6 <_malloc_r+0xba>
 800ae98:	1961      	adds	r1, r4, r5
 800ae9a:	42a3      	cmp	r3, r4
 800ae9c:	6025      	str	r5, [r4, #0]
 800ae9e:	bf18      	it	ne
 800aea0:	6059      	strne	r1, [r3, #4]
 800aea2:	6863      	ldr	r3, [r4, #4]
 800aea4:	bf08      	it	eq
 800aea6:	6031      	streq	r1, [r6, #0]
 800aea8:	5162      	str	r2, [r4, r5]
 800aeaa:	604b      	str	r3, [r1, #4]
 800aeac:	4638      	mov	r0, r7
 800aeae:	f104 060b 	add.w	r6, r4, #11
 800aeb2:	f000 f865 	bl	800af80 <__malloc_unlock>
 800aeb6:	f026 0607 	bic.w	r6, r6, #7
 800aeba:	1d23      	adds	r3, r4, #4
 800aebc:	1af2      	subs	r2, r6, r3
 800aebe:	d0b6      	beq.n	800ae2e <_malloc_r+0x22>
 800aec0:	1b9b      	subs	r3, r3, r6
 800aec2:	50a3      	str	r3, [r4, r2]
 800aec4:	e7b3      	b.n	800ae2e <_malloc_r+0x22>
 800aec6:	6862      	ldr	r2, [r4, #4]
 800aec8:	42a3      	cmp	r3, r4
 800aeca:	bf0c      	ite	eq
 800aecc:	6032      	streq	r2, [r6, #0]
 800aece:	605a      	strne	r2, [r3, #4]
 800aed0:	e7ec      	b.n	800aeac <_malloc_r+0xa0>
 800aed2:	4623      	mov	r3, r4
 800aed4:	6864      	ldr	r4, [r4, #4]
 800aed6:	e7b2      	b.n	800ae3e <_malloc_r+0x32>
 800aed8:	4634      	mov	r4, r6
 800aeda:	6876      	ldr	r6, [r6, #4]
 800aedc:	e7b9      	b.n	800ae52 <_malloc_r+0x46>
 800aede:	230c      	movs	r3, #12
 800aee0:	603b      	str	r3, [r7, #0]
 800aee2:	4638      	mov	r0, r7
 800aee4:	f000 f84c 	bl	800af80 <__malloc_unlock>
 800aee8:	e7a1      	b.n	800ae2e <_malloc_r+0x22>
 800aeea:	6025      	str	r5, [r4, #0]
 800aeec:	e7de      	b.n	800aeac <_malloc_r+0xa0>
 800aeee:	bf00      	nop
 800aef0:	200029dc 	.word	0x200029dc

0800aef4 <_realloc_r>:
 800aef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef8:	4680      	mov	r8, r0
 800aefa:	4614      	mov	r4, r2
 800aefc:	460e      	mov	r6, r1
 800aefe:	b921      	cbnz	r1, 800af0a <_realloc_r+0x16>
 800af00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af04:	4611      	mov	r1, r2
 800af06:	f7ff bf81 	b.w	800ae0c <_malloc_r>
 800af0a:	b92a      	cbnz	r2, 800af18 <_realloc_r+0x24>
 800af0c:	f7ff ff12 	bl	800ad34 <_free_r>
 800af10:	4625      	mov	r5, r4
 800af12:	4628      	mov	r0, r5
 800af14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af18:	f000 f838 	bl	800af8c <_malloc_usable_size_r>
 800af1c:	4284      	cmp	r4, r0
 800af1e:	4607      	mov	r7, r0
 800af20:	d802      	bhi.n	800af28 <_realloc_r+0x34>
 800af22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af26:	d812      	bhi.n	800af4e <_realloc_r+0x5a>
 800af28:	4621      	mov	r1, r4
 800af2a:	4640      	mov	r0, r8
 800af2c:	f7ff ff6e 	bl	800ae0c <_malloc_r>
 800af30:	4605      	mov	r5, r0
 800af32:	2800      	cmp	r0, #0
 800af34:	d0ed      	beq.n	800af12 <_realloc_r+0x1e>
 800af36:	42bc      	cmp	r4, r7
 800af38:	4622      	mov	r2, r4
 800af3a:	4631      	mov	r1, r6
 800af3c:	bf28      	it	cs
 800af3e:	463a      	movcs	r2, r7
 800af40:	f7ff fed0 	bl	800ace4 <memcpy>
 800af44:	4631      	mov	r1, r6
 800af46:	4640      	mov	r0, r8
 800af48:	f7ff fef4 	bl	800ad34 <_free_r>
 800af4c:	e7e1      	b.n	800af12 <_realloc_r+0x1e>
 800af4e:	4635      	mov	r5, r6
 800af50:	e7df      	b.n	800af12 <_realloc_r+0x1e>
	...

0800af54 <_sbrk_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d06      	ldr	r5, [pc, #24]	; (800af70 <_sbrk_r+0x1c>)
 800af58:	2300      	movs	r3, #0
 800af5a:	4604      	mov	r4, r0
 800af5c:	4608      	mov	r0, r1
 800af5e:	602b      	str	r3, [r5, #0]
 800af60:	f7f7 fe5e 	bl	8002c20 <_sbrk>
 800af64:	1c43      	adds	r3, r0, #1
 800af66:	d102      	bne.n	800af6e <_sbrk_r+0x1a>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	b103      	cbz	r3, 800af6e <_sbrk_r+0x1a>
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	200029e4 	.word	0x200029e4

0800af74 <__malloc_lock>:
 800af74:	4801      	ldr	r0, [pc, #4]	; (800af7c <__malloc_lock+0x8>)
 800af76:	f000 b811 	b.w	800af9c <__retarget_lock_acquire_recursive>
 800af7a:	bf00      	nop
 800af7c:	200029e8 	.word	0x200029e8

0800af80 <__malloc_unlock>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__malloc_unlock+0x8>)
 800af82:	f000 b80c 	b.w	800af9e <__retarget_lock_release_recursive>
 800af86:	bf00      	nop
 800af88:	200029e8 	.word	0x200029e8

0800af8c <_malloc_usable_size_r>:
 800af8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af90:	1f18      	subs	r0, r3, #4
 800af92:	2b00      	cmp	r3, #0
 800af94:	bfbc      	itt	lt
 800af96:	580b      	ldrlt	r3, [r1, r0]
 800af98:	18c0      	addlt	r0, r0, r3
 800af9a:	4770      	bx	lr

0800af9c <__retarget_lock_acquire_recursive>:
 800af9c:	4770      	bx	lr

0800af9e <__retarget_lock_release_recursive>:
 800af9e:	4770      	bx	lr

0800afa0 <_init>:
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	bf00      	nop
 800afa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afa6:	bc08      	pop	{r3}
 800afa8:	469e      	mov	lr, r3
 800afaa:	4770      	bx	lr

0800afac <_fini>:
 800afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afae:	bf00      	nop
 800afb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb2:	bc08      	pop	{r3}
 800afb4:	469e      	mov	lr, r3
 800afb6:	4770      	bx	lr
