
F303_battery_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001324  08013468  08013468  00023468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801478c  0801478c  000301fc  2**0
                  CONTENTS
  4 .ARM          00000000  0801478c  0801478c  000301fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801478c  0801478c  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801478c  0801478c  0002478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014790  08014790  00024790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08014794  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301fc  2**0
                  CONTENTS
 10 .bss          00003040  200001fc  200001fc  000301fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000323c  2000323c  000301fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020072  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ea5  00000000  00000000  0005029e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b80  00000000  00000000  00054148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019d0  00000000  00000000  00055cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259ac  00000000  00000000  00057698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024cb7  00000000  00000000  0007d044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db371  00000000  00000000  000a1cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017d06c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085e4  00000000  00000000  0017d0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013450 	.word	0x08013450

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08013450 	.word	0x08013450

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <GMG12864_logo_demonstration>:
		0x10, 0x39, 0x63, 0x63, 0x63, 0x31, 0x1F, 0x0F, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0B, 0x08, 0x08, 0x0B, 0x0B, 0x08,
		0x08, 0x08, 0x08, 0x08, 0x09, 0x0B, 0x0B, 0x0B, 0x0B, 0x09, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0B, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0B };
/*-----------------------------Демонстрационное Logo----------------------------*/

/*---------------Вывод стартового демонстрационного лого------------------------*/
void GMG12864_logo_demonstration(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af02      	add	r7, sp, #8
	GMG12864_Clean_Frame_buffer();
 8000bfe:	f000 f8c1 	bl	8000d84 <GMG12864_Clean_Frame_buffer>
	for (int i = 0; i < 369; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	e00b      	b.n	8000c20 <GMG12864_logo_demonstration+0x28>
		Frame_buffer[i + 265] = solderingiron[i];
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f203 1309 	addw	r3, r3, #265	; 0x109
 8000c0e:	4939      	ldr	r1, [pc, #228]	; (8000cf4 <GMG12864_logo_demonstration+0xfc>)
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	440a      	add	r2, r1
 8000c14:	7811      	ldrb	r1, [r2, #0]
 8000c16:	4a38      	ldr	r2, [pc, #224]	; (8000cf8 <GMG12864_logo_demonstration+0x100>)
 8000c18:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 369; i++) {
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8000c26:	ddef      	ble.n	8000c08 <GMG12864_logo_demonstration+0x10>
	}
	GMG12864_Update();
 8000c28:	f000 f97a 	bl	8000f20 <GMG12864_Update>
	sprintf(tx_buffer, "Vladyslav Zhuk       ");
 8000c2c:	4933      	ldr	r1, [pc, #204]	; (8000cfc <GMG12864_logo_demonstration+0x104>)
 8000c2e:	4834      	ldr	r0, [pc, #208]	; (8000d00 <GMG12864_logo_demonstration+0x108>)
 8000c30:	f010 f996 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(18, 40, 1, 0, tx_buffer);
 8000c34:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <GMG12864_logo_demonstration+0x108>)
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2128      	movs	r1, #40	; 0x28
 8000c3e:	2012      	movs	r0, #18
 8000c40:	f000 fb02 	bl	8001248 <GMG12864_Decode_UTF8>
	sprintf(tx_buffer, "electronics lab.");
 8000c44:	492f      	ldr	r1, [pc, #188]	; (8000d04 <GMG12864_logo_demonstration+0x10c>)
 8000c46:	482e      	ldr	r0, [pc, #184]	; (8000d00 <GMG12864_logo_demonstration+0x108>)
 8000c48:	f010 f98a 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(18, 48, 1, 0, tx_buffer);
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <GMG12864_logo_demonstration+0x108>)
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2300      	movs	r3, #0
 8000c52:	2201      	movs	r2, #1
 8000c54:	2130      	movs	r1, #48	; 0x30
 8000c56:	2012      	movs	r0, #18
 8000c58:	f000 faf6 	bl	8001248 <GMG12864_Decode_UTF8>
	HAL_Delay(500);
 8000c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c60:	f003 ffdc 	bl	8004c1c <HAL_Delay>
	GMG12864_Update();
 8000c64:	f000 f95c 	bl	8000f20 <GMG12864_Update>
	HAL_Delay(5000);
 8000c68:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c6c:	f003 ffd6 	bl	8004c1c <HAL_Delay>
	sprintf(tx_buffer, "                ");
 8000c70:	4925      	ldr	r1, [pc, #148]	; (8000d08 <GMG12864_logo_demonstration+0x110>)
 8000c72:	4823      	ldr	r0, [pc, #140]	; (8000d00 <GMG12864_logo_demonstration+0x108>)
 8000c74:	f010 f974 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(18, 48, 1, 0, tx_buffer);
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <GMG12864_logo_demonstration+0x108>)
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2130      	movs	r1, #48	; 0x30
 8000c82:	2012      	movs	r0, #18
 8000c84:	f000 fae0 	bl	8001248 <GMG12864_Decode_UTF8>
	HAL_Delay(500);
 8000c88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c8c:	f003 ffc6 	bl	8004c1c <HAL_Delay>
	GMG12864_Update();
 8000c90:	f000 f946 	bl	8000f20 <GMG12864_Update>
	sprintf(tx_buffer, "                ");
 8000c94:	491c      	ldr	r1, [pc, #112]	; (8000d08 <GMG12864_logo_demonstration+0x110>)
 8000c96:	481a      	ldr	r0, [pc, #104]	; (8000d00 <GMG12864_logo_demonstration+0x108>)
 8000c98:	f010 f962 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(16, 40, 1, 0, tx_buffer);
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <GMG12864_logo_demonstration+0x108>)
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2128      	movs	r1, #40	; 0x28
 8000ca6:	2010      	movs	r0, #16
 8000ca8:	f000 face 	bl	8001248 <GMG12864_Decode_UTF8>
	HAL_Delay(500);
 8000cac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb0:	f003 ffb4 	bl	8004c1c <HAL_Delay>
	GMG12864_Update();
 8000cb4:	f000 f934 	bl	8000f20 <GMG12864_Update>

	for (int i = 0; i < 369; i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	e008      	b.n	8000cd0 <GMG12864_logo_demonstration+0xd8>
		Frame_buffer[i + 265] = 0x00;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	f203 1309 	addw	r3, r3, #265	; 0x109
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <GMG12864_logo_demonstration+0x100>)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 369; i++) {
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8000cd6:	ddf2      	ble.n	8000cbe <GMG12864_logo_demonstration+0xc6>
	}
	GMG12864_Update();
 8000cd8:	f000 f922 	bl	8000f20 <GMG12864_Update>
	HAL_Delay(500);
 8000cdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce0:	f003 ff9c 	bl	8004c1c <HAL_Delay>
	GMG12864_Clean_Frame_buffer();
 8000ce4:	f000 f84e 	bl	8000d84 <GMG12864_Clean_Frame_buffer>
	GMG12864_Update();
 8000ce8:	f000 f91a 	bl	8000f20 <GMG12864_Update>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	08013cb8 	.word	0x08013cb8
 8000cf8:	20000298 	.word	0x20000298
 8000cfc:	08013468 	.word	0x08013468
 8000d00:	20000218 	.word	0x20000218
 8000d04:	08013480 	.word	0x08013480
 8000d08:	08013494 	.word	0x08013494

08000d0c <GMG12864_Send_command>:
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void GMG12864_Send_command(uint8_t Command) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Command - 8 бит данных.
	DC_set();
 8000d16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d1e:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, &Command, 1, HAL_MAX_DELAY);
 8000d20:	1df9      	adds	r1, r7, #7
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	2201      	movs	r2, #1
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <GMG12864_Send_command+0x40>)
 8000d2a:	f009 f84e 	bl	8009dca <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d2e:	bf00      	nop
 8000d30:	4806      	ldr	r0, [pc, #24]	; (8000d4c <GMG12864_Send_command+0x40>)
 8000d32:	f009 fcd5 	bl	800a6e0 <HAL_SPI_GetState>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d1f9      	bne.n	8000d30 <GMG12864_Send_command+0x24>
	DC_reset();
 8000d3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d40:	2210      	movs	r2, #16
 8000d42:	619a      	str	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200007d4 	.word	0x200007d4

08000d50 <GMG12864_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных.
static void GMG12864_Send_data(uint8_t Dat) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &Dat, 1, HAL_MAX_DELAY);
 8000d5a:	1df9      	adds	r1, r7, #7
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d60:	2201      	movs	r2, #1
 8000d62:	4807      	ldr	r0, [pc, #28]	; (8000d80 <GMG12864_Send_data+0x30>)
 8000d64:	f009 f831 	bl	8009dca <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d68:	bf00      	nop
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <GMG12864_Send_data+0x30>)
 8000d6c:	f009 fcb8 	bl	800a6e0 <HAL_SPI_GetState>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d1f9      	bne.n	8000d6a <GMG12864_Send_data+0x1a>
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200007d4 	.word	0x200007d4

08000d84 <GMG12864_Clean_Frame_buffer>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void GMG12864_Clean_Frame_buffer(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 8000d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4802      	ldr	r0, [pc, #8]	; (8000d98 <GMG12864_Clean_Frame_buffer+0x14>)
 8000d90:	f00f fc74 	bl	801067c <memset>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000298 	.word	0x20000298

08000d9c <GMG12864_Init>:
/*------------------------Функция очистки буфера кадра-------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void GMG12864_Init(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	cs_set();
 8000da0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000da4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000da8:	619a      	str	r2, [r3, #24]
	RST_set();
 8000daa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000db2:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 8000db4:	200a      	movs	r0, #10
 8000db6:	f003 ff31 	bl	8004c1c <HAL_Delay>
	RST_reset();
 8000dba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 8000dc2:	200a      	movs	r0, #10
 8000dc4:	f003 ff2a 	bl	8004c1c <HAL_Delay>
	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея
	GMG12864_Send_command(0xA2);
 8000dc8:	20a2      	movs	r0, #162	; 0xa2
 8000dca:	f7ff ff9f 	bl	8000d0c <GMG12864_Send_command>
	HAL_Delay(1);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f003 ff24 	bl	8004c1c <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	GMG12864_Send_command(0xA0); //ADC selection(SEG0->SEG128)
 8000dd4:	20a0      	movs	r0, #160	; 0xa0
 8000dd6:	f7ff ff99 	bl	8000d0c <GMG12864_Send_command>
	GMG12864_Send_command(0xC8); //SHL selection(COM0->COM64)
 8000dda:	20c8      	movs	r0, #200	; 0xc8
 8000ddc:	f7ff ff96 	bl	8000d0c <GMG12864_Send_command>
	HAL_Delay(1);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f003 ff1b 	bl	8004c1c <HAL_Delay>
	// делитель внутреннего резистора установлен на 7 (от 0..7)
	GMG12864_Send_command(0x20 | 0x7);    //Regulator Resistor Selection
 8000de6:	2027      	movs	r0, #39	; 0x27
 8000de8:	f7ff ff90 	bl	8000d0c <GMG12864_Send_command>
	HAL_Delay(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f003 ff15 	bl	8004c1c <HAL_Delay>
	// управление питанием, все внутренние блоки включены	(от 0..7)
	GMG12864_Send_command(0x28 | 0x7);
 8000df2:	202f      	movs	r0, #47	; 0x2f
 8000df4:	f7ff ff8a 	bl	8000d0c <GMG12864_Send_command>
	HAL_Delay(1);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f003 ff0f 	bl	8004c1c <HAL_Delay>
	// войти в режим динамического контраста
	GMG12864_Send_command(0x81);    //Electronic Volume
 8000dfe:	2081      	movs	r0, #129	; 0x81
 8000e00:	f7ff ff84 	bl	8000d0c <GMG12864_Send_command>
	GMG12864_Send_command(18);	// Настройка контраста. Отрегулируйте на своем дисплее. У меня на 15-19 норм. Максимум 63.
 8000e04:	2012      	movs	r0, #18
 8000e06:	f7ff ff81 	bl	8000d0c <GMG12864_Send_command>
	HAL_Delay(1);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f003 ff06 	bl	8004c1c <HAL_Delay>
	GMG12864_Send_command(0x40);
 8000e10:	2040      	movs	r0, #64	; 0x40
 8000e12:	f7ff ff7b 	bl	8000d0c <GMG12864_Send_command>
	HAL_Delay(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f003 ff00 	bl	8004c1c <HAL_Delay>
	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	GMG12864_Send_command(0xAF);    		//Display on
 8000e1c:	20af      	movs	r0, #175	; 0xaf
 8000e1e:	f7ff ff75 	bl	8000d0c <GMG12864_Send_command>
	// Инвертирование экрана
	GMG12864_Send_command(0xA6); //0xA6 - nomal, 0xA7 - revers
 8000e22:	20a6      	movs	r0, #166	; 0xa6
 8000e24:	f7ff ff72 	bl	8000d0c <GMG12864_Send_command>
	HAL_Delay(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f003 fef7 	bl	8004c1c <HAL_Delay>
	cs_reset();
 8000e2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e32:	2201      	movs	r2, #1
 8000e34:	619a      	str	r2, [r3, #24]
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <GMG12864_Draw_pixel>:
	}
}
/*------------------------Функция вывода изображения с указаием его размера-------------------------*/

/*------------------------Функция рисования пикселя-------------------------*/
void GMG12864_Draw_pixel(int16_t x, int16_t y, uint8_t color) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
 8000e46:	460b      	mov	r3, r1
 8000e48:	80bb      	strh	r3, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	70fb      	strb	r3, [r7, #3]

	if (x >= GMG12864_width || x < 0 || y >= GMG12864_height || y < 0) {
 8000e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e52:	4a30      	ldr	r2, [pc, #192]	; (8000f14 <GMG12864_Draw_pixel+0xd8>)
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	4293      	cmp	r3, r2
 8000e58:	da55      	bge.n	8000f06 <GMG12864_Draw_pixel+0xca>
 8000e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db51      	blt.n	8000f06 <GMG12864_Draw_pixel+0xca>
 8000e62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e66:	4a2c      	ldr	r2, [pc, #176]	; (8000f18 <GMG12864_Draw_pixel+0xdc>)
 8000e68:	7812      	ldrb	r2, [r2, #0]
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	da4b      	bge.n	8000f06 <GMG12864_Draw_pixel+0xca>
 8000e6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db47      	blt.n	8000f06 <GMG12864_Draw_pixel+0xca>
		return;
	} else {
		uint16_t array_pos = x + ((y / 8) * GMG12864_width);
 8000e76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da00      	bge.n	8000e80 <GMG12864_Draw_pixel+0x44>
 8000e7e:	3307      	adds	r3, #7
 8000e80:	10db      	asrs	r3, r3, #3
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <GMG12864_Draw_pixel+0xd8>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	fb12 f303 	smulbb	r3, r2, r3
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	4413      	add	r3, r2
 8000e96:	81fb      	strh	r3, [r7, #14]

		if (color) {
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d018      	beq.n	8000ed0 <GMG12864_Draw_pixel+0x94>
			Frame_buffer[array_pos] |= 1 << (y % 8);
 8000e9e:	89fb      	ldrh	r3, [r7, #14]
 8000ea0:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <GMG12864_Draw_pixel+0xe0>)
 8000ea2:	5cd3      	ldrb	r3, [r2, r3]
 8000ea4:	b25a      	sxtb	r2, r3
 8000ea6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eaa:	4259      	negs	r1, r3
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	f001 0107 	and.w	r1, r1, #7
 8000eb4:	bf58      	it	pl
 8000eb6:	424b      	negpl	r3, r1
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	4619      	mov	r1, r3
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	408b      	lsls	r3, r1
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b25a      	sxtb	r2, r3
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	b2d1      	uxtb	r1, r2
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <GMG12864_Draw_pixel+0xe0>)
 8000ecc:	54d1      	strb	r1, [r2, r3]
 8000ece:	e01b      	b.n	8000f08 <GMG12864_Draw_pixel+0xcc>
		} else {
			Frame_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <GMG12864_Draw_pixel+0xe0>)
 8000ed4:	5cd3      	ldrb	r3, [r2, r3]
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000edc:	4259      	negs	r1, r3
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	f001 0107 	and.w	r1, r1, #7
 8000ee6:	bf58      	it	pl
 8000ee8:	424b      	negpl	r3, r1
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4619      	mov	r1, r3
 8000eee:	2301      	movs	r3, #1
 8000ef0:	408b      	lsls	r3, r1
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	b25a      	sxtb	r2, r3
 8000efc:	89fb      	ldrh	r3, [r7, #14]
 8000efe:	b2d1      	uxtb	r1, r2
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <GMG12864_Draw_pixel+0xe0>)
 8000f02:	54d1      	strb	r1, [r2, r3]
 8000f04:	e000      	b.n	8000f08 <GMG12864_Draw_pixel+0xcc>
		return;
 8000f06:	bf00      	nop
		}
	}

}
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000001 	.word	0x20000001
 8000f1c:	20000298 	.word	0x20000298

08000f20 <GMG12864_Update>:
/*------------------------Функция рисования пикселя-------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void GMG12864_Update(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
	cs_set();
 8000f26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f2e:	619a      	str	r2, [r3, #24]
	for (uint8_t y = 0; y < 8; y++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	e027      	b.n	8000f86 <GMG12864_Update+0x66>
		ST7565_SetX(0);
 8000f36:	2010      	movs	r0, #16
 8000f38:	f7ff fee8 	bl	8000d0c <GMG12864_Send_command>
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fee5 	bl	8000d0c <GMG12864_Send_command>
		ST7565_SetY((int16_t )y);
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fed9 	bl	8000d0c <GMG12864_Send_command>
		for (uint8_t x = 0; x < 128; x++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71bb      	strb	r3, [r7, #6]
 8000f5e:	e00b      	b.n	8000f78 <GMG12864_Update+0x58>
			GMG12864_Send_data(Frame_buffer[x + 128 * y]);
 8000f60:	79ba      	ldrb	r2, [r7, #6]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	01db      	lsls	r3, r3, #7
 8000f66:	4413      	add	r3, r2
 8000f68:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <GMG12864_Update+0x7c>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff feef 	bl	8000d50 <GMG12864_Send_data>
		for (uint8_t x = 0; x < 128; x++) {
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	3301      	adds	r3, #1
 8000f76:	71bb      	strb	r3, [r7, #6]
 8000f78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	daef      	bge.n	8000f60 <GMG12864_Update+0x40>
	for (uint8_t y = 0; y < 8; y++) {
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	3301      	adds	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	d9d4      	bls.n	8000f36 <GMG12864_Update+0x16>
		}
	}
	cs_reset();
 8000f8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f90:	2201      	movs	r2, #1
 8000f92:	619a      	str	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000298 	.word	0x20000298

08000fa0 <GMG12864_Print_symbol_5x7>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_5x7(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4608      	mov	r0, r1
 8000faa:	4611      	mov	r1, r2
 8000fac:	461a      	mov	r2, r3
 8000fae:	4623      	mov	r3, r4
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71bb      	strb	r3, [r7, #6]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	80bb      	strh	r3, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 5; //конечное положение по x с учетом межсимвольного интервала
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	3305      	adds	r3, #5
 8000fc6:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000fc8:	7b3b      	ldrb	r3, [r7, #12]
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e086      	b.n	80010dc <GMG12864_Print_symbol_5x7+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	7afb      	ldrb	r3, [r7, #11]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d127      	bne.n	8001026 <GMG12864_Print_symbol_5x7+0x86>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73bb      	strb	r3, [r7, #14]
 8000fda:	e020      	b.n	800101e <GMG12864_Print_symbol_5x7+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00d      	beq.n	8000ffe <GMG12864_Print_symbol_5x7+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	b218      	sxth	r0, r3
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4413      	add	r3, r2
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f7ff ff20 	bl	8000e3c <GMG12864_Draw_pixel>
 8000ffc:	e00c      	b.n	8001018 <GMG12864_Print_symbol_5x7+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	b218      	sxth	r0, r3
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	b29a      	uxth	r2, r3
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	b29b      	uxth	r3, r3
 800100a:	4413      	add	r3, r2
 800100c:	b29b      	uxth	r3, r3
 800100e:	b21b      	sxth	r3, r3
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff ff12 	bl	8000e3c <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	3301      	adds	r3, #1
 800101c:	73bb      	strb	r3, [r7, #14]
 800101e:	7bbb      	ldrb	r3, [r7, #14]
 8001020:	2b06      	cmp	r3, #6
 8001022:	d9db      	bls.n	8000fdc <GMG12864_Print_symbol_5x7+0x3c>
 8001024:	e057      	b.n	80010d6 <GMG12864_Print_symbol_5x7+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001026:	2300      	movs	r3, #0
 8001028:	737b      	strb	r3, [r7, #13]
 800102a:	e051      	b.n	80010d0 <GMG12864_Print_symbol_5x7+0x130>
				if (Font_5x7[(symbol * 5) + x - x_start] & (1 << i)) {
 800102c:	88ba      	ldrh	r2, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	441a      	add	r2, r3
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	441a      	add	r2, r3
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	4a2c      	ldr	r2, [pc, #176]	; (80010f0 <GMG12864_Print_symbol_5x7+0x150>)
 800103e:	5cd3      	ldrb	r3, [r2, r3]
 8001040:	461a      	mov	r2, r3
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	fa42 f303 	asr.w	r3, r2, r3
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d01e      	beq.n	800108e <GMG12864_Print_symbol_5x7+0xee>
					if (inversion) {
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00d      	beq.n	8001072 <GMG12864_Print_symbol_5x7+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	b218      	sxth	r0, r3
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	b29a      	uxth	r2, r3
 800105e:	7b7b      	ldrb	r3, [r7, #13]
 8001060:	b29b      	uxth	r3, r3
 8001062:	4413      	add	r3, r2
 8001064:	b29b      	uxth	r3, r3
 8001066:	b21b      	sxth	r3, r3
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fee6 	bl	8000e3c <GMG12864_Draw_pixel>
 8001070:	e02b      	b.n	80010ca <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	b218      	sxth	r0, r3
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	b29a      	uxth	r2, r3
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	b29b      	uxth	r3, r3
 800107e:	4413      	add	r3, r2
 8001080:	b29b      	uxth	r3, r3
 8001082:	b21b      	sxth	r3, r3
 8001084:	2201      	movs	r2, #1
 8001086:	4619      	mov	r1, r3
 8001088:	f7ff fed8 	bl	8000e3c <GMG12864_Draw_pixel>
 800108c:	e01d      	b.n	80010ca <GMG12864_Print_symbol_5x7+0x12a>
					}
				} else {
					if (inversion) {
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00d      	beq.n	80010b0 <GMG12864_Print_symbol_5x7+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	b218      	sxth	r0, r3
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	b29a      	uxth	r2, r3
 800109c:	7b7b      	ldrb	r3, [r7, #13]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fec7 	bl	8000e3c <GMG12864_Draw_pixel>
 80010ae:	e00c      	b.n	80010ca <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	b218      	sxth	r0, r3
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4413      	add	r3, r2
 80010be:	b29b      	uxth	r3, r3
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff feb9 	bl	8000e3c <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 80010ca:	7b7b      	ldrb	r3, [r7, #13]
 80010cc:	3301      	adds	r3, #1
 80010ce:	737b      	strb	r3, [r7, #13]
 80010d0:	7b7b      	ldrb	r3, [r7, #13]
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d9aa      	bls.n	800102c <GMG12864_Print_symbol_5x7+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	3301      	adds	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	f67f af74 	bls.w	8000fce <GMG12864_Print_symbol_5x7+0x2e>
					}
				}
			}
		}
	}
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	0801398c 	.word	0x0801398c

080010f4 <GMG12864_Print_symbol_3x5>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_3x5(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	4611      	mov	r1, r2
 8001100:	461a      	mov	r2, r3
 8001102:	4623      	mov	r3, r4
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	4603      	mov	r3, r0
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	460b      	mov	r3, r1
 800110c:	80bb      	strh	r3, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 3; //конечное положение по x с учетом межсимвольного интервала
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	3303      	adds	r3, #3
 800111a:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 800111c:	7b3b      	ldrb	r3, [r7, #12]
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e086      	b.n	8001230 <GMG12864_Print_symbol_3x5+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	7afb      	ldrb	r3, [r7, #11]
 8001126:	429a      	cmp	r2, r3
 8001128:	d127      	bne.n	800117a <GMG12864_Print_symbol_3x5+0x86>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 800112a:	2300      	movs	r3, #0
 800112c:	73bb      	strb	r3, [r7, #14]
 800112e:	e020      	b.n	8001172 <GMG12864_Print_symbol_3x5+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00d      	beq.n	8001152 <GMG12864_Print_symbol_3x5+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	b218      	sxth	r0, r3
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	b29a      	uxth	r2, r3
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4413      	add	r3, r2
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21b      	sxth	r3, r3
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fe76 	bl	8000e3c <GMG12864_Draw_pixel>
 8001150:	e00c      	b.n	800116c <GMG12864_Print_symbol_3x5+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	b218      	sxth	r0, r3
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	b29a      	uxth	r2, r3
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	b21b      	sxth	r3, r3
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fe68 	bl	8000e3c <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	3301      	adds	r3, #1
 8001170:	73bb      	strb	r3, [r7, #14]
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d9db      	bls.n	8001130 <GMG12864_Print_symbol_3x5+0x3c>
 8001178:	e057      	b.n	800122a <GMG12864_Print_symbol_3x5+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 800117a:	2300      	movs	r3, #0
 800117c:	737b      	strb	r3, [r7, #13]
 800117e:	e051      	b.n	8001224 <GMG12864_Print_symbol_3x5+0x130>
				if (Font_3x5[(symbol * 3) + x - x_start] & (1 << i)) {
 8001180:	88ba      	ldrh	r2, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	441a      	add	r2, r3
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	441a      	add	r2, r3
 800118c:	7b3b      	ldrb	r3, [r7, #12]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	4a2c      	ldr	r2, [pc, #176]	; (8001244 <GMG12864_Print_symbol_3x5+0x150>)
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	461a      	mov	r2, r3
 8001196:	7b7b      	ldrb	r3, [r7, #13]
 8001198:	fa42 f303 	asr.w	r3, r2, r3
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01e      	beq.n	80011e2 <GMG12864_Print_symbol_3x5+0xee>
					if (inversion) {
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00d      	beq.n	80011c6 <GMG12864_Print_symbol_3x5+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	b218      	sxth	r0, r3
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	7b7b      	ldrb	r3, [r7, #13]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fe3c 	bl	8000e3c <GMG12864_Draw_pixel>
 80011c4:	e02b      	b.n	800121e <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	b218      	sxth	r0, r3
 80011ca:	79bb      	ldrb	r3, [r7, #6]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	7b7b      	ldrb	r3, [r7, #13]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	2201      	movs	r2, #1
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fe2e 	bl	8000e3c <GMG12864_Draw_pixel>
 80011e0:	e01d      	b.n	800121e <GMG12864_Print_symbol_3x5+0x12a>
					}
				} else {
					if (inversion) {
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00d      	beq.n	8001204 <GMG12864_Print_symbol_3x5+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	b218      	sxth	r0, r3
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	2201      	movs	r2, #1
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fe1d 	bl	8000e3c <GMG12864_Draw_pixel>
 8001202:	e00c      	b.n	800121e <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	b218      	sxth	r0, r3
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	b29a      	uxth	r2, r3
 800120c:	7b7b      	ldrb	r3, [r7, #13]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b29b      	uxth	r3, r3
 8001214:	b21b      	sxth	r3, r3
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	f7ff fe0f 	bl	8000e3c <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 800121e:	7b7b      	ldrb	r3, [r7, #13]
 8001220:	3301      	adds	r3, #1
 8001222:	737b      	strb	r3, [r7, #13]
 8001224:	7b7b      	ldrb	r3, [r7, #13]
 8001226:	2b04      	cmp	r3, #4
 8001228:	d9aa      	bls.n	8001180 <GMG12864_Print_symbol_3x5+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	3301      	adds	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	429a      	cmp	r2, r3
 8001236:	f67f af74 	bls.w	8001122 <GMG12864_Print_symbol_3x5+0x2e>
					}
				}
			}
		}
	}
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	080137a4 	.word	0x080137a4

08001248 <GMG12864_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/
void GMG12864_Decode_UTF8(uint8_t x, uint8_t y, uint8_t font, bool inversion, char *tx_buffer) {
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	4604      	mov	r4, r0
 8001250:	4608      	mov	r0, r1
 8001252:	4611      	mov	r1, r2
 8001254:	461a      	mov	r2, r3
 8001256:	4623      	mov	r3, r4
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	4603      	mov	r3, r0
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	460b      	mov	r3, r1
 8001260:	717b      	strb	r3, [r7, #5]
 8001262:	4613      	mov	r3, r2
 8001264:	713b      	strb	r3, [r7, #4]
/// Функция декодирования UTF-8 в набор символов и последующее занесение в буфер кадра
/// \param x - координата по х. От 0 до 127
/// \param y - координата по y. от 0 до 7
/// \param font - шрифт. 0 - 3x5, 1 - 5x7
	uint16_t symbol = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	e17e      	b.n	8001572 <GMG12864_Decode_UTF8+0x32a>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2bbf      	cmp	r3, #191	; 0xbf
 800127e:	d841      	bhi.n	8001304 <GMG12864_Decode_UTF8+0xbc>
			if (flag_block) {
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <GMG12864_Decode_UTF8+0x44>
				flag_block = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]
 800128a:	e16f      	b.n	800156c <GMG12864_Decode_UTF8+0x324>
			} else {
				symbol = tx_buffer[i];
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001290:	4413      	add	r3, r2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	81fb      	strh	r3, [r7, #14]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001296:	797b      	ldrb	r3, [r7, #5]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d117      	bne.n	80012cc <GMG12864_Decode_UTF8+0x84>
					if (inversion) {
 800129c:	793b      	ldrb	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d008      	beq.n	80012b4 <GMG12864_Decode_UTF8+0x6c>
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 80012a2:	89fb      	ldrh	r3, [r7, #14]
 80012a4:	3b20      	subs	r3, #32
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	79b9      	ldrb	r1, [r7, #6]
 80012aa:	79f8      	ldrb	r0, [r7, #7]
 80012ac:	2301      	movs	r3, #1
 80012ae:	f7ff ff21 	bl	80010f4 <GMG12864_Print_symbol_3x5>
 80012b2:	e007      	b.n	80012c4 <GMG12864_Decode_UTF8+0x7c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 80012b4:	89fb      	ldrh	r3, [r7, #14]
 80012b6:	3b20      	subs	r3, #32
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	79b9      	ldrb	r1, [r7, #6]
 80012bc:	79f8      	ldrb	r0, [r7, #7]
 80012be:	2300      	movs	r3, #0
 80012c0:	f7ff ff18 	bl	80010f4 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	3304      	adds	r3, #4
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	e14f      	b.n	800156c <GMG12864_Decode_UTF8+0x324>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	f040 814c 	bne.w	800156c <GMG12864_Decode_UTF8+0x324>
					if (inversion) {
 80012d4:	793b      	ldrb	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d008      	beq.n	80012ec <GMG12864_Decode_UTF8+0xa4>
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	3b20      	subs	r3, #32
 80012de:	b29a      	uxth	r2, r3
 80012e0:	79b9      	ldrb	r1, [r7, #6]
 80012e2:	79f8      	ldrb	r0, [r7, #7]
 80012e4:	2301      	movs	r3, #1
 80012e6:	f7ff fe5b 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
 80012ea:	e007      	b.n	80012fc <GMG12864_Decode_UTF8+0xb4>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 80012ec:	89fb      	ldrh	r3, [r7, #14]
 80012ee:	3b20      	subs	r3, #32
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	79b9      	ldrb	r1, [r7, #6]
 80012f4:	79f8      	ldrb	r0, [r7, #7]
 80012f6:	2300      	movs	r3, #0
 80012f8:	f7ff fe52 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	3306      	adds	r3, #6
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	e133      	b.n	800156c <GMG12864_Decode_UTF8+0x324>
				}
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	3301      	adds	r3, #1
 8001314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001316:	440b      	add	r3, r1
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21b      	sxth	r3, r3
 8001320:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 8001322:	89fb      	ldrh	r3, [r7, #14]
 8001324:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8001328:	4293      	cmp	r3, r2
 800132a:	d843      	bhi.n	80013b4 <GMG12864_Decode_UTF8+0x16c>
 800132c:	89fb      	ldrh	r3, [r7, #14]
 800132e:	f24d 0281 	movw	r2, #53377	; 0xd081
 8001332:	4293      	cmp	r3, r2
 8001334:	d93e      	bls.n	80013b4 <GMG12864_Decode_UTF8+0x16c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d11b      	bne.n	8001374 <GMG12864_Decode_UTF8+0x12c>
					if (inversion) {
 800133c:	793b      	ldrb	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00a      	beq.n	8001358 <GMG12864_Decode_UTF8+0x110>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001348:	330f      	adds	r3, #15
 800134a:	b29a      	uxth	r2, r3
 800134c:	79b9      	ldrb	r1, [r7, #6]
 800134e:	79f8      	ldrb	r0, [r7, #7]
 8001350:	2301      	movs	r3, #1
 8001352:	f7ff fecf 	bl	80010f4 <GMG12864_Print_symbol_3x5>
 8001356:	e009      	b.n	800136c <GMG12864_Decode_UTF8+0x124>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8001358:	89fb      	ldrh	r3, [r7, #14]
 800135a:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800135e:	330f      	adds	r3, #15
 8001360:	b29a      	uxth	r2, r3
 8001362:	79b9      	ldrb	r1, [r7, #6]
 8001364:	79f8      	ldrb	r0, [r7, #7]
 8001366:	2300      	movs	r3, #0
 8001368:	f7ff fec4 	bl	80010f4 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	3304      	adds	r3, #4
 8001370:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001372:	e0f8      	b.n	8001566 <GMG12864_Decode_UTF8+0x31e>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8001374:	797b      	ldrb	r3, [r7, #5]
 8001376:	2b01      	cmp	r3, #1
 8001378:	f040 80f5 	bne.w	8001566 <GMG12864_Decode_UTF8+0x31e>
					if (inversion) {
 800137c:	793b      	ldrb	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00a      	beq.n	8001398 <GMG12864_Decode_UTF8+0x150>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001388:	330f      	adds	r3, #15
 800138a:	b29a      	uxth	r2, r3
 800138c:	79b9      	ldrb	r1, [r7, #6]
 800138e:	79f8      	ldrb	r0, [r7, #7]
 8001390:	2301      	movs	r3, #1
 8001392:	f7ff fe05 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
 8001396:	e009      	b.n	80013ac <GMG12864_Decode_UTF8+0x164>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800139e:	330f      	adds	r3, #15
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	79b9      	ldrb	r1, [r7, #6]
 80013a4:	79f8      	ldrb	r0, [r7, #7]
 80013a6:	2300      	movs	r3, #0
 80013a8:	f7ff fdfa 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	3306      	adds	r3, #6
 80013b0:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80013b2:	e0d8      	b.n	8001566 <GMG12864_Decode_UTF8+0x31e>
				}
			} else if (symbol == 0xD081) {
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	f24d 0281 	movw	r2, #53377	; 0xd081
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12e      	bne.n	800141c <GMG12864_Decode_UTF8+0x1d4>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d113      	bne.n	80013ec <GMG12864_Decode_UTF8+0x1a4>
					if (inversion) {
 80013c4:	793b      	ldrb	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <GMG12864_Decode_UTF8+0x190>
						GMG12864_Print_symbol_3x5(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 80013ca:	79b9      	ldrb	r1, [r7, #6]
 80013cc:	79f8      	ldrb	r0, [r7, #7]
 80013ce:	2301      	movs	r3, #1
 80013d0:	229f      	movs	r2, #159	; 0x9f
 80013d2:	f7ff fe8f 	bl	80010f4 <GMG12864_Print_symbol_3x5>
 80013d6:	e005      	b.n	80013e4 <GMG12864_Decode_UTF8+0x19c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 80013d8:	79b9      	ldrb	r1, [r7, #6]
 80013da:	79f8      	ldrb	r0, [r7, #7]
 80013dc:	2300      	movs	r3, #0
 80013de:	229f      	movs	r2, #159	; 0x9f
 80013e0:	f7ff fe88 	bl	80010f4 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	3304      	adds	r3, #4
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	e0bd      	b.n	8001568 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	f040 80ba 	bne.w	8001568 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 80013f4:	793b      	ldrb	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <GMG12864_Decode_UTF8+0x1c0>
						GMG12864_Print_symbol_5x7(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 80013fa:	79b9      	ldrb	r1, [r7, #6]
 80013fc:	79f8      	ldrb	r0, [r7, #7]
 80013fe:	2301      	movs	r3, #1
 8001400:	229f      	movs	r2, #159	; 0x9f
 8001402:	f7ff fdcd 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
 8001406:	e005      	b.n	8001414 <GMG12864_Decode_UTF8+0x1cc>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8001408:	79b9      	ldrb	r1, [r7, #6]
 800140a:	79f8      	ldrb	r0, [r7, #7]
 800140c:	2300      	movs	r3, #0
 800140e:	229f      	movs	r2, #159	; 0x9f
 8001410:	f7ff fdc6 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	3306      	adds	r3, #6
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	e0a5      	b.n	8001568 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xD191) {
 800141c:	89fb      	ldrh	r3, [r7, #14]
 800141e:	f24d 1291 	movw	r2, #53649	; 0xd191
 8001422:	4293      	cmp	r3, r2
 8001424:	d12e      	bne.n	8001484 <GMG12864_Decode_UTF8+0x23c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d113      	bne.n	8001454 <GMG12864_Decode_UTF8+0x20c>
					if (inversion) {
 800142c:	793b      	ldrb	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <GMG12864_Decode_UTF8+0x1f8>
						GMG12864_Print_symbol_3x5(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8001432:	79b9      	ldrb	r1, [r7, #6]
 8001434:	79f8      	ldrb	r0, [r7, #7]
 8001436:	2301      	movs	r3, #1
 8001438:	22a0      	movs	r2, #160	; 0xa0
 800143a:	f7ff fe5b 	bl	80010f4 <GMG12864_Print_symbol_3x5>
 800143e:	e005      	b.n	800144c <GMG12864_Decode_UTF8+0x204>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001440:	79b9      	ldrb	r1, [r7, #6]
 8001442:	79f8      	ldrb	r0, [r7, #7]
 8001444:	2300      	movs	r3, #0
 8001446:	22a0      	movs	r2, #160	; 0xa0
 8001448:	f7ff fe54 	bl	80010f4 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	3304      	adds	r3, #4
 8001450:	71fb      	strb	r3, [r7, #7]
 8001452:	e089      	b.n	8001568 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8001454:	797b      	ldrb	r3, [r7, #5]
 8001456:	2b01      	cmp	r3, #1
 8001458:	f040 8086 	bne.w	8001568 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 800145c:	793b      	ldrb	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <GMG12864_Decode_UTF8+0x228>
						GMG12864_Print_symbol_5x7(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8001462:	79b9      	ldrb	r1, [r7, #6]
 8001464:	79f8      	ldrb	r0, [r7, #7]
 8001466:	2301      	movs	r3, #1
 8001468:	22a0      	movs	r2, #160	; 0xa0
 800146a:	f7ff fd99 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
 800146e:	e005      	b.n	800147c <GMG12864_Decode_UTF8+0x234>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001470:	79b9      	ldrb	r1, [r7, #6]
 8001472:	79f8      	ldrb	r0, [r7, #7]
 8001474:	2300      	movs	r3, #0
 8001476:	22a0      	movs	r2, #160	; 0xa0
 8001478:	f7ff fd92 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3306      	adds	r3, #6
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	e071      	b.n	8001568 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xC2B0) {
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 800148a:	4293      	cmp	r3, r2
 800148c:	d12d      	bne.n	80014ea <GMG12864_Decode_UTF8+0x2a2>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800148e:	797b      	ldrb	r3, [r7, #5]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d113      	bne.n	80014bc <GMG12864_Decode_UTF8+0x274>
					if (inversion) {
 8001494:	793b      	ldrb	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <GMG12864_Decode_UTF8+0x260>
						GMG12864_Print_symbol_3x5(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 800149a:	79b9      	ldrb	r1, [r7, #6]
 800149c:	79f8      	ldrb	r0, [r7, #7]
 800149e:	2301      	movs	r3, #1
 80014a0:	22a1      	movs	r2, #161	; 0xa1
 80014a2:	f7ff fe27 	bl	80010f4 <GMG12864_Print_symbol_3x5>
 80014a6:	e005      	b.n	80014b4 <GMG12864_Decode_UTF8+0x26c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 80014a8:	79b9      	ldrb	r1, [r7, #6]
 80014aa:	79f8      	ldrb	r0, [r7, #7]
 80014ac:	2300      	movs	r3, #0
 80014ae:	22a1      	movs	r2, #161	; 0xa1
 80014b0:	f7ff fe20 	bl	80010f4 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	3304      	adds	r3, #4
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e055      	b.n	8001568 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80014bc:	797b      	ldrb	r3, [r7, #5]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d152      	bne.n	8001568 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 80014c2:	793b      	ldrb	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <GMG12864_Decode_UTF8+0x28e>
						GMG12864_Print_symbol_5x7(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 80014c8:	79b9      	ldrb	r1, [r7, #6]
 80014ca:	79f8      	ldrb	r0, [r7, #7]
 80014cc:	2301      	movs	r3, #1
 80014ce:	22a1      	movs	r2, #161	; 0xa1
 80014d0:	f7ff fd66 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
 80014d4:	e005      	b.n	80014e2 <GMG12864_Decode_UTF8+0x29a>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 80014d6:	79b9      	ldrb	r1, [r7, #6]
 80014d8:	79f8      	ldrb	r0, [r7, #7]
 80014da:	2300      	movs	r3, #0
 80014dc:	22a1      	movs	r2, #161	; 0xa1
 80014de:	f7ff fd5f 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	3306      	adds	r3, #6
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	e03e      	b.n	8001568 <GMG12864_Decode_UTF8+0x320>
				}
			}

			else {
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80014ea:	797b      	ldrb	r3, [r7, #5]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d11b      	bne.n	8001528 <GMG12864_Decode_UTF8+0x2e0>
					if (inversion) {
 80014f0:	793b      	ldrb	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00a      	beq.n	800150c <GMG12864_Decode_UTF8+0x2c4>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 80014f6:	89fb      	ldrh	r3, [r7, #14]
 80014f8:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80014fc:	330f      	adds	r3, #15
 80014fe:	b29a      	uxth	r2, r3
 8001500:	79b9      	ldrb	r1, [r7, #6]
 8001502:	79f8      	ldrb	r0, [r7, #7]
 8001504:	2301      	movs	r3, #1
 8001506:	f7ff fdf5 	bl	80010f4 <GMG12864_Print_symbol_3x5>
 800150a:	e009      	b.n	8001520 <GMG12864_Decode_UTF8+0x2d8>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001512:	330f      	adds	r3, #15
 8001514:	b29a      	uxth	r2, r3
 8001516:	79b9      	ldrb	r1, [r7, #6]
 8001518:	79f8      	ldrb	r0, [r7, #7]
 800151a:	2300      	movs	r3, #0
 800151c:	f7ff fdea 	bl	80010f4 <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	3304      	adds	r3, #4
 8001524:	71fb      	strb	r3, [r7, #7]
 8001526:	e01f      	b.n	8001568 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8001528:	797b      	ldrb	r3, [r7, #5]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d11c      	bne.n	8001568 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 800152e:	793b      	ldrb	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00a      	beq.n	800154a <GMG12864_Decode_UTF8+0x302>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800153a:	330f      	adds	r3, #15
 800153c:	b29a      	uxth	r2, r3
 800153e:	79b9      	ldrb	r1, [r7, #6]
 8001540:	79f8      	ldrb	r0, [r7, #7]
 8001542:	2301      	movs	r3, #1
 8001544:	f7ff fd2c 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
 8001548:	e009      	b.n	800155e <GMG12864_Decode_UTF8+0x316>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001550:	330f      	adds	r3, #15
 8001552:	b29a      	uxth	r2, r3
 8001554:	79b9      	ldrb	r1, [r7, #6]
 8001556:	79f8      	ldrb	r0, [r7, #7]
 8001558:	2300      	movs	r3, #0
 800155a:	f7ff fd21 	bl	8000fa0 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	3306      	adds	r3, #6
 8001562:	71fb      	strb	r3, [r7, #7]
 8001564:	e000      	b.n	8001568 <GMG12864_Decode_UTF8+0x320>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001566:	bf00      	nop
				}
			}
			flag_block = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	3301      	adds	r3, #1
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001574:	f7fe fe34 	bl	80001e0 <strlen>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	f63f ae79 	bhi.w	8001274 <GMG12864_Decode_UTF8+0x2c>
		}
	}
}
 8001582:	bf00      	nop
 8001584:	bf00      	nop
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd90      	pop	{r4, r7, pc}

0800158c <Read16>:
uint16_t ina219_calibrationValue;
float ina219_currentDivider_mA;
float ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af04      	add	r7, sp, #16
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	2302      	movs	r3, #2
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2301      	movs	r3, #1
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	f005 fbf0 	bl	8006d98 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 80015b8:	7b3b      	ldrb	r3, [r7, #12]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	7b7b      	ldrb	r3, [r7, #13]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	b29b      	uxth	r3, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af04      	add	r7, sp, #16
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
 80015dc:	4613      	mov	r3, r2
 80015de:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80015e0:	883b      	ldrh	r3, [r7, #0]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80015ea:	883b      	ldrh	r3, [r7, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	2302      	movs	r3, #2
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2301      	movs	r3, #1
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	f005 fab0 	bl	8006b70 <HAL_I2C_Mem_Write>
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001620:	2102      	movs	r1, #2
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffb2 	bl	800158c <Read16>
 8001628:	4603      	mov	r3, r0
 800162a:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 800162c:	89fb      	ldrh	r3, [r7, #14]
 800162e:	08db      	lsrs	r3, r3, #3
 8001630:	b29b      	uxth	r3, r3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	b29b      	uxth	r3, r3

}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001646:	2104      	movs	r1, #4
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff9f 	bl	800158c <Read16>
 800164e:	4603      	mov	r3, r0
 8001650:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001652:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ffe8 	bl	800163e <INA219_ReadCurrent_raw>
 800166e:	4603      	mov	r3, r0
 8001670:	81fb      	strh	r3, [r7, #14]

	return (result * ina219_currentDivider_mA * 1000 );
 8001672:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <INA219_ReadCurrent+0x44>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001688:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80016a8 <INA219_ReadCurrent+0x48>
 800168c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001694:	ee17 3a90 	vmov	r3, s15
 8001698:	b21b      	sxth	r3, r3
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000069c 	.word	0x2000069c
 80016a8:	447a0000 	.word	0x447a0000
 80016ac:	00000000 	.word	0x00000000

080016b0 <INA219_ReadShuntVoltage>:

uint16_t INA219_ReadShuntVoltage(INA219_t *ina219)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 80016b8:	2101      	movs	r1, #1
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff66 	bl	800158c <Read16>
 80016c0:	4603      	mov	r3, r0
 80016c2:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01);
 80016c4:	89fb      	ldrh	r3, [r7, #14]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff34 	bl	8000534 <__aeabi_i2d>
 80016cc:	a308      	add	r3, pc, #32	; (adr r3, 80016f0 <INA219_ReadShuntVoltage+0x40>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe ff99 	bl	8000608 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa6b 	bl	8000bb8 <__aeabi_d2uiz>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29b      	uxth	r3, r3
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	47ae147b 	.word	0x47ae147b
 80016f4:	3f847ae1 	.word	0x3f847ae1

080016f8 <INA219_Read_Power>:

uint16_t INA219_Read_Power(INA219_t *ina219)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_POWER);
 8001700:	2103      	movs	r1, #3
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ff42 	bl	800158c <Read16>
 8001708:	4603      	mov	r3, r0
 800170a:	81fb      	strh	r3, [r7, #14]

	return (result * ina219_powerMultiplier_mW * 1000);
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <INA219_Read_Power+0x44>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001720:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001740 <INA219_Read_Power+0x48>
 8001724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800172c:	ee17 3a90 	vmov	r3, s15
 8001730:	b29b      	uxth	r3, r3
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200006a0 	.word	0x200006a0
 8001740:	447a0000 	.word	0x447a0000

08001744 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 800174c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001750:	2100      	movs	r1, #0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff3c 	bl	80015d0 <Write16>
	HAL_Delay(1);
 8001758:	2001      	movs	r0, #1
 800175a:	f003 fa5f 	bl	8004c1c <HAL_Delay>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001772:	887b      	ldrh	r3, [r7, #2]
 8001774:	461a      	mov	r2, r3
 8001776:	2105      	movs	r1, #5
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff29 	bl	80015d0 <Write16>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	461a      	mov	r2, r3
 8001796:	2100      	movs	r1, #0
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff19 	bl	80015d0 <Write16>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 80017b0:	f643 139f 	movw	r3, #14751	; 0x399f
 80017b4:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <INA219_setCalibration_32V_2A+0x40>)
 80017b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017bc:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 0.0001; // Current LSB = 100uA per bit (1000/100 = 10)
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <INA219_setCalibration_32V_2A+0x44>)
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <INA219_setCalibration_32V_2A+0x48>)
 80017c2:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0.002; // Power LSB = 1mW per bit (2/1)
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <INA219_setCalibration_32V_2A+0x4c>)
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <INA219_setCalibration_32V_2A+0x50>)
 80017c8:	601a      	str	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <INA219_setCalibration_32V_2A+0x40>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffc8 	bl	8001766 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 80017d6:	89fb      	ldrh	r3, [r7, #14]
 80017d8:	4619      	mov	r1, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffd3 	bl	8001786 <INA219_setConfig>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000698 	.word	0x20000698
 80017ec:	2000069c 	.word	0x2000069c
 80017f0:	38d1b717 	.word	0x38d1b717
 80017f4:	200006a0 	.word	0x200006a0
 80017f8:	3b03126f 	.word	0x3b03126f

080017fc <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	4613      	mov	r3, r2
 8001808:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	79fa      	ldrb	r2, [r7, #7]
 8001814:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <INA219_Init+0x60>)
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <INA219_Init+0x64>)
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	601a      	str	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	b29b      	uxth	r3, r3
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	b299      	uxth	r1, r3
 800182e:	2302      	movs	r3, #2
 8001830:	2203      	movs	r2, #3
 8001832:	68b8      	ldr	r0, [r7, #8]
 8001834:	f005 fbca 	bl	8006fcc <HAL_I2C_IsDeviceReady>
 8001838:	4603      	mov	r3, r0
 800183a:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d107      	bne.n	8001852 <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff ff7e 	bl	8001744 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7ff ffad 	bl	80017a8 <INA219_setCalibration_32V_2A>

		return 1;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <INA219_Init+0x58>
	}

	else
	{
		return 0;
 8001852:	2300      	movs	r3, #0
	}
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000069c 	.word	0x2000069c
 8001860:	200006a0 	.word	0x200006a0

08001864 <SMA_FILTER_Get_Value>:
 *  @param  *SMA_Filter_buffer - Массив, где будут лежать сырые значения
 *  @param  *RAW_Data - Сырые данные
 *  @retval  SMA_Filter_Result - Значение, полученное после SMA фильтра.
 ******************************************************************************
 */
uint16_t SMA_FILTER_Get_Value(uint16_t *SMA_Filter_buffer, uint16_t *RAW_Data) {
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]

	/* Создадим переменную для суммы сырых значений */
	uint32_t SMA_Filter_Result = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]

	/* Начнем заполнять массив сырыми значениями с конца */
	SMA_Filter_buffer[SMA_FILTER_ORDER - 1] = *RAW_Data;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	337e      	adds	r3, #126	; 0x7e
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	8812      	ldrh	r2, [r2, #0]
 800187a:	801a      	strh	r2, [r3, #0]

	/* Просуммируем все элементы массива */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 800187c:	2300      	movs	r3, #0
 800187e:	72fb      	strb	r3, [r7, #11]
 8001880:	e00b      	b.n	800189a <SMA_FILTER_Get_Value+0x36>
		SMA_Filter_Result += SMA_Filter_buffer[i];
 8001882:	7afb      	ldrb	r3, [r7, #11]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8001894:	7afb      	ldrb	r3, [r7, #11]
 8001896:	3301      	adds	r3, #1
 8001898:	72fb      	strb	r3, [r7, #11]
 800189a:	7afb      	ldrb	r3, [r7, #11]
 800189c:	2b3f      	cmp	r3, #63	; 0x3f
 800189e:	d9f0      	bls.n	8001882 <SMA_FILTER_Get_Value+0x1e>
	 * 32 = 2*2*2*2*2;
	 * Тогда SMA_Filter_Result = SMA_Filter_Result/32 будет равен, как SMA_Filter_Result = SMA_Filter_Result >> 5u;
	 *
	 */
	//SMA_Filter_Result = SMA_Filter_Result / SMA_FILTER_ORDER;
	SMA_Filter_Result = SMA_Filter_Result >> 6u; //32 = 2^5;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	60fb      	str	r3, [r7, #12]

	/* Сдвинем все элементы массива влево на 1 */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	72bb      	strb	r3, [r7, #10]
 80018aa:	e00d      	b.n	80018c8 <SMA_FILTER_Get_Value+0x64>
		SMA_Filter_buffer[i] = SMA_Filter_buffer[i + 1];
 80018ac:	7abb      	ldrb	r3, [r7, #10]
 80018ae:	3301      	adds	r3, #1
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	441a      	add	r2, r3
 80018b6:	7abb      	ldrb	r3, [r7, #10]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	440b      	add	r3, r1
 80018be:	8812      	ldrh	r2, [r2, #0]
 80018c0:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 80018c2:	7abb      	ldrb	r3, [r7, #10]
 80018c4:	3301      	adds	r3, #1
 80018c6:	72bb      	strb	r3, [r7, #10]
 80018c8:	7abb      	ldrb	r3, [r7, #10]
 80018ca:	2b3f      	cmp	r3, #63	; 0x3f
 80018cc:	d9ee      	bls.n	80018ac <SMA_FILTER_Get_Value+0x48>
	}

	return (uint16_t)SMA_Filter_Result; //Вернем среднее арифметическое значение
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	b29b      	uxth	r3, r3
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_6

/* SPI Chip Select */
static void SELECT(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2140      	movs	r1, #64	; 0x40
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ea:	f004 fe97 	bl	800661c <HAL_GPIO_WritePin>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	2140      	movs	r1, #64	; 0x40
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fe:	f004 fe8d 	bl	800661c <HAL_GPIO_WritePin>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8001912:	bf00      	nop
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <SPI_TxByte+0x30>)
 8001916:	f008 fee3 	bl	800a6e0 <HAL_SPI_GetState>
 800191a:	4603      	mov	r3, r0
 800191c:	2b01      	cmp	r3, #1
 800191e:	d1f9      	bne.n	8001914 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8001920:	1df9      	adds	r1, r7, #7
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	2201      	movs	r2, #1
 8001928:	4803      	ldr	r0, [pc, #12]	; (8001938 <SPI_TxByte+0x30>)
 800192a:	f008 fa4e 	bl	8009dca <HAL_SPI_Transmit>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000838 	.word	0x20000838

0800193c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001942:	23ff      	movs	r3, #255	; 0xff
 8001944:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 800194a:	bf00      	nop
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <SPI_RxByte+0x38>)
 800194e:	f008 fec7 	bl	800a6e0 <HAL_SPI_GetState>
 8001952:	4603      	mov	r3, r0
 8001954:	2b01      	cmp	r3, #1
 8001956:	d1f9      	bne.n	800194c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8001958:	1dba      	adds	r2, r7, #6
 800195a:	1df9      	adds	r1, r7, #7
 800195c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <SPI_RxByte+0x38>)
 8001966:	f008 fb9e 	bl	800a0a6 <HAL_SPI_TransmitReceive>

  return data;
 800196a:	79bb      	ldrb	r3, [r7, #6]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000838 	.word	0x20000838

08001978 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001980:	f7ff ffdc 	bl	800193c <SPI_RxByte>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	701a      	strb	r2, [r3, #0]
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <SD_ReadyWait+0x34>)
 800199c:	2232      	movs	r2, #50	; 0x32
 800199e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80019a0:	f7ff ffcc 	bl	800193c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80019a4:	f7ff ffca 	bl	800193c <SPI_RxByte>
 80019a8:	4603      	mov	r3, r0
 80019aa:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	2bff      	cmp	r3, #255	; 0xff
 80019b0:	d004      	beq.n	80019bc <SD_ReadyWait+0x28>
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SD_ReadyWait+0x34>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f3      	bne.n	80019a4 <SD_ReadyWait+0x10>

  return res;
 80019bc:	79fb      	ldrb	r3, [r7, #7]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20002fef 	.word	0x20002fef

080019cc <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80019d2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80019d6:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80019d8:	f7ff ff8b 	bl	80018f2 <DESELECT>

  for(int i = 0; i < 10; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	e005      	b.n	80019ee <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80019e2:	20ff      	movs	r0, #255	; 0xff
 80019e4:	f7ff ff90 	bl	8001908 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	3301      	adds	r3, #1
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b09      	cmp	r3, #9
 80019f2:	ddf6      	ble.n	80019e2 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80019f4:	f7ff ff73 	bl	80018de <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80019f8:	2340      	movs	r3, #64	; 0x40
 80019fa:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001a0c:	2395      	movs	r3, #149	; 0x95
 8001a0e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e009      	b.n	8001a2a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001a16:	1d3a      	adds	r2, r7, #4
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff72 	bl	8001908 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	ddf2      	ble.n	8001a16 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001a30:	e002      	b.n	8001a38 <SD_PowerOn+0x6c>
  {
    Count--;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001a38:	f7ff ff80 	bl	800193c <SPI_RxByte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d002      	beq.n	8001a48 <SD_PowerOn+0x7c>
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f4      	bne.n	8001a32 <SD_PowerOn+0x66>
  }

  DESELECT();
 8001a48:	f7ff ff53 	bl	80018f2 <DESELECT>
  SPI_TxByte(0XFF);
 8001a4c:	20ff      	movs	r0, #255	; 0xff
 8001a4e:	f7ff ff5b 	bl	8001908 <SPI_TxByte>

  PowerFlag = 1;
 8001a52:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <SD_PowerOn+0x94>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200006a5 	.word	0x200006a5

08001a64 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <SD_PowerOff+0x14>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	200006a5 	.word	0x200006a5

08001a7c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <SD_CheckPower+0x14>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200006a5 	.word	0x200006a5

08001a94 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <SD_RxDataBlock+0x68>)
 8001aa0:	220a      	movs	r2, #10
 8001aa2:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001aa4:	f7ff ff4a 	bl	800193c <SPI_RxByte>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2bff      	cmp	r3, #255	; 0xff
 8001ab0:	d104      	bne.n	8001abc <SD_RxDataBlock+0x28>
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <SD_RxDataBlock+0x68>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f3      	bne.n	8001aa4 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	2bfe      	cmp	r3, #254	; 0xfe
 8001ac0:	d001      	beq.n	8001ac6 <SD_RxDataBlock+0x32>
    return FALSE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e016      	b.n	8001af4 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff53 	bl	8001978 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff4d 	bl	8001978 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	3b02      	subs	r3, #2
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ed      	bne.n	8001ac6 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001aea:	f7ff ff27 	bl	800193c <SPI_RxByte>
  SPI_RxByte();
 8001aee:	f7ff ff25 	bl	800193c <SPI_RxByte>

  return TRUE;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20002fee 	.word	0x20002fee

08001b00 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001b10:	f7ff ff40 	bl	8001994 <SD_ReadyWait>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2bff      	cmp	r3, #255	; 0xff
 8001b18:	d001      	beq.n	8001b1e <SD_TxDataBlock+0x1e>
    return FALSE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e040      	b.n	8001ba0 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fef1 	bl	8001908 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	2bfd      	cmp	r3, #253	; 0xfd
 8001b2a:	d031      	beq.n	8001b90 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fee5 	bl	8001908 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fede 	bl	8001908 <SPI_TxByte>
    } while (--wc);
 8001b4c:	7bbb      	ldrb	r3, [r7, #14]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	73bb      	strb	r3, [r7, #14]
 8001b52:	7bbb      	ldrb	r3, [r7, #14]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1eb      	bne.n	8001b30 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001b58:	f7ff fef0 	bl	800193c <SPI_RxByte>
    SPI_RxByte();
 8001b5c:	f7ff feee 	bl	800193c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001b60:	e00b      	b.n	8001b7a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001b62:	f7ff feeb 	bl	800193c <SPI_RxByte>
 8001b66:	4603      	mov	r3, r0
 8001b68:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d006      	beq.n	8001b82 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001b74:	7b7b      	ldrb	r3, [r7, #13]
 8001b76:	3301      	adds	r3, #1
 8001b78:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001b7a:	7b7b      	ldrb	r3, [r7, #13]
 8001b7c:	2b40      	cmp	r3, #64	; 0x40
 8001b7e:	d9f0      	bls.n	8001b62 <SD_TxDataBlock+0x62>
 8001b80:	e000      	b.n	8001b84 <SD_TxDataBlock+0x84>
        break;
 8001b82:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001b84:	bf00      	nop
 8001b86:	f7ff fed9 	bl	800193c <SPI_RxByte>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0fa      	beq.n	8001b86 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	2b05      	cmp	r3, #5
 8001b98:	d101      	bne.n	8001b9e <SD_TxDataBlock+0x9e>
    return TRUE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001bb4:	f7ff feee 	bl	8001994 <SD_ReadyWait>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2bff      	cmp	r3, #255	; 0xff
 8001bbc:	d001      	beq.n	8001bc2 <SD_SendCmd+0x1a>
    return 0xFF;
 8001bbe:	23ff      	movs	r3, #255	; 0xff
 8001bc0:	e040      	b.n	8001c44 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fe9f 	bl	8001908 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	0e1b      	lsrs	r3, r3, #24
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe99 	bl	8001908 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe93 	bl	8001908 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fe8d 	bl	8001908 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fe88 	bl	8001908 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b40      	cmp	r3, #64	; 0x40
 8001c00:	d101      	bne.n	8001c06 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001c02:	2395      	movs	r3, #149	; 0x95
 8001c04:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b48      	cmp	r3, #72	; 0x48
 8001c0a:	d101      	bne.n	8001c10 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001c0c:	2387      	movs	r3, #135	; 0x87
 8001c0e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fe78 	bl	8001908 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	2b4c      	cmp	r3, #76	; 0x4c
 8001c1c:	d101      	bne.n	8001c22 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001c1e:	f7ff fe8d 	bl	800193c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001c22:	230a      	movs	r3, #10
 8001c24:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001c26:	f7ff fe89 	bl	800193c <SPI_RxByte>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001c2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da05      	bge.n	8001c42 <SD_SendCmd+0x9a>
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	73bb      	strb	r3, [r7, #14]
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f1      	bne.n	8001c26 <SD_SendCmd+0x7e>

  return res;
 8001c42:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0d5      	b.n	8001e0c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001c60:	4b6c      	ldr	r3, [pc, #432]	; (8001e14 <SD_disk_initialize+0x1c8>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <SD_disk_initialize+0x2a>
    return Stat;
 8001c6e:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <SD_disk_initialize+0x1c8>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	e0ca      	b.n	8001e0c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001c76:	f7ff fea9 	bl	80019cc <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001c7a:	f7ff fe30 	bl	80018de <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001c82:	2100      	movs	r1, #0
 8001c84:	2040      	movs	r0, #64	; 0x40
 8001c86:	f7ff ff8f 	bl	8001ba8 <SD_SendCmd>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	f040 80a5 	bne.w	8001ddc <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001c92:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <SD_disk_initialize+0x1cc>)
 8001c94:	2264      	movs	r2, #100	; 0x64
 8001c96:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001c98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001c9c:	2048      	movs	r0, #72	; 0x48
 8001c9e:	f7ff ff83 	bl	8001ba8 <SD_SendCmd>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d158      	bne.n	8001d5a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e00c      	b.n	8001cc8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001cae:	7bfc      	ldrb	r4, [r7, #15]
 8001cb0:	f7ff fe44 	bl	800193c <SPI_RxByte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f104 0310 	add.w	r3, r4, #16
 8001cbc:	443b      	add	r3, r7
 8001cbe:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d9ef      	bls.n	8001cae <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001cce:	7abb      	ldrb	r3, [r7, #10]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	f040 8083 	bne.w	8001ddc <SD_disk_initialize+0x190>
 8001cd6:	7afb      	ldrb	r3, [r7, #11]
 8001cd8:	2baa      	cmp	r3, #170	; 0xaa
 8001cda:	d17f      	bne.n	8001ddc <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2077      	movs	r0, #119	; 0x77
 8001ce0:	f7ff ff62 	bl	8001ba8 <SD_SendCmd>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d807      	bhi.n	8001cfa <SD_disk_initialize+0xae>
 8001cea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cee:	2069      	movs	r0, #105	; 0x69
 8001cf0:	f7ff ff5a 	bl	8001ba8 <SD_SendCmd>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001cfa:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <SD_disk_initialize+0x1cc>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1eb      	bne.n	8001cdc <SD_disk_initialize+0x90>
 8001d04:	e000      	b.n	8001d08 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001d06:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001d08:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <SD_disk_initialize+0x1cc>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d064      	beq.n	8001ddc <SD_disk_initialize+0x190>
 8001d12:	2100      	movs	r1, #0
 8001d14:	207a      	movs	r0, #122	; 0x7a
 8001d16:	f7ff ff47 	bl	8001ba8 <SD_SendCmd>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d15d      	bne.n	8001ddc <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e00c      	b.n	8001d40 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001d26:	7bfc      	ldrb	r4, [r7, #15]
 8001d28:	f7ff fe08 	bl	800193c <SPI_RxByte>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f104 0310 	add.w	r3, r4, #16
 8001d34:	443b      	add	r3, r7
 8001d36:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d9ef      	bls.n	8001d26 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001d46:	7a3b      	ldrb	r3, [r7, #8]
 8001d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SD_disk_initialize+0x108>
 8001d50:	2306      	movs	r3, #6
 8001d52:	e000      	b.n	8001d56 <SD_disk_initialize+0x10a>
 8001d54:	2302      	movs	r3, #2
 8001d56:	73bb      	strb	r3, [r7, #14]
 8001d58:	e040      	b.n	8001ddc <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2077      	movs	r0, #119	; 0x77
 8001d5e:	f7ff ff23 	bl	8001ba8 <SD_SendCmd>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d808      	bhi.n	8001d7a <SD_disk_initialize+0x12e>
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2069      	movs	r0, #105	; 0x69
 8001d6c:	f7ff ff1c 	bl	8001ba8 <SD_SendCmd>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d801      	bhi.n	8001d7a <SD_disk_initialize+0x12e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e000      	b.n	8001d7c <SD_disk_initialize+0x130>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001d7e:	7bbb      	ldrb	r3, [r7, #14]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d10e      	bne.n	8001da2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001d84:	2100      	movs	r1, #0
 8001d86:	2077      	movs	r0, #119	; 0x77
 8001d88:	f7ff ff0e 	bl	8001ba8 <SD_SendCmd>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d80e      	bhi.n	8001db0 <SD_disk_initialize+0x164>
 8001d92:	2100      	movs	r1, #0
 8001d94:	2069      	movs	r0, #105	; 0x69
 8001d96:	f7ff ff07 	bl	8001ba8 <SD_SendCmd>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001da0:	e00d      	b.n	8001dbe <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001da2:	2100      	movs	r1, #0
 8001da4:	2041      	movs	r0, #65	; 0x41
 8001da6:	f7ff feff 	bl	8001ba8 <SD_SendCmd>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <SD_disk_initialize+0x1cc>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1e1      	bne.n	8001d7e <SD_disk_initialize+0x132>
 8001dba:	e000      	b.n	8001dbe <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001dbc:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <SD_disk_initialize+0x1cc>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <SD_disk_initialize+0x18c>
 8001dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dcc:	2050      	movs	r0, #80	; 0x50
 8001dce:	f7ff feeb 	bl	8001ba8 <SD_SendCmd>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001ddc:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <SD_disk_initialize+0x1d0>)
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001de2:	f7ff fd86 	bl	80018f2 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001de6:	f7ff fda9 	bl	800193c <SPI_RxByte>

  if (type)
 8001dea:	7bbb      	ldrb	r3, [r7, #14]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <SD_disk_initialize+0x1c8>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SD_disk_initialize+0x1c8>)
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e001      	b.n	8001e06 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001e02:	f7ff fe2f 	bl	8001a64 <SD_PowerOff>
  }

  return Stat;
 8001e06:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <SD_disk_initialize+0x1c8>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	b2db      	uxtb	r3, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	20000002 	.word	0x20000002
 8001e18:	20002fee 	.word	0x20002fee
 8001e1c:	200006a4 	.word	0x200006a4

08001e20 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e002      	b.n	8001e3a <SD_disk_status+0x1a>

  return Stat;
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SD_disk_status+0x28>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000002 	.word	0x20000002

08001e4c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4603      	mov	r3, r0
 8001e5a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <SD_disk_read+0x1c>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <SD_disk_read+0x20>
    return RES_PARERR;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	e051      	b.n	8001f10 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <SD_disk_read+0xcc>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e048      	b.n	8001f10 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <SD_disk_read+0xd0>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	025b      	lsls	r3, r3, #9
 8001e8e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001e90:	f7ff fd25 	bl	80018de <SELECT>

  if (count == 1)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d111      	bne.n	8001ebe <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	2051      	movs	r0, #81	; 0x51
 8001e9e:	f7ff fe83 	bl	8001ba8 <SD_SendCmd>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d129      	bne.n	8001efc <SD_disk_read+0xb0>
 8001ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eac:	68b8      	ldr	r0, [r7, #8]
 8001eae:	f7ff fdf1 	bl	8001a94 <SD_RxDataBlock>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d021      	beq.n	8001efc <SD_disk_read+0xb0>
      count = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	e01e      	b.n	8001efc <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	2052      	movs	r0, #82	; 0x52
 8001ec2:	f7ff fe71 	bl	8001ba8 <SD_SendCmd>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d117      	bne.n	8001efc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed0:	68b8      	ldr	r0, [r7, #8]
 8001ed2:	f7ff fddf 	bl	8001a94 <SD_RxDataBlock>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ee2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ed      	bne.n	8001ecc <SD_disk_read+0x80>
 8001ef0:	e000      	b.n	8001ef4 <SD_disk_read+0xa8>
          break;
 8001ef2:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	204c      	movs	r0, #76	; 0x4c
 8001ef8:	f7ff fe56 	bl	8001ba8 <SD_SendCmd>
    }
  }

  DESELECT();
 8001efc:	f7ff fcf9 	bl	80018f2 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001f00:	f7ff fd1c 	bl	800193c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000002 	.word	0x20000002
 8001f1c:	200006a4 	.word	0x200006a4

08001f20 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <SD_disk_write+0x1c>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <SD_disk_write+0x20>
    return RES_PARERR;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	e06b      	b.n	8002018 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001f40:	4b37      	ldr	r3, [pc, #220]	; (8002020 <SD_disk_write+0x100>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e062      	b.n	8002018 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001f52:	4b33      	ldr	r3, [pc, #204]	; (8002020 <SD_disk_write+0x100>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001f60:	2302      	movs	r3, #2
 8001f62:	e059      	b.n	8002018 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001f64:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <SD_disk_write+0x104>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	607b      	str	r3, [r7, #4]

  SELECT();
 8001f76:	f7ff fcb2 	bl	80018de <SELECT>

  if (count == 1)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d110      	bne.n	8001fa2 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	2058      	movs	r0, #88	; 0x58
 8001f84:	f7ff fe10 	bl	8001ba8 <SD_SendCmd>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d13a      	bne.n	8002004 <SD_disk_write+0xe4>
 8001f8e:	21fe      	movs	r1, #254	; 0xfe
 8001f90:	68b8      	ldr	r0, [r7, #8]
 8001f92:	f7ff fdb5 	bl	8001b00 <SD_TxDataBlock>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d033      	beq.n	8002004 <SD_disk_write+0xe4>
      count = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	e030      	b.n	8002004 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <SD_disk_write+0x104>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d007      	beq.n	8001fbe <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2077      	movs	r0, #119	; 0x77
 8001fb2:	f7ff fdf9 	bl	8001ba8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001fb6:	6839      	ldr	r1, [r7, #0]
 8001fb8:	2057      	movs	r0, #87	; 0x57
 8001fba:	f7ff fdf5 	bl	8001ba8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	2059      	movs	r0, #89	; 0x59
 8001fc2:	f7ff fdf1 	bl	8001ba8 <SD_SendCmd>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11b      	bne.n	8002004 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001fcc:	21fc      	movs	r1, #252	; 0xfc
 8001fce:	68b8      	ldr	r0, [r7, #8]
 8001fd0:	f7ff fd96 	bl	8001b00 <SD_TxDataBlock>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001fe0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ee      	bne.n	8001fcc <SD_disk_write+0xac>
 8001fee:	e000      	b.n	8001ff2 <SD_disk_write+0xd2>
          break;
 8001ff0:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001ff2:	21fd      	movs	r1, #253	; 0xfd
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff fd83 	bl	8001b00 <SD_TxDataBlock>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <SD_disk_write+0xe4>
      {
        count = 1;
 8002000:	2301      	movs	r3, #1
 8002002:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8002004:	f7ff fc75 	bl	80018f2 <DESELECT>
  SPI_RxByte();
 8002008:	f7ff fc98 	bl	800193c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf14      	ite	ne
 8002012:	2301      	movne	r3, #1
 8002014:	2300      	moveq	r3, #0
 8002016:	b2db      	uxtb	r3, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000002 	.word	0x20000002
 8002024:	200006a4 	.word	0x200006a4

08002028 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b08b      	sub	sp, #44	; 0x2c
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	603a      	str	r2, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	460b      	mov	r3, r1
 8002036:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002042:	2304      	movs	r3, #4
 8002044:	e11b      	b.n	800227e <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800204c:	79bb      	ldrb	r3, [r7, #6]
 800204e:	2b05      	cmp	r3, #5
 8002050:	d129      	bne.n	80020a6 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d017      	beq.n	800208a <SD_disk_ioctl+0x62>
 800205a:	2b02      	cmp	r3, #2
 800205c:	dc1f      	bgt.n	800209e <SD_disk_ioctl+0x76>
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <SD_disk_ioctl+0x40>
 8002062:	2b01      	cmp	r3, #1
 8002064:	d00b      	beq.n	800207e <SD_disk_ioctl+0x56>
 8002066:	e01a      	b.n	800209e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002068:	f7ff fd08 	bl	8001a7c <SD_CheckPower>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002072:	f7ff fcf7 	bl	8001a64 <SD_PowerOff>
      res = RES_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800207c:	e0fd      	b.n	800227a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800207e:	f7ff fca5 	bl	80019cc <SD_PowerOn>
      res = RES_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002088:	e0f7      	b.n	800227a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	1c5c      	adds	r4, r3, #1
 800208e:	f7ff fcf5 	bl	8001a7c <SD_CheckPower>
 8002092:	4603      	mov	r3, r0
 8002094:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002096:	2300      	movs	r3, #0
 8002098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800209c:	e0ed      	b.n	800227a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800209e:	2304      	movs	r3, #4
 80020a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020a4:	e0e9      	b.n	800227a <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80020a6:	4b78      	ldr	r3, [pc, #480]	; (8002288 <SD_disk_ioctl+0x260>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0e2      	b.n	800227e <SD_disk_ioctl+0x256>

    SELECT();
 80020b8:	f7ff fc11 	bl	80018de <SELECT>

    switch (ctrl)
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	2b0d      	cmp	r3, #13
 80020c0:	f200 80cc 	bhi.w	800225c <SD_disk_ioctl+0x234>
 80020c4:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <SD_disk_ioctl+0xa4>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	080021c7 	.word	0x080021c7
 80020d0:	08002105 	.word	0x08002105
 80020d4:	080021b7 	.word	0x080021b7
 80020d8:	0800225d 	.word	0x0800225d
 80020dc:	0800225d 	.word	0x0800225d
 80020e0:	0800225d 	.word	0x0800225d
 80020e4:	0800225d 	.word	0x0800225d
 80020e8:	0800225d 	.word	0x0800225d
 80020ec:	0800225d 	.word	0x0800225d
 80020f0:	0800225d 	.word	0x0800225d
 80020f4:	0800225d 	.word	0x0800225d
 80020f8:	080021d9 	.word	0x080021d9
 80020fc:	080021fd 	.word	0x080021fd
 8002100:	08002221 	.word	0x08002221
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002104:	2100      	movs	r1, #0
 8002106:	2049      	movs	r0, #73	; 0x49
 8002108:	f7ff fd4e 	bl	8001ba8 <SD_SendCmd>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 80a8 	bne.w	8002264 <SD_disk_ioctl+0x23c>
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	2110      	movs	r1, #16
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fcba 	bl	8001a94 <SD_RxDataBlock>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 809e 	beq.w	8002264 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8002128:	7b3b      	ldrb	r3, [r7, #12]
 800212a:	099b      	lsrs	r3, r3, #6
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d10e      	bne.n	8002150 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002132:	7d7b      	ldrb	r3, [r7, #21]
 8002134:	b29a      	uxth	r2, r3
 8002136:	7d3b      	ldrb	r3, [r7, #20]
 8002138:	b29b      	uxth	r3, r3
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b29b      	uxth	r3, r3
 800213e:	4413      	add	r3, r2
 8002140:	b29b      	uxth	r3, r3
 8002142:	3301      	adds	r3, #1
 8002144:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002146:	8bfb      	ldrh	r3, [r7, #30]
 8002148:	029a      	lsls	r2, r3, #10
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e02e      	b.n	80021ae <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002150:	7c7b      	ldrb	r3, [r7, #17]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	b2da      	uxtb	r2, r3
 8002158:	7dbb      	ldrb	r3, [r7, #22]
 800215a:	09db      	lsrs	r3, r3, #7
 800215c:	b2db      	uxtb	r3, r3
 800215e:	4413      	add	r3, r2
 8002160:	b2da      	uxtb	r2, r3
 8002162:	7d7b      	ldrb	r3, [r7, #21]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f003 0306 	and.w	r3, r3, #6
 800216c:	b2db      	uxtb	r3, r3
 800216e:	4413      	add	r3, r2
 8002170:	b2db      	uxtb	r3, r3
 8002172:	3302      	adds	r3, #2
 8002174:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002178:	7d3b      	ldrb	r3, [r7, #20]
 800217a:	099b      	lsrs	r3, r3, #6
 800217c:	b2db      	uxtb	r3, r3
 800217e:	b29a      	uxth	r2, r3
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	b29b      	uxth	r3, r3
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	b29b      	uxth	r3, r3
 8002188:	4413      	add	r3, r2
 800218a:	b29a      	uxth	r2, r3
 800218c:	7cbb      	ldrb	r3, [r7, #18]
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	b29b      	uxth	r3, r3
 8002192:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002196:	b29b      	uxth	r3, r3
 8002198:	4413      	add	r3, r2
 800219a:	b29b      	uxth	r3, r3
 800219c:	3301      	adds	r3, #1
 800219e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80021a0:	8bfa      	ldrh	r2, [r7, #30]
 80021a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021a6:	3b09      	subs	r3, #9
 80021a8:	409a      	lsls	r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80021b4:	e056      	b.n	8002264 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021bc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021c4:	e055      	b.n	8002272 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80021c6:	f7ff fbe5 	bl	8001994 <SD_ReadyWait>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2bff      	cmp	r3, #255	; 0xff
 80021ce:	d14b      	bne.n	8002268 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021d6:	e047      	b.n	8002268 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80021d8:	2100      	movs	r1, #0
 80021da:	2049      	movs	r0, #73	; 0x49
 80021dc:	f7ff fce4 	bl	8001ba8 <SD_SendCmd>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d142      	bne.n	800226c <SD_disk_ioctl+0x244>
 80021e6:	2110      	movs	r1, #16
 80021e8:	6a38      	ldr	r0, [r7, #32]
 80021ea:	f7ff fc53 	bl	8001a94 <SD_RxDataBlock>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d03b      	beq.n	800226c <SD_disk_ioctl+0x244>
        res = RES_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021fa:	e037      	b.n	800226c <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80021fc:	2100      	movs	r1, #0
 80021fe:	204a      	movs	r0, #74	; 0x4a
 8002200:	f7ff fcd2 	bl	8001ba8 <SD_SendCmd>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d132      	bne.n	8002270 <SD_disk_ioctl+0x248>
 800220a:	2110      	movs	r1, #16
 800220c:	6a38      	ldr	r0, [r7, #32]
 800220e:	f7ff fc41 	bl	8001a94 <SD_RxDataBlock>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d02b      	beq.n	8002270 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800221e:	e027      	b.n	8002270 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002220:	2100      	movs	r1, #0
 8002222:	207a      	movs	r0, #122	; 0x7a
 8002224:	f7ff fcc0 	bl	8001ba8 <SD_SendCmd>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 800222e:	2300      	movs	r3, #0
 8002230:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002234:	e00b      	b.n	800224e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8002236:	6a3c      	ldr	r4, [r7, #32]
 8002238:	1c63      	adds	r3, r4, #1
 800223a:	623b      	str	r3, [r7, #32]
 800223c:	f7ff fb7e 	bl	800193c <SPI_RxByte>
 8002240:	4603      	mov	r3, r0
 8002242:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002244:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002248:	3301      	adds	r3, #1
 800224a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800224e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002252:	2b03      	cmp	r3, #3
 8002254:	d9ef      	bls.n	8002236 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 800225c:	2304      	movs	r3, #4
 800225e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002262:	e006      	b.n	8002272 <SD_disk_ioctl+0x24a>
      break;
 8002264:	bf00      	nop
 8002266:	e004      	b.n	8002272 <SD_disk_ioctl+0x24a>
      break;
 8002268:	bf00      	nop
 800226a:	e002      	b.n	8002272 <SD_disk_ioctl+0x24a>
      break;
 800226c:	bf00      	nop
 800226e:	e000      	b.n	8002272 <SD_disk_ioctl+0x24a>
      break;
 8002270:	bf00      	nop
    }

    DESELECT();
 8002272:	f7ff fb3e 	bl	80018f2 <DESELECT>
    SPI_RxByte();
 8002276:	f7ff fb61 	bl	800193c <SPI_RxByte>
  }

  return res;
 800227a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800227e:	4618      	mov	r0, r3
 8002280:	372c      	adds	r7, #44	; 0x2c
 8002282:	46bd      	mov	sp, r7
 8002284:	bd90      	pop	{r4, r7, pc}
 8002286:	bf00      	nop
 8002288:	20000002 	.word	0x20000002

0800228c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002290:	f002 fc5e 	bl	8004b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002294:	f000 f8d0 	bl	8002438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002298:	f000 fbe4 	bl	8002a64 <MX_GPIO_Init>
  MX_DMA_Init();
 800229c:	f000 fbc4 	bl	8002a28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80022a0:	f000 fb92 	bl	80029c8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80022a4:	f000 fa24 	bl	80026f0 <MX_SPI1_Init>
  MX_I2C1_Init();
 80022a8:	f000 f9a2 	bl	80025f0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80022ac:	f000 fa5e 	bl	800276c <MX_SPI2_Init>
  MX_FATFS_Init();
 80022b0:	f00a fa14 	bl	800c6dc <MX_FATFS_Init>
  MX_I2C2_Init();
 80022b4:	f000 f9dc 	bl	8002670 <MX_I2C2_Init>
  MX_ADC1_Init();
 80022b8:	f000 f92a 	bl	8002510 <MX_ADC1_Init>
  MX_TIM6_Init();
 80022bc:	f000 fb16 	bl	80028ec <MX_TIM6_Init>
  MX_TIM3_Init();
 80022c0:	f000 fa92 	bl	80027e8 <MX_TIM3_Init>
  MX_TIM7_Init();
 80022c4:	f000 fb48 	bl	8002958 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80022c8:	2064      	movs	r0, #100	; 0x64
 80022ca:	f002 fca7 	bl	8004c1c <HAL_Delay>
  GMG12864_Init();
 80022ce:	f7fe fd65 	bl	8000d9c <GMG12864_Init>
  GMG12864_logo_demonstration();
 80022d2:	f7fe fc91 	bl	8000bf8 <GMG12864_logo_demonstration>
  HAL_Delay(2000);
 80022d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022da:	f002 fc9f 	bl	8004c1c <HAL_Delay>
  INA219_Init(&ina219, &hi2c1, INA219_ADDRESS);
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	4942      	ldr	r1, [pc, #264]	; (80023ec <main+0x160>)
 80022e2:	4843      	ldr	r0, [pc, #268]	; (80023f0 <main+0x164>)
 80022e4:	f7ff fa8a 	bl	80017fc <INA219_Init>
  t_ina219 = HAL_GetTick();
 80022e8:	f002 fc8c 	bl	8004c04 <HAL_GetTick>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a41      	ldr	r2, [pc, #260]	; (80023f4 <main+0x168>)
 80022f0:	6013      	str	r3, [r2, #0]
  t_gmg12864 = HAL_GetTick();
 80022f2:	f002 fc87 	bl	8004c04 <HAL_GetTick>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4a3f      	ldr	r2, [pc, #252]	; (80023f8 <main+0x16c>)
 80022fa:	6013      	str	r3, [r2, #0]
  t_sd_card = HAL_GetTick();
 80022fc:	f002 fc82 	bl	8004c04 <HAL_GetTick>
 8002300:	4603      	mov	r3, r0
 8002302:	4a3e      	ldr	r2, [pc, #248]	; (80023fc <main+0x170>)
 8002304:	6013      	str	r3, [r2, #0]
  t_ds3231 = HAL_GetTick();
 8002306:	f002 fc7d 	bl	8004c04 <HAL_GetTick>
 800230a:	4603      	mov	r3, r0
 800230c:	4a3c      	ldr	r2, [pc, #240]	; (8002400 <main+0x174>)
 800230e:	6013      	str	r3, [r2, #0]
  t_init_gmg12864 = HAL_GetTick();
 8002310:	f002 fc78 	bl	8004c04 <HAL_GetTick>
 8002314:	4603      	mov	r3, r0
 8002316:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <main+0x178>)
 8002318:	6013      	str	r3, [r2, #0]
  t_button_mode_led = HAL_GetTick();
 800231a:	f002 fc73 	bl	8004c04 <HAL_GetTick>
 800231e:	4603      	mov	r3, r0
 8002320:	4a39      	ldr	r2, [pc, #228]	; (8002408 <main+0x17c>)
 8002322:	6013      	str	r3, [r2, #0]
  t_capacity = HAL_GetTick();
 8002324:	f002 fc6e 	bl	8004c04 <HAL_GetTick>
 8002328:	4603      	mov	r3, r0
 800232a:	4a38      	ldr	r2, [pc, #224]	; (800240c <main+0x180>)
 800232c:	6013      	str	r3, [r2, #0]
 // max_ds3231_set_hours(7);
  //max_ds3231_set_minutes(38);
  //max_ds3231_set_seconds(0);
  //max_ds3231_set_day(1);
  HAL_TIM_Base_Start_IT(&htim6);
 800232e:	4838      	ldr	r0, [pc, #224]	; (8002410 <main+0x184>)
 8002330:	f008 fbb6 	bl	800aaa0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002334:	2100      	movs	r1, #0
 8002336:	4837      	ldr	r0, [pc, #220]	; (8002414 <main+0x188>)
 8002338:	f008 fcb2 	bl	800aca0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800233c:	2104      	movs	r1, #4
 800233e:	4835      	ldr	r0, [pc, #212]	; (8002414 <main+0x188>)
 8002340:	f008 fcae 	bl	800aca0 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 8002344:	4b34      	ldr	r3, [pc, #208]	; (8002418 <main+0x18c>)
 8002346:	2200      	movs	r2, #0
 8002348:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 800234a:	4b33      	ldr	r3, [pc, #204]	; (8002418 <main+0x18c>)
 800234c:	2200      	movs	r2, #0
 800234e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(500);
 8002350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002354:	f002 fc62 	bl	8004c1c <HAL_Delay>
  if((fresult = f_mount(&fs, "", 0)) != FR_OK){
 8002358:	2200      	movs	r2, #0
 800235a:	4930      	ldr	r1, [pc, #192]	; (800241c <main+0x190>)
 800235c:	4830      	ldr	r0, [pc, #192]	; (8002420 <main+0x194>)
 800235e:	f00c fea1 	bl	800f0a4 <f_mount>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <main+0x198>)
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <main+0x198>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00f      	beq.n	8002392 <main+0x106>
	  sprintf(buffer_sd_card, "Card is not detected!!");
 8002372:	492d      	ldr	r1, [pc, #180]	; (8002428 <main+0x19c>)
 8002374:	482d      	ldr	r0, [pc, #180]	; (800242c <main+0x1a0>)
 8002376:	f00e fdf3 	bl	8010f60 <siprintf>
	  WRITE_REG(GPIOA->BSRR, GPIO_BSRR_BS_5);
 800237a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800237e:	2220      	movs	r2, #32
 8002380:	619a      	str	r2, [r3, #24]
	  GMG12864_third_line_level_1(0, 0);
 8002382:	2100      	movs	r1, #0
 8002384:	2000      	movs	r0, #0
 8002386:	f001 fa05 	bl	8003794 <GMG12864_third_line_level_1>
	  HAL_Delay(2000);
 800238a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800238e:	f002 fc45 	bl	8004c1c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_state_of_relays();
 8002392:	f001 f8dd 	bl	8003550 <read_state_of_relays>
	  get_param_from_ina219();
 8002396:	f000 fd01 	bl	8002d9c <get_param_from_ina219>
	  ds3231_get_time_and_temp();
 800239a:	f001 fceb 	bl	8003d74 <ds3231_get_time_and_temp>
	  automatik_mode();
 800239e:	f000 fc6b 	bl	8002c78 <automatik_mode>
	  manual_mode_func();
 80023a2:	f000 fc03 	bl	8002bac <manual_mode_func>
	  mode_change_func();
 80023a6:	f001 f835 	bl	8003414 <mode_change_func>
	  print_gmg12864_level_1();
 80023aa:	f001 f91b 	bl	80035e4 <print_gmg12864_level_1>
	  sd_card_write();
 80023ae:	f001 fc4f 	bl	8003c50 <sd_card_write>
	  button_mode_func();
 80023b2:	f001 f857 	bl	8003464 <button_mode_func>
	  Current_ASC712 = get_current_ASC712();
 80023b6:	f001 fcf5 	bl	8003da4 <get_current_ASC712>
 80023ba:	eef0 7a40 	vmov.f32	s15, s0
 80023be:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <main+0x1a4>)
 80023c0:	edc3 7a00 	vstr	s15, [r3]
	  get_capacity_of_battery();
 80023c4:	f001 fd96 	bl	8003ef4 <get_capacity_of_battery>
	  if(HAL_GetTick() - t_init_gmg12864 > 100000){
 80023c8:	f002 fc1c 	bl	8004c04 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <main+0x178>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	4a17      	ldr	r2, [pc, #92]	; (8002434 <main+0x1a8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d9db      	bls.n	8002392 <main+0x106>
		  t_init_gmg12864 = HAL_GetTick();
 80023da:	f002 fc13 	bl	8004c04 <HAL_GetTick>
 80023de:	4603      	mov	r3, r0
 80023e0:	4a08      	ldr	r2, [pc, #32]	; (8002404 <main+0x178>)
 80023e2:	6013      	str	r3, [r2, #0]
		  GMG12864_Init();
 80023e4:	f7fe fcda 	bl	8000d9c <GMG12864_Init>
	  read_state_of_relays();
 80023e8:	e7d3      	b.n	8002392 <main+0x106>
 80023ea:	bf00      	nop
 80023ec:	2000073c 	.word	0x2000073c
 80023f0:	20002e78 	.word	0x20002e78
 80023f4:	20002e8c 	.word	0x20002e8c
 80023f8:	20002e90 	.word	0x20002e90
 80023fc:	20002e94 	.word	0x20002e94
 8002400:	20002ea4 	.word	0x20002ea4
 8002404:	20002ea8 	.word	0x20002ea8
 8002408:	20002e98 	.word	0x20002e98
 800240c:	20002ec4 	.word	0x20002ec4
 8002410:	200008e8 	.word	0x200008e8
 8002414:	2000089c 	.word	0x2000089c
 8002418:	40000400 	.word	0x40000400
 800241c:	080134ec 	.word	0x080134ec
 8002420:	20000a14 	.word	0x20000a14
 8002424:	20002a70 	.word	0x20002a70
 8002428:	080134f0 	.word	0x080134f0
 800242c:	20002a74 	.word	0x20002a74
 8002430:	20002eb0 	.word	0x20002eb0
 8002434:	000186a0 	.word	0x000186a0

08002438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0a6      	sub	sp, #152	; 0x98
 800243c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800243e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002442:	2228      	movs	r2, #40	; 0x28
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f00e f918 	bl	801067c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800244c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2258      	movs	r2, #88	; 0x58
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f00e f90a 	bl	801067c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002468:	2303      	movs	r3, #3
 800246a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800246c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002470:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002472:	2301      	movs	r3, #1
 8002474:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002476:	2310      	movs	r3, #16
 8002478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800247c:	2302      	movs	r3, #2
 800247e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800248a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800248e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002498:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800249c:	4618      	mov	r0, r3
 800249e:	f005 ff41 	bl	8008324 <HAL_RCC_OscConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80024a8:	f001 fd8c 	bl	8003fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ac:	230f      	movs	r3, #15
 80024ae:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b0:	2302      	movs	r3, #2
 80024b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024b4:	2300      	movs	r3, #0
 80024b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024be:	2300      	movs	r3, #0
 80024c0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024c6:	2102      	movs	r1, #2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f006 ff7f 	bl	80093cc <HAL_RCC_ClockConfig>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80024d4:	f001 fd76 	bl	8003fc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <SystemClock_Config+0xd4>)
 80024da:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80024e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	4618      	mov	r0, r3
 80024f6:	f007 f99f 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002500:	f001 fd60 	bl	8003fc4 <Error_Handler>
  }
}
 8002504:	bf00      	nop
 8002506:	3798      	adds	r7, #152	; 0x98
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	002000e2 	.word	0x002000e2

08002510 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002516:	f107 031c 	add.w	r3, r7, #28
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
 8002530:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002532:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <MX_ADC1_Init+0xdc>)
 8002534:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002538:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800253a:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <MX_ADC1_Init+0xdc>)
 800253c:	2200      	movs	r2, #0
 800253e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <MX_ADC1_Init+0xdc>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <MX_ADC1_Init+0xdc>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <MX_ADC1_Init+0xdc>)
 800254e:	2201      	movs	r2, #1
 8002550:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <MX_ADC1_Init+0xdc>)
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <MX_ADC1_Init+0xdc>)
 800255c:	2200      	movs	r2, #0
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <MX_ADC1_Init+0xdc>)
 8002562:	2201      	movs	r2, #1
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002566:	4b21      	ldr	r3, [pc, #132]	; (80025ec <MX_ADC1_Init+0xdc>)
 8002568:	2200      	movs	r2, #0
 800256a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <MX_ADC1_Init+0xdc>)
 800256e:	2201      	movs	r2, #1
 8002570:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002572:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <MX_ADC1_Init+0xdc>)
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <MX_ADC1_Init+0xdc>)
 800257c:	2204      	movs	r2, #4
 800257e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002580:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <MX_ADC1_Init+0xdc>)
 8002582:	2200      	movs	r2, #0
 8002584:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <MX_ADC1_Init+0xdc>)
 8002588:	2200      	movs	r2, #0
 800258a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800258c:	4817      	ldr	r0, [pc, #92]	; (80025ec <MX_ADC1_Init+0xdc>)
 800258e:	f002 fb87 	bl	8004ca0 <HAL_ADC_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002598:	f001 fd14 	bl	8003fc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4619      	mov	r1, r3
 80025a6:	4811      	ldr	r0, [pc, #68]	; (80025ec <MX_ADC1_Init+0xdc>)
 80025a8:	f003 f97c 	bl	80058a4 <HAL_ADCEx_MultiModeConfigChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80025b2:	f001 fd07 	bl	8003fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80025b6:	230e      	movs	r3, #14
 80025b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80025c2:	2307      	movs	r3, #7
 80025c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	4619      	mov	r1, r3
 80025d2:	4806      	ldr	r0, [pc, #24]	; (80025ec <MX_ADC1_Init+0xdc>)
 80025d4:	f002 fe7a 	bl	80052cc <HAL_ADC_ConfigChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80025de:	f001 fcf1 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	; 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	200006a8 	.word	0x200006a8

080025f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <MX_I2C1_Init+0x74>)
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <MX_I2C1_Init+0x78>)
 80025f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <MX_I2C1_Init+0x74>)
 80025fc:	4a1b      	ldr	r2, [pc, #108]	; (800266c <MX_I2C1_Init+0x7c>)
 80025fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <MX_I2C1_Init+0x74>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <MX_I2C1_Init+0x74>)
 8002608:	2201      	movs	r2, #1
 800260a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <MX_I2C1_Init+0x74>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <MX_I2C1_Init+0x74>)
 8002614:	2200      	movs	r2, #0
 8002616:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <MX_I2C1_Init+0x74>)
 800261a:	2200      	movs	r2, #0
 800261c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <MX_I2C1_Init+0x74>)
 8002620:	2200      	movs	r2, #0
 8002622:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <MX_I2C1_Init+0x74>)
 8002626:	2200      	movs	r2, #0
 8002628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800262a:	480e      	ldr	r0, [pc, #56]	; (8002664 <MX_I2C1_Init+0x74>)
 800262c:	f004 f826 	bl	800667c <HAL_I2C_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002636:	f001 fcc5 	bl	8003fc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800263a:	2100      	movs	r1, #0
 800263c:	4809      	ldr	r0, [pc, #36]	; (8002664 <MX_I2C1_Init+0x74>)
 800263e:	f005 fdd9 	bl	80081f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002648:	f001 fcbc 	bl	8003fc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800264c:	2100      	movs	r1, #0
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_I2C1_Init+0x74>)
 8002650:	f005 fe1b 	bl	800828a <HAL_I2CEx_ConfigDigitalFilter>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800265a:	f001 fcb3 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000073c 	.word	0x2000073c
 8002668:	40005400 	.word	0x40005400
 800266c:	2000090e 	.word	0x2000090e

08002670 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002674:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <MX_I2C2_Init+0x74>)
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <MX_I2C2_Init+0x78>)
 8002678:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <MX_I2C2_Init+0x74>)
 800267c:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <MX_I2C2_Init+0x7c>)
 800267e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <MX_I2C2_Init+0x74>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <MX_I2C2_Init+0x74>)
 8002688:	2201      	movs	r2, #1
 800268a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <MX_I2C2_Init+0x74>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <MX_I2C2_Init+0x74>)
 8002694:	2200      	movs	r2, #0
 8002696:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <MX_I2C2_Init+0x74>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_I2C2_Init+0x74>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <MX_I2C2_Init+0x74>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026aa:	480e      	ldr	r0, [pc, #56]	; (80026e4 <MX_I2C2_Init+0x74>)
 80026ac:	f003 ffe6 	bl	800667c <HAL_I2C_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80026b6:	f001 fc85 	bl	8003fc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026ba:	2100      	movs	r1, #0
 80026bc:	4809      	ldr	r0, [pc, #36]	; (80026e4 <MX_I2C2_Init+0x74>)
 80026be:	f005 fd99 	bl	80081f4 <HAL_I2CEx_ConfigAnalogFilter>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80026c8:	f001 fc7c 	bl	8003fc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80026cc:	2100      	movs	r1, #0
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_I2C2_Init+0x74>)
 80026d0:	f005 fddb 	bl	800828a <HAL_I2CEx_ConfigDigitalFilter>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80026da:	f001 fc73 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000788 	.word	0x20000788
 80026e8:	40005800 	.word	0x40005800
 80026ec:	2000090e 	.word	0x2000090e

080026f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <MX_SPI1_Init+0x74>)
 80026f6:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <MX_SPI1_Init+0x78>)
 80026f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <MX_SPI1_Init+0x74>)
 80026fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <MX_SPI1_Init+0x74>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <MX_SPI1_Init+0x74>)
 800270a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800270e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <MX_SPI1_Init+0x74>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <MX_SPI1_Init+0x74>)
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <MX_SPI1_Init+0x74>)
 800271e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002722:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <MX_SPI1_Init+0x74>)
 8002726:	2208      	movs	r2, #8
 8002728:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <MX_SPI1_Init+0x74>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <MX_SPI1_Init+0x74>)
 8002732:	2200      	movs	r2, #0
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <MX_SPI1_Init+0x74>)
 8002738:	2200      	movs	r2, #0
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <MX_SPI1_Init+0x74>)
 800273e:	2207      	movs	r2, #7
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <MX_SPI1_Init+0x74>)
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <MX_SPI1_Init+0x74>)
 800274a:	2208      	movs	r2, #8
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800274e:	4805      	ldr	r0, [pc, #20]	; (8002764 <MX_SPI1_Init+0x74>)
 8002750:	f007 fa90 	bl	8009c74 <HAL_SPI_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800275a:	f001 fc33 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200007d4 	.word	0x200007d4
 8002768:	40013000 	.word	0x40013000

0800276c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <MX_SPI2_Init+0x74>)
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <MX_SPI2_Init+0x78>)
 8002774:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <MX_SPI2_Init+0x74>)
 8002778:	f44f 7282 	mov.w	r2, #260	; 0x104
 800277c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <MX_SPI2_Init+0x74>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002784:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <MX_SPI2_Init+0x74>)
 8002786:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800278a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <MX_SPI2_Init+0x74>)
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <MX_SPI2_Init+0x74>)
 8002794:	2200      	movs	r2, #0
 8002796:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <MX_SPI2_Init+0x74>)
 800279a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <MX_SPI2_Init+0x74>)
 80027a2:	2208      	movs	r2, #8
 80027a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <MX_SPI2_Init+0x74>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <MX_SPI2_Init+0x74>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <MX_SPI2_Init+0x74>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <MX_SPI2_Init+0x74>)
 80027ba:	2207      	movs	r2, #7
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <MX_SPI2_Init+0x74>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <MX_SPI2_Init+0x74>)
 80027c6:	2208      	movs	r2, #8
 80027c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027ca:	4805      	ldr	r0, [pc, #20]	; (80027e0 <MX_SPI2_Init+0x74>)
 80027cc:	f007 fa52 	bl	8009c74 <HAL_SPI_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80027d6:	f001 fbf5 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000838 	.word	0x20000838
 80027e4:	40003800 	.word	0x40003800

080027e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08e      	sub	sp, #56	; 0x38
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002808:	463b      	mov	r3, r7
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	615a      	str	r2, [r3, #20]
 8002818:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800281a:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800281c:	4a32      	ldr	r2, [pc, #200]	; (80028e8 <MX_TIM3_Init+0x100>)
 800281e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002820:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <MX_TIM3_Init+0xfc>)
 8002822:	2247      	movs	r2, #71	; 0x47
 8002824:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <MX_TIM3_Init+0xfc>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800282c:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800282e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002832:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002834:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <MX_TIM3_Init+0xfc>)
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283a:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002840:	4828      	ldr	r0, [pc, #160]	; (80028e4 <MX_TIM3_Init+0xfc>)
 8002842:	f008 f8d5 	bl	800a9f0 <HAL_TIM_Base_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800284c:	f001 fbba 	bl	8003fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800285a:	4619      	mov	r1, r3
 800285c:	4821      	ldr	r0, [pc, #132]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800285e:	f008 fd5f 	bl	800b320 <HAL_TIM_ConfigClockSource>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002868:	f001 fbac 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800286c:	481d      	ldr	r0, [pc, #116]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800286e:	f008 f9b6 	bl	800abde <HAL_TIM_PWM_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002878:	f001 fba4 	bl	8003fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	4619      	mov	r1, r3
 800288a:	4816      	ldr	r0, [pc, #88]	; (80028e4 <MX_TIM3_Init+0xfc>)
 800288c:	f009 faa8 	bl	800bde0 <HAL_TIMEx_MasterConfigSynchronization>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002896:	f001 fb95 	bl	8003fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800289a:	2360      	movs	r3, #96	; 0x60
 800289c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028aa:	463b      	mov	r3, r7
 80028ac:	2200      	movs	r2, #0
 80028ae:	4619      	mov	r1, r3
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <MX_TIM3_Init+0xfc>)
 80028b2:	f008 fc21 	bl	800b0f8 <HAL_TIM_PWM_ConfigChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80028bc:	f001 fb82 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028c0:	463b      	mov	r3, r7
 80028c2:	2204      	movs	r2, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4807      	ldr	r0, [pc, #28]	; (80028e4 <MX_TIM3_Init+0xfc>)
 80028c8:	f008 fc16 	bl	800b0f8 <HAL_TIM_PWM_ConfigChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80028d2:	f001 fb77 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028d6:	4803      	ldr	r0, [pc, #12]	; (80028e4 <MX_TIM3_Init+0xfc>)
 80028d8:	f001 feae 	bl	8004638 <HAL_TIM_MspPostInit>

}
 80028dc:	bf00      	nop
 80028de:	3738      	adds	r7, #56	; 0x38
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	2000089c 	.word	0x2000089c
 80028e8:	40000400 	.word	0x40000400

080028ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <MX_TIM6_Init+0x64>)
 80028fe:	4a15      	ldr	r2, [pc, #84]	; (8002954 <MX_TIM6_Init+0x68>)
 8002900:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <MX_TIM6_Init+0x64>)
 8002904:	2247      	movs	r2, #71	; 0x47
 8002906:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <MX_TIM6_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <MX_TIM6_Init+0x64>)
 8002910:	220a      	movs	r2, #10
 8002912:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <MX_TIM6_Init+0x64>)
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800291a:	480d      	ldr	r0, [pc, #52]	; (8002950 <MX_TIM6_Init+0x64>)
 800291c:	f008 f868 	bl	800a9f0 <HAL_TIM_Base_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002926:	f001 fb4d 	bl	8003fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4806      	ldr	r0, [pc, #24]	; (8002950 <MX_TIM6_Init+0x64>)
 8002938:	f009 fa52 	bl	800bde0 <HAL_TIMEx_MasterConfigSynchronization>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002942:	f001 fb3f 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200008e8 	.word	0x200008e8
 8002954:	40001000 	.word	0x40001000

08002958 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <MX_TIM7_Init+0x68>)
 800296a:	4a16      	ldr	r2, [pc, #88]	; (80029c4 <MX_TIM7_Init+0x6c>)
 800296c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <MX_TIM7_Init+0x68>)
 8002970:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002974:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <MX_TIM7_Init+0x68>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 800297c:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <MX_TIM7_Init+0x68>)
 800297e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002982:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <MX_TIM7_Init+0x68>)
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800298a:	480d      	ldr	r0, [pc, #52]	; (80029c0 <MX_TIM7_Init+0x68>)
 800298c:	f008 f830 	bl	800a9f0 <HAL_TIM_Base_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002996:	f001 fb15 	bl	8003fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4806      	ldr	r0, [pc, #24]	; (80029c0 <MX_TIM7_Init+0x68>)
 80029a8:	f009 fa1a 	bl	800bde0 <HAL_TIMEx_MasterConfigSynchronization>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80029b2:	f001 fb07 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000934 	.word	0x20000934
 80029c4:	40001400 	.word	0x40001400

080029c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <MX_USART2_UART_Init+0x58>)
 80029ce:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <MX_USART2_UART_Init+0x5c>)
 80029d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80029d2:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <MX_USART2_UART_Init+0x58>)
 80029d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80029d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <MX_USART2_UART_Init+0x58>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <MX_USART2_UART_Init+0x58>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <MX_USART2_UART_Init+0x58>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <MX_USART2_UART_Init+0x58>)
 80029ee:	220c      	movs	r2, #12
 80029f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <MX_USART2_UART_Init+0x58>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <MX_USART2_UART_Init+0x58>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <MX_USART2_UART_Init+0x58>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <MX_USART2_UART_Init+0x58>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a0a:	4805      	ldr	r0, [pc, #20]	; (8002a20 <MX_USART2_UART_Init+0x58>)
 8002a0c:	f009 fa92 	bl	800bf34 <HAL_UART_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a16:	f001 fad5 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000980 	.word	0x20000980
 8002a24:	40004400 	.word	0x40004400

08002a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <MX_DMA_Init+0x38>)
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4a0b      	ldr	r2, [pc, #44]	; (8002a60 <MX_DMA_Init+0x38>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6153      	str	r3, [r2, #20]
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <MX_DMA_Init+0x38>)
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	607b      	str	r3, [r7, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	200b      	movs	r0, #11
 8002a4c:	f003 fa27 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a50:	200b      	movs	r0, #11
 8002a52:	f003 fa40 	bl	8005ed6 <HAL_NVIC_EnableIRQ>

}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000

08002a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
 8002a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	4a49      	ldr	r2, [pc, #292]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a84:	6153      	str	r3, [r2, #20]
 8002a86:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a92:	4b44      	ldr	r3, [pc, #272]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4a43      	ldr	r2, [pc, #268]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002a98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a9c:	6153      	str	r3, [r2, #20]
 8002a9e:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	4b3e      	ldr	r3, [pc, #248]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	4a3d      	ldr	r2, [pc, #244]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	6153      	str	r3, [r2, #20]
 8002ab6:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac2:	4b38      	ldr	r3, [pc, #224]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4a37      	ldr	r2, [pc, #220]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002acc:	6153      	str	r3, [r2, #20]
 8002ace:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <MX_GPIO_Init+0x140>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, high_charge_relay_Pin|low_charge_relay_Pin|discharge_relay_Pin|led_high_charge_Pin
 8002ada:	2200      	movs	r2, #0
 8002adc:	2137      	movs	r1, #55	; 0x37
 8002ade:	4832      	ldr	r0, [pc, #200]	; (8002ba8 <MX_GPIO_Init+0x144>)
 8002ae0:	f003 fd9c 	bl	800661c <HAL_GPIO_WritePin>
                          |led_discharge_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin|DC_Pin|user_led_Pin
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2173      	movs	r1, #115	; 0x73
 8002ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aec:	f003 fd96 	bl	800661c <HAL_GPIO_WritePin>
                          |CS_SD_CARD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 8002af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002af6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	4619      	mov	r1, r3
 8002b06:	4828      	ldr	r0, [pc, #160]	; (8002ba8 <MX_GPIO_Init+0x144>)
 8002b08:	f003 fbfe 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pins : high_charge_relay_Pin low_charge_relay_Pin discharge_relay_Pin led_high_charge_Pin
                           led_discharge_Pin */
  GPIO_InitStruct.Pin = high_charge_relay_Pin|low_charge_relay_Pin|discharge_relay_Pin|led_high_charge_Pin
 8002b0c:	2337      	movs	r3, #55	; 0x37
 8002b0e:	617b      	str	r3, [r7, #20]
                          |led_discharge_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b10:	2301      	movs	r3, #1
 8002b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4619      	mov	r1, r3
 8002b22:	4821      	ldr	r0, [pc, #132]	; (8002ba8 <MX_GPIO_Init+0x144>)
 8002b24:	f003 fbf0 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_low_charge_Pin PC8 PC9 */
  GPIO_InitStruct.Pin = led_low_charge_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8002b28:	f44f 7342 	mov.w	r3, #776	; 0x308
 8002b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	481a      	ldr	r0, [pc, #104]	; (8002ba8 <MX_GPIO_Init+0x144>)
 8002b40:	f003 fbe2 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin RST_Pin DC_Pin user_led_Pin
                           CS_SD_CARD_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin|user_led_Pin
 8002b44:	2373      	movs	r3, #115	; 0x73
 8002b46:	617b      	str	r3, [r7, #20]
                          |CS_SD_CARD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5e:	f003 fbd3 	bl	8006308 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Mode_Pin */
  GPIO_InitStruct.Pin = Button_Mode_Pin;
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_Mode_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 0314 	add.w	r3, r7, #20
 8002b72:	4619      	mov	r1, r3
 8002b74:	480c      	ldr	r0, [pc, #48]	; (8002ba8 <MX_GPIO_Init+0x144>)
 8002b76:	f003 fbc7 	bl	8006308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2017      	movs	r0, #23
 8002b80:	f003 f98d 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b84:	2017      	movs	r0, #23
 8002b86:	f003 f9a6 	bl	8005ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2028      	movs	r0, #40	; 0x28
 8002b90:	f003 f985 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b94:	2028      	movs	r0, #40	; 0x28
 8002b96:	f003 f99e 	bl	8005ed6 <HAL_NVIC_EnableIRQ>

}
 8002b9a:	bf00      	nop
 8002b9c:	3728      	adds	r7, #40	; 0x28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	48000800 	.word	0x48000800

08002bac <manual_mode_func>:

/* USER CODE BEGIN 4 */
void manual_mode_func(){
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
	if(!control_mode){
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <manual_mode_func+0xb8>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f083 0301 	eor.w	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d04a      	beq.n	8002c56 <manual_mode_func+0xaa>
		TIM3->CCR1 = 1000;
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <manual_mode_func+0xbc>)
 8002bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34
		manual_mode = A;
 8002bc8:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <manual_mode_func+0xc0>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b25b      	sxtb	r3, r3
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <manual_mode_func+0xc4>)
 8002bd2:	701a      	strb	r2, [r3, #0]
		switch(manual_mode){
 8002bd4:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <manual_mode_func+0xc4>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d83d      	bhi.n	8002c58 <manual_mode_func+0xac>
 8002bdc:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <manual_mode_func+0x38>)
 8002bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be2:	bf00      	nop
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002c0f 	.word	0x08002c0f
 8002bec:	08002c27 	.word	0x08002c27
 8002bf0:	08002c3f 	.word	0x08002c3f
		case 0:
			high_charge_off();
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <manual_mode_func+0xc8>)
 8002bf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bfa:	619a      	str	r2, [r3, #24]
			low_charge_off();
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <manual_mode_func+0xc8>)
 8002bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c02:	619a      	str	r2, [r3, #24]
			discharge_off();
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <manual_mode_func+0xc8>)
 8002c06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c0a:	619a      	str	r2, [r3, #24]
			break;
 8002c0c:	e024      	b.n	8002c58 <manual_mode_func+0xac>
		case 1:
			high_charge_on();
 8002c0e:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <manual_mode_func+0xc8>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	619a      	str	r2, [r3, #24]
			low_charge_off();
 8002c14:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <manual_mode_func+0xc8>)
 8002c16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c1a:	619a      	str	r2, [r3, #24]
			discharge_off();
 8002c1c:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <manual_mode_func+0xc8>)
 8002c1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c22:	619a      	str	r2, [r3, #24]
			break;
 8002c24:	e018      	b.n	8002c58 <manual_mode_func+0xac>
		case 2:
			high_charge_off();
 8002c26:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <manual_mode_func+0xc8>)
 8002c28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c2c:	619a      	str	r2, [r3, #24]
			low_charge_on();
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <manual_mode_func+0xc8>)
 8002c30:	2202      	movs	r2, #2
 8002c32:	619a      	str	r2, [r3, #24]
			discharge_off();
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <manual_mode_func+0xc8>)
 8002c36:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c3a:	619a      	str	r2, [r3, #24]
			break;
 8002c3c:	e00c      	b.n	8002c58 <manual_mode_func+0xac>
		case 3:
			high_charge_off();
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <manual_mode_func+0xc8>)
 8002c40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c44:	619a      	str	r2, [r3, #24]
			low_charge_off();
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <manual_mode_func+0xc8>)
 8002c48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c4c:	619a      	str	r2, [r3, #24]
			discharge_on();
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <manual_mode_func+0xc8>)
 8002c50:	2204      	movs	r2, #4
 8002c52:	619a      	str	r2, [r3, #24]
			break;
 8002c54:	e000      	b.n	8002c58 <manual_mode_func+0xac>
		}
	}
 8002c56:	bf00      	nop
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000003 	.word	0x20000003
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	20000a04 	.word	0x20000a04
 8002c70:	20002ea0 	.word	0x20002ea0
 8002c74:	48000800 	.word	0x48000800

08002c78 <automatik_mode>:

void automatik_mode(){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
	if(control_mode){
 8002c7c:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <automatik_mode+0x104>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d078      	beq.n	8002d78 <automatik_mode+0x100>
		button_mode_led_delay();
 8002c86:	f000 fc05 	bl	8003494 <button_mode_led_delay>
		if(v_bus < BATTERY_LOW_LIMIT && (discharge_enable == 0) && (Prev_Mode == DISCHARGE)){
 8002c8a:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <automatik_mode+0x108>)
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	f241 32eb 	movw	r2, #5099	; 0x13eb
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d819      	bhi.n	8002cca <automatik_mode+0x52>
 8002c96:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <automatik_mode+0x10c>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	f083 0301 	eor.w	r3, r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d012      	beq.n	8002cca <automatik_mode+0x52>
 8002ca4:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <automatik_mode+0x110>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d10e      	bne.n	8002cca <automatik_mode+0x52>
			low_charge_off();
 8002cac:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <automatik_mode+0x114>)
 8002cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cb2:	619a      	str	r2, [r3, #24]
			discharge_off();
 8002cb4:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <automatik_mode+0x114>)
 8002cb6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002cba:	619a      	str	r2, [r3, #24]
			high_charge_on();
 8002cbc:	4b33      	ldr	r3, [pc, #204]	; (8002d8c <automatik_mode+0x114>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	619a      	str	r2, [r3, #24]
			Prev_Mode = HIGH_CHARGE;
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <automatik_mode+0x110>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	e023      	b.n	8002d12 <automatik_mode+0x9a>
		}
		else if((v_bus > BATTERY_MEDIUM_LIMIT) && (discharge_enable == 0) && (Prev_Mode == HIGH_CHARGE)){
 8002cca:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <automatik_mode+0x108>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d91d      	bls.n	8002d12 <automatik_mode+0x9a>
 8002cd6:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <automatik_mode+0x10c>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	f083 0301 	eor.w	r3, r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d016      	beq.n	8002d12 <automatik_mode+0x9a>
 8002ce4:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <automatik_mode+0x110>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d112      	bne.n	8002d12 <automatik_mode+0x9a>
			high_charge_off();
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <automatik_mode+0x114>)
 8002cee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cf2:	619a      	str	r2, [r3, #24]
			discharge_off();
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <automatik_mode+0x114>)
 8002cf6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002cfa:	619a      	str	r2, [r3, #24]
			low_charge_on();
 8002cfc:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <automatik_mode+0x114>)
 8002cfe:	2202      	movs	r2, #2
 8002d00:	619a      	str	r2, [r3, #24]
			tim7_start();
 8002d02:	f001 f8df 	bl	8003ec4 <tim7_start>
			Prev_Mode = LOW_CHARGE;
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <automatik_mode+0x110>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
			discharge_enable = 1;
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <automatik_mode+0x10c>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
			//if(v_bus >= BATTERY_HIGH_LIMIT){
				//discharge_enable = 1;
				//Prev_Mode = LOW_CHARGE;
			//}
		}
		if(discharge_enable && (Prev_Mode == LOW_CHARGE) && (tim7_counter >= DELAY_LOW_CHARGE_IN_SEC)){
 8002d12:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <automatik_mode+0x10c>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d02e      	beq.n	8002d78 <automatik_mode+0x100>
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <automatik_mode+0x110>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d12a      	bne.n	8002d78 <automatik_mode+0x100>
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <automatik_mode+0x118>)
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b9f      	cmp	r3, #159	; 0x9f
 8002d2a:	d925      	bls.n	8002d78 <automatik_mode+0x100>
			tim7_stop();
 8002d2c:	f001 f8d4 	bl	8003ed8 <tim7_stop>
			low_charge_off();
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <automatik_mode+0x114>)
 8002d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d36:	619a      	str	r2, [r3, #24]
			high_charge_off();
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <automatik_mode+0x114>)
 8002d3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d3e:	619a      	str	r2, [r3, #24]
			discharge_on();
 8002d40:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <automatik_mode+0x114>)
 8002d42:	2204      	movs	r2, #4
 8002d44:	619a      	str	r2, [r3, #24]
			start_capacity_timer();
 8002d46:	f001 f91d 	bl	8003f84 <start_capacity_timer>
			if(v_bus < BATTERY_LOW_LIMIT){
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <automatik_mode+0x108>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	f241 32eb 	movw	r2, #5099	; 0x13eb
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d810      	bhi.n	8002d78 <automatik_mode+0x100>
				stop_capacity_timer();
 8002d56:	f001 f929 	bl	8003fac <stop_capacity_timer>
				discharge_enable = 0;
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <automatik_mode+0x10c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
				Prev_Mode = DISCHARGE;
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <automatik_mode+0x110>)
 8002d62:	2202      	movs	r2, #2
 8002d64:	701a      	strb	r2, [r3, #0]
				tim7_counter = 0;
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <automatik_mode+0x118>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	801a      	strh	r2, [r3, #0]
				capacity_flag = 1;
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <automatik_mode+0x11c>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
				capacity_timer_flag_1 = 1;
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <automatik_mode+0x120>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000003 	.word	0x20000003
 8002d80:	20002e82 	.word	0x20002e82
 8002d84:	20002e9f 	.word	0x20002e9f
 8002d88:	20000008 	.word	0x20000008
 8002d8c:	48000800 	.word	0x48000800
 8002d90:	20002eba 	.word	0x20002eba
 8002d94:	20002ec0 	.word	0x20002ec0
 8002d98:	20000009 	.word	0x20000009

08002d9c <get_param_from_ina219>:

void get_param_from_ina219(){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
	if(ina219_flag){
 8002da0:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <get_param_from_ina219+0x64>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d027      	beq.n	8002dfa <get_param_from_ina219+0x5e>
		ina219_flag = 0;
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <get_param_from_ina219+0x64>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
		filtered_voltage = (float)ADC_SMA_Data_2;
 8002db0:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <get_param_from_ina219+0x68>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	ee07 3a90 	vmov	s15, r3
 8002db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <get_param_from_ina219+0x6c>)
 8002dbe:	edc3 7a00 	vstr	s15, [r3]
		v_bus = INA219_ReadBusVoltage(&ina219);
 8002dc2:	4812      	ldr	r0, [pc, #72]	; (8002e0c <get_param_from_ina219+0x70>)
 8002dc4:	f7fe fc28 	bl	8001618 <INA219_ReadBusVoltage>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <get_param_from_ina219+0x74>)
 8002dce:	801a      	strh	r2, [r3, #0]
		v_shunt = INA219_ReadShuntVoltage(&ina219);
 8002dd0:	480e      	ldr	r0, [pc, #56]	; (8002e0c <get_param_from_ina219+0x70>)
 8002dd2:	f7fe fc6d 	bl	80016b0 <INA219_ReadShuntVoltage>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <get_param_from_ina219+0x78>)
 8002ddc:	801a      	strh	r2, [r3, #0]
		current = INA219_ReadCurrent(&ina219);
 8002dde:	480b      	ldr	r0, [pc, #44]	; (8002e0c <get_param_from_ina219+0x70>)
 8002de0:	f7fe fc3e 	bl	8001660 <INA219_ReadCurrent>
 8002de4:	4603      	mov	r3, r0
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <get_param_from_ina219+0x7c>)
 8002dea:	801a      	strh	r2, [r3, #0]
		power = INA219_Read_Power(&ina219);
 8002dec:	4807      	ldr	r0, [pc, #28]	; (8002e0c <get_param_from_ina219+0x70>)
 8002dee:	f7fe fc83 	bl	80016f8 <INA219_Read_Power>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <get_param_from_ina219+0x80>)
 8002df8:	801a      	strh	r2, [r3, #0]
	}
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20002e80 	.word	0x20002e80
 8002e04:	20002fe8 	.word	0x20002fe8
 8002e08:	20002eb4 	.word	0x20002eb4
 8002e0c:	20002e78 	.word	0x20002e78
 8002e10:	20002e82 	.word	0x20002e82
 8002e14:	20002e84 	.word	0x20002e84
 8002e18:	20002e86 	.word	0x20002e86
 8002e1c:	20002e88 	.word	0x20002e88

08002e20 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == (0x2000)){
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e30:	d111      	bne.n	8002e56 <HAL_GPIO_EXTI_Callback+0x36>
		//flag_change_mode = 1;
		if((display_mode < 3) && (display_mode >= 0)){
 8002e32:	4b95      	ldr	r3, [pc, #596]	; (8003088 <HAL_GPIO_EXTI_Callback+0x268>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d809      	bhi.n	8002e50 <HAL_GPIO_EXTI_Callback+0x30>
 8002e3c:	4b92      	ldr	r3, [pc, #584]	; (8003088 <HAL_GPIO_EXTI_Callback+0x268>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
			display_mode += 1;
 8002e40:	4b91      	ldr	r3, [pc, #580]	; (8003088 <HAL_GPIO_EXTI_Callback+0x268>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4b8f      	ldr	r3, [pc, #572]	; (8003088 <HAL_GPIO_EXTI_Callback+0x268>)
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_EXTI_Callback+0x36>
		}
		else{
			display_mode = 0;
 8002e50:	4b8d      	ldr	r3, [pc, #564]	; (8003088 <HAL_GPIO_EXTI_Callback+0x268>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_Pin == GPIO_PIN_8){
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5c:	f040 8164 	bne.w	8003128 <HAL_GPIO_EXTI_Callback+0x308>
		if (!(GPIOC->IDR & GPIO_PIN_8) && (!(GPIOC->IDR & GPIO_PIN_9))) {
 8002e60:	4b8a      	ldr	r3, [pc, #552]	; (800308c <HAL_GPIO_EXTI_Callback+0x26c>)
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_GPIO_EXTI_Callback+0x60>
 8002e6c:	4b87      	ldr	r3, [pc, #540]	; (800308c <HAL_GPIO_EXTI_Callback+0x26c>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d103      	bne.n	8002e80 <HAL_GPIO_EXTI_Callback+0x60>
			status = 0x00;
 8002e78:	4b85      	ldr	r3, [pc, #532]	; (8003090 <HAL_GPIO_EXTI_Callback+0x270>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e02e      	b.n	8002ede <HAL_GPIO_EXTI_Callback+0xbe>
		} else if ((GPIOC->IDR & GPIO_PIN_8) && (!(GPIOC->IDR & GPIO_PIN_9))) {
 8002e80:	4b82      	ldr	r3, [pc, #520]	; (800308c <HAL_GPIO_EXTI_Callback+0x26c>)
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <HAL_GPIO_EXTI_Callback+0x80>
 8002e8c:	4b7f      	ldr	r3, [pc, #508]	; (800308c <HAL_GPIO_EXTI_Callback+0x26c>)
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d103      	bne.n	8002ea0 <HAL_GPIO_EXTI_Callback+0x80>
			status = 0x10;
 8002e98:	4b7d      	ldr	r3, [pc, #500]	; (8003090 <HAL_GPIO_EXTI_Callback+0x270>)
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e01e      	b.n	8002ede <HAL_GPIO_EXTI_Callback+0xbe>
		} else if ((GPIOC->IDR & GPIO_PIN_8) && (GPIOC->IDR & GPIO_PIN_9)) {
 8002ea0:	4b7a      	ldr	r3, [pc, #488]	; (800308c <HAL_GPIO_EXTI_Callback+0x26c>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <HAL_GPIO_EXTI_Callback+0xa0>
 8002eac:	4b77      	ldr	r3, [pc, #476]	; (800308c <HAL_GPIO_EXTI_Callback+0x26c>)
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_EXTI_Callback+0xa0>
			status = 0x11;
 8002eb8:	4b75      	ldr	r3, [pc, #468]	; (8003090 <HAL_GPIO_EXTI_Callback+0x270>)
 8002eba:	2211      	movs	r2, #17
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e00e      	b.n	8002ede <HAL_GPIO_EXTI_Callback+0xbe>
		} else if (!(GPIOC->IDR & GPIO_PIN_8) && (GPIOC->IDR & GPIO_PIN_9)) {
 8002ec0:	4b72      	ldr	r3, [pc, #456]	; (800308c <HAL_GPIO_EXTI_Callback+0x26c>)
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d108      	bne.n	8002ede <HAL_GPIO_EXTI_Callback+0xbe>
 8002ecc:	4b6f      	ldr	r3, [pc, #444]	; (800308c <HAL_GPIO_EXTI_Callback+0x26c>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_GPIO_EXTI_Callback+0xbe>
			status = 0x01;
 8002ed8:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_GPIO_EXTI_Callback+0x270>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
		}

		if (status_old == 0x10 && status == 0x11) {
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_GPIO_EXTI_Callback+0x274>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b10      	cmp	r3, #16
 8002ee6:	d138      	bne.n	8002f5a <HAL_GPIO_EXTI_Callback+0x13a>
 8002ee8:	4b69      	ldr	r3, [pc, #420]	; (8003090 <HAL_GPIO_EXTI_Callback+0x270>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b11      	cmp	r3, #17
 8002ef0:	d133      	bne.n	8002f5a <HAL_GPIO_EXTI_Callback+0x13a>
			Time = HAL_GetTick();
 8002ef2:	f001 fe87 	bl	8004c04 <HAL_GetTick>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4a67      	ldr	r2, [pc, #412]	; (8003098 <HAL_GPIO_EXTI_Callback+0x278>)
 8002efa:	6013      	str	r3, [r2, #0]
			if (Time - Time_old < reaction) {
 8002efc:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_GPIO_EXTI_Callback+0x278>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b66      	ldr	r3, [pc, #408]	; (800309c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b09      	cmp	r3, #9
 8002f08:	d811      	bhi.n	8002f2e <HAL_GPIO_EXTI_Callback+0x10e>
				A = A + scroll;
 8002f0a:	4b65      	ldr	r3, [pc, #404]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b25b      	sxtb	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	3332      	adds	r3, #50	; 0x32
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	b25a      	sxtb	r2, r3
 8002f18:	4b61      	ldr	r3, [pc, #388]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002f1a:	701a      	strb	r2, [r3, #0]
				if(A > 3){
 8002f1c:	4b60      	ldr	r3, [pc, #384]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b25b      	sxtb	r3, r3
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	dd14      	ble.n	8002f50 <HAL_GPIO_EXTI_Callback+0x130>
					A = 3;
 8002f26:	4b5e      	ldr	r3, [pc, #376]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002f28:	2203      	movs	r2, #3
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e010      	b.n	8002f50 <HAL_GPIO_EXTI_Callback+0x130>
				}
			} else {
				A = A + 1;
 8002f2e:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	b25a      	sxtb	r2, r3
 8002f3c:	4b58      	ldr	r3, [pc, #352]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002f3e:	701a      	strb	r2, [r3, #0]
				if(A > 3){
 8002f40:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	dd02      	ble.n	8002f50 <HAL_GPIO_EXTI_Callback+0x130>
					A = 3;
 8002f4a:	4b55      	ldr	r3, [pc, #340]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	701a      	strb	r2, [r3, #0]
				}
			}
			Time_old = Time;
 8002f50:	4b51      	ldr	r3, [pc, #324]	; (8003098 <HAL_GPIO_EXTI_Callback+0x278>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a51      	ldr	r2, [pc, #324]	; (800309c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	e03c      	b.n	8002fd4 <HAL_GPIO_EXTI_Callback+0x1b4>
		} else if (status_old == 0x01 && status == 0x00) {
 8002f5a:	4b4e      	ldr	r3, [pc, #312]	; (8003094 <HAL_GPIO_EXTI_Callback+0x274>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d137      	bne.n	8002fd4 <HAL_GPIO_EXTI_Callback+0x1b4>
 8002f64:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <HAL_GPIO_EXTI_Callback+0x270>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d132      	bne.n	8002fd4 <HAL_GPIO_EXTI_Callback+0x1b4>
			Time = HAL_GetTick();
 8002f6e:	f001 fe49 	bl	8004c04 <HAL_GetTick>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4a48      	ldr	r2, [pc, #288]	; (8003098 <HAL_GPIO_EXTI_Callback+0x278>)
 8002f76:	6013      	str	r3, [r2, #0]
			if (Time - Time_old < reaction) {
 8002f78:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_GPIO_EXTI_Callback+0x278>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b09      	cmp	r3, #9
 8002f84:	d811      	bhi.n	8002faa <HAL_GPIO_EXTI_Callback+0x18a>
				A = A + scroll;
 8002f86:	4b46      	ldr	r3, [pc, #280]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	b25b      	sxtb	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	3332      	adds	r3, #50	; 0x32
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	b25a      	sxtb	r2, r3
 8002f94:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002f96:	701a      	strb	r2, [r3, #0]
				if(A > 3){
 8002f98:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	dd14      	ble.n	8002fcc <HAL_GPIO_EXTI_Callback+0x1ac>
					A = 3;
 8002fa2:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e010      	b.n	8002fcc <HAL_GPIO_EXTI_Callback+0x1ac>
				}
			} else {
				A = A + 1;
 8002faa:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	b25b      	sxtb	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	b25a      	sxtb	r2, r3
 8002fb8:	4b39      	ldr	r3, [pc, #228]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002fba:	701a      	strb	r2, [r3, #0]
				if(A > 3){
 8002fbc:	4b38      	ldr	r3, [pc, #224]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	dd02      	ble.n	8002fcc <HAL_GPIO_EXTI_Callback+0x1ac>
					A = 3;
 8002fc6:	4b36      	ldr	r3, [pc, #216]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002fc8:	2203      	movs	r2, #3
 8002fca:	701a      	strb	r2, [r3, #0]
				}
			}
			Time_old = Time;
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_GPIO_EXTI_Callback+0x278>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a32      	ldr	r2, [pc, #200]	; (800309c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002fd2:	6013      	str	r3, [r2, #0]
		}

		if (status_old == 0x11 && status == 0x10) {
 8002fd4:	4b2f      	ldr	r3, [pc, #188]	; (8003094 <HAL_GPIO_EXTI_Callback+0x274>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b11      	cmp	r3, #17
 8002fdc:	d108      	bne.n	8002ff0 <HAL_GPIO_EXTI_Callback+0x1d0>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <HAL_GPIO_EXTI_Callback+0x270>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d103      	bne.n	8002ff0 <HAL_GPIO_EXTI_Callback+0x1d0>
			status_old = 0x10;
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_GPIO_EXTI_Callback+0x274>)
 8002fea:	2210      	movs	r2, #16
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e096      	b.n	800311e <HAL_GPIO_EXTI_Callback+0x2fe>

		} else if (status_old == 0x00 && status == 0x01) {
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_GPIO_EXTI_Callback+0x274>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d108      	bne.n	800300c <HAL_GPIO_EXTI_Callback+0x1ec>
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_GPIO_EXTI_Callback+0x270>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d103      	bne.n	800300c <HAL_GPIO_EXTI_Callback+0x1ec>
			status_old = 0x01;
 8003004:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_GPIO_EXTI_Callback+0x274>)
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e088      	b.n	800311e <HAL_GPIO_EXTI_Callback+0x2fe>

		}

		else if (status_old == 0x10 && status == 0x00) {
 800300c:	4b21      	ldr	r3, [pc, #132]	; (8003094 <HAL_GPIO_EXTI_Callback+0x274>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b10      	cmp	r3, #16
 8003014:	d146      	bne.n	80030a4 <HAL_GPIO_EXTI_Callback+0x284>
 8003016:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <HAL_GPIO_EXTI_Callback+0x270>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d141      	bne.n	80030a4 <HAL_GPIO_EXTI_Callback+0x284>
			Time = HAL_GetTick();
 8003020:	f001 fdf0 	bl	8004c04 <HAL_GetTick>
 8003024:	4603      	mov	r3, r0
 8003026:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_GPIO_EXTI_Callback+0x278>)
 8003028:	6013      	str	r3, [r2, #0]
			if (Time - Time_old < reaction) {
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_GPIO_EXTI_Callback+0x278>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b09      	cmp	r3, #9
 8003036:	d811      	bhi.n	800305c <HAL_GPIO_EXTI_Callback+0x23c>
				A = A - scroll;
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b25b      	sxtb	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	3b32      	subs	r3, #50	; 0x32
 8003042:	b2db      	uxtb	r3, r3
 8003044:	b25a      	sxtb	r2, r3
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8003048:	701a      	strb	r2, [r3, #0]
				if(A < 0){
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	b25b      	sxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	da14      	bge.n	800307e <HAL_GPIO_EXTI_Callback+0x25e>
					A = 0;
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e010      	b.n	800307e <HAL_GPIO_EXTI_Callback+0x25e>
				}
			} else {
				A = A - 1;
 800305c:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	b25b      	sxtb	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b2db      	uxtb	r3, r3
 8003068:	b25a      	sxtb	r2, r3
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 800306c:	701a      	strb	r2, [r3, #0]
				if(A < 0){
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b25b      	sxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	da02      	bge.n	800307e <HAL_GPIO_EXTI_Callback+0x25e>
					A = 0;
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_GPIO_EXTI_Callback+0x280>)
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
				}
			}
			Time_old = Time;
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_GPIO_EXTI_Callback+0x278>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a06      	ldr	r2, [pc, #24]	; (800309c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e04a      	b.n	800311e <HAL_GPIO_EXTI_Callback+0x2fe>
 8003088:	20002e8a 	.word	0x20002e8a
 800308c:	48000800 	.word	0x48000800
 8003090:	20000a05 	.word	0x20000a05
 8003094:	20000a06 	.word	0x20000a06
 8003098:	20000a08 	.word	0x20000a08
 800309c:	20000a0c 	.word	0x20000a0c
 80030a0:	20000a04 	.word	0x20000a04
		}

		else if (status_old == 0x01 && status == 0x11) {
 80030a4:	4b8e      	ldr	r3, [pc, #568]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x4c0>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d137      	bne.n	800311e <HAL_GPIO_EXTI_Callback+0x2fe>
 80030ae:	4b8d      	ldr	r3, [pc, #564]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x4c4>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b11      	cmp	r3, #17
 80030b6:	d132      	bne.n	800311e <HAL_GPIO_EXTI_Callback+0x2fe>
			Time = HAL_GetTick();
 80030b8:	f001 fda4 	bl	8004c04 <HAL_GetTick>
 80030bc:	4603      	mov	r3, r0
 80030be:	4a8a      	ldr	r2, [pc, #552]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80030c0:	6013      	str	r3, [r2, #0]
			if (Time - Time_old < reaction) {
 80030c2:	4b89      	ldr	r3, [pc, #548]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b89      	ldr	r3, [pc, #548]	; (80032ec <HAL_GPIO_EXTI_Callback+0x4cc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b09      	cmp	r3, #9
 80030ce:	d811      	bhi.n	80030f4 <HAL_GPIO_EXTI_Callback+0x2d4>
				A = A - scroll;
 80030d0:	4b87      	ldr	r3, [pc, #540]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b25b      	sxtb	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3b32      	subs	r3, #50	; 0x32
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	b25a      	sxtb	r2, r3
 80030de:	4b84      	ldr	r3, [pc, #528]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80030e0:	701a      	strb	r2, [r3, #0]
				if(A < 0){
 80030e2:	4b83      	ldr	r3, [pc, #524]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	da14      	bge.n	8003116 <HAL_GPIO_EXTI_Callback+0x2f6>
					A = 0;
 80030ec:	4b80      	ldr	r3, [pc, #512]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e010      	b.n	8003116 <HAL_GPIO_EXTI_Callback+0x2f6>
				}
			} else {
				A = A - 1;
 80030f4:	4b7e      	ldr	r3, [pc, #504]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	b25a      	sxtb	r2, r3
 8003102:	4b7b      	ldr	r3, [pc, #492]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8003104:	701a      	strb	r2, [r3, #0]
				if(A < 0){
 8003106:	4b7a      	ldr	r3, [pc, #488]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	b25b      	sxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	da02      	bge.n	8003116 <HAL_GPIO_EXTI_Callback+0x2f6>
					A = 0;
 8003110:	4b77      	ldr	r3, [pc, #476]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
				}
			}
			Time_old = Time;
 8003116:	4b74      	ldr	r3, [pc, #464]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a74      	ldr	r2, [pc, #464]	; (80032ec <HAL_GPIO_EXTI_Callback+0x4cc>)
 800311c:	6013      	str	r3, [r2, #0]
		}
		status_old = status;
 800311e:	4b71      	ldr	r3, [pc, #452]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x4c4>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	4b6e      	ldr	r3, [pc, #440]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x4c0>)
 8003126:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_9){
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312e:	f040 8163 	bne.w	80033f8 <HAL_GPIO_EXTI_Callback+0x5d8>
		if (!(GPIOC->IDR & GPIO_PIN_8) && (!(GPIOC->IDR & GPIO_PIN_9))) {
 8003132:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_GPIO_EXTI_Callback+0x332>
 800313e:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003146:	2b00      	cmp	r3, #0
 8003148:	d103      	bne.n	8003152 <HAL_GPIO_EXTI_Callback+0x332>
			status = 0x00;
 800314a:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x4c4>)
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e02e      	b.n	80031b0 <HAL_GPIO_EXTI_Callback+0x390>
		} else if ((GPIOC->IDR & GPIO_PIN_8) && (!(GPIOC->IDR & GPIO_PIN_9))) {
 8003152:	4b68      	ldr	r3, [pc, #416]	; (80032f4 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_GPIO_EXTI_Callback+0x352>
 800315e:	4b65      	ldr	r3, [pc, #404]	; (80032f4 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_GPIO_EXTI_Callback+0x352>
			status = 0x10;
 800316a:	4b5e      	ldr	r3, [pc, #376]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x4c4>)
 800316c:	2210      	movs	r2, #16
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e01e      	b.n	80031b0 <HAL_GPIO_EXTI_Callback+0x390>
		} else if ((GPIOC->IDR & GPIO_PIN_8) && (GPIOC->IDR & GPIO_PIN_9)) {
 8003172:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <HAL_GPIO_EXTI_Callback+0x372>
 800317e:	4b5d      	ldr	r3, [pc, #372]	; (80032f4 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_EXTI_Callback+0x372>
			status = 0x11;
 800318a:	4b56      	ldr	r3, [pc, #344]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x4c4>)
 800318c:	2211      	movs	r2, #17
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e00e      	b.n	80031b0 <HAL_GPIO_EXTI_Callback+0x390>
		} else if (!(GPIOC->IDR & GPIO_PIN_8) && (GPIOC->IDR & GPIO_PIN_9)) {
 8003192:	4b58      	ldr	r3, [pc, #352]	; (80032f4 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d108      	bne.n	80031b0 <HAL_GPIO_EXTI_Callback+0x390>
 800319e:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_GPIO_EXTI_Callback+0x390>
			status = 0x01;
 80031aa:	4b4e      	ldr	r3, [pc, #312]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x4c4>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
		}

		if (status_old == 0x10 && status == 0x11) {
 80031b0:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x4c0>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b10      	cmp	r3, #16
 80031b8:	d138      	bne.n	800322c <HAL_GPIO_EXTI_Callback+0x40c>
 80031ba:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x4c4>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b11      	cmp	r3, #17
 80031c2:	d133      	bne.n	800322c <HAL_GPIO_EXTI_Callback+0x40c>
			Time = HAL_GetTick();
 80031c4:	f001 fd1e 	bl	8004c04 <HAL_GetTick>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80031cc:	6013      	str	r3, [r2, #0]
			if (Time - Time_old < reaction) {
 80031ce:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b46      	ldr	r3, [pc, #280]	; (80032ec <HAL_GPIO_EXTI_Callback+0x4cc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b09      	cmp	r3, #9
 80031da:	d811      	bhi.n	8003200 <HAL_GPIO_EXTI_Callback+0x3e0>
				A = A + scroll;
 80031dc:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	3332      	adds	r3, #50	; 0x32
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	b25a      	sxtb	r2, r3
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80031ec:	701a      	strb	r2, [r3, #0]
				if(A > 3){
 80031ee:	4b40      	ldr	r3, [pc, #256]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	dd14      	ble.n	8003222 <HAL_GPIO_EXTI_Callback+0x402>
					A = 3;
 80031f8:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80031fa:	2203      	movs	r2, #3
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e010      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0x402>
				}
			} else {
				A = A + 1;
 8003200:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b25b      	sxtb	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	3301      	adds	r3, #1
 800320a:	b2db      	uxtb	r3, r3
 800320c:	b25a      	sxtb	r2, r3
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8003210:	701a      	strb	r2, [r3, #0]
				if(A > 3){
 8003212:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	b25b      	sxtb	r3, r3
 8003218:	2b03      	cmp	r3, #3
 800321a:	dd02      	ble.n	8003222 <HAL_GPIO_EXTI_Callback+0x402>
					A = 3;
 800321c:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 800321e:	2203      	movs	r2, #3
 8003220:	701a      	strb	r2, [r3, #0]
				}
			}
			Time_old = Time;
 8003222:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a31      	ldr	r2, [pc, #196]	; (80032ec <HAL_GPIO_EXTI_Callback+0x4cc>)
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e03c      	b.n	80032a6 <HAL_GPIO_EXTI_Callback+0x486>
		} else if (status_old == 0x01 && status == 0x00) {
 800322c:	4b2c      	ldr	r3, [pc, #176]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x4c0>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d137      	bne.n	80032a6 <HAL_GPIO_EXTI_Callback+0x486>
 8003236:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x4c4>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d132      	bne.n	80032a6 <HAL_GPIO_EXTI_Callback+0x486>
			Time = HAL_GetTick();
 8003240:	f001 fce0 	bl	8004c04 <HAL_GetTick>
 8003244:	4603      	mov	r3, r0
 8003246:	4a28      	ldr	r2, [pc, #160]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8003248:	6013      	str	r3, [r2, #0]
			if (Time - Time_old < reaction) {
 800324a:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_GPIO_EXTI_Callback+0x4cc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b09      	cmp	r3, #9
 8003256:	d811      	bhi.n	800327c <HAL_GPIO_EXTI_Callback+0x45c>
				A = A + scroll;
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	b25b      	sxtb	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	3332      	adds	r3, #50	; 0x32
 8003262:	b2db      	uxtb	r3, r3
 8003264:	b25a      	sxtb	r2, r3
 8003266:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8003268:	701a      	strb	r2, [r3, #0]
				if(A > 3){
 800326a:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	b25b      	sxtb	r3, r3
 8003270:	2b03      	cmp	r3, #3
 8003272:	dd14      	ble.n	800329e <HAL_GPIO_EXTI_Callback+0x47e>
					A = 3;
 8003274:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8003276:	2203      	movs	r2, #3
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e010      	b.n	800329e <HAL_GPIO_EXTI_Callback+0x47e>
				}
			} else {
				A = A + 1;
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b25b      	sxtb	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3301      	adds	r3, #1
 8003286:	b2db      	uxtb	r3, r3
 8003288:	b25a      	sxtb	r2, r3
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 800328c:	701a      	strb	r2, [r3, #0]
				if(A > 3){
 800328e:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	b25b      	sxtb	r3, r3
 8003294:	2b03      	cmp	r3, #3
 8003296:	dd02      	ble.n	800329e <HAL_GPIO_EXTI_Callback+0x47e>
					A = 3;
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x4d0>)
 800329a:	2203      	movs	r2, #3
 800329c:	701a      	strb	r2, [r3, #0]
				}
			}
			Time_old = Time;
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <HAL_GPIO_EXTI_Callback+0x4cc>)
 80032a4:	6013      	str	r3, [r2, #0]
		}

		if (status_old == 0x11 && status == 0x10) {
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x4c0>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b11      	cmp	r3, #17
 80032ae:	d108      	bne.n	80032c2 <HAL_GPIO_EXTI_Callback+0x4a2>
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x4c4>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d103      	bne.n	80032c2 <HAL_GPIO_EXTI_Callback+0x4a2>
			status_old = 0x10;
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x4c0>)
 80032bc:	2210      	movs	r2, #16
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e095      	b.n	80033ee <HAL_GPIO_EXTI_Callback+0x5ce>

		} else if (status_old == 0x00 && status == 0x01) {
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x4c0>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d115      	bne.n	80032f8 <HAL_GPIO_EXTI_Callback+0x4d8>
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x4c4>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d110      	bne.n	80032f8 <HAL_GPIO_EXTI_Callback+0x4d8>
			status_old = 0x01;
 80032d6:	4b02      	ldr	r3, [pc, #8]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x4c0>)
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e087      	b.n	80033ee <HAL_GPIO_EXTI_Callback+0x5ce>
 80032de:	bf00      	nop
 80032e0:	20000a06 	.word	0x20000a06
 80032e4:	20000a05 	.word	0x20000a05
 80032e8:	20000a08 	.word	0x20000a08
 80032ec:	20000a0c 	.word	0x20000a0c
 80032f0:	20000a04 	.word	0x20000a04
 80032f4:	48000800 	.word	0x48000800

		}

		else if (status_old == 0x10 && status == 0x00) {
 80032f8:	4b41      	ldr	r3, [pc, #260]	; (8003400 <HAL_GPIO_EXTI_Callback+0x5e0>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d138      	bne.n	8003374 <HAL_GPIO_EXTI_Callback+0x554>
 8003302:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_GPIO_EXTI_Callback+0x5e4>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d133      	bne.n	8003374 <HAL_GPIO_EXTI_Callback+0x554>
			Time = HAL_GetTick();
 800330c:	f001 fc7a 	bl	8004c04 <HAL_GetTick>
 8003310:	4603      	mov	r3, r0
 8003312:	4a3d      	ldr	r2, [pc, #244]	; (8003408 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8003314:	6013      	str	r3, [r2, #0]
			if (Time - Time_old < reaction) {
 8003316:	4b3c      	ldr	r3, [pc, #240]	; (8003408 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4b3c      	ldr	r3, [pc, #240]	; (800340c <HAL_GPIO_EXTI_Callback+0x5ec>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b09      	cmp	r3, #9
 8003322:	d811      	bhi.n	8003348 <HAL_GPIO_EXTI_Callback+0x528>
				A = A - scroll;
 8003324:	4b3a      	ldr	r3, [pc, #232]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	b25b      	sxtb	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	3b32      	subs	r3, #50	; 0x32
 800332e:	b2db      	uxtb	r3, r3
 8003330:	b25a      	sxtb	r2, r3
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8003334:	701a      	strb	r2, [r3, #0]
				if(A < 0){
 8003336:	4b36      	ldr	r3, [pc, #216]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b25b      	sxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	da14      	bge.n	800336a <HAL_GPIO_EXTI_Callback+0x54a>
					A = 0;
 8003340:	4b33      	ldr	r3, [pc, #204]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e010      	b.n	800336a <HAL_GPIO_EXTI_Callback+0x54a>
				}
			} else {
				A = A - 1;
 8003348:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b25b      	sxtb	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	b25a      	sxtb	r2, r3
 8003356:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8003358:	701a      	strb	r2, [r3, #0]
				if(A < 0){
 800335a:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	b25b      	sxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	da02      	bge.n	800336a <HAL_GPIO_EXTI_Callback+0x54a>
					A = 0;
 8003364:	4b2a      	ldr	r3, [pc, #168]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
				}
			}
			Time_old = Time;
 800336a:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_GPIO_EXTI_Callback+0x5e8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a27      	ldr	r2, [pc, #156]	; (800340c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e03c      	b.n	80033ee <HAL_GPIO_EXTI_Callback+0x5ce>
		}

		else if (status_old == 0x01 && status == 0x11) {
 8003374:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_GPIO_EXTI_Callback+0x5e0>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d137      	bne.n	80033ee <HAL_GPIO_EXTI_Callback+0x5ce>
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_GPIO_EXTI_Callback+0x5e4>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b11      	cmp	r3, #17
 8003386:	d132      	bne.n	80033ee <HAL_GPIO_EXTI_Callback+0x5ce>
			Time = HAL_GetTick();
 8003388:	f001 fc3c 	bl	8004c04 <HAL_GetTick>
 800338c:	4603      	mov	r3, r0
 800338e:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8003390:	6013      	str	r3, [r2, #0]
			if (Time - Time_old < reaction) {
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b1d      	ldr	r3, [pc, #116]	; (800340c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b09      	cmp	r3, #9
 800339e:	d811      	bhi.n	80033c4 <HAL_GPIO_EXTI_Callback+0x5a4>
				A = A - scroll;
 80033a0:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	b25b      	sxtb	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	3b32      	subs	r3, #50	; 0x32
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	b25a      	sxtb	r2, r3
 80033ae:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 80033b0:	701a      	strb	r2, [r3, #0]
				if(A < 0){
 80033b2:	4b17      	ldr	r3, [pc, #92]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b25b      	sxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	da14      	bge.n	80033e6 <HAL_GPIO_EXTI_Callback+0x5c6>
					A = 0;
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e010      	b.n	80033e6 <HAL_GPIO_EXTI_Callback+0x5c6>
				}
			} else {
				A = A - 1;
 80033c4:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	b25b      	sxtb	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	b25a      	sxtb	r2, r3
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 80033d4:	701a      	strb	r2, [r3, #0]
				if(A < 0){
 80033d6:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b25b      	sxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	da02      	bge.n	80033e6 <HAL_GPIO_EXTI_Callback+0x5c6>
					A = 0;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_GPIO_EXTI_Callback+0x5f0>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
				}
			}
			Time_old = Time;
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_GPIO_EXTI_Callback+0x5e8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a08      	ldr	r2, [pc, #32]	; (800340c <HAL_GPIO_EXTI_Callback+0x5ec>)
 80033ec:	6013      	str	r3, [r2, #0]
		}
		status_old = status;
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_GPIO_EXTI_Callback+0x5e4>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	4b02      	ldr	r3, [pc, #8]	; (8003400 <HAL_GPIO_EXTI_Callback+0x5e0>)
 80033f6:	701a      	strb	r2, [r3, #0]
	}

}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000a06 	.word	0x20000a06
 8003404:	20000a05 	.word	0x20000a05
 8003408:	20000a08 	.word	0x20000a08
 800340c:	20000a0c 	.word	0x20000a0c
 8003410:	20000a04 	.word	0x20000a04

08003414 <mode_change_func>:


void mode_change_func(){
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
	if(flag_change_mode){
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <mode_change_func+0x40>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d016      	beq.n	8003450 <mode_change_func+0x3c>
		GMG12864_Clean_Frame_buffer();
 8003422:	f7fd fcaf 	bl	8000d84 <GMG12864_Clean_Frame_buffer>
		flag_change_mode = 0;
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <mode_change_func+0x40>)
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
		high_charge_off();
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <mode_change_func+0x44>)
 800342e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003432:	619a      	str	r2, [r3, #24]
		low_charge_off();
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <mode_change_func+0x44>)
 8003436:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800343a:	619a      	str	r2, [r3, #24]
		discharge_off();
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <mode_change_func+0x44>)
 800343e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003442:	619a      	str	r2, [r3, #24]
		A = 0;
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <mode_change_func+0x48>)
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
		Prev_Mode = DISCHARGE;
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <mode_change_func+0x4c>)
 800344c:	2202      	movs	r2, #2
 800344e:	701a      	strb	r2, [r3, #0]
	}
}
 8003450:	bf00      	nop
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20002ea1 	.word	0x20002ea1
 8003458:	48000800 	.word	0x48000800
 800345c:	20000a04 	.word	0x20000a04
 8003460:	20000008 	.word	0x20000008

08003464 <button_mode_func>:

void button_mode_func(){
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
	if(!(READ_BIT(GPIOC->IDR, GPIO_IDR_7))){
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <button_mode_func+0x28>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d103      	bne.n	800347c <button_mode_func+0x18>
		control_mode = 0;
 8003474:	4b06      	ldr	r3, [pc, #24]	; (8003490 <button_mode_func+0x2c>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
	}
	else{
		control_mode = 1;
	}
}
 800347a:	e002      	b.n	8003482 <button_mode_func+0x1e>
		control_mode = 1;
 800347c:	4b04      	ldr	r3, [pc, #16]	; (8003490 <button_mode_func+0x2c>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	48000800 	.word	0x48000800
 8003490:	20000003 	.word	0x20000003

08003494 <button_mode_led_delay>:

void button_mode_led_delay(){
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
	if(control_mode){
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <button_mode_led_delay+0xa8>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d049      	beq.n	8003536 <button_mode_led_delay+0xa2>
		static uint16_t i = 0;
		static bool flag = 0;
		if((i <= 999) && (!flag) && (HAL_GetTick() - t_button_mode_led > 10)){
 80034a2:	4b27      	ldr	r3, [pc, #156]	; (8003540 <button_mode_led_delay+0xac>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034aa:	d224      	bcs.n	80034f6 <button_mode_led_delay+0x62>
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <button_mode_led_delay+0xb0>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	f083 0301 	eor.w	r3, r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01d      	beq.n	80034f6 <button_mode_led_delay+0x62>
 80034ba:	f001 fba3 	bl	8004c04 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <button_mode_led_delay+0xb4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b0a      	cmp	r3, #10
 80034c8:	d915      	bls.n	80034f6 <button_mode_led_delay+0x62>
			t_button_mode_led = HAL_GetTick();
 80034ca:	f001 fb9b 	bl	8004c04 <HAL_GetTick>
 80034ce:	4603      	mov	r3, r0
 80034d0:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <button_mode_led_delay+0xb4>)
 80034d2:	6013      	str	r3, [r2, #0]
			i = 1000;
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <button_mode_led_delay+0xac>)
 80034d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034da:	801a      	strh	r2, [r3, #0]
			TIM3->CCR1 = i;
 80034dc:	4b18      	ldr	r3, [pc, #96]	; (8003540 <button_mode_led_delay+0xac>)
 80034de:	881a      	ldrh	r2, [r3, #0]
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <button_mode_led_delay+0xb8>)
 80034e2:	635a      	str	r2, [r3, #52]	; 0x34
			if(i == 1000){
 80034e4:	4b16      	ldr	r3, [pc, #88]	; (8003540 <button_mode_led_delay+0xac>)
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ec:	d123      	bne.n	8003536 <button_mode_led_delay+0xa2>
				flag = 1;
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <button_mode_led_delay+0xb0>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
			if(i == 1000){
 80034f4:	e01f      	b.n	8003536 <button_mode_led_delay+0xa2>
			}
		}
		else if((flag == 1) && (HAL_GetTick() - t_button_mode_led > 10)){
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <button_mode_led_delay+0xb0>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01b      	beq.n	8003536 <button_mode_led_delay+0xa2>
 80034fe:	f001 fb81 	bl	8004c04 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	4b10      	ldr	r3, [pc, #64]	; (8003548 <button_mode_led_delay+0xb4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b0a      	cmp	r3, #10
 800350c:	d913      	bls.n	8003536 <button_mode_led_delay+0xa2>
			t_button_mode_led = HAL_GetTick();
 800350e:	f001 fb79 	bl	8004c04 <HAL_GetTick>
 8003512:	4603      	mov	r3, r0
 8003514:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <button_mode_led_delay+0xb4>)
 8003516:	6013      	str	r3, [r2, #0]
			i = 0;
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <button_mode_led_delay+0xac>)
 800351a:	2200      	movs	r2, #0
 800351c:	801a      	strh	r2, [r3, #0]
			TIM3->CCR1 = i;
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <button_mode_led_delay+0xac>)
 8003520:	881a      	ldrh	r2, [r3, #0]
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <button_mode_led_delay+0xb8>)
 8003524:	635a      	str	r2, [r3, #52]	; 0x34
			if(i <= 1){
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <button_mode_led_delay+0xac>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d803      	bhi.n	8003536 <button_mode_led_delay+0xa2>
				flag = 0;
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <button_mode_led_delay+0xb0>)
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
			}
		}

	}
}
 8003534:	e7ff      	b.n	8003536 <button_mode_led_delay+0xa2>
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000003 	.word	0x20000003
 8003540:	20002ed4 	.word	0x20002ed4
 8003544:	20002ed6 	.word	0x20002ed6
 8003548:	20002e98 	.word	0x20002e98
 800354c:	40000400 	.word	0x40000400

08003550 <read_state_of_relays>:

void read_state_of_relays(){
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
	state_high_charge = read_state_of_high_charge();
 8003554:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <read_state_of_relays+0x80>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <read_state_of_relays+0x84>)
 8003568:	701a      	strb	r2, [r3, #0]
	state_low_charge = read_state_of_low_charge();
 800356a:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <read_state_of_relays+0x80>)
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	bf14      	ite	ne
 8003576:	2301      	movne	r3, #1
 8003578:	2300      	moveq	r3, #0
 800357a:	b2da      	uxtb	r2, r3
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <read_state_of_relays+0x88>)
 800357e:	701a      	strb	r2, [r3, #0]
	state_discharge = read_state_of_discharge();
 8003580:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <read_state_of_relays+0x80>)
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <read_state_of_relays+0x8c>)
 8003594:	701a      	strb	r2, [r3, #0]
	if(state_high_charge){
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <read_state_of_relays+0x84>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <read_state_of_relays+0x56>
		Current_Mode = HIGH_CHARGE;
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <read_state_of_relays+0x90>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
		Current_Mode = LOW_CHARGE;
	}
	else if(state_discharge){
		Current_Mode = DISCHARGE;
	}
}
 80035a4:	e00e      	b.n	80035c4 <read_state_of_relays+0x74>
	else if(state_low_charge){
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <read_state_of_relays+0x88>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <read_state_of_relays+0x66>
		Current_Mode = LOW_CHARGE;
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <read_state_of_relays+0x90>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
}
 80035b4:	e006      	b.n	80035c4 <read_state_of_relays+0x74>
	else if(state_discharge){
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <read_state_of_relays+0x8c>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <read_state_of_relays+0x74>
		Current_Mode = DISCHARGE;
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <read_state_of_relays+0x90>)
 80035c0:	2202      	movs	r2, #2
 80035c2:	701a      	strb	r2, [r3, #0]
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	48000800 	.word	0x48000800
 80035d4:	20002e9c 	.word	0x20002e9c
 80035d8:	20002e9d 	.word	0x20002e9d
 80035dc:	20002e9e 	.word	0x20002e9e
 80035e0:	20002eb8 	.word	0x20002eb8

080035e4 <print_gmg12864_level_1>:

void print_gmg12864_level_1(){
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
	if(((HAL_GetTick() - t_gmg12864) > 300) && (display_mode == 0)){
 80035e8:	f001 fb0c 	bl	8004c04 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b41      	ldr	r3, [pc, #260]	; (80036f4 <print_gmg12864_level_1+0x110>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80035f8:	d922      	bls.n	8003640 <print_gmg12864_level_1+0x5c>
 80035fa:	4b3f      	ldr	r3, [pc, #252]	; (80036f8 <print_gmg12864_level_1+0x114>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d11d      	bne.n	8003640 <print_gmg12864_level_1+0x5c>
		t_gmg12864 = HAL_GetTick();
 8003604:	f001 fafe 	bl	8004c04 <HAL_GetTick>
 8003608:	4603      	mov	r3, r0
 800360a:	4a3a      	ldr	r2, [pc, #232]	; (80036f4 <print_gmg12864_level_1+0x110>)
 800360c:	6013      	str	r3, [r2, #0]
		GMG12864_first_line_level_1(0, 0);
 800360e:	2100      	movs	r1, #0
 8003610:	2000      	movs	r0, #0
 8003612:	f000 f873 	bl	80036fc <GMG12864_first_line_level_1>
		GMG12864_second_line_level_1(0, 10);
 8003616:	210a      	movs	r1, #10
 8003618:	2000      	movs	r0, #0
 800361a:	f000 f893 	bl	8003744 <GMG12864_second_line_level_1>
		GMG12864_third_line_level_1(0, 20);
 800361e:	2114      	movs	r1, #20
 8003620:	2000      	movs	r0, #0
 8003622:	f000 f8b7 	bl	8003794 <GMG12864_third_line_level_1>
		GMG12864_fourth_line_level_1(0, 30);
 8003626:	211e      	movs	r1, #30
 8003628:	2000      	movs	r0, #0
 800362a:	f000 f8d7 	bl	80037dc <GMG12864_fourth_line_level_1>
		GMG12864_fifth_line_level_1(0, 40);
 800362e:	2128      	movs	r1, #40	; 0x28
 8003630:	2000      	movs	r0, #0
 8003632:	f000 f8f7 	bl	8003824 <GMG12864_fifth_line_level_1>
		GMG12864_sixth_line_level_1(0, 50);
 8003636:	2132      	movs	r1, #50	; 0x32
 8003638:	2000      	movs	r0, #0
 800363a:	f000 f917 	bl	800386c <GMG12864_sixth_line_level_1>
 800363e:	e057      	b.n	80036f0 <print_gmg12864_level_1+0x10c>
	}
	else if(((HAL_GetTick() - t_gmg12864) > 300) && (display_mode == 1)){
 8003640:	f001 fae0 	bl	8004c04 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <print_gmg12864_level_1+0x110>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003650:	d922      	bls.n	8003698 <print_gmg12864_level_1+0xb4>
 8003652:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <print_gmg12864_level_1+0x114>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d11d      	bne.n	8003698 <print_gmg12864_level_1+0xb4>
		t_gmg12864 = HAL_GetTick();
 800365c:	f001 fad2 	bl	8004c04 <HAL_GetTick>
 8003660:	4603      	mov	r3, r0
 8003662:	4a24      	ldr	r2, [pc, #144]	; (80036f4 <print_gmg12864_level_1+0x110>)
 8003664:	6013      	str	r3, [r2, #0]
		GMG12864_first_line_level_2(0, 0);
 8003666:	2100      	movs	r1, #0
 8003668:	2000      	movs	r0, #0
 800366a:	f000 f92d 	bl	80038c8 <GMG12864_first_line_level_2>
		GMG12864_second_line_level_2(0, 10);
 800366e:	210a      	movs	r1, #10
 8003670:	2000      	movs	r0, #0
 8003672:	f000 f947 	bl	8003904 <GMG12864_second_line_level_2>
		GMG12864_third_line_level_2(0, 20);
 8003676:	2114      	movs	r1, #20
 8003678:	2000      	movs	r0, #0
 800367a:	f000 f967 	bl	800394c <GMG12864_third_line_level_2>
		GMG12864_fourth_line_level_2(0, 30);
 800367e:	211e      	movs	r1, #30
 8003680:	2000      	movs	r0, #0
 8003682:	f000 f987 	bl	8003994 <GMG12864_fourth_line_level_2>
		GMG12864_fifth_line_level_2(0, 40);
 8003686:	2128      	movs	r1, #40	; 0x28
 8003688:	2000      	movs	r0, #0
 800368a:	f000 f9ab 	bl	80039e4 <GMG12864_fifth_line_level_2>
		GMG12864_sixth_line_level_2(0, 50);
 800368e:	2132      	movs	r1, #50	; 0x32
 8003690:	2000      	movs	r0, #0
 8003692:	f000 f9cf 	bl	8003a34 <GMG12864_sixth_line_level_2>
 8003696:	e02b      	b.n	80036f0 <print_gmg12864_level_1+0x10c>
	}
	else if(((HAL_GetTick() - t_gmg12864) > 300) && (display_mode == 2)){
 8003698:	f001 fab4 	bl	8004c04 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <print_gmg12864_level_1+0x110>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80036a8:	d922      	bls.n	80036f0 <print_gmg12864_level_1+0x10c>
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <print_gmg12864_level_1+0x114>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d11d      	bne.n	80036f0 <print_gmg12864_level_1+0x10c>
		t_gmg12864 = HAL_GetTick();
 80036b4:	f001 faa6 	bl	8004c04 <HAL_GetTick>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4a0e      	ldr	r2, [pc, #56]	; (80036f4 <print_gmg12864_level_1+0x110>)
 80036bc:	6013      	str	r3, [r2, #0]
		GMG12864_first_line_level_3(0, 0);
 80036be:	2100      	movs	r1, #0
 80036c0:	2000      	movs	r0, #0
 80036c2:	f000 f9e5 	bl	8003a90 <GMG12864_first_line_level_3>
		GMG12864_second_line_level_3(0, 10);
 80036c6:	210a      	movs	r1, #10
 80036c8:	2000      	movs	r0, #0
 80036ca:	f000 f9ff 	bl	8003acc <GMG12864_second_line_level_3>
		GMG12864_third_line_level_3(0, 20);
 80036ce:	2114      	movs	r1, #20
 80036d0:	2000      	movs	r0, #0
 80036d2:	f000 fa29 	bl	8003b28 <GMG12864_third_line_level_3>
		GMG12864_fourth_line_level_3(0, 30);
 80036d6:	211e      	movs	r1, #30
 80036d8:	2000      	movs	r0, #0
 80036da:	f000 fa4d 	bl	8003b78 <GMG12864_fourth_line_level_3>
		GMG12864_fifth_line_level_3(0, 40);
 80036de:	2128      	movs	r1, #40	; 0x28
 80036e0:	2000      	movs	r0, #0
 80036e2:	f000 fa6d 	bl	8003bc0 <GMG12864_fifth_line_level_3>
		GMG12864_sixth_line_level_3(0, 50);
 80036e6:	2132      	movs	r1, #50	; 0x32
 80036e8:	2000      	movs	r0, #0
 80036ea:	f000 fa8d 	bl	8003c08 <GMG12864_sixth_line_level_3>
	}
}
 80036ee:	e7ff      	b.n	80036f0 <print_gmg12864_level_1+0x10c>
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20002e90 	.word	0x20002e90
 80036f8:	20002e8a 	.word	0x20002e8a

080036fc <GMG12864_first_line_level_1>:

void GMG12864_first_line_level_1(uint8_t x, uint8_t y){
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af02      	add	r7, sp, #8
 8003702:	4603      	mov	r3, r0
 8003704:	460a      	mov	r2, r1
 8003706:	71fb      	strb	r3, [r7, #7]
 8003708:	4613      	mov	r3, r2
 800370a:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Voltage is %d mV         ", v_bus);
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <GMG12864_first_line_level_1+0x3c>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	490a      	ldr	r1, [pc, #40]	; (800373c <GMG12864_first_line_level_1+0x40>)
 8003714:	480a      	ldr	r0, [pc, #40]	; (8003740 <GMG12864_first_line_level_1+0x44>)
 8003716:	f00d fc23 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 800371a:	79b9      	ldrb	r1, [r7, #6]
 800371c:	79f8      	ldrb	r0, [r7, #7]
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <GMG12864_first_line_level_1+0x44>)
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2300      	movs	r3, #0
 8003724:	2201      	movs	r2, #1
 8003726:	f7fd fd8f 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 800372a:	f7fd fbf9 	bl	8000f20 <GMG12864_Update>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20002e82 	.word	0x20002e82
 800373c:	08013508 	.word	0x08013508
 8003740:	20000218 	.word	0x20000218

08003744 <GMG12864_second_line_level_1>:

void GMG12864_second_line_level_1(uint8_t x, uint8_t y){
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af02      	add	r7, sp, #8
 800374a:	4603      	mov	r3, r0
 800374c:	460a      	mov	r2, r1
 800374e:	71fb      	strb	r3, [r7, #7]
 8003750:	4613      	mov	r3, r2
 8003752:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Current is %.1f A    ", Current_ASC712);
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <GMG12864_second_line_level_1+0x44>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fc fefd 	bl	8000558 <__aeabi_f2d>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	490a      	ldr	r1, [pc, #40]	; (800378c <GMG12864_second_line_level_1+0x48>)
 8003764:	480a      	ldr	r0, [pc, #40]	; (8003790 <GMG12864_second_line_level_1+0x4c>)
 8003766:	f00d fbfb 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 800376a:	79b9      	ldrb	r1, [r7, #6]
 800376c:	79f8      	ldrb	r0, [r7, #7]
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <GMG12864_second_line_level_1+0x4c>)
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2300      	movs	r3, #0
 8003774:	2201      	movs	r2, #1
 8003776:	f7fd fd67 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 800377a:	f7fd fbd1 	bl	8000f20 <GMG12864_Update>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20002eb0 	.word	0x20002eb0
 800378c:	08013524 	.word	0x08013524
 8003790:	20000218 	.word	0x20000218

08003794 <GMG12864_third_line_level_1>:

void GMG12864_third_line_level_1(uint8_t x, uint8_t y){
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af02      	add	r7, sp, #8
 800379a:	4603      	mov	r3, r0
 800379c:	460a      	mov	r2, r1
 800379e:	71fb      	strb	r3, [r7, #7]
 80037a0:	4613      	mov	r3, r2
 80037a2:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "discharge %d         ", state_discharge);
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <GMG12864_third_line_level_1+0x3c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	490a      	ldr	r1, [pc, #40]	; (80037d4 <GMG12864_third_line_level_1+0x40>)
 80037ac:	480a      	ldr	r0, [pc, #40]	; (80037d8 <GMG12864_third_line_level_1+0x44>)
 80037ae:	f00d fbd7 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 80037b2:	79b9      	ldrb	r1, [r7, #6]
 80037b4:	79f8      	ldrb	r0, [r7, #7]
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <GMG12864_third_line_level_1+0x44>)
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2300      	movs	r3, #0
 80037bc:	2201      	movs	r2, #1
 80037be:	f7fd fd43 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 80037c2:	f7fd fbad 	bl	8000f20 <GMG12864_Update>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20002e9e 	.word	0x20002e9e
 80037d4:	0801353c 	.word	0x0801353c
 80037d8:	20000218 	.word	0x20000218

080037dc <GMG12864_fourth_line_level_1>:

void GMG12864_fourth_line_level_1(uint8_t x, uint8_t y){
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	4603      	mov	r3, r0
 80037e4:	460a      	mov	r2, r1
 80037e6:	71fb      	strb	r3, [r7, #7]
 80037e8:	4613      	mov	r3, r2
 80037ea:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "low charge %d         ", state_low_charge);
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <GMG12864_fourth_line_level_1+0x3c>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	490a      	ldr	r1, [pc, #40]	; (800381c <GMG12864_fourth_line_level_1+0x40>)
 80037f4:	480a      	ldr	r0, [pc, #40]	; (8003820 <GMG12864_fourth_line_level_1+0x44>)
 80037f6:	f00d fbb3 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 80037fa:	79b9      	ldrb	r1, [r7, #6]
 80037fc:	79f8      	ldrb	r0, [r7, #7]
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <GMG12864_fourth_line_level_1+0x44>)
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2300      	movs	r3, #0
 8003804:	2201      	movs	r2, #1
 8003806:	f7fd fd1f 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 800380a:	f7fd fb89 	bl	8000f20 <GMG12864_Update>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20002e9d 	.word	0x20002e9d
 800381c:	08013554 	.word	0x08013554
 8003820:	20000218 	.word	0x20000218

08003824 <GMG12864_fifth_line_level_1>:

void GMG12864_fifth_line_level_1(uint8_t x, uint8_t y){
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af02      	add	r7, sp, #8
 800382a:	4603      	mov	r3, r0
 800382c:	460a      	mov	r2, r1
 800382e:	71fb      	strb	r3, [r7, #7]
 8003830:	4613      	mov	r3, r2
 8003832:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "high charge %d         ", state_high_charge);
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <GMG12864_fifth_line_level_1+0x3c>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	490a      	ldr	r1, [pc, #40]	; (8003864 <GMG12864_fifth_line_level_1+0x40>)
 800383c:	480a      	ldr	r0, [pc, #40]	; (8003868 <GMG12864_fifth_line_level_1+0x44>)
 800383e:	f00d fb8f 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8003842:	79b9      	ldrb	r1, [r7, #6]
 8003844:	79f8      	ldrb	r0, [r7, #7]
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <GMG12864_fifth_line_level_1+0x44>)
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2300      	movs	r3, #0
 800384c:	2201      	movs	r2, #1
 800384e:	f7fd fcfb 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8003852:	f7fd fb65 	bl	8000f20 <GMG12864_Update>
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20002e9c 	.word	0x20002e9c
 8003864:	0801356c 	.word	0x0801356c
 8003868:	20000218 	.word	0x20000218

0800386c <GMG12864_sixth_line_level_1>:

void GMG12864_sixth_line_level_1(uint8_t x, uint8_t y){
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af02      	add	r7, sp, #8
 8003872:	4603      	mov	r3, r0
 8003874:	460a      	mov	r2, r1
 8003876:	71fb      	strb	r3, [r7, #7]
 8003878:	4613      	mov	r3, r2
 800387a:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Time is %d :%d :%d          ", Hours, Minutes, Seconds);
 800387c:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <GMG12864_sixth_line_level_1+0x48>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <GMG12864_sixth_line_level_1+0x4c>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4619      	mov	r1, r3
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <GMG12864_sixth_line_level_1+0x50>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	460b      	mov	r3, r1
 8003890:	490b      	ldr	r1, [pc, #44]	; (80038c0 <GMG12864_sixth_line_level_1+0x54>)
 8003892:	480c      	ldr	r0, [pc, #48]	; (80038c4 <GMG12864_sixth_line_level_1+0x58>)
 8003894:	f00d fb64 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8003898:	79b9      	ldrb	r1, [r7, #6]
 800389a:	79f8      	ldrb	r0, [r7, #7]
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <GMG12864_sixth_line_level_1+0x58>)
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	2201      	movs	r2, #1
 80038a4:	f7fd fcd0 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 80038a8:	f7fd fb3a 	bl	8000f20 <GMG12864_Update>
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20002ed9 	.word	0x20002ed9
 80038b8:	20002ed8 	.word	0x20002ed8
 80038bc:	20002ed7 	.word	0x20002ed7
 80038c0:	08013584 	.word	0x08013584
 80038c4:	20000218 	.word	0x20000218

080038c8 <GMG12864_first_line_level_2>:

void GMG12864_first_line_level_2(uint8_t x, uint8_t y){
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	4603      	mov	r3, r0
 80038d0:	460a      	mov	r2, r1
 80038d2:	71fb      	strb	r3, [r7, #7]
 80038d4:	4613      	mov	r3, r2
 80038d6:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "SD CARD Parameters     ");
 80038d8:	4908      	ldr	r1, [pc, #32]	; (80038fc <GMG12864_first_line_level_2+0x34>)
 80038da:	4809      	ldr	r0, [pc, #36]	; (8003900 <GMG12864_first_line_level_2+0x38>)
 80038dc:	f00d fb40 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 80038e0:	79b9      	ldrb	r1, [r7, #6]
 80038e2:	79f8      	ldrb	r0, [r7, #7]
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <GMG12864_first_line_level_2+0x38>)
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	2300      	movs	r3, #0
 80038ea:	2201      	movs	r2, #1
 80038ec:	f7fd fcac 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 80038f0:	f7fd fb16 	bl	8000f20 <GMG12864_Update>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	080135a4 	.word	0x080135a4
 8003900:	20000218 	.word	0x20000218

08003904 <GMG12864_second_line_level_2>:

void GMG12864_second_line_level_2(uint8_t x, uint8_t y){
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af02      	add	r7, sp, #8
 800390a:	4603      	mov	r3, r0
 800390c:	460a      	mov	r2, r1
 800390e:	71fb      	strb	r3, [r7, #7]
 8003910:	4613      	mov	r3, r2
 8003912:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Counter SD %d          ", counter_sd_card);
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <GMG12864_second_line_level_2+0x3c>)
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	490a      	ldr	r1, [pc, #40]	; (8003944 <GMG12864_second_line_level_2+0x40>)
 800391c:	480a      	ldr	r0, [pc, #40]	; (8003948 <GMG12864_second_line_level_2+0x44>)
 800391e:	f00d fb1f 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8003922:	79b9      	ldrb	r1, [r7, #6]
 8003924:	79f8      	ldrb	r0, [r7, #7]
 8003926:	4b08      	ldr	r3, [pc, #32]	; (8003948 <GMG12864_second_line_level_2+0x44>)
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	2201      	movs	r2, #1
 800392e:	f7fd fc8b 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8003932:	f7fd faf5 	bl	8000f20 <GMG12864_Update>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20002e74 	.word	0x20002e74
 8003944:	080135bc 	.word	0x080135bc
 8003948:	20000218 	.word	0x20000218

0800394c <GMG12864_third_line_level_2>:

void GMG12864_third_line_level_2(uint8_t x, uint8_t y){
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af02      	add	r7, sp, #8
 8003952:	4603      	mov	r3, r0
 8003954:	460a      	mov	r2, r1
 8003956:	71fb      	strb	r3, [r7, #7]
 8003958:	4613      	mov	r3, r2
 800395a:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Timer low charge %d", tim7_counter);
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <GMG12864_third_line_level_2+0x3c>)
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	b29b      	uxth	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	4909      	ldr	r1, [pc, #36]	; (800398c <GMG12864_third_line_level_2+0x40>)
 8003966:	480a      	ldr	r0, [pc, #40]	; (8003990 <GMG12864_third_line_level_2+0x44>)
 8003968:	f00d fafa 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 800396c:	79b9      	ldrb	r1, [r7, #6]
 800396e:	79f8      	ldrb	r0, [r7, #7]
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <GMG12864_third_line_level_2+0x44>)
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2300      	movs	r3, #0
 8003976:	2201      	movs	r2, #1
 8003978:	f7fd fc66 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 800397c:	f7fd fad0 	bl	8000f20 <GMG12864_Update>
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20002eba 	.word	0x20002eba
 800398c:	080135d4 	.word	0x080135d4
 8003990:	20000218 	.word	0x20000218

08003994 <GMG12864_fourth_line_level_2>:

void GMG12864_fourth_line_level_2(uint8_t x, uint8_t y){
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af02      	add	r7, sp, #8
 800399a:	4603      	mov	r3, r0
 800399c:	460a      	mov	r2, r1
 800399e:	71fb      	strb	r3, [r7, #7]
 80039a0:	4613      	mov	r3, r2
 80039a2:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Time discha. %.1f min.                     ", time_discharge);
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <GMG12864_fourth_line_level_2+0x44>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fc fdd5 	bl	8000558 <__aeabi_f2d>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	490a      	ldr	r1, [pc, #40]	; (80039dc <GMG12864_fourth_line_level_2+0x48>)
 80039b4:	480a      	ldr	r0, [pc, #40]	; (80039e0 <GMG12864_fourth_line_level_2+0x4c>)
 80039b6:	f00d fad3 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 80039ba:	79b9      	ldrb	r1, [r7, #6]
 80039bc:	79f8      	ldrb	r0, [r7, #7]
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <GMG12864_fourth_line_level_2+0x4c>)
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	2201      	movs	r2, #1
 80039c6:	f7fd fc3f 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 80039ca:	f7fd faa9 	bl	8000f20 <GMG12864_Update>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20002ed0 	.word	0x20002ed0
 80039dc:	080135e8 	.word	0x080135e8
 80039e0:	20000218 	.word	0x20000218

080039e4 <GMG12864_fifth_line_level_2>:

void GMG12864_fifth_line_level_2(uint8_t x, uint8_t y){
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	4603      	mov	r3, r0
 80039ec:	460a      	mov	r2, r1
 80039ee:	71fb      	strb	r3, [r7, #7]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Capacity %.1f                      ", capacity);
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <GMG12864_fifth_line_level_2+0x44>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fc fdad 	bl	8000558 <__aeabi_f2d>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	490a      	ldr	r1, [pc, #40]	; (8003a2c <GMG12864_fifth_line_level_2+0x48>)
 8003a04:	480a      	ldr	r0, [pc, #40]	; (8003a30 <GMG12864_fifth_line_level_2+0x4c>)
 8003a06:	f00d faab 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8003a0a:	79b9      	ldrb	r1, [r7, #6]
 8003a0c:	79f8      	ldrb	r0, [r7, #7]
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <GMG12864_fifth_line_level_2+0x4c>)
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	2201      	movs	r2, #1
 8003a16:	f7fd fc17 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8003a1a:	f7fd fa81 	bl	8000f20 <GMG12864_Update>
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20002ebc 	.word	0x20002ebc
 8003a2c:	08013614 	.word	0x08013614
 8003a30:	20000218 	.word	0x20000218

08003a34 <GMG12864_sixth_line_level_2>:

void GMG12864_sixth_line_level_2(uint8_t x, uint8_t y){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	460a      	mov	r2, r1
 8003a3e:	71fb      	strb	r3, [r7, #7]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Time is %d : %d : %d                ", Hours, Minutes, Seconds);
 8003a44:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <GMG12864_sixth_line_level_2+0x48>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <GMG12864_sixth_line_level_2+0x4c>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <GMG12864_sixth_line_level_2+0x50>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	460b      	mov	r3, r1
 8003a58:	490b      	ldr	r1, [pc, #44]	; (8003a88 <GMG12864_sixth_line_level_2+0x54>)
 8003a5a:	480c      	ldr	r0, [pc, #48]	; (8003a8c <GMG12864_sixth_line_level_2+0x58>)
 8003a5c:	f00d fa80 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8003a60:	79b9      	ldrb	r1, [r7, #6]
 8003a62:	79f8      	ldrb	r0, [r7, #7]
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <GMG12864_sixth_line_level_2+0x58>)
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f7fd fbec 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8003a70:	f7fd fa56 	bl	8000f20 <GMG12864_Update>
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20002ed9 	.word	0x20002ed9
 8003a80:	20002ed8 	.word	0x20002ed8
 8003a84:	20002ed7 	.word	0x20002ed7
 8003a88:	08013638 	.word	0x08013638
 8003a8c:	20000218 	.word	0x20000218

08003a90 <GMG12864_first_line_level_3>:

void GMG12864_first_line_level_3(uint8_t x, uint8_t y){
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	4603      	mov	r3, r0
 8003a98:	460a      	mov	r2, r1
 8003a9a:	71fb      	strb	r3, [r7, #7]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "DS3231 Parameters            ");
 8003aa0:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <GMG12864_first_line_level_3+0x34>)
 8003aa2:	4809      	ldr	r0, [pc, #36]	; (8003ac8 <GMG12864_first_line_level_3+0x38>)
 8003aa4:	f00d fa5c 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8003aa8:	79b9      	ldrb	r1, [r7, #6]
 8003aaa:	79f8      	ldrb	r0, [r7, #7]
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <GMG12864_first_line_level_3+0x38>)
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f7fd fbc8 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8003ab8:	f7fd fa32 	bl	8000f20 <GMG12864_Update>
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	08013660 	.word	0x08013660
 8003ac8:	20000218 	.word	0x20000218

08003acc <GMG12864_second_line_level_3>:

void GMG12864_second_line_level_3(uint8_t x, uint8_t y){
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	460a      	mov	r2, r1
 8003ad6:	71fb      	strb	r3, [r7, #7]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Time is %d : %d : %d                ", Hours, Minutes, Seconds);
 8003adc:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <GMG12864_second_line_level_3+0x48>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <GMG12864_second_line_level_3+0x4c>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <GMG12864_second_line_level_3+0x50>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	460b      	mov	r3, r1
 8003af0:	490b      	ldr	r1, [pc, #44]	; (8003b20 <GMG12864_second_line_level_3+0x54>)
 8003af2:	480c      	ldr	r0, [pc, #48]	; (8003b24 <GMG12864_second_line_level_3+0x58>)
 8003af4:	f00d fa34 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8003af8:	79b9      	ldrb	r1, [r7, #6]
 8003afa:	79f8      	ldrb	r0, [r7, #7]
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <GMG12864_second_line_level_3+0x58>)
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2300      	movs	r3, #0
 8003b02:	2201      	movs	r2, #1
 8003b04:	f7fd fba0 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8003b08:	f7fd fa0a 	bl	8000f20 <GMG12864_Update>
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20002ed9 	.word	0x20002ed9
 8003b18:	20002ed8 	.word	0x20002ed8
 8003b1c:	20002ed7 	.word	0x20002ed7
 8003b20:	08013638 	.word	0x08013638
 8003b24:	20000218 	.word	0x20000218

08003b28 <GMG12864_third_line_level_3>:

void GMG12864_third_line_level_3(uint8_t x, uint8_t y){
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460a      	mov	r2, r1
 8003b32:	71fb      	strb	r3, [r7, #7]
 8003b34:	4613      	mov	r3, r2
 8003b36:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Temp. DS3231 %.1f                ", max_ds3231_temp);
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <GMG12864_third_line_level_3+0x44>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fc fd0b 	bl	8000558 <__aeabi_f2d>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	490a      	ldr	r1, [pc, #40]	; (8003b70 <GMG12864_third_line_level_3+0x48>)
 8003b48:	480a      	ldr	r0, [pc, #40]	; (8003b74 <GMG12864_third_line_level_3+0x4c>)
 8003b4a:	f00d fa09 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8003b4e:	79b9      	ldrb	r1, [r7, #6]
 8003b50:	79f8      	ldrb	r0, [r7, #7]
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <GMG12864_third_line_level_3+0x4c>)
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	2300      	movs	r3, #0
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f7fd fb75 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8003b5e:	f7fd f9df 	bl	8000f20 <GMG12864_Update>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20002ee0 	.word	0x20002ee0
 8003b70:	08013680 	.word	0x08013680
 8003b74:	20000218 	.word	0x20000218

08003b78 <GMG12864_fourth_line_level_3>:

void GMG12864_fourth_line_level_3(uint8_t x, uint8_t y){
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	4603      	mov	r3, r0
 8003b80:	460a      	mov	r2, r1
 8003b82:	71fb      	strb	r3, [r7, #7]
 8003b84:	4613      	mov	r3, r2
 8003b86:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Day %d                ", Day);
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <GMG12864_fourth_line_level_3+0x3c>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	490a      	ldr	r1, [pc, #40]	; (8003bb8 <GMG12864_fourth_line_level_3+0x40>)
 8003b90:	480a      	ldr	r0, [pc, #40]	; (8003bbc <GMG12864_fourth_line_level_3+0x44>)
 8003b92:	f00d f9e5 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8003b96:	79b9      	ldrb	r1, [r7, #6]
 8003b98:	79f8      	ldrb	r0, [r7, #7]
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <GMG12864_fourth_line_level_3+0x44>)
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f7fd fb51 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8003ba6:	f7fd f9bb 	bl	8000f20 <GMG12864_Update>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20002eda 	.word	0x20002eda
 8003bb8:	080136a4 	.word	0x080136a4
 8003bbc:	20000218 	.word	0x20000218

08003bc0 <GMG12864_fifth_line_level_3>:

void GMG12864_fifth_line_level_3(uint8_t x, uint8_t y){
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	460a      	mov	r2, r1
 8003bca:	71fb      	strb	r3, [r7, #7]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Date %d              ", Date);
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <GMG12864_fifth_line_level_3+0x3c>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	490a      	ldr	r1, [pc, #40]	; (8003c00 <GMG12864_fifth_line_level_3+0x40>)
 8003bd8:	480a      	ldr	r0, [pc, #40]	; (8003c04 <GMG12864_fifth_line_level_3+0x44>)
 8003bda:	f00d f9c1 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8003bde:	79b9      	ldrb	r1, [r7, #6]
 8003be0:	79f8      	ldrb	r0, [r7, #7]
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <GMG12864_fifth_line_level_3+0x44>)
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	2201      	movs	r2, #1
 8003bea:	f7fd fb2d 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8003bee:	f7fd f997 	bl	8000f20 <GMG12864_Update>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20002edb 	.word	0x20002edb
 8003c00:	080136bc 	.word	0x080136bc
 8003c04:	20000218 	.word	0x20000218

08003c08 <GMG12864_sixth_line_level_3>:

void GMG12864_sixth_line_level_3(uint8_t x, uint8_t y){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	4603      	mov	r3, r0
 8003c10:	460a      	mov	r2, r1
 8003c12:	71fb      	strb	r3, [r7, #7]
 8003c14:	4613      	mov	r3, r2
 8003c16:	71bb      	strb	r3, [r7, #6]
	sprintf(tx_buffer, "Month %d             ", Month);
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <GMG12864_sixth_line_level_3+0x3c>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	490a      	ldr	r1, [pc, #40]	; (8003c48 <GMG12864_sixth_line_level_3+0x40>)
 8003c20:	480a      	ldr	r0, [pc, #40]	; (8003c4c <GMG12864_sixth_line_level_3+0x44>)
 8003c22:	f00d f99d 	bl	8010f60 <siprintf>
	GMG12864_Decode_UTF8(x, y, 1, inversion_off, tx_buffer);
 8003c26:	79b9      	ldrb	r1, [r7, #6]
 8003c28:	79f8      	ldrb	r0, [r7, #7]
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <GMG12864_sixth_line_level_3+0x44>)
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	2201      	movs	r2, #1
 8003c32:	f7fd fb09 	bl	8001248 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8003c36:	f7fd f973 	bl	8000f20 <GMG12864_Update>
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20002edc 	.word	0x20002edc
 8003c48:	080136d4 	.word	0x080136d4
 8003c4c:	20000218 	.word	0x20000218

08003c50 <sd_card_write>:

void sd_card_write(){
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - t_sd_card > 1000){
 8003c54:	f000 ffd6 	bl	8004c04 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b3c      	ldr	r3, [pc, #240]	; (8003d4c <sd_card_write+0xfc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c64:	d96f      	bls.n	8003d46 <sd_card_write+0xf6>
		if((fresult = f_open(&fil, "parameters.txt", FA_OPEN_ALWAYS | FA_WRITE)) == FR_OK){
 8003c66:	2212      	movs	r2, #18
 8003c68:	4939      	ldr	r1, [pc, #228]	; (8003d50 <sd_card_write+0x100>)
 8003c6a:	483a      	ldr	r0, [pc, #232]	; (8003d54 <sd_card_write+0x104>)
 8003c6c:	f00b fa64 	bl	800f138 <f_open>
 8003c70:	4603      	mov	r3, r0
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <sd_card_write+0x108>)
 8003c76:	701a      	strb	r2, [r3, #0]
 8003c78:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <sd_card_write+0x108>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d132      	bne.n	8003ce6 <sd_card_write+0x96>
			t_sd_card = HAL_GetTick();
 8003c80:	f000 ffc0 	bl	8004c04 <HAL_GetTick>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <sd_card_write+0xfc>)
 8003c88:	6013      	str	r3, [r2, #0]
			sprintf(buffer_sd_card, "SD CARD OK!         ");
 8003c8a:	4934      	ldr	r1, [pc, #208]	; (8003d5c <sd_card_write+0x10c>)
 8003c8c:	4834      	ldr	r0, [pc, #208]	; (8003d60 <sd_card_write+0x110>)
 8003c8e:	f00d f967 	bl	8010f60 <siprintf>
			fresult = f_lseek(&fil, fil.fsize);
 8003c92:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <sd_card_write+0x104>)
 8003c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	482d      	ldr	r0, [pc, #180]	; (8003d54 <sd_card_write+0x104>)
 8003c9e:	f00c f895 	bl	800fdcc <f_lseek>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <sd_card_write+0x108>)
 8003ca8:	701a      	strb	r2, [r3, #0]
			fresult = f_puts("DATA!!!/n", &fil);
 8003caa:	492a      	ldr	r1, [pc, #168]	; (8003d54 <sd_card_write+0x104>)
 8003cac:	482d      	ldr	r0, [pc, #180]	; (8003d64 <sd_card_write+0x114>)
 8003cae:	f00c fbbb 	bl	8010428 <f_puts>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <sd_card_write+0x108>)
 8003cb8:	701a      	strb	r2, [r3, #0]
			fresult = f_close(&fil);
 8003cba:	4826      	ldr	r0, [pc, #152]	; (8003d54 <sd_card_write+0x104>)
 8003cbc:	f00c f85b 	bl	800fd76 <f_close>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <sd_card_write+0x108>)
 8003cc6:	701a      	strb	r2, [r3, #0]
			counter_sd_card += 1;
 8003cc8:	4b27      	ldr	r3, [pc, #156]	; (8003d68 <sd_card_write+0x118>)
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <sd_card_write+0x118>)
 8003cd2:	801a      	strh	r2, [r3, #0]
			SET_BIT(GPIOA->BSRR, GPIO_BSRR_BR_5);
 8003cd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ce2:	6193      	str	r3, [r2, #24]
			t_sd_card = HAL_GetTick();
			sprintf(buffer_sd_card, "SD CARD not communicate!!!    ");
			SET_BIT(GPIOA->BSRR, GPIO_BSRR_BS_5);
		}
	}
}
 8003ce4:	e02f      	b.n	8003d46 <sd_card_write+0xf6>
		else if((fresult = f_open(&fil, "parameters.txt", FA_OPEN_ALWAYS | FA_WRITE)) == FR_DISK_ERR){
 8003ce6:	2212      	movs	r2, #18
 8003ce8:	4919      	ldr	r1, [pc, #100]	; (8003d50 <sd_card_write+0x100>)
 8003cea:	481a      	ldr	r0, [pc, #104]	; (8003d54 <sd_card_write+0x104>)
 8003cec:	f00b fa24 	bl	800f138 <f_open>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <sd_card_write+0x108>)
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <sd_card_write+0x108>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d111      	bne.n	8003d24 <sd_card_write+0xd4>
			t_sd_card = HAL_GetTick();
 8003d00:	f000 ff80 	bl	8004c04 <HAL_GetTick>
 8003d04:	4603      	mov	r3, r0
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <sd_card_write+0xfc>)
 8003d08:	6013      	str	r3, [r2, #0]
			sprintf(buffer_sd_card, "SD CARD not detected!     ");
 8003d0a:	4918      	ldr	r1, [pc, #96]	; (8003d6c <sd_card_write+0x11c>)
 8003d0c:	4814      	ldr	r0, [pc, #80]	; (8003d60 <sd_card_write+0x110>)
 8003d0e:	f00d f927 	bl	8010f60 <siprintf>
			SET_BIT(GPIOA->BSRR, GPIO_BSRR_BS_5);
 8003d12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003d1c:	f043 0320 	orr.w	r3, r3, #32
 8003d20:	6193      	str	r3, [r2, #24]
}
 8003d22:	e010      	b.n	8003d46 <sd_card_write+0xf6>
			t_sd_card = HAL_GetTick();
 8003d24:	f000 ff6e 	bl	8004c04 <HAL_GetTick>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <sd_card_write+0xfc>)
 8003d2c:	6013      	str	r3, [r2, #0]
			sprintf(buffer_sd_card, "SD CARD not communicate!!!    ");
 8003d2e:	4910      	ldr	r1, [pc, #64]	; (8003d70 <sd_card_write+0x120>)
 8003d30:	480b      	ldr	r0, [pc, #44]	; (8003d60 <sd_card_write+0x110>)
 8003d32:	f00d f915 	bl	8010f60 <siprintf>
			SET_BIT(GPIOA->BSRR, GPIO_BSRR_BS_5);
 8003d36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003d40:	f043 0320 	orr.w	r3, r3, #32
 8003d44:	6193      	str	r3, [r2, #24]
}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20002e94 	.word	0x20002e94
 8003d50:	080136ec 	.word	0x080136ec
 8003d54:	20001a44 	.word	0x20001a44
 8003d58:	20002a70 	.word	0x20002a70
 8003d5c:	080136fc 	.word	0x080136fc
 8003d60:	20002a74 	.word	0x20002a74
 8003d64:	08013714 	.word	0x08013714
 8003d68:	20002e74 	.word	0x20002e74
 8003d6c:	08013720 	.word	0x08013720
 8003d70:	0801373c 	.word	0x0801373c

08003d74 <ds3231_get_time_and_temp>:

void ds3231_get_time_and_temp(){
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - t_ds3231 > 1000){
 8003d78:	f000 ff44 	bl	8004c04 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <ds3231_get_time_and_temp+0x2c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d88:	d908      	bls.n	8003d9c <ds3231_get_time_and_temp+0x28>
		t_ds3231 = HAL_GetTick();
 8003d8a:	f000 ff3b 	bl	8004c04 <HAL_GetTick>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <ds3231_get_time_and_temp+0x2c>)
 8003d92:	6013      	str	r3, [r2, #0]
		max_ds3231_get_time();
 8003d94:	f000 f91c 	bl	8003fd0 <max_ds3231_get_time>
		max_ds3231_get_temperature();
 8003d98:	f000 f9c0 	bl	800411c <max_ds3231_get_temperature>
	}
}
 8003d9c:	bf00      	nop
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20002ea4 	.word	0x20002ea4

08003da4 <get_current_ASC712>:

float get_current_ASC712(){
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
	if(adc_flag){
 8003daa:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <get_current_ASC712+0xf4>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d066      	beq.n	8003e80 <get_current_ASC712+0xdc>
		if((state_high_charge == 0) && (state_low_charge == 0) && (state_discharge == 0)){
 8003db2:	4b3a      	ldr	r3, [pc, #232]	; (8003e9c <get_current_ASC712+0xf8>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	f083 0301 	eor.w	r3, r3, #1
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d036      	beq.n	8003e2e <get_current_ASC712+0x8a>
 8003dc0:	4b37      	ldr	r3, [pc, #220]	; (8003ea0 <get_current_ASC712+0xfc>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	f083 0301 	eor.w	r3, r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d02f      	beq.n	8003e2e <get_current_ASC712+0x8a>
 8003dce:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <get_current_ASC712+0x100>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	f083 0301 	eor.w	r3, r3, #1
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d028      	beq.n	8003e2e <get_current_ASC712+0x8a>
			adc_flag = 0;
 8003ddc:	4b2e      	ldr	r3, [pc, #184]	; (8003e98 <get_current_ASC712+0xf4>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
			float Current = 0.0f;
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	607b      	str	r3, [r7, #4]
			RawVoltage = (float)ADC_SMA_Data_1 * 3.4f * 2.0f / (float)ADC_MAX;
 8003de8:	4b2f      	ldr	r3, [pc, #188]	; (8003ea8 <get_current_ASC712+0x104>)
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	ee07 3a90 	vmov	s15, r3
 8003df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003eac <get_current_ASC712+0x108>
 8003df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dfc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e00:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003eb0 <get_current_ASC712+0x10c>
 8003e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e08:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <get_current_ASC712+0x110>)
 8003e0a:	edc3 7a00 	vstr	s15, [r3]
			return Current = (RawVoltage - 2.43f) / Sensitivity;
 8003e0e:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <get_current_ASC712+0x110>)
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003eb8 <get_current_ASC712+0x114>
 8003e18:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003e1c:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <get_current_ASC712+0x118>)
 8003e1e:	ed93 7a00 	vldr	s14, [r3]
 8003e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e26:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	e02a      	b.n	8003e84 <get_current_ASC712+0xe0>
		}
		else{
			adc_flag = 0;
 8003e2e:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <get_current_ASC712+0xf4>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
			float Current = 0.0f;
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	603b      	str	r3, [r7, #0]
			RawVoltage = (float)ADC_SMA_Data_1 * 3.4f * 2.0f / (float)ADC_MAX;
 8003e3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <get_current_ASC712+0x104>)
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003eac <get_current_ASC712+0x108>
 8003e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e4e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e52:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003eb0 <get_current_ASC712+0x10c>
 8003e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e5a:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <get_current_ASC712+0x110>)
 8003e5c:	edc3 7a00 	vstr	s15, [r3]
			return Current = (RawVoltage - 2.37f) / Sensitivity;
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <get_current_ASC712+0x110>)
 8003e62:	edd3 7a00 	vldr	s15, [r3]
 8003e66:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003ec0 <get_current_ASC712+0x11c>
 8003e6a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <get_current_ASC712+0x118>)
 8003e70:	ed93 7a00 	vldr	s14, [r3]
 8003e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e78:	edc7 7a00 	vstr	s15, [r7]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	e001      	b.n	8003e84 <get_current_ASC712+0xe0>
		}
	}
	else{
		return 0;
 8003e80:	f04f 0300 	mov.w	r3, #0
	}
}
 8003e84:	ee07 3a90 	vmov	s15, r3
 8003e88:	eeb0 0a67 	vmov.f32	s0, s15
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20002fec 	.word	0x20002fec
 8003e9c:	20002e9c 	.word	0x20002e9c
 8003ea0:	20002e9d 	.word	0x20002e9d
 8003ea4:	20002e9e 	.word	0x20002e9e
 8003ea8:	20002fe4 	.word	0x20002fe4
 8003eac:	4059999a 	.word	0x4059999a
 8003eb0:	457ff000 	.word	0x457ff000
 8003eb4:	20002eac 	.word	0x20002eac
 8003eb8:	401b851f 	.word	0x401b851f
 8003ebc:	20000004 	.word	0x20000004
 8003ec0:	4017ae14 	.word	0x4017ae14

08003ec4 <tim7_start>:

void tim7_start(){
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim7);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <tim7_start+0x10>)
 8003eca:	f006 fde9 	bl	800aaa0 <HAL_TIM_Base_Start_IT>
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000934 	.word	0x20000934

08003ed8 <tim7_stop>:

void tim7_stop(){
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim7);
 8003edc:	4803      	ldr	r0, [pc, #12]	; (8003eec <tim7_stop+0x14>)
 8003ede:	f006 fe4f 	bl	800ab80 <HAL_TIM_Base_Stop_IT>
	TIM7->CNT = 0;
 8003ee2:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <tim7_stop+0x18>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20000934 	.word	0x20000934
 8003ef0:	40001400 	.word	0x40001400

08003ef4 <get_capacity_of_battery>:

void get_capacity_of_battery(){
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
	if(capacity_flag){
 8003ef8:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <get_capacity_of_battery+0x68>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d028      	beq.n	8003f52 <get_capacity_of_battery+0x5e>
		time_discharge = ((time_stop - time_start) / (float)1000) / 60;
 8003f00:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <get_capacity_of_battery+0x6c>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4b17      	ldr	r3, [pc, #92]	; (8003f64 <get_capacity_of_battery+0x70>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003f68 <get_capacity_of_battery+0x74>
 8003f16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f1a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003f6c <get_capacity_of_battery+0x78>
 8003f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <get_capacity_of_battery+0x7c>)
 8003f24:	edc3 7a00 	vstr	s15, [r3]
		capacity = 120 * ((float)time_discharge * (float)0.000000277) / (6 * (float)0.7);
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <get_capacity_of_battery+0x7c>)
 8003f2a:	edd3 7a00 	vldr	s15, [r3]
 8003f2e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003f74 <get_capacity_of_battery+0x80>
 8003f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f36:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003f78 <get_capacity_of_battery+0x84>
 8003f3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f3e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003f7c <get_capacity_of_battery+0x88>
 8003f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <get_capacity_of_battery+0x8c>)
 8003f48:	edc3 7a00 	vstr	s15, [r3]
		capacity_flag = 0;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <get_capacity_of_battery+0x68>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
	}
}
 8003f52:	bf00      	nop
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	20002ec0 	.word	0x20002ec0
 8003f60:	20002ecc 	.word	0x20002ecc
 8003f64:	20002ec8 	.word	0x20002ec8
 8003f68:	447a0000 	.word	0x447a0000
 8003f6c:	42700000 	.word	0x42700000
 8003f70:	20002ed0 	.word	0x20002ed0
 8003f74:	3494b697 	.word	0x3494b697
 8003f78:	42f00000 	.word	0x42f00000
 8003f7c:	40866666 	.word	0x40866666
 8003f80:	20002ebc 	.word	0x20002ebc

08003f84 <start_capacity_timer>:
void start_capacity_timer(){
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
	if(capacity_timer_flag_1){
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <start_capacity_timer+0x20>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <start_capacity_timer+0x1c>
		time_start = HAL_GetTick();
 8003f90:	f000 fe38 	bl	8004c04 <HAL_GetTick>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <start_capacity_timer+0x24>)
 8003f98:	6013      	str	r3, [r2, #0]
		capacity_timer_flag_1 = 0;
 8003f9a:	4b02      	ldr	r3, [pc, #8]	; (8003fa4 <start_capacity_timer+0x20>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
	}
}
 8003fa0:	bf00      	nop
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000009 	.word	0x20000009
 8003fa8:	20002ec8 	.word	0x20002ec8

08003fac <stop_capacity_timer>:

void stop_capacity_timer(){
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
	time_stop = HAL_GetTick();
 8003fb0:	f000 fe28 	bl	8004c04 <HAL_GetTick>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4a02      	ldr	r2, [pc, #8]	; (8003fc0 <stop_capacity_timer+0x14>)
 8003fb8:	6013      	str	r3, [r2, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20002ecc 	.word	0x20002ecc

08003fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fc8:	b672      	cpsid	i
}
 8003fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fcc:	e7fe      	b.n	8003fcc <Error_Handler+0x8>
	...

08003fd0 <max_ds3231_get_time>:

/*-------------------------------------Глобальные переменные----------------------------------*/

/*--------------------------------Функция запроса данных о времени----------------------------*/

void max_ds3231_get_time(void) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af02      	add	r7, sp, #8
	///Функция запроса данных о времени/
	///(См. Datasheet DS3231. Cтр.11, табл. 1).
	///Считываем регистры с 0x00 по 0x06 включительно.
	uint8_t tx_buffer = 0x00;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buffer[7] = { 0, };
 8003fda:	2300      	movs	r3, #0
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	801a      	strh	r2, [r3, #0]
 8003fe6:	460a      	mov	r2, r1
 8003fe8:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c2, Adress, &tx_buffer, 1, 10);
 8003fea:	1dfa      	adds	r2, r7, #7
 8003fec:	230a      	movs	r3, #10
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	21d0      	movs	r1, #208	; 0xd0
 8003ff4:	4840      	ldr	r0, [pc, #256]	; (80040f8 <max_ds3231_get_time+0x128>)
 8003ff6:	f002 fbd1 	bl	800679c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, Adress, rx_buffer, 7, 10);
 8003ffa:	463a      	mov	r2, r7
 8003ffc:	230a      	movs	r3, #10
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2307      	movs	r3, #7
 8004002:	21d0      	movs	r1, #208	; 0xd0
 8004004:	483c      	ldr	r0, [pc, #240]	; (80040f8 <max_ds3231_get_time+0x128>)
 8004006:	f002 fcbd 	bl	8006984 <HAL_I2C_Master_Receive>

	Seconds = (rx_buffer[0] >> 4) * 10 + (rx_buffer[0] & 0x0F);
 800400a:	783b      	ldrb	r3, [r7, #0]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	0092      	lsls	r2, r2, #2
 8004014:	4413      	add	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	b2da      	uxtb	r2, r3
 800401a:	783b      	ldrb	r3, [r7, #0]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	b2db      	uxtb	r3, r3
 8004022:	4413      	add	r3, r2
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4b35      	ldr	r3, [pc, #212]	; (80040fc <max_ds3231_get_time+0x12c>)
 8004028:	701a      	strb	r2, [r3, #0]
	Minutes = (rx_buffer[1] >> 4) * 10 + (rx_buffer[1] & 0x0F);
 800402a:	787b      	ldrb	r3, [r7, #1]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	0092      	lsls	r2, r2, #2
 8004034:	4413      	add	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	b2da      	uxtb	r2, r3
 800403a:	787b      	ldrb	r3, [r7, #1]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4413      	add	r3, r2
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4b2e      	ldr	r3, [pc, #184]	; (8004100 <max_ds3231_get_time+0x130>)
 8004048:	701a      	strb	r2, [r3, #0]
	Hours = (rx_buffer[2] >> 4) * 10 + (rx_buffer[2] & 0x0F);
 800404a:	78bb      	ldrb	r3, [r7, #2]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	0092      	lsls	r2, r2, #2
 8004054:	4413      	add	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	b2da      	uxtb	r2, r3
 800405a:	78bb      	ldrb	r3, [r7, #2]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	b2db      	uxtb	r3, r3
 8004062:	4413      	add	r3, r2
 8004064:	b2da      	uxtb	r2, r3
 8004066:	4b27      	ldr	r3, [pc, #156]	; (8004104 <max_ds3231_get_time+0x134>)
 8004068:	701a      	strb	r2, [r3, #0]
	Day = rx_buffer[3];
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	4b26      	ldr	r3, [pc, #152]	; (8004108 <max_ds3231_get_time+0x138>)
 800406e:	701a      	strb	r2, [r3, #0]
	Date = (rx_buffer[4] >> 4) * 10 + (rx_buffer[4] & 0x0F);
 8004070:	793b      	ldrb	r3, [r7, #4]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	0092      	lsls	r2, r2, #2
 800407a:	4413      	add	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	793b      	ldrb	r3, [r7, #4]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	b2db      	uxtb	r3, r3
 8004088:	4413      	add	r3, r2
 800408a:	b2da      	uxtb	r2, r3
 800408c:	4b1f      	ldr	r3, [pc, #124]	; (800410c <max_ds3231_get_time+0x13c>)
 800408e:	701a      	strb	r2, [r3, #0]
	Month = ((rx_buffer[5] >> 4) & 0x07) * 10 + (rx_buffer[5] & 0x0F);
 8004090:	797b      	ldrb	r3, [r7, #5]
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	0092      	lsls	r2, r2, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	797b      	ldrb	r3, [r7, #5]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	4413      	add	r3, r2
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	4b17      	ldr	r3, [pc, #92]	; (8004110 <max_ds3231_get_time+0x140>)
 80040b4:	701a      	strb	r2, [r3, #0]
	Cuntury = 20 + (rx_buffer[5] >> 7);
 80040b6:	797b      	ldrb	r3, [r7, #5]
 80040b8:	09db      	lsrs	r3, r3, #7
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	3314      	adds	r3, #20
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	4b14      	ldr	r3, [pc, #80]	; (8004114 <max_ds3231_get_time+0x144>)
 80040c2:	701a      	strb	r2, [r3, #0]
	Year = 2000 + (rx_buffer[6] >> 4) * 10 + (rx_buffer[6] & 0x0F);
 80040c4:	79bb      	ldrb	r3, [r7, #6]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	0092      	lsls	r2, r2, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	79bb      	ldrb	r3, [r7, #6]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	b29b      	uxth	r3, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <max_ds3231_get_time+0x148>)
 80040ec:	801a      	strh	r2, [r3, #0]
	//printf("Moscow time:\r\n");
	//printf("%02d:%02d:%02d\r\n", Hours, Minutes, Seconds);
	//printf("%02d:%02d:%d\r\n", Date, Month, Year);
	//printf("Cuntury = %d\r\n", Cuntury);
	/*-----------------------Если включена отладка по SWO-------------------------------------*/
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000788 	.word	0x20000788
 80040fc:	20002ed7 	.word	0x20002ed7
 8004100:	20002ed8 	.word	0x20002ed8
 8004104:	20002ed9 	.word	0x20002ed9
 8004108:	20002eda 	.word	0x20002eda
 800410c:	20002edb 	.word	0x20002edb
 8004110:	20002edc 	.word	0x20002edc
 8004114:	20002edd 	.word	0x20002edd
 8004118:	20002ede 	.word	0x20002ede

0800411c <max_ds3231_get_temperature>:

/*--------------------------------Функция запроса данных о времени----------------------------*/

/*------------------------------Функция запроса данных о температуре--------------------------*/

void max_ds3231_get_temperature(void) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af02      	add	r7, sp, #8
	///Функция запроса данных о времени/
	///(См. Datasheet DS3231. Cтр.11, табл. 1).
	///Считываем регистры с 0x11 по 0x12 включительно.
	uint8_t rx_buffer[2] = { 0, };
 8004122:	2300      	movs	r3, #0
 8004124:	813b      	strh	r3, [r7, #8]
	uint8_t tx_buffer = 0x11;
 8004126:	2311      	movs	r3, #17
 8004128:	71fb      	strb	r3, [r7, #7]
	float temp_fractional_part = 0.0f;
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, Adress, &tx_buffer, 1, 10);
 8004130:	1dfa      	adds	r2, r7, #7
 8004132:	230a      	movs	r3, #10
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	2301      	movs	r3, #1
 8004138:	21d0      	movs	r1, #208	; 0xd0
 800413a:	4828      	ldr	r0, [pc, #160]	; (80041dc <max_ds3231_get_temperature+0xc0>)
 800413c:	f002 fb2e 	bl	800679c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, Adress, rx_buffer, 2, 10);
 8004140:	f107 0208 	add.w	r2, r7, #8
 8004144:	230a      	movs	r3, #10
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2302      	movs	r3, #2
 800414a:	21d0      	movs	r1, #208	; 0xd0
 800414c:	4823      	ldr	r0, [pc, #140]	; (80041dc <max_ds3231_get_temperature+0xc0>)
 800414e:	f002 fc19 	bl	8006984 <HAL_I2C_Master_Receive>

	max_ds3231_temp = 0.0f;
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <max_ds3231_get_temperature+0xc4>)
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
	temp_fractional_part = 0.0f;
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]

	if (rx_buffer[1] == 0x00) {
 8004160:	7a7b      	ldrb	r3, [r7, #9]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <max_ds3231_get_temperature+0x52>
		temp_fractional_part = 0.0f;
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e013      	b.n	8004196 <max_ds3231_get_temperature+0x7a>
	} else if (rx_buffer[1] == 0x40) {
 800416e:	7a7b      	ldrb	r3, [r7, #9]
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d103      	bne.n	800417c <max_ds3231_get_temperature+0x60>
		temp_fractional_part = 0.25f;
 8004174:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	e00c      	b.n	8004196 <max_ds3231_get_temperature+0x7a>
	} else if (rx_buffer[1] == 0x80) {
 800417c:	7a7b      	ldrb	r3, [r7, #9]
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d103      	bne.n	800418a <max_ds3231_get_temperature+0x6e>
		temp_fractional_part = 0.5f;
 8004182:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	e005      	b.n	8004196 <max_ds3231_get_temperature+0x7a>
	} else if (rx_buffer[1] == 0xC0) {
 800418a:	7a7b      	ldrb	r3, [r7, #9]
 800418c:	2bc0      	cmp	r3, #192	; 0xc0
 800418e:	d102      	bne.n	8004196 <max_ds3231_get_temperature+0x7a>
		temp_fractional_part = 0.75f;
 8004190:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8004194:	60fb      	str	r3, [r7, #12]
	}

	if (rx_buffer[0] < 0x80) {
 8004196:	7a3b      	ldrb	r3, [r7, #8]
 8004198:	b25b      	sxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	db0c      	blt.n	80041b8 <max_ds3231_get_temperature+0x9c>
		max_ds3231_temp = rx_buffer[0] + temp_fractional_part;
 800419e:	7a3b      	ldrb	r3, [r7, #8]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80041ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <max_ds3231_get_temperature+0xc4>)
 80041b2:	edc3 7a00 	vstr	s15, [r3]
		max_ds3231_temp = (rx_buffer[0] + temp_fractional_part) * (-1);
	}
	/*-----------------------Если включена отладка по SWO-------------------------------------*/
	//printf("Temperature: %.2f\r\n", max_ds3231_temp);
	/*-----------------------Если включена отладка по SWO-------------------------------------*/
}
 80041b6:	e00d      	b.n	80041d4 <max_ds3231_get_temperature+0xb8>
		max_ds3231_temp = (rx_buffer[0] + temp_fractional_part) * (-1);
 80041b8:	7a3b      	ldrb	r3, [r7, #8]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80041c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ca:	eef1 7a67 	vneg.f32	s15, s15
 80041ce:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <max_ds3231_get_temperature+0xc4>)
 80041d0:	edc3 7a00 	vstr	s15, [r3]
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000788 	.word	0x20000788
 80041e0:	20002ee0 	.word	0x20002ee0

080041e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ea:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <HAL_MspInit+0x44>)
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <HAL_MspInit+0x44>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	6193      	str	r3, [r2, #24]
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <HAL_MspInit+0x44>)
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_MspInit+0x44>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <HAL_MspInit+0x44>)
 8004208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420c:	61d3      	str	r3, [r2, #28]
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_MspInit+0x44>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800421a:	2007      	movs	r0, #7
 800421c:	f001 fe34 	bl	8005e88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000

0800422c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004234:	f107 0314 	add.w	r3, r7, #20
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800424c:	d14c      	bne.n	80042e8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800424e:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <HAL_ADC_MspInit+0xc4>)
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	4a27      	ldr	r2, [pc, #156]	; (80042f0 <HAL_ADC_MspInit+0xc4>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6153      	str	r3, [r2, #20]
 800425a:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <HAL_ADC_MspInit+0xc4>)
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004266:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <HAL_ADC_MspInit+0xc4>)
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	4a21      	ldr	r2, [pc, #132]	; (80042f0 <HAL_ADC_MspInit+0xc4>)
 800426c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004270:	6153      	str	r3, [r2, #20]
 8004272:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <HAL_ADC_MspInit+0xc4>)
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800427e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004284:	2303      	movs	r3, #3
 8004286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800428c:	f107 0314 	add.w	r3, r7, #20
 8004290:	4619      	mov	r1, r3
 8004292:	4818      	ldr	r0, [pc, #96]	; (80042f4 <HAL_ADC_MspInit+0xc8>)
 8004294:	f002 f838 	bl	8006308 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004298:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <HAL_ADC_MspInit+0xcc>)
 800429a:	4a18      	ldr	r2, [pc, #96]	; (80042fc <HAL_ADC_MspInit+0xd0>)
 800429c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800429e:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <HAL_ADC_MspInit+0xcc>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80042a4:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <HAL_ADC_MspInit+0xcc>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <HAL_ADC_MspInit+0xcc>)
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_ADC_MspInit+0xcc>)
 80042b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <HAL_ADC_MspInit+0xcc>)
 80042ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80042c0:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <HAL_ADC_MspInit+0xcc>)
 80042c2:	2220      	movs	r2, #32
 80042c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80042c6:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <HAL_ADC_MspInit+0xcc>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80042cc:	480a      	ldr	r0, [pc, #40]	; (80042f8 <HAL_ADC_MspInit+0xcc>)
 80042ce:	f001 fe1c 	bl	8005f0a <HAL_DMA_Init>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80042d8:	f7ff fe74 	bl	8003fc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a06      	ldr	r2, [pc, #24]	; (80042f8 <HAL_ADC_MspInit+0xcc>)
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
 80042e2:	4a05      	ldr	r2, [pc, #20]	; (80042f8 <HAL_ADC_MspInit+0xcc>)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042e8:	bf00      	nop
 80042ea:	3728      	adds	r7, #40	; 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40021000 	.word	0x40021000
 80042f4:	48000400 	.word	0x48000400
 80042f8:	200006f8 	.word	0x200006f8
 80042fc:	40020008 	.word	0x40020008

08004300 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08c      	sub	sp, #48	; 0x30
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004308:	f107 031c 	add.w	r3, r7, #28
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	609a      	str	r2, [r3, #8]
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a46      	ldr	r2, [pc, #280]	; (8004438 <HAL_I2C_MspInit+0x138>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d146      	bne.n	80043b0 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004322:	4b46      	ldr	r3, [pc, #280]	; (800443c <HAL_I2C_MspInit+0x13c>)
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	4a45      	ldr	r2, [pc, #276]	; (800443c <HAL_I2C_MspInit+0x13c>)
 8004328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432c:	6153      	str	r3, [r2, #20]
 800432e:	4b43      	ldr	r3, [pc, #268]	; (800443c <HAL_I2C_MspInit+0x13c>)
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800433a:	4b40      	ldr	r3, [pc, #256]	; (800443c <HAL_I2C_MspInit+0x13c>)
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	4a3f      	ldr	r2, [pc, #252]	; (800443c <HAL_I2C_MspInit+0x13c>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004344:	6153      	str	r3, [r2, #20]
 8004346:	4b3d      	ldr	r3, [pc, #244]	; (800443c <HAL_I2C_MspInit+0x13c>)
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004358:	2312      	movs	r3, #18
 800435a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004360:	2303      	movs	r3, #3
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004364:	2304      	movs	r3, #4
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004368:	f107 031c 	add.w	r3, r7, #28
 800436c:	4619      	mov	r1, r3
 800436e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004372:	f001 ffc9 	bl	8006308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800437a:	2312      	movs	r3, #18
 800437c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437e:	2300      	movs	r3, #0
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004382:	2303      	movs	r3, #3
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004386:	2304      	movs	r3, #4
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800438a:	f107 031c 	add.w	r3, r7, #28
 800438e:	4619      	mov	r1, r3
 8004390:	482b      	ldr	r0, [pc, #172]	; (8004440 <HAL_I2C_MspInit+0x140>)
 8004392:	f001 ffb9 	bl	8006308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004396:	4b29      	ldr	r3, [pc, #164]	; (800443c <HAL_I2C_MspInit+0x13c>)
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	4a28      	ldr	r2, [pc, #160]	; (800443c <HAL_I2C_MspInit+0x13c>)
 800439c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043a0:	61d3      	str	r3, [r2, #28]
 80043a2:	4b26      	ldr	r3, [pc, #152]	; (800443c <HAL_I2C_MspInit+0x13c>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80043ae:	e03e      	b.n	800442e <HAL_I2C_MspInit+0x12e>
  else if(hi2c->Instance==I2C2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a23      	ldr	r2, [pc, #140]	; (8004444 <HAL_I2C_MspInit+0x144>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d139      	bne.n	800442e <HAL_I2C_MspInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ba:	4b20      	ldr	r3, [pc, #128]	; (800443c <HAL_I2C_MspInit+0x13c>)
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4a1f      	ldr	r2, [pc, #124]	; (800443c <HAL_I2C_MspInit+0x13c>)
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c4:	6153      	str	r3, [r2, #20]
 80043c6:	4b1d      	ldr	r3, [pc, #116]	; (800443c <HAL_I2C_MspInit+0x13c>)
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043d8:	2312      	movs	r3, #18
 80043da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043e0:	2303      	movs	r3, #3
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80043e4:	2304      	movs	r3, #4
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e8:	f107 031c 	add.w	r3, r7, #28
 80043ec:	4619      	mov	r1, r3
 80043ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043f2:	f001 ff89 	bl	8006308 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80043f6:	4b11      	ldr	r3, [pc, #68]	; (800443c <HAL_I2C_MspInit+0x13c>)
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	4a10      	ldr	r2, [pc, #64]	; (800443c <HAL_I2C_MspInit+0x13c>)
 80043fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004400:	61d3      	str	r3, [r2, #28]
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_I2C_MspInit+0x13c>)
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800440e:	2200      	movs	r2, #0
 8004410:	2100      	movs	r1, #0
 8004412:	2021      	movs	r0, #33	; 0x21
 8004414:	f001 fd43 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004418:	2021      	movs	r0, #33	; 0x21
 800441a:	f001 fd5c 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800441e:	2200      	movs	r2, #0
 8004420:	2100      	movs	r1, #0
 8004422:	2022      	movs	r0, #34	; 0x22
 8004424:	f001 fd3b 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004428:	2022      	movs	r0, #34	; 0x22
 800442a:	f001 fd54 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
}
 800442e:	bf00      	nop
 8004430:	3730      	adds	r7, #48	; 0x30
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40005400 	.word	0x40005400
 800443c:	40021000 	.word	0x40021000
 8004440:	48000400 	.word	0x48000400
 8004444:	40005800 	.word	0x40005800

08004448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08c      	sub	sp, #48	; 0x30
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004450:	f107 031c 	add.w	r3, r7, #28
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a45      	ldr	r2, [pc, #276]	; (800457c <HAL_SPI_MspInit+0x134>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d14d      	bne.n	8004506 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800446a:	4b45      	ldr	r3, [pc, #276]	; (8004580 <HAL_SPI_MspInit+0x138>)
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	4a44      	ldr	r2, [pc, #272]	; (8004580 <HAL_SPI_MspInit+0x138>)
 8004470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004474:	6193      	str	r3, [r2, #24]
 8004476:	4b42      	ldr	r3, [pc, #264]	; (8004580 <HAL_SPI_MspInit+0x138>)
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800447e:	61bb      	str	r3, [r7, #24]
 8004480:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004482:	4b3f      	ldr	r3, [pc, #252]	; (8004580 <HAL_SPI_MspInit+0x138>)
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	4a3e      	ldr	r2, [pc, #248]	; (8004580 <HAL_SPI_MspInit+0x138>)
 8004488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448c:	6153      	str	r3, [r2, #20]
 800448e:	4b3c      	ldr	r3, [pc, #240]	; (8004580 <HAL_SPI_MspInit+0x138>)
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <HAL_SPI_MspInit+0x138>)
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	4a38      	ldr	r2, [pc, #224]	; (8004580 <HAL_SPI_MspInit+0x138>)
 80044a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a4:	6153      	str	r3, [r2, #20]
 80044a6:	4b36      	ldr	r3, [pc, #216]	; (8004580 <HAL_SPI_MspInit+0x138>)
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80044b2:	2380      	movs	r3, #128	; 0x80
 80044b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b6:	2302      	movs	r3, #2
 80044b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044be:	2303      	movs	r3, #3
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044c2:	2305      	movs	r3, #5
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c6:	f107 031c 	add.w	r3, r7, #28
 80044ca:	4619      	mov	r1, r3
 80044cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044d0:	f001 ff1a 	bl	8006308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044d4:	2308      	movs	r3, #8
 80044d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d8:	2302      	movs	r3, #2
 80044da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044e0:	2303      	movs	r3, #3
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044e4:	2305      	movs	r3, #5
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044e8:	f107 031c 	add.w	r3, r7, #28
 80044ec:	4619      	mov	r1, r3
 80044ee:	4825      	ldr	r0, [pc, #148]	; (8004584 <HAL_SPI_MspInit+0x13c>)
 80044f0:	f001 ff0a 	bl	8006308 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80044f4:	2200      	movs	r2, #0
 80044f6:	2100      	movs	r1, #0
 80044f8:	2023      	movs	r0, #35	; 0x23
 80044fa:	f001 fcd0 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80044fe:	2023      	movs	r0, #35	; 0x23
 8004500:	f001 fce9 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004504:	e035      	b.n	8004572 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <HAL_SPI_MspInit+0x140>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d130      	bne.n	8004572 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004510:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <HAL_SPI_MspInit+0x138>)
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	4a1a      	ldr	r2, [pc, #104]	; (8004580 <HAL_SPI_MspInit+0x138>)
 8004516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800451a:	61d3      	str	r3, [r2, #28]
 800451c:	4b18      	ldr	r3, [pc, #96]	; (8004580 <HAL_SPI_MspInit+0x138>)
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004528:	4b15      	ldr	r3, [pc, #84]	; (8004580 <HAL_SPI_MspInit+0x138>)
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	4a14      	ldr	r2, [pc, #80]	; (8004580 <HAL_SPI_MspInit+0x138>)
 800452e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004532:	6153      	str	r3, [r2, #20]
 8004534:	4b12      	ldr	r3, [pc, #72]	; (8004580 <HAL_SPI_MspInit+0x138>)
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004540:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004546:	2302      	movs	r3, #2
 8004548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454a:	2300      	movs	r3, #0
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800454e:	2303      	movs	r3, #3
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004552:	2305      	movs	r3, #5
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004556:	f107 031c 	add.w	r3, r7, #28
 800455a:	4619      	mov	r1, r3
 800455c:	4809      	ldr	r0, [pc, #36]	; (8004584 <HAL_SPI_MspInit+0x13c>)
 800455e:	f001 fed3 	bl	8006308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004562:	2200      	movs	r2, #0
 8004564:	2100      	movs	r1, #0
 8004566:	2024      	movs	r0, #36	; 0x24
 8004568:	f001 fc99 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800456c:	2024      	movs	r0, #36	; 0x24
 800456e:	f001 fcb2 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
}
 8004572:	bf00      	nop
 8004574:	3730      	adds	r7, #48	; 0x30
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40013000 	.word	0x40013000
 8004580:	40021000 	.word	0x40021000
 8004584:	48000400 	.word	0x48000400
 8004588:	40003800 	.word	0x40003800

0800458c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a23      	ldr	r2, [pc, #140]	; (8004628 <HAL_TIM_Base_MspInit+0x9c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d10c      	bne.n	80045b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800459e:	4b23      	ldr	r3, [pc, #140]	; (800462c <HAL_TIM_Base_MspInit+0xa0>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4a22      	ldr	r2, [pc, #136]	; (800462c <HAL_TIM_Base_MspInit+0xa0>)
 80045a4:	f043 0302 	orr.w	r3, r3, #2
 80045a8:	61d3      	str	r3, [r2, #28]
 80045aa:	4b20      	ldr	r3, [pc, #128]	; (800462c <HAL_TIM_Base_MspInit+0xa0>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80045b6:	e032      	b.n	800461e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <HAL_TIM_Base_MspInit+0xa4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d114      	bne.n	80045ec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80045c2:	4b1a      	ldr	r3, [pc, #104]	; (800462c <HAL_TIM_Base_MspInit+0xa0>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4a19      	ldr	r2, [pc, #100]	; (800462c <HAL_TIM_Base_MspInit+0xa0>)
 80045c8:	f043 0310 	orr.w	r3, r3, #16
 80045cc:	61d3      	str	r3, [r2, #28]
 80045ce:	4b17      	ldr	r3, [pc, #92]	; (800462c <HAL_TIM_Base_MspInit+0xa0>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80045da:	2200      	movs	r2, #0
 80045dc:	2100      	movs	r1, #0
 80045de:	2036      	movs	r0, #54	; 0x36
 80045e0:	f001 fc5d 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80045e4:	2036      	movs	r0, #54	; 0x36
 80045e6:	f001 fc76 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
}
 80045ea:	e018      	b.n	800461e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a10      	ldr	r2, [pc, #64]	; (8004634 <HAL_TIM_Base_MspInit+0xa8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d113      	bne.n	800461e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <HAL_TIM_Base_MspInit+0xa0>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	4a0c      	ldr	r2, [pc, #48]	; (800462c <HAL_TIM_Base_MspInit+0xa0>)
 80045fc:	f043 0320 	orr.w	r3, r3, #32
 8004600:	61d3      	str	r3, [r2, #28]
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <HAL_TIM_Base_MspInit+0xa0>)
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800460e:	2200      	movs	r2, #0
 8004610:	2100      	movs	r1, #0
 8004612:	2037      	movs	r0, #55	; 0x37
 8004614:	f001 fc43 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004618:	2037      	movs	r0, #55	; 0x37
 800461a:	f001 fc5c 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40000400 	.word	0x40000400
 800462c:	40021000 	.word	0x40021000
 8004630:	40001000 	.word	0x40001000
 8004634:	40001400 	.word	0x40001400

08004638 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a11      	ldr	r2, [pc, #68]	; (800469c <HAL_TIM_MspPostInit+0x64>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d11b      	bne.n	8004692 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <HAL_TIM_MspPostInit+0x68>)
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	4a10      	ldr	r2, [pc, #64]	; (80046a0 <HAL_TIM_MspPostInit+0x68>)
 8004660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004664:	6153      	str	r3, [r2, #20]
 8004666:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <HAL_TIM_MspPostInit+0x68>)
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004672:	2330      	movs	r3, #48	; 0x30
 8004674:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004676:	2302      	movs	r3, #2
 8004678:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467e:	2300      	movs	r3, #0
 8004680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004682:	2302      	movs	r3, #2
 8004684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004686:	f107 030c 	add.w	r3, r7, #12
 800468a:	4619      	mov	r1, r3
 800468c:	4805      	ldr	r0, [pc, #20]	; (80046a4 <HAL_TIM_MspPostInit+0x6c>)
 800468e:	f001 fe3b 	bl	8006308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004692:	bf00      	nop
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40000400 	.word	0x40000400
 80046a0:	40021000 	.word	0x40021000
 80046a4:	48000400 	.word	0x48000400

080046a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	f107 0314 	add.w	r3, r7, #20
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a17      	ldr	r2, [pc, #92]	; (8004724 <HAL_UART_MspInit+0x7c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d128      	bne.n	800471c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046ca:	4b17      	ldr	r3, [pc, #92]	; (8004728 <HAL_UART_MspInit+0x80>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4a16      	ldr	r2, [pc, #88]	; (8004728 <HAL_UART_MspInit+0x80>)
 80046d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d4:	61d3      	str	r3, [r2, #28]
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <HAL_UART_MspInit+0x80>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e2:	4b11      	ldr	r3, [pc, #68]	; (8004728 <HAL_UART_MspInit+0x80>)
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4a10      	ldr	r2, [pc, #64]	; (8004728 <HAL_UART_MspInit+0x80>)
 80046e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ec:	6153      	str	r3, [r2, #20]
 80046ee:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <HAL_UART_MspInit+0x80>)
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80046fa:	230c      	movs	r3, #12
 80046fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fe:	2302      	movs	r3, #2
 8004700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004706:	2300      	movs	r3, #0
 8004708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800470a:	2307      	movs	r3, #7
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470e:	f107 0314 	add.w	r3, r7, #20
 8004712:	4619      	mov	r1, r3
 8004714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004718:	f001 fdf6 	bl	8006308 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800471c:	bf00      	nop
 800471e:	3728      	adds	r7, #40	; 0x28
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40004400 	.word	0x40004400
 8004728:	40021000 	.word	0x40021000

0800472c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <SDTimer_Handler+0x40>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d006      	beq.n	8004748 <SDTimer_Handler+0x1c>
    Timer1--;
 800473a:	4b0c      	ldr	r3, [pc, #48]	; (800476c <SDTimer_Handler+0x40>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b2da      	uxtb	r2, r3
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <SDTimer_Handler+0x40>)
 8004746:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <SDTimer_Handler+0x44>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d006      	beq.n	8004760 <SDTimer_Handler+0x34>
    Timer2--;
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <SDTimer_Handler+0x44>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b2da      	uxtb	r2, r3
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <SDTimer_Handler+0x44>)
 800475e:	701a      	strb	r2, [r3, #0]
}
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20002fee 	.word	0x20002fee
 8004770:	20002fef 	.word	0x20002fef

08004774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004778:	e7fe      	b.n	8004778 <NMI_Handler+0x4>

0800477a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800477e:	e7fe      	b.n	800477e <HardFault_Handler+0x4>

08004780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004784:	e7fe      	b.n	8004784 <MemManage_Handler+0x4>

08004786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800478a:	e7fe      	b.n	800478a <BusFault_Handler+0x4>

0800478c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004790:	e7fe      	b.n	8004790 <UsageFault_Handler+0x4>

08004792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004792:	b480      	push	{r7}
 8004794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047b2:	bf00      	nop
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <SysTick_Handler+0x30>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	3301      	adds	r3, #1
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	4b08      	ldr	r3, [pc, #32]	; (80047ec <SysTick_Handler+0x30>)
 80047cc:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80047ce:	4b07      	ldr	r3, [pc, #28]	; (80047ec <SysTick_Handler+0x30>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b09      	cmp	r3, #9
 80047d6:	d904      	bls.n	80047e2 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <SysTick_Handler+0x30>)
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80047de:	f7ff ffa5 	bl	800472c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047e2:	f000 f9fb 	bl	8004bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20002fed 	.word	0x20002fed

080047f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80047f4:	4814      	ldr	r0, [pc, #80]	; (8004848 <DMA1_Channel1_IRQHandler+0x58>)
 80047f6:	f001 fc6c 	bl	80060d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  Counter_DMA_IT++;
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <DMA1_Channel1_IRQHandler+0x5c>)
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	3301      	adds	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <DMA1_Channel1_IRQHandler+0x5c>)
 8004804:	801a      	strh	r2, [r3, #0]
  if(Counter_DMA_IT == 1200){
 8004806:	4b11      	ldr	r3, [pc, #68]	; (800484c <DMA1_Channel1_IRQHandler+0x5c>)
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800480e:	d118      	bne.n	8004842 <DMA1_Channel1_IRQHandler+0x52>
	  Counter_DMA_IT = 0;
 8004810:	4b0e      	ldr	r3, [pc, #56]	; (800484c <DMA1_Channel1_IRQHandler+0x5c>)
 8004812:	2200      	movs	r2, #0
 8004814:	801a      	strh	r2, [r3, #0]
	  ADC_SMA_Data_1 = SMA_FILTER_Get_Value(SMA_Filter_Buffer_1, &ADC_RAW_Data_1);
 8004816:	490e      	ldr	r1, [pc, #56]	; (8004850 <DMA1_Channel1_IRQHandler+0x60>)
 8004818:	480e      	ldr	r0, [pc, #56]	; (8004854 <DMA1_Channel1_IRQHandler+0x64>)
 800481a:	f7fd f823 	bl	8001864 <SMA_FILTER_Get_Value>
 800481e:	4603      	mov	r3, r0
 8004820:	461a      	mov	r2, r3
 8004822:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <DMA1_Channel1_IRQHandler+0x68>)
 8004824:	801a      	strh	r2, [r3, #0]
	  ADC_SMA_Data_2 = SMA_FILTER_Get_Value(SMA_Filter_Buffer_2, &v_bus);
 8004826:	490d      	ldr	r1, [pc, #52]	; (800485c <DMA1_Channel1_IRQHandler+0x6c>)
 8004828:	480d      	ldr	r0, [pc, #52]	; (8004860 <DMA1_Channel1_IRQHandler+0x70>)
 800482a:	f7fd f81b 	bl	8001864 <SMA_FILTER_Get_Value>
 800482e:	4603      	mov	r3, r0
 8004830:	461a      	mov	r2, r3
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <DMA1_Channel1_IRQHandler+0x74>)
 8004834:	801a      	strh	r2, [r3, #0]
	  adc_flag = 1;
 8004836:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <DMA1_Channel1_IRQHandler+0x78>)
 8004838:	2201      	movs	r2, #1
 800483a:	701a      	strb	r2, [r3, #0]
	  ina219_flag = 1;
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <DMA1_Channel1_IRQHandler+0x7c>)
 800483e:	2201      	movs	r2, #1
 8004840:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004842:	bf00      	nop
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	200006f8 	.word	0x200006f8
 800484c:	20002fea 	.word	0x20002fea
 8004850:	20002fe6 	.word	0x20002fe6
 8004854:	20002ee4 	.word	0x20002ee4
 8004858:	20002fe4 	.word	0x20002fe4
 800485c:	20002e82 	.word	0x20002e82
 8004860:	20002f64 	.word	0x20002f64
 8004864:	20002fe8 	.word	0x20002fe8
 8004868:	20002fec 	.word	0x20002fec
 800486c:	20002e80 	.word	0x20002e80

08004870 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004874:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004878:	f001 fee8 	bl	800664c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800487c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004880:	f001 fee4 	bl	800664c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004884:	bf00      	nop
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800488c:	4802      	ldr	r0, [pc, #8]	; (8004898 <I2C2_EV_IRQHandler+0x10>)
 800488e:	f002 fca4 	bl	80071da <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000788 	.word	0x20000788

0800489c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80048a0:	4802      	ldr	r0, [pc, #8]	; (80048ac <I2C2_ER_IRQHandler+0x10>)
 80048a2:	f002 fcb4 	bl	800720e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000788 	.word	0x20000788

080048b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80048b4:	4803      	ldr	r0, [pc, #12]	; (80048c4 <SPI1_IRQHandler+0x14>)
 80048b6:	f005 fe09 	bl	800a4cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */
  ERROR_GMG12864 = 1;
 80048ba:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <SPI1_IRQHandler+0x18>)
 80048bc:	2201      	movs	r2, #1
 80048be:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SPI1_IRQn 1 */
}
 80048c0:	bf00      	nop
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	200007d4 	.word	0x200007d4
 80048c8:	20000a10 	.word	0x20000a10

080048cc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80048d0:	4803      	ldr	r0, [pc, #12]	; (80048e0 <SPI2_IRQHandler+0x14>)
 80048d2:	f005 fdfb 	bl	800a4cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */
  ERROR_SD_CARD = 1;
 80048d6:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <SPI2_IRQHandler+0x18>)
 80048d8:	2201      	movs	r2, #1
 80048da:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SPI2_IRQn 1 */
}
 80048dc:	bf00      	nop
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000838 	.word	0x20000838
 80048e4:	20000a11 	.word	0x20000a11

080048e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(user_button_Pin);
 80048ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80048f0:	f001 feac 	bl	800664c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048f4:	bf00      	nop
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048fc:	4806      	ldr	r0, [pc, #24]	; (8004918 <TIM6_DAC_IRQHandler+0x20>)
 80048fe:	f006 fadb 	bl	800aeb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  HAL_ADC_Start_DMA(&hadc1, &ADC_RAW_Data_1, 1);
 8004902:	2201      	movs	r2, #1
 8004904:	4905      	ldr	r1, [pc, #20]	; (800491c <TIM6_DAC_IRQHandler+0x24>)
 8004906:	4806      	ldr	r0, [pc, #24]	; (8004920 <TIM6_DAC_IRQHandler+0x28>)
 8004908:	f000 fbc4 	bl	8005094 <HAL_ADC_Start_DMA>
  ina219_flag = 1;
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <TIM6_DAC_IRQHandler+0x2c>)
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004912:	bf00      	nop
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	200008e8 	.word	0x200008e8
 800491c:	20002fe6 	.word	0x20002fe6
 8004920:	200006a8 	.word	0x200006a8
 8004924:	20002e80 	.word	0x20002e80

08004928 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800492c:	4805      	ldr	r0, [pc, #20]	; (8004944 <TIM7_IRQHandler+0x1c>)
 800492e:	f006 fac3 	bl	800aeb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  tim7_counter += 1;
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <TIM7_IRQHandler+0x20>)
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	3301      	adds	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	4b02      	ldr	r3, [pc, #8]	; (8004948 <TIM7_IRQHandler+0x20>)
 800493e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8004940:	bf00      	nop
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000934 	.word	0x20000934
 8004948:	20002eba 	.word	0x20002eba

0800494c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
	return 1;
 8004950:	2301      	movs	r3, #1
}
 8004952:	4618      	mov	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <_kill>:

int _kill(int pid, int sig)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004966:	f00b fe5f 	bl	8010628 <__errno>
 800496a:	4603      	mov	r3, r0
 800496c:	2216      	movs	r2, #22
 800496e:	601a      	str	r2, [r3, #0]
	return -1;
 8004970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <_exit>:

void _exit (int status)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004984:	f04f 31ff 	mov.w	r1, #4294967295
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ffe7 	bl	800495c <_kill>
	while (1) {}		/* Make sure we hang here */
 800498e:	e7fe      	b.n	800498e <_exit+0x12>

08004990 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	e00a      	b.n	80049b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80049a2:	f3af 8000 	nop.w
 80049a6:	4601      	mov	r1, r0
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	60ba      	str	r2, [r7, #8]
 80049ae:	b2ca      	uxtb	r2, r1
 80049b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	3301      	adds	r3, #1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	dbf0      	blt.n	80049a2 <_read+0x12>
	}

return len;
 80049c0:	687b      	ldr	r3, [r7, #4]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	e009      	b.n	80049f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	60ba      	str	r2, [r7, #8]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	3301      	adds	r3, #1
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	dbf1      	blt.n	80049dc <_write+0x12>
	}
	return len;
 80049f8:	687b      	ldr	r3, [r7, #4]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <_close>:

int _close(int file)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
	return -1;
 8004a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a2a:	605a      	str	r2, [r3, #4]
	return 0;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <_isatty>:

int _isatty(int file)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
	return 1;
 8004a42:	2301      	movs	r3, #1
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
	return 0;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a74:	4a14      	ldr	r2, [pc, #80]	; (8004ac8 <_sbrk+0x5c>)
 8004a76:	4b15      	ldr	r3, [pc, #84]	; (8004acc <_sbrk+0x60>)
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a80:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <_sbrk+0x64>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <_sbrk+0x64>)
 8004a8a:	4a12      	ldr	r2, [pc, #72]	; (8004ad4 <_sbrk+0x68>)
 8004a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <_sbrk+0x64>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4413      	add	r3, r2
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d207      	bcs.n	8004aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a9c:	f00b fdc4 	bl	8010628 <__errno>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	220c      	movs	r2, #12
 8004aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aaa:	e009      	b.n	8004ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004aac:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <_sbrk+0x64>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ab2:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <_sbrk+0x64>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	4a05      	ldr	r2, [pc, #20]	; (8004ad0 <_sbrk+0x64>)
 8004abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004abe:	68fb      	ldr	r3, [r7, #12]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20010000 	.word	0x20010000
 8004acc:	00000400 	.word	0x00000400
 8004ad0:	20002ff0 	.word	0x20002ff0
 8004ad4:	20003240 	.word	0x20003240

08004ad8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <SystemInit+0x20>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <SystemInit+0x20>)
 8004ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b00:	480d      	ldr	r0, [pc, #52]	; (8004b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b02:	490e      	ldr	r1, [pc, #56]	; (8004b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b04:	4a0e      	ldr	r2, [pc, #56]	; (8004b40 <LoopForever+0xe>)
  movs r3, #0
 8004b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b08:	e002      	b.n	8004b10 <LoopCopyDataInit>

08004b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b0e:	3304      	adds	r3, #4

08004b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b14:	d3f9      	bcc.n	8004b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b16:	4a0b      	ldr	r2, [pc, #44]	; (8004b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b18:	4c0b      	ldr	r4, [pc, #44]	; (8004b48 <LoopForever+0x16>)
  movs r3, #0
 8004b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b1c:	e001      	b.n	8004b22 <LoopFillZerobss>

08004b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b20:	3204      	adds	r2, #4

08004b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b24:	d3fb      	bcc.n	8004b1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b26:	f7ff ffd7 	bl	8004ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b2a:	f00b fd83 	bl	8010634 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b2e:	f7fd fbad 	bl	800228c <main>

08004b32 <LoopForever>:

LoopForever:
    b LoopForever
 8004b32:	e7fe      	b.n	8004b32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b3c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8004b40:	08014794 	.word	0x08014794
  ldr r2, =_sbss
 8004b44:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8004b48:	2000323c 	.word	0x2000323c

08004b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b4c:	e7fe      	b.n	8004b4c <ADC1_2_IRQHandler>
	...

08004b50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b54:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <HAL_Init+0x28>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a07      	ldr	r2, [pc, #28]	; (8004b78 <HAL_Init+0x28>)
 8004b5a:	f043 0310 	orr.w	r3, r3, #16
 8004b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b60:	2003      	movs	r0, #3
 8004b62:	f001 f991 	bl	8005e88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b66:	2000      	movs	r0, #0
 8004b68:	f000 f808 	bl	8004b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b6c:	f7ff fb3a 	bl	80041e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40022000 	.word	0x40022000

08004b7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b84:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <HAL_InitTick+0x54>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <HAL_InitTick+0x58>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f001 f9a9 	bl	8005ef2 <HAL_SYSTICK_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e00e      	b.n	8004bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b0f      	cmp	r3, #15
 8004bae:	d80a      	bhi.n	8004bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb8:	f001 f971 	bl	8005e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bbc:	4a06      	ldr	r2, [pc, #24]	; (8004bd8 <HAL_InitTick+0x5c>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e000      	b.n	8004bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	2000000c 	.word	0x2000000c
 8004bd4:	20000014 	.word	0x20000014
 8004bd8:	20000010 	.word	0x20000010

08004bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004be0:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_IncTick+0x20>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_IncTick+0x24>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4413      	add	r3, r2
 8004bec:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <HAL_IncTick+0x24>)
 8004bee:	6013      	str	r3, [r2, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000014 	.word	0x20000014
 8004c00:	20002ff4 	.word	0x20002ff4

08004c04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return uwTick;  
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <HAL_GetTick+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20002ff4 	.word	0x20002ff4

08004c1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c24:	f7ff ffee 	bl	8004c04 <HAL_GetTick>
 8004c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d005      	beq.n	8004c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_Delay+0x44>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004c42:	bf00      	nop
 8004c44:	f7ff ffde 	bl	8004c04 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d8f7      	bhi.n	8004c44 <HAL_Delay+0x28>
  {
  }
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000014 	.word	0x20000014

08004c64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b09a      	sub	sp, #104	; 0x68
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e1e3      	b.n	8005088 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d176      	bne.n	8004dc0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d152      	bne.n	8004d80 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff fa99 	bl	800422c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d13b      	bne.n	8004d80 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 ff87 	bl	8005c1c <ADC_Disable>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d12f      	bne.n	8004d80 <HAL_ADC_Init+0xe0>
 8004d20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d12b      	bne.n	8004d80 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d30:	f023 0302 	bic.w	r3, r3, #2
 8004d34:	f043 0202 	orr.w	r2, r3, #2
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d4a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d5a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d5c:	4b92      	ldr	r3, [pc, #584]	; (8004fa8 <HAL_ADC_Init+0x308>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a92      	ldr	r2, [pc, #584]	; (8004fac <HAL_ADC_Init+0x30c>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	0c9a      	lsrs	r2, r3, #18
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d72:	e002      	b.n	8004d7a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f9      	bne.n	8004d74 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9c:	d110      	bne.n	8004dc0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f023 0312 	bic.w	r3, r3, #18
 8004da6:	f043 0210 	orr.w	r2, r3, #16
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	f043 0201 	orr.w	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f040 8150 	bne.w	800506e <HAL_ADC_Init+0x3ce>
 8004dce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f040 814b 	bne.w	800506e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f040 8143 	bne.w	800506e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004df0:	f043 0202 	orr.w	r2, r3, #2
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e00:	d004      	beq.n	8004e0c <HAL_ADC_Init+0x16c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a6a      	ldr	r2, [pc, #424]	; (8004fb0 <HAL_ADC_Init+0x310>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d101      	bne.n	8004e10 <HAL_ADC_Init+0x170>
 8004e0c:	4b69      	ldr	r3, [pc, #420]	; (8004fb4 <HAL_ADC_Init+0x314>)
 8004e0e:	e000      	b.n	8004e12 <HAL_ADC_Init+0x172>
 8004e10:	4b69      	ldr	r3, [pc, #420]	; (8004fb8 <HAL_ADC_Init+0x318>)
 8004e12:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e1c:	d102      	bne.n	8004e24 <HAL_ADC_Init+0x184>
 8004e1e:	4b64      	ldr	r3, [pc, #400]	; (8004fb0 <HAL_ADC_Init+0x310>)
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	e01a      	b.n	8004e5a <HAL_ADC_Init+0x1ba>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a61      	ldr	r2, [pc, #388]	; (8004fb0 <HAL_ADC_Init+0x310>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d103      	bne.n	8004e36 <HAL_ADC_Init+0x196>
 8004e2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e011      	b.n	8004e5a <HAL_ADC_Init+0x1ba>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a60      	ldr	r2, [pc, #384]	; (8004fbc <HAL_ADC_Init+0x31c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d102      	bne.n	8004e46 <HAL_ADC_Init+0x1a6>
 8004e40:	4b5f      	ldr	r3, [pc, #380]	; (8004fc0 <HAL_ADC_Init+0x320>)
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e009      	b.n	8004e5a <HAL_ADC_Init+0x1ba>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a5d      	ldr	r2, [pc, #372]	; (8004fc0 <HAL_ADC_Init+0x320>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d102      	bne.n	8004e56 <HAL_ADC_Init+0x1b6>
 8004e50:	4b5a      	ldr	r3, [pc, #360]	; (8004fbc <HAL_ADC_Init+0x31c>)
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e001      	b.n	8004e5a <HAL_ADC_Init+0x1ba>
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d108      	bne.n	8004e7a <HAL_ADC_Init+0x1da>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_ADC_Init+0x1da>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <HAL_ADC_Init+0x1dc>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11c      	bne.n	8004eba <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004e80:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d010      	beq.n	8004ea8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d107      	bne.n	8004ea2 <HAL_ADC_Init+0x202>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_ADC_Init+0x202>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <HAL_ADC_Init+0x204>
 8004ea2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d108      	bne.n	8004eba <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	7e5b      	ldrb	r3, [r3, #25]
 8004ebe:	035b      	lsls	r3, r3, #13
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ec4:	2a01      	cmp	r2, #1
 8004ec6:	d002      	beq.n	8004ece <HAL_ADC_Init+0x22e>
 8004ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ecc:	e000      	b.n	8004ed0 <HAL_ADC_Init+0x230>
 8004ece:	2200      	movs	r2, #0
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d11b      	bne.n	8004f26 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	7e5b      	ldrb	r3, [r3, #25]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	3b01      	subs	r3, #1
 8004efc:	045a      	lsls	r2, r3, #17
 8004efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f06:	663b      	str	r3, [r7, #96]	; 0x60
 8004f08:	e00d      	b.n	8004f26 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f12:	f043 0220 	orr.w	r2, r3, #32
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	f043 0201 	orr.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d054      	beq.n	8004fd8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a22      	ldr	r2, [pc, #136]	; (8004fbc <HAL_ADC_Init+0x31c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_ADC_Init+0x2a2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a20      	ldr	r2, [pc, #128]	; (8004fc0 <HAL_ADC_Init+0x320>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d140      	bne.n	8004fc4 <HAL_ADC_Init+0x324>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f46:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004f4a:	d02a      	beq.n	8004fa2 <HAL_ADC_Init+0x302>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f54:	d022      	beq.n	8004f9c <HAL_ADC_Init+0x2fc>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004f5e:	d01a      	beq.n	8004f96 <HAL_ADC_Init+0x2f6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8004f68:	d012      	beq.n	8004f90 <HAL_ADC_Init+0x2f0>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8004f72:	d00a      	beq.n	8004f8a <HAL_ADC_Init+0x2ea>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8004f7c:	d002      	beq.n	8004f84 <HAL_ADC_Init+0x2e4>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	e023      	b.n	8004fcc <HAL_ADC_Init+0x32c>
 8004f84:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004f88:	e020      	b.n	8004fcc <HAL_ADC_Init+0x32c>
 8004f8a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004f8e:	e01d      	b.n	8004fcc <HAL_ADC_Init+0x32c>
 8004f90:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004f94:	e01a      	b.n	8004fcc <HAL_ADC_Init+0x32c>
 8004f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f9a:	e017      	b.n	8004fcc <HAL_ADC_Init+0x32c>
 8004f9c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004fa0:	e014      	b.n	8004fcc <HAL_ADC_Init+0x32c>
 8004fa2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004fa6:	e011      	b.n	8004fcc <HAL_ADC_Init+0x32c>
 8004fa8:	2000000c 	.word	0x2000000c
 8004fac:	431bde83 	.word	0x431bde83
 8004fb0:	50000100 	.word	0x50000100
 8004fb4:	50000300 	.word	0x50000300
 8004fb8:	50000700 	.word	0x50000700
 8004fbc:	50000400 	.word	0x50000400
 8004fc0:	50000500 	.word	0x50000500
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d114      	bne.n	8005010 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff4:	f023 0302 	bic.w	r3, r3, #2
 8004ff8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	7e1b      	ldrb	r3, [r3, #24]
 8004ffe:	039a      	lsls	r2, r3, #14
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4313      	orrs	r3, r2
 800500a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800500c:	4313      	orrs	r3, r2
 800500e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <HAL_ADC_Init+0x3f0>)
 8005018:	4013      	ands	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005020:	430b      	orrs	r3, r1
 8005022:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10c      	bne.n	8005046 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	f023 010f 	bic.w	r1, r3, #15
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	1e5a      	subs	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
 8005044:	e007      	b.n	8005056 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 020f 	bic.w	r2, r2, #15
 8005054:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	f023 0303 	bic.w	r3, r3, #3
 8005064:	f043 0201 	orr.w	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	641a      	str	r2, [r3, #64]	; 0x40
 800506c:	e00a      	b.n	8005084 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f023 0312 	bic.w	r3, r3, #18
 8005076:	f043 0210 	orr.w	r2, r3, #16
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800507e:	2301      	movs	r3, #1
 8005080:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005084:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005088:	4618      	mov	r0, r3
 800508a:	3768      	adds	r7, #104	; 0x68
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	fff0c007 	.word	0xfff0c007

08005094 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f040 80f7 	bne.w	80052a2 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_ADC_Start_DMA+0x2e>
 80050be:	2302      	movs	r3, #2
 80050c0:	e0f2      	b.n	80052a8 <HAL_ADC_Start_DMA+0x214>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050d2:	d004      	beq.n	80050de <HAL_ADC_Start_DMA+0x4a>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a75      	ldr	r2, [pc, #468]	; (80052b0 <HAL_ADC_Start_DMA+0x21c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d109      	bne.n	80050f2 <HAL_ADC_Start_DMA+0x5e>
 80050de:	4b75      	ldr	r3, [pc, #468]	; (80052b4 <HAL_ADC_Start_DMA+0x220>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	e008      	b.n	8005104 <HAL_ADC_Start_DMA+0x70>
 80050f2:	4b71      	ldr	r3, [pc, #452]	; (80052b8 <HAL_ADC_Start_DMA+0x224>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bf0c      	ite	eq
 80050fe:	2301      	moveq	r3, #1
 8005100:	2300      	movne	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80c5 	beq.w	8005294 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fd22 	bl	8005b54 <ADC_Enable>
 8005110:	4603      	mov	r3, r0
 8005112:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 80b7 	bne.w	800528a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005138:	d004      	beq.n	8005144 <HAL_ADC_Start_DMA+0xb0>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a5c      	ldr	r2, [pc, #368]	; (80052b0 <HAL_ADC_Start_DMA+0x21c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d106      	bne.n	8005152 <HAL_ADC_Start_DMA+0xbe>
 8005144:	4b5b      	ldr	r3, [pc, #364]	; (80052b4 <HAL_ADC_Start_DMA+0x220>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2b00      	cmp	r3, #0
 800514e:	d010      	beq.n	8005172 <HAL_ADC_Start_DMA+0xde>
 8005150:	e005      	b.n	800515e <HAL_ADC_Start_DMA+0xca>
 8005152:	4b59      	ldr	r3, [pc, #356]	; (80052b8 <HAL_ADC_Start_DMA+0x224>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <HAL_ADC_Start_DMA+0xde>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005166:	d004      	beq.n	8005172 <HAL_ADC_Start_DMA+0xde>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a53      	ldr	r2, [pc, #332]	; (80052bc <HAL_ADC_Start_DMA+0x228>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d115      	bne.n	800519e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d036      	beq.n	80051fa <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005194:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800519c:	e02d      	b.n	80051fa <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b2:	d004      	beq.n	80051be <HAL_ADC_Start_DMA+0x12a>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a3d      	ldr	r2, [pc, #244]	; (80052b0 <HAL_ADC_Start_DMA+0x21c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10a      	bne.n	80051d4 <HAL_ADC_Start_DMA+0x140>
 80051be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	e008      	b.n	80051e6 <HAL_ADC_Start_DMA+0x152>
 80051d4:	4b39      	ldr	r3, [pc, #228]	; (80052bc <HAL_ADC_Start_DMA+0x228>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bf14      	ite	ne
 80051e0:	2301      	movne	r3, #1
 80051e2:	2300      	moveq	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005206:	d106      	bne.n	8005216 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520c:	f023 0206 	bic.w	r2, r3, #6
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	645a      	str	r2, [r3, #68]	; 0x44
 8005214:	e002      	b.n	800521c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	4a25      	ldr	r2, [pc, #148]	; (80052c0 <HAL_ADC_Start_DMA+0x22c>)
 800522a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	4a24      	ldr	r2, [pc, #144]	; (80052c4 <HAL_ADC_Start_DMA+0x230>)
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	4a23      	ldr	r2, [pc, #140]	; (80052c8 <HAL_ADC_Start_DMA+0x234>)
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	221c      	movs	r2, #28
 8005242:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0210 	orr.w	r2, r2, #16
 8005252:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0201 	orr.w	r2, r2, #1
 8005262:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3340      	adds	r3, #64	; 0x40
 800526e:	4619      	mov	r1, r3
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f000 fe90 	bl	8005f98 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0204 	orr.w	r2, r2, #4
 8005286:	609a      	str	r2, [r3, #8]
 8005288:	e00d      	b.n	80052a6 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005292:	e008      	b.n	80052a6 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052a0:	e001      	b.n	80052a6 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80052a2:	2302      	movs	r3, #2
 80052a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	50000100 	.word	0x50000100
 80052b4:	50000300 	.word	0x50000300
 80052b8:	50000700 	.word	0x50000700
 80052bc:	50000400 	.word	0x50000400
 80052c0:	08005a89 	.word	0x08005a89
 80052c4:	08005b03 	.word	0x08005b03
 80052c8:	08005b1f 	.word	0x08005b1f

080052cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b09b      	sub	sp, #108	; 0x6c
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_ADC_ConfigChannel+0x22>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e2ca      	b.n	8005884 <HAL_ADC_ConfigChannel+0x5b8>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	f040 82ae 	bne.w	8005862 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b04      	cmp	r3, #4
 800530c:	d81c      	bhi.n	8005348 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	4413      	add	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	461a      	mov	r2, r3
 8005322:	231f      	movs	r3, #31
 8005324:	4093      	lsls	r3, r2
 8005326:	43db      	mvns	r3, r3
 8005328:	4019      	ands	r1, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	fa00 f203 	lsl.w	r2, r0, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	631a      	str	r2, [r3, #48]	; 0x30
 8005346:	e063      	b.n	8005410 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b09      	cmp	r3, #9
 800534e:	d81e      	bhi.n	800538e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	4413      	add	r3, r2
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	3b1e      	subs	r3, #30
 8005364:	221f      	movs	r2, #31
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	4019      	ands	r1, r3
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	3b1e      	subs	r3, #30
 8005380:	fa00 f203 	lsl.w	r2, r0, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	635a      	str	r2, [r3, #52]	; 0x34
 800538c:	e040      	b.n	8005410 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b0e      	cmp	r3, #14
 8005394:	d81e      	bhi.n	80053d4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	4413      	add	r3, r2
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	3b3c      	subs	r3, #60	; 0x3c
 80053aa:	221f      	movs	r2, #31
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	43db      	mvns	r3, r3
 80053b2:	4019      	ands	r1, r3
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	4413      	add	r3, r2
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	3b3c      	subs	r3, #60	; 0x3c
 80053c6:	fa00 f203 	lsl.w	r2, r0, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38
 80053d2:	e01d      	b.n	8005410 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	3b5a      	subs	r3, #90	; 0x5a
 80053e8:	221f      	movs	r2, #31
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43db      	mvns	r3, r3
 80053f0:	4019      	ands	r1, r3
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	4413      	add	r3, r2
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	3b5a      	subs	r3, #90	; 0x5a
 8005404:	fa00 f203 	lsl.w	r2, r0, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b00      	cmp	r3, #0
 800541c:	f040 80e5 	bne.w	80055ea <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b09      	cmp	r3, #9
 8005426:	d91c      	bls.n	8005462 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6999      	ldr	r1, [r3, #24]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4613      	mov	r3, r2
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	4413      	add	r3, r2
 8005438:	3b1e      	subs	r3, #30
 800543a:	2207      	movs	r2, #7
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	4019      	ands	r1, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6898      	ldr	r0, [r3, #8]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4413      	add	r3, r2
 8005452:	3b1e      	subs	r3, #30
 8005454:	fa00 f203 	lsl.w	r2, r0, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	619a      	str	r2, [r3, #24]
 8005460:	e019      	b.n	8005496 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6959      	ldr	r1, [r3, #20]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4413      	add	r3, r2
 8005472:	2207      	movs	r2, #7
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	4019      	ands	r1, r3
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	6898      	ldr	r0, [r3, #8]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4613      	mov	r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	4413      	add	r3, r2
 800548a:	fa00 f203 	lsl.w	r2, r0, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	08db      	lsrs	r3, r3, #3
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d84f      	bhi.n	8005558 <HAL_ADC_ConfigChannel+0x28c>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <HAL_ADC_ConfigChannel+0x1f4>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	080054f3 	.word	0x080054f3
 80054c8:	08005515 	.word	0x08005515
 80054cc:	08005537 	.word	0x08005537
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054d6:	4b9a      	ldr	r3, [pc, #616]	; (8005740 <HAL_ADC_ConfigChannel+0x474>)
 80054d8:	4013      	ands	r3, r2
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	0691      	lsls	r1, r2, #26
 80054e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054e2:	430a      	orrs	r2, r1
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80054ee:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80054f0:	e07e      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80054f8:	4b91      	ldr	r3, [pc, #580]	; (8005740 <HAL_ADC_ConfigChannel+0x474>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	0691      	lsls	r1, r2, #26
 8005502:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005504:	430a      	orrs	r2, r1
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005510:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005512:	e06d      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800551a:	4b89      	ldr	r3, [pc, #548]	; (8005740 <HAL_ADC_ConfigChannel+0x474>)
 800551c:	4013      	ands	r3, r2
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	0691      	lsls	r1, r2, #26
 8005524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005526:	430a      	orrs	r2, r1
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005532:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005534:	e05c      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800553c:	4b80      	ldr	r3, [pc, #512]	; (8005740 <HAL_ADC_ConfigChannel+0x474>)
 800553e:	4013      	ands	r3, r2
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	0691      	lsls	r1, r2, #26
 8005546:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005548:	430a      	orrs	r2, r1
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005554:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005556:	e04b      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	069b      	lsls	r3, r3, #26
 8005568:	429a      	cmp	r2, r3
 800556a:	d107      	bne.n	800557c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800557a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005582:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	069b      	lsls	r3, r3, #26
 800558c:	429a      	cmp	r2, r3
 800558e:	d107      	bne.n	80055a0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800559e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	069b      	lsls	r3, r3, #26
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d107      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055c2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	069b      	lsls	r3, r3, #26
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d10a      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055e6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80055e8:	e001      	b.n	80055ee <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80055ee:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d108      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x344>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x344>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <HAL_ADC_ConfigChannel+0x346>
 8005610:	2300      	movs	r3, #0
 8005612:	2b00      	cmp	r3, #0
 8005614:	f040 8130 	bne.w	8005878 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d00f      	beq.n	8005640 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2201      	movs	r2, #1
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	43da      	mvns	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	400a      	ands	r2, r1
 800563a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800563e:	e049      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2201      	movs	r2, #1
 800564e:	409a      	lsls	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b09      	cmp	r3, #9
 8005660:	d91c      	bls.n	800569c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6999      	ldr	r1, [r3, #24]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	4413      	add	r3, r2
 8005672:	3b1b      	subs	r3, #27
 8005674:	2207      	movs	r2, #7
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	4019      	ands	r1, r3
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6898      	ldr	r0, [r3, #8]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4613      	mov	r3, r2
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	4413      	add	r3, r2
 800568c:	3b1b      	subs	r3, #27
 800568e:	fa00 f203 	lsl.w	r2, r0, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	619a      	str	r2, [r3, #24]
 800569a:	e01b      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6959      	ldr	r1, [r3, #20]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	4613      	mov	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	4413      	add	r3, r2
 80056ae:	2207      	movs	r2, #7
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	4019      	ands	r1, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	6898      	ldr	r0, [r3, #8]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	4613      	mov	r3, r2
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4413      	add	r3, r2
 80056c8:	fa00 f203 	lsl.w	r2, r0, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056dc:	d004      	beq.n	80056e8 <HAL_ADC_ConfigChannel+0x41c>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a18      	ldr	r2, [pc, #96]	; (8005744 <HAL_ADC_ConfigChannel+0x478>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d101      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x420>
 80056e8:	4b17      	ldr	r3, [pc, #92]	; (8005748 <HAL_ADC_ConfigChannel+0x47c>)
 80056ea:	e000      	b.n	80056ee <HAL_ADC_ConfigChannel+0x422>
 80056ec:	4b17      	ldr	r3, [pc, #92]	; (800574c <HAL_ADC_ConfigChannel+0x480>)
 80056ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d105      	bne.n	8005704 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80056f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005700:	2b00      	cmp	r3, #0
 8005702:	d015      	beq.n	8005730 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005708:	2b11      	cmp	r3, #17
 800570a:	d105      	bne.n	8005718 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800570c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800571c:	2b12      	cmp	r3, #18
 800571e:	f040 80ab 	bne.w	8005878 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800572a:	2b00      	cmp	r3, #0
 800572c:	f040 80a4 	bne.w	8005878 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005738:	d10a      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x484>
 800573a:	4b02      	ldr	r3, [pc, #8]	; (8005744 <HAL_ADC_ConfigChannel+0x478>)
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e022      	b.n	8005786 <HAL_ADC_ConfigChannel+0x4ba>
 8005740:	83fff000 	.word	0x83fff000
 8005744:	50000100 	.word	0x50000100
 8005748:	50000300 	.word	0x50000300
 800574c:	50000700 	.word	0x50000700
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a4e      	ldr	r2, [pc, #312]	; (8005890 <HAL_ADC_ConfigChannel+0x5c4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d103      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x496>
 800575a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	e011      	b.n	8005786 <HAL_ADC_ConfigChannel+0x4ba>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a4b      	ldr	r2, [pc, #300]	; (8005894 <HAL_ADC_ConfigChannel+0x5c8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d102      	bne.n	8005772 <HAL_ADC_ConfigChannel+0x4a6>
 800576c:	4b4a      	ldr	r3, [pc, #296]	; (8005898 <HAL_ADC_ConfigChannel+0x5cc>)
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e009      	b.n	8005786 <HAL_ADC_ConfigChannel+0x4ba>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a48      	ldr	r2, [pc, #288]	; (8005898 <HAL_ADC_ConfigChannel+0x5cc>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d102      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x4b6>
 800577c:	4b45      	ldr	r3, [pc, #276]	; (8005894 <HAL_ADC_ConfigChannel+0x5c8>)
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e001      	b.n	8005786 <HAL_ADC_ConfigChannel+0x4ba>
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 0303 	and.w	r3, r3, #3
 8005790:	2b01      	cmp	r3, #1
 8005792:	d108      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x4da>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x4da>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x4dc>
 80057a6:	2300      	movs	r3, #0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d150      	bne.n	800584e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80057ac:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d010      	beq.n	80057d4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d107      	bne.n	80057ce <HAL_ADC_ConfigChannel+0x502>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_ADC_ConfigChannel+0x502>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <HAL_ADC_ConfigChannel+0x504>
 80057ce:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d13c      	bne.n	800584e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d11d      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x54c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057e4:	d118      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80057e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80057ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057f0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057f2:	4b2a      	ldr	r3, [pc, #168]	; (800589c <HAL_ADC_ConfigChannel+0x5d0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <HAL_ADC_ConfigChannel+0x5d4>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	0c9a      	lsrs	r2, r3, #18
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005808:	e002      	b.n	8005810 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	3b01      	subs	r3, #1
 800580e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f9      	bne.n	800580a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005816:	e02e      	b.n	8005876 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b11      	cmp	r3, #17
 800581e:	d10b      	bne.n	8005838 <HAL_ADC_ConfigChannel+0x56c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005828:	d106      	bne.n	8005838 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800582a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005834:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005836:	e01e      	b.n	8005876 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b12      	cmp	r3, #18
 800583e:	d11a      	bne.n	8005876 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800584a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800584c:	e013      	b.n	8005876 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f043 0220 	orr.w	r2, r3, #32
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005860:	e00a      	b.n	8005878 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005874:	e000      	b.n	8005878 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005876:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005880:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005884:	4618      	mov	r0, r3
 8005886:	376c      	adds	r7, #108	; 0x6c
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	50000100 	.word	0x50000100
 8005894:	50000400 	.word	0x50000400
 8005898:	50000500 	.word	0x50000500
 800589c:	2000000c 	.word	0x2000000c
 80058a0:	431bde83 	.word	0x431bde83

080058a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b099      	sub	sp, #100	; 0x64
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058bc:	d102      	bne.n	80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80058be:	4b6d      	ldr	r3, [pc, #436]	; (8005a74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	e01a      	b.n	80058fa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a6a      	ldr	r2, [pc, #424]	; (8005a74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d103      	bne.n	80058d6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80058ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80058d2:	60bb      	str	r3, [r7, #8]
 80058d4:	e011      	b.n	80058fa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a67      	ldr	r2, [pc, #412]	; (8005a78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d102      	bne.n	80058e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80058e0:	4b66      	ldr	r3, [pc, #408]	; (8005a7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80058e2:	60bb      	str	r3, [r7, #8]
 80058e4:	e009      	b.n	80058fa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a64      	ldr	r2, [pc, #400]	; (8005a7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d102      	bne.n	80058f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80058f0:	4b61      	ldr	r3, [pc, #388]	; (8005a78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	e001      	b.n	80058fa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0b0      	b.n	8005a66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800590e:	2302      	movs	r3, #2
 8005910:	e0a9      	b.n	8005a66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	f040 808d 	bne.w	8005a44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	f040 8086 	bne.w	8005a44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005940:	d004      	beq.n	800594c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a4b      	ldr	r2, [pc, #300]	; (8005a74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d101      	bne.n	8005950 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800594c:	4b4c      	ldr	r3, [pc, #304]	; (8005a80 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800594e:	e000      	b.n	8005952 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005950:	4b4c      	ldr	r3, [pc, #304]	; (8005a84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005952:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d040      	beq.n	80059de <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800595c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800596e:	035b      	lsls	r3, r3, #13
 8005970:	430b      	orrs	r3, r1
 8005972:	431a      	orrs	r2, r3
 8005974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005976:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d108      	bne.n	8005998 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d15c      	bne.n	8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d107      	bne.n	80059ba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80059ba:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d14b      	bne.n	8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80059c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80059c8:	f023 030f 	bic.w	r3, r3, #15
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	6811      	ldr	r1, [r2, #0]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	6892      	ldr	r2, [r2, #8]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	431a      	orrs	r2, r3
 80059d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059da:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80059dc:	e03c      	b.n	8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80059de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d108      	bne.n	8005a0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d123      	bne.n	8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d107      	bne.n	8005a2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005a2c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d112      	bne.n	8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005a3a:	f023 030f 	bic.w	r3, r3, #15
 8005a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a40:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a42:	e009      	b.n	8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005a56:	e000      	b.n	8005a5a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a58:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005a62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005a66:	4618      	mov	r0, r3
 8005a68:	3764      	adds	r7, #100	; 0x64
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	50000100 	.word	0x50000100
 8005a78:	50000400 	.word	0x50000400
 8005a7c:	50000500 	.word	0x50000500
 8005a80:	50000300 	.word	0x50000300
 8005a84:	50000700 	.word	0x50000700

08005a88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d126      	bne.n	8005af0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d115      	bne.n	8005ae8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d111      	bne.n	8005ae8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d105      	bne.n	8005ae8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f043 0201 	orr.w	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff f8bb 	bl	8004c64 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005aee:	e004      	b.n	8005afa <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	4798      	blx	r3
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff f8b1 	bl	8004c78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3c:	f043 0204 	orr.w	r2, r3, #4
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff f8a1 	bl	8004c8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d108      	bne.n	8005b80 <ADC_Enable+0x2c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <ADC_Enable+0x2c>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <ADC_Enable+0x2e>
 8005b80:	2300      	movs	r3, #0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d143      	bne.n	8005c0e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	4b22      	ldr	r3, [pc, #136]	; (8005c18 <ADC_Enable+0xc4>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00d      	beq.n	8005bb0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	f043 0210 	orr.w	r2, r3, #16
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba4:	f043 0201 	orr.w	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e02f      	b.n	8005c10 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005bc0:	f7ff f820 	bl	8004c04 <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005bc6:	e01b      	b.n	8005c00 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bc8:	f7ff f81c 	bl	8004c04 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d914      	bls.n	8005c00 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d00d      	beq.n	8005c00 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	f043 0210 	orr.w	r2, r3, #16
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf4:	f043 0201 	orr.w	r2, r3, #1
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e007      	b.n	8005c10 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d1dc      	bne.n	8005bc8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	8000003f 	.word	0x8000003f

08005c1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d108      	bne.n	8005c48 <ADC_Disable+0x2c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <ADC_Disable+0x2c>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <ADC_Disable+0x2e>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d047      	beq.n	8005cde <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 030d 	and.w	r3, r3, #13
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d10f      	bne.n	8005c7c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0202 	orr.w	r2, r2, #2
 8005c6a:	609a      	str	r2, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2203      	movs	r2, #3
 8005c72:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005c74:	f7fe ffc6 	bl	8004c04 <HAL_GetTick>
 8005c78:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005c7a:	e029      	b.n	8005cd0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	f043 0210 	orr.w	r2, r3, #16
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	f043 0201 	orr.w	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e023      	b.n	8005ce0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c98:	f7fe ffb4 	bl	8004c04 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d914      	bls.n	8005cd0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d10d      	bne.n	8005cd0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	f043 0210 	orr.w	r2, r3, #16
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	f043 0201 	orr.w	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e007      	b.n	8005ce0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d0dc      	beq.n	8005c98 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <__NVIC_SetPriorityGrouping+0x44>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d04:	4013      	ands	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d1a:	4a04      	ldr	r2, [pc, #16]	; (8005d2c <__NVIC_SetPriorityGrouping+0x44>)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	60d3      	str	r3, [r2, #12]
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	e000ed00 	.word	0xe000ed00

08005d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d34:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <__NVIC_GetPriorityGrouping+0x18>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	0a1b      	lsrs	r3, r3, #8
 8005d3a:	f003 0307 	and.w	r3, r3, #7
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	e000ed00 	.word	0xe000ed00

08005d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	db0b      	blt.n	8005d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	f003 021f 	and.w	r2, r3, #31
 8005d64:	4907      	ldr	r1, [pc, #28]	; (8005d84 <__NVIC_EnableIRQ+0x38>)
 8005d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	e000e100 	.word	0xe000e100

08005d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	6039      	str	r1, [r7, #0]
 8005d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	db0a      	blt.n	8005db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	490c      	ldr	r1, [pc, #48]	; (8005dd4 <__NVIC_SetPriority+0x4c>)
 8005da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da6:	0112      	lsls	r2, r2, #4
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	440b      	add	r3, r1
 8005dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005db0:	e00a      	b.n	8005dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	4908      	ldr	r1, [pc, #32]	; (8005dd8 <__NVIC_SetPriority+0x50>)
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	3b04      	subs	r3, #4
 8005dc0:	0112      	lsls	r2, r2, #4
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	761a      	strb	r2, [r3, #24]
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	e000e100 	.word	0xe000e100
 8005dd8:	e000ed00 	.word	0xe000ed00

08005ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f1c3 0307 	rsb	r3, r3, #7
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	bf28      	it	cs
 8005dfa:	2304      	movcs	r3, #4
 8005dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3304      	adds	r3, #4
 8005e02:	2b06      	cmp	r3, #6
 8005e04:	d902      	bls.n	8005e0c <NVIC_EncodePriority+0x30>
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	3b03      	subs	r3, #3
 8005e0a:	e000      	b.n	8005e0e <NVIC_EncodePriority+0x32>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e10:	f04f 32ff 	mov.w	r2, #4294967295
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43da      	mvns	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	401a      	ands	r2, r3
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e24:	f04f 31ff 	mov.w	r1, #4294967295
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2e:	43d9      	mvns	r1, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e34:	4313      	orrs	r3, r2
         );
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3724      	adds	r7, #36	; 0x24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e54:	d301      	bcc.n	8005e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e56:	2301      	movs	r3, #1
 8005e58:	e00f      	b.n	8005e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e5a:	4a0a      	ldr	r2, [pc, #40]	; (8005e84 <SysTick_Config+0x40>)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e62:	210f      	movs	r1, #15
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	f7ff ff8e 	bl	8005d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <SysTick_Config+0x40>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e72:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <SysTick_Config+0x40>)
 8005e74:	2207      	movs	r2, #7
 8005e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	e000e010 	.word	0xe000e010

08005e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff ff29 	bl	8005ce8 <__NVIC_SetPriorityGrouping>
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b086      	sub	sp, #24
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005eb0:	f7ff ff3e 	bl	8005d30 <__NVIC_GetPriorityGrouping>
 8005eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	6978      	ldr	r0, [r7, #20]
 8005ebc:	f7ff ff8e 	bl	8005ddc <NVIC_EncodePriority>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff ff5d 	bl	8005d88 <__NVIC_SetPriority>
}
 8005ece:	bf00      	nop
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	4603      	mov	r3, r0
 8005ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff ff31 	bl	8005d4c <__NVIC_EnableIRQ>
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff ffa2 	bl	8005e44 <SysTick_Config>
 8005f00:	4603      	mov	r3, r0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e037      	b.n	8005f90 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005f36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005f3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f98c 	bl	8006290 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}  
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_DMA_Start_IT+0x20>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e04a      	b.n	800604e <HAL_DMA_Start_IT+0xb6>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d13a      	bne.n	8006040 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f91f 	bl	8006232 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 020e 	orr.w	r2, r2, #14
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	e00f      	b.n	800602e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 020a 	orr.w	r2, r2, #10
 800601c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0204 	bic.w	r2, r2, #4
 800602c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0201 	orr.w	r2, r2, #1
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	e005      	b.n	800604c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006048:	2302      	movs	r3, #2
 800604a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800604c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006068:	2b02      	cmp	r3, #2
 800606a:	d005      	beq.n	8006078 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2204      	movs	r2, #4
 8006070:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	73fb      	strb	r3, [r7, #15]
 8006076:	e027      	b.n	80060c8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 020e 	bic.w	r2, r2, #14
 8006086:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a0:	2101      	movs	r1, #1
 80060a2:	fa01 f202 	lsl.w	r2, r1, r2
 80060a6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
    } 
  }
  return status;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	2204      	movs	r2, #4
 80060f0:	409a      	lsls	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4013      	ands	r3, r2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d024      	beq.n	8006144 <HAL_DMA_IRQHandler+0x72>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01f      	beq.n	8006144 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d107      	bne.n	8006122 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0204 	bic.w	r2, r2, #4
 8006120:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	2104      	movs	r1, #4
 800612c:	fa01 f202 	lsl.w	r2, r1, r2
 8006130:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d06a      	beq.n	8006210 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006142:	e065      	b.n	8006210 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	2202      	movs	r2, #2
 800614a:	409a      	lsls	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d02c      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdc>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d027      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10b      	bne.n	8006184 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 020a 	bic.w	r2, r2, #10
 800617a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	2102      	movs	r1, #2
 800618e:	fa01 f202 	lsl.w	r2, r1, r2
 8006192:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d035      	beq.n	8006210 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80061ac:	e030      	b.n	8006210 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	2208      	movs	r2, #8
 80061b4:	409a      	lsls	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4013      	ands	r3, r2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d028      	beq.n	8006210 <HAL_DMA_IRQHandler+0x13e>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d023      	beq.n	8006210 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 020e 	bic.w	r2, r2, #14
 80061d6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e0:	2101      	movs	r1, #1
 80061e2:	fa01 f202 	lsl.w	r2, r1, r2
 80061e6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	2b00      	cmp	r3, #0
 8006204:	d004      	beq.n	8006210 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	4798      	blx	r3
    }
  }
}  
 800620e:	e7ff      	b.n	8006210 <HAL_DMA_IRQHandler+0x13e>
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006248:	2101      	movs	r1, #1
 800624a:	fa01 f202 	lsl.w	r2, r1, r2
 800624e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b10      	cmp	r3, #16
 800625e:	d108      	bne.n	8006272 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006270:	e007      	b.n	8006282 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	60da      	str	r2, [r3, #12]
}
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
	...

08006290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	4b14      	ldr	r3, [pc, #80]	; (80062f0 <DMA_CalcBaseAndBitshift+0x60>)
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d80f      	bhi.n	80062c4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <DMA_CalcBaseAndBitshift+0x64>)
 80062ac:	4413      	add	r3, r2
 80062ae:	4a12      	ldr	r2, [pc, #72]	; (80062f8 <DMA_CalcBaseAndBitshift+0x68>)
 80062b0:	fba2 2303 	umull	r2, r3, r2, r3
 80062b4:	091b      	lsrs	r3, r3, #4
 80062b6:	009a      	lsls	r2, r3, #2
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a0f      	ldr	r2, [pc, #60]	; (80062fc <DMA_CalcBaseAndBitshift+0x6c>)
 80062c0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80062c2:	e00e      	b.n	80062e2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <DMA_CalcBaseAndBitshift+0x70>)
 80062cc:	4413      	add	r3, r2
 80062ce:	4a0a      	ldr	r2, [pc, #40]	; (80062f8 <DMA_CalcBaseAndBitshift+0x68>)
 80062d0:	fba2 2303 	umull	r2, r3, r2, r3
 80062d4:	091b      	lsrs	r3, r3, #4
 80062d6:	009a      	lsls	r2, r3, #2
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a09      	ldr	r2, [pc, #36]	; (8006304 <DMA_CalcBaseAndBitshift+0x74>)
 80062e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40020407 	.word	0x40020407
 80062f4:	bffdfff8 	.word	0xbffdfff8
 80062f8:	cccccccd 	.word	0xcccccccd
 80062fc:	40020000 	.word	0x40020000
 8006300:	bffdfbf8 	.word	0xbffdfbf8
 8006304:	40020400 	.word	0x40020400

08006308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006312:	2300      	movs	r3, #0
 8006314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006316:	e160      	b.n	80065da <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	2101      	movs	r1, #1
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	fa01 f303 	lsl.w	r3, r1, r3
 8006324:	4013      	ands	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 8152 	beq.w	80065d4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d005      	beq.n	8006348 <HAL_GPIO_Init+0x40>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d130      	bne.n	80063aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	2203      	movs	r2, #3
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4013      	ands	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800637e:	2201      	movs	r2, #1
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	fa02 f303 	lsl.w	r3, r2, r3
 8006386:	43db      	mvns	r3, r3
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4013      	ands	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	091b      	lsrs	r3, r3, #4
 8006394:	f003 0201 	and.w	r2, r3, #1
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d017      	beq.n	80063e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	2203      	movs	r2, #3
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	43db      	mvns	r3, r3
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4013      	ands	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d123      	bne.n	800643a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	08da      	lsrs	r2, r3, #3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3208      	adds	r2, #8
 80063fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	220f      	movs	r2, #15
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	43db      	mvns	r3, r3
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4013      	ands	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	08da      	lsrs	r2, r3, #3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3208      	adds	r2, #8
 8006434:	6939      	ldr	r1, [r7, #16]
 8006436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	2203      	movs	r2, #3
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	43db      	mvns	r3, r3
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4013      	ands	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f003 0203 	and.w	r2, r3, #3
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80ac 	beq.w	80065d4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800647c:	4b5e      	ldr	r3, [pc, #376]	; (80065f8 <HAL_GPIO_Init+0x2f0>)
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	4a5d      	ldr	r2, [pc, #372]	; (80065f8 <HAL_GPIO_Init+0x2f0>)
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	6193      	str	r3, [r2, #24]
 8006488:	4b5b      	ldr	r3, [pc, #364]	; (80065f8 <HAL_GPIO_Init+0x2f0>)
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	60bb      	str	r3, [r7, #8]
 8006492:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006494:	4a59      	ldr	r2, [pc, #356]	; (80065fc <HAL_GPIO_Init+0x2f4>)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	089b      	lsrs	r3, r3, #2
 800649a:	3302      	adds	r3, #2
 800649c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	220f      	movs	r2, #15
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	43db      	mvns	r3, r3
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4013      	ands	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80064be:	d025      	beq.n	800650c <HAL_GPIO_Init+0x204>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a4f      	ldr	r2, [pc, #316]	; (8006600 <HAL_GPIO_Init+0x2f8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d01f      	beq.n	8006508 <HAL_GPIO_Init+0x200>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a4e      	ldr	r2, [pc, #312]	; (8006604 <HAL_GPIO_Init+0x2fc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d019      	beq.n	8006504 <HAL_GPIO_Init+0x1fc>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a4d      	ldr	r2, [pc, #308]	; (8006608 <HAL_GPIO_Init+0x300>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <HAL_GPIO_Init+0x1f8>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a4c      	ldr	r2, [pc, #304]	; (800660c <HAL_GPIO_Init+0x304>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00d      	beq.n	80064fc <HAL_GPIO_Init+0x1f4>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a4b      	ldr	r2, [pc, #300]	; (8006610 <HAL_GPIO_Init+0x308>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d007      	beq.n	80064f8 <HAL_GPIO_Init+0x1f0>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a4a      	ldr	r2, [pc, #296]	; (8006614 <HAL_GPIO_Init+0x30c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d101      	bne.n	80064f4 <HAL_GPIO_Init+0x1ec>
 80064f0:	2306      	movs	r3, #6
 80064f2:	e00c      	b.n	800650e <HAL_GPIO_Init+0x206>
 80064f4:	2307      	movs	r3, #7
 80064f6:	e00a      	b.n	800650e <HAL_GPIO_Init+0x206>
 80064f8:	2305      	movs	r3, #5
 80064fa:	e008      	b.n	800650e <HAL_GPIO_Init+0x206>
 80064fc:	2304      	movs	r3, #4
 80064fe:	e006      	b.n	800650e <HAL_GPIO_Init+0x206>
 8006500:	2303      	movs	r3, #3
 8006502:	e004      	b.n	800650e <HAL_GPIO_Init+0x206>
 8006504:	2302      	movs	r3, #2
 8006506:	e002      	b.n	800650e <HAL_GPIO_Init+0x206>
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <HAL_GPIO_Init+0x206>
 800650c:	2300      	movs	r3, #0
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	f002 0203 	and.w	r2, r2, #3
 8006514:	0092      	lsls	r2, r2, #2
 8006516:	4093      	lsls	r3, r2
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800651e:	4937      	ldr	r1, [pc, #220]	; (80065fc <HAL_GPIO_Init+0x2f4>)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	089b      	lsrs	r3, r3, #2
 8006524:	3302      	adds	r3, #2
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800652c:	4b3a      	ldr	r3, [pc, #232]	; (8006618 <HAL_GPIO_Init+0x310>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	43db      	mvns	r3, r3
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4013      	ands	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006550:	4a31      	ldr	r2, [pc, #196]	; (8006618 <HAL_GPIO_Init+0x310>)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006556:	4b30      	ldr	r3, [pc, #192]	; (8006618 <HAL_GPIO_Init+0x310>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	43db      	mvns	r3, r3
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4013      	ands	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800657a:	4a27      	ldr	r2, [pc, #156]	; (8006618 <HAL_GPIO_Init+0x310>)
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006580:	4b25      	ldr	r3, [pc, #148]	; (8006618 <HAL_GPIO_Init+0x310>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	43db      	mvns	r3, r3
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	4013      	ands	r3, r2
 800658e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80065a4:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <HAL_GPIO_Init+0x310>)
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065aa:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <HAL_GPIO_Init+0x310>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	43db      	mvns	r3, r3
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4013      	ands	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80065ce:	4a12      	ldr	r2, [pc, #72]	; (8006618 <HAL_GPIO_Init+0x310>)
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	3301      	adds	r3, #1
 80065d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f47f ae97 	bne.w	8006318 <HAL_GPIO_Init+0x10>
  }
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	40021000 	.word	0x40021000
 80065fc:	40010000 	.word	0x40010000
 8006600:	48000400 	.word	0x48000400
 8006604:	48000800 	.word	0x48000800
 8006608:	48000c00 	.word	0x48000c00
 800660c:	48001000 	.word	0x48001000
 8006610:	48001400 	.word	0x48001400
 8006614:	48001800 	.word	0x48001800
 8006618:	40010400 	.word	0x40010400

0800661c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	807b      	strh	r3, [r7, #2]
 8006628:	4613      	mov	r3, r2
 800662a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800662c:	787b      	ldrb	r3, [r7, #1]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006632:	887a      	ldrh	r2, [r7, #2]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006638:	e002      	b.n	8006640 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800663a:	887a      	ldrh	r2, [r7, #2]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006656:	4b08      	ldr	r3, [pc, #32]	; (8006678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006658:	695a      	ldr	r2, [r3, #20]
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	4013      	ands	r3, r2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d006      	beq.n	8006670 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006662:	4a05      	ldr	r2, [pc, #20]	; (8006678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006664:	88fb      	ldrh	r3, [r7, #6]
 8006666:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006668:	88fb      	ldrh	r3, [r7, #6]
 800666a:	4618      	mov	r0, r3
 800666c:	f7fc fbd8 	bl	8002e20 <HAL_GPIO_EXTI_Callback>
  }
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40010400 	.word	0x40010400

0800667c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e081      	b.n	8006792 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fd fe2c 	bl	8004300 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2224      	movs	r2, #36	; 0x24
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d107      	bne.n	80066f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066f2:	609a      	str	r2, [r3, #8]
 80066f4:	e006      	b.n	8006704 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006702:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d104      	bne.n	8006716 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006714:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006728:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006738:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69d9      	ldr	r1, [r3, #28]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1a      	ldr	r2, [r3, #32]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	461a      	mov	r2, r3
 80067a8:	460b      	mov	r3, r1
 80067aa:	817b      	strh	r3, [r7, #10]
 80067ac:	4613      	mov	r3, r2
 80067ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	f040 80da 	bne.w	8006972 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_I2C_Master_Transmit+0x30>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e0d3      	b.n	8006974 <HAL_I2C_Master_Transmit+0x1d8>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067d4:	f7fe fa16 	bl	8004c04 <HAL_GetTick>
 80067d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	2319      	movs	r3, #25
 80067e0:	2201      	movs	r2, #1
 80067e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f001 fad9 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e0be      	b.n	8006974 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2221      	movs	r2, #33	; 0x21
 80067fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2210      	movs	r2, #16
 8006802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	893a      	ldrh	r2, [r7, #8]
 8006816:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	2bff      	cmp	r3, #255	; 0xff
 8006826:	d90e      	bls.n	8006846 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	22ff      	movs	r2, #255	; 0xff
 800682c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006832:	b2da      	uxtb	r2, r3
 8006834:	8979      	ldrh	r1, [r7, #10]
 8006836:	4b51      	ldr	r3, [pc, #324]	; (800697c <HAL_I2C_Master_Transmit+0x1e0>)
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f001 fc4c 	bl	80080dc <I2C_TransferConfig>
 8006844:	e06c      	b.n	8006920 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006854:	b2da      	uxtb	r2, r3
 8006856:	8979      	ldrh	r1, [r7, #10]
 8006858:	4b48      	ldr	r3, [pc, #288]	; (800697c <HAL_I2C_Master_Transmit+0x1e0>)
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f001 fc3b 	bl	80080dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006866:	e05b      	b.n	8006920 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	6a39      	ldr	r1, [r7, #32]
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f001 fad6 	bl	8007e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e07b      	b.n	8006974 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d034      	beq.n	8006920 <HAL_I2C_Master_Transmit+0x184>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d130      	bne.n	8006920 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	2200      	movs	r2, #0
 80068c6:	2180      	movs	r1, #128	; 0x80
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f001 fa68 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e04d      	b.n	8006974 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2bff      	cmp	r3, #255	; 0xff
 80068e0:	d90e      	bls.n	8006900 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	22ff      	movs	r2, #255	; 0xff
 80068e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	8979      	ldrh	r1, [r7, #10]
 80068f0:	2300      	movs	r3, #0
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f001 fbef 	bl	80080dc <I2C_TransferConfig>
 80068fe:	e00f      	b.n	8006920 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690e:	b2da      	uxtb	r2, r3
 8006910:	8979      	ldrh	r1, [r7, #10]
 8006912:	2300      	movs	r3, #0
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f001 fbde 	bl	80080dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d19e      	bne.n	8006868 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	6a39      	ldr	r1, [r7, #32]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f001 fab5 	bl	8007e9e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e01a      	b.n	8006974 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2220      	movs	r2, #32
 8006944:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6859      	ldr	r1, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <HAL_I2C_Master_Transmit+0x1e4>)
 8006952:	400b      	ands	r3, r1
 8006954:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	e000      	b.n	8006974 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006972:	2302      	movs	r3, #2
  }
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	80002000 	.word	0x80002000
 8006980:	fe00e800 	.word	0xfe00e800

08006984 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af02      	add	r7, sp, #8
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	607a      	str	r2, [r7, #4]
 800698e:	461a      	mov	r2, r3
 8006990:	460b      	mov	r3, r1
 8006992:	817b      	strh	r3, [r7, #10]
 8006994:	4613      	mov	r3, r2
 8006996:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	f040 80db 	bne.w	8006b5c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_I2C_Master_Receive+0x30>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e0d4      	b.n	8006b5e <HAL_I2C_Master_Receive+0x1da>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069bc:	f7fe f922 	bl	8004c04 <HAL_GetTick>
 80069c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	2319      	movs	r3, #25
 80069c8:	2201      	movs	r2, #1
 80069ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f001 f9e5 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e0bf      	b.n	8006b5e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2222      	movs	r2, #34	; 0x22
 80069e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2210      	movs	r2, #16
 80069ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	893a      	ldrh	r2, [r7, #8]
 80069fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2bff      	cmp	r3, #255	; 0xff
 8006a0e:	d90e      	bls.n	8006a2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	22ff      	movs	r2, #255	; 0xff
 8006a14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	8979      	ldrh	r1, [r7, #10]
 8006a1e:	4b52      	ldr	r3, [pc, #328]	; (8006b68 <HAL_I2C_Master_Receive+0x1e4>)
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f001 fb58 	bl	80080dc <I2C_TransferConfig>
 8006a2c:	e06d      	b.n	8006b0a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	8979      	ldrh	r1, [r7, #10]
 8006a40:	4b49      	ldr	r3, [pc, #292]	; (8006b68 <HAL_I2C_Master_Receive+0x1e4>)
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f001 fb47 	bl	80080dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006a4e:	e05c      	b.n	8006b0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	6a39      	ldr	r1, [r7, #32]
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f001 fa5f 	bl	8007f18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e07c      	b.n	8006b5e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d034      	beq.n	8006b0a <HAL_I2C_Master_Receive+0x186>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d130      	bne.n	8006b0a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2180      	movs	r1, #128	; 0x80
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f001 f973 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e04d      	b.n	8006b5e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2bff      	cmp	r3, #255	; 0xff
 8006aca:	d90e      	bls.n	8006aea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	22ff      	movs	r2, #255	; 0xff
 8006ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	8979      	ldrh	r1, [r7, #10]
 8006ada:	2300      	movs	r3, #0
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f001 fafa 	bl	80080dc <I2C_TransferConfig>
 8006ae8:	e00f      	b.n	8006b0a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	8979      	ldrh	r1, [r7, #10]
 8006afc:	2300      	movs	r3, #0
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f001 fae9 	bl	80080dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d19d      	bne.n	8006a50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	6a39      	ldr	r1, [r7, #32]
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f001 f9c0 	bl	8007e9e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e01a      	b.n	8006b5e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6859      	ldr	r1, [r3, #4]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <HAL_I2C_Master_Receive+0x1e8>)
 8006b3c:	400b      	ands	r3, r1
 8006b3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e000      	b.n	8006b5e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006b5c:	2302      	movs	r3, #2
  }
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	80002400 	.word	0x80002400
 8006b6c:	fe00e800 	.word	0xfe00e800

08006b70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af02      	add	r7, sp, #8
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	4608      	mov	r0, r1
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	817b      	strh	r3, [r7, #10]
 8006b82:	460b      	mov	r3, r1
 8006b84:	813b      	strh	r3, [r7, #8]
 8006b86:	4613      	mov	r3, r2
 8006b88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	f040 80f9 	bne.w	8006d8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_I2C_Mem_Write+0x34>
 8006b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006baa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e0ed      	b.n	8006d8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_I2C_Mem_Write+0x4e>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e0e6      	b.n	8006d8c <HAL_I2C_Mem_Write+0x21c>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006bc6:	f7fe f81d 	bl	8004c04 <HAL_GetTick>
 8006bca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	2319      	movs	r3, #25
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f001 f8e0 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0d1      	b.n	8006d8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2221      	movs	r2, #33	; 0x21
 8006bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2240      	movs	r2, #64	; 0x40
 8006bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a3a      	ldr	r2, [r7, #32]
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c10:	88f8      	ldrh	r0, [r7, #6]
 8006c12:	893a      	ldrh	r2, [r7, #8]
 8006c14:	8979      	ldrh	r1, [r7, #10]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	4603      	mov	r3, r0
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 fc99 	bl	8007558 <I2C_RequestMemoryWrite>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e0a9      	b.n	8006d8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2bff      	cmp	r3, #255	; 0xff
 8006c40:	d90e      	bls.n	8006c60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	22ff      	movs	r2, #255	; 0xff
 8006c46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	8979      	ldrh	r1, [r7, #10]
 8006c50:	2300      	movs	r3, #0
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f001 fa3f 	bl	80080dc <I2C_TransferConfig>
 8006c5e:	e00f      	b.n	8006c80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	8979      	ldrh	r1, [r7, #10]
 8006c72:	2300      	movs	r3, #0
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f001 fa2e 	bl	80080dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f001 f8ca 	bl	8007e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e07b      	b.n	8006d8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d034      	beq.n	8006d38 <HAL_I2C_Mem_Write+0x1c8>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d130      	bne.n	8006d38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2180      	movs	r1, #128	; 0x80
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f001 f85c 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e04d      	b.n	8006d8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2bff      	cmp	r3, #255	; 0xff
 8006cf8:	d90e      	bls.n	8006d18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	8979      	ldrh	r1, [r7, #10]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f001 f9e3 	bl	80080dc <I2C_TransferConfig>
 8006d16:	e00f      	b.n	8006d38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	8979      	ldrh	r1, [r7, #10]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f001 f9d2 	bl	80080dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d19e      	bne.n	8006c80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f001 f8a9 	bl	8007e9e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e01a      	b.n	8006d8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6859      	ldr	r1, [r3, #4]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <HAL_I2C_Mem_Write+0x224>)
 8006d6a:	400b      	ands	r3, r1
 8006d6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	e000      	b.n	8006d8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006d8a:	2302      	movs	r3, #2
  }
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	fe00e800 	.word	0xfe00e800

08006d98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af02      	add	r7, sp, #8
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	4608      	mov	r0, r1
 8006da2:	4611      	mov	r1, r2
 8006da4:	461a      	mov	r2, r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	817b      	strh	r3, [r7, #10]
 8006daa:	460b      	mov	r3, r1
 8006dac:	813b      	strh	r3, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	f040 80fd 	bne.w	8006fba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_I2C_Mem_Read+0x34>
 8006dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d105      	bne.n	8006dd8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dd2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e0f1      	b.n	8006fbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d101      	bne.n	8006de6 <HAL_I2C_Mem_Read+0x4e>
 8006de2:	2302      	movs	r3, #2
 8006de4:	e0ea      	b.n	8006fbc <HAL_I2C_Mem_Read+0x224>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006dee:	f7fd ff09 	bl	8004c04 <HAL_GetTick>
 8006df2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	2319      	movs	r3, #25
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 ffcc 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e0d5      	b.n	8006fbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2222      	movs	r2, #34	; 0x22
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2240      	movs	r2, #64	; 0x40
 8006e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a3a      	ldr	r2, [r7, #32]
 8006e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e38:	88f8      	ldrh	r0, [r7, #6]
 8006e3a:	893a      	ldrh	r2, [r7, #8]
 8006e3c:	8979      	ldrh	r1, [r7, #10]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	4603      	mov	r3, r0
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 fbd9 	bl	8007600 <I2C_RequestMemoryRead>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0ad      	b.n	8006fbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	2bff      	cmp	r3, #255	; 0xff
 8006e68:	d90e      	bls.n	8006e88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	22ff      	movs	r2, #255	; 0xff
 8006e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	8979      	ldrh	r1, [r7, #10]
 8006e78:	4b52      	ldr	r3, [pc, #328]	; (8006fc4 <HAL_I2C_Mem_Read+0x22c>)
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f001 f92b 	bl	80080dc <I2C_TransferConfig>
 8006e86:	e00f      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	8979      	ldrh	r1, [r7, #10]
 8006e9a:	4b4a      	ldr	r3, [pc, #296]	; (8006fc4 <HAL_I2C_Mem_Read+0x22c>)
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f001 f91a 	bl	80080dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2104      	movs	r1, #4
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 ff73 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e07c      	b.n	8006fbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d034      	beq.n	8006f68 <HAL_I2C_Mem_Read+0x1d0>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d130      	bne.n	8006f68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2180      	movs	r1, #128	; 0x80
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 ff44 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e04d      	b.n	8006fbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2bff      	cmp	r3, #255	; 0xff
 8006f28:	d90e      	bls.n	8006f48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	22ff      	movs	r2, #255	; 0xff
 8006f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	8979      	ldrh	r1, [r7, #10]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f001 f8cb 	bl	80080dc <I2C_TransferConfig>
 8006f46:	e00f      	b.n	8006f68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	8979      	ldrh	r1, [r7, #10]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f001 f8ba 	bl	80080dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d19a      	bne.n	8006ea8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 ff91 	bl	8007e9e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e01a      	b.n	8006fbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6859      	ldr	r1, [r3, #4]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <HAL_I2C_Mem_Read+0x230>)
 8006f9a:	400b      	ands	r3, r1
 8006f9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e000      	b.n	8006fbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006fba:	2302      	movs	r3, #2
  }
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	80002400 	.word	0x80002400
 8006fc8:	fe00e800 	.word	0xfe00e800

08006fcc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	; 0x28
 8006fd0:	af02      	add	r7, sp, #8
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b20      	cmp	r3, #32
 8006fea:	f040 80f1 	bne.w	80071d0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffc:	d101      	bne.n	8007002 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006ffe:	2302      	movs	r3, #2
 8007000:	e0e7      	b.n	80071d2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_I2C_IsDeviceReady+0x44>
 800700c:	2302      	movs	r3, #2
 800700e:	e0e0      	b.n	80071d2 <HAL_I2C_IsDeviceReady+0x206>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2224      	movs	r2, #36	; 0x24
 800701c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d107      	bne.n	800703e <HAL_I2C_IsDeviceReady+0x72>
 800702e:	897b      	ldrh	r3, [r7, #10]
 8007030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007034:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007038:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800703c:	e004      	b.n	8007048 <HAL_I2C_IsDeviceReady+0x7c>
 800703e:	897b      	ldrh	r3, [r7, #10]
 8007040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007044:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800704e:	f7fd fdd9 	bl	8004c04 <HAL_GetTick>
 8007052:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b20      	cmp	r3, #32
 8007060:	bf0c      	ite	eq
 8007062:	2301      	moveq	r3, #1
 8007064:	2300      	movne	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b10      	cmp	r3, #16
 8007076:	bf0c      	ite	eq
 8007078:	2301      	moveq	r3, #1
 800707a:	2300      	movne	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007080:	e034      	b.n	80070ec <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007088:	d01a      	beq.n	80070c0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800708a:	f7fd fdbb 	bl	8004c04 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d302      	bcc.n	80070a0 <HAL_I2C_IsDeviceReady+0xd4>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10f      	bne.n	80070c0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ac:	f043 0220 	orr.w	r2, r3, #32
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e088      	b.n	80071d2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	bf0c      	ite	eq
 80070ce:	2301      	moveq	r3, #1
 80070d0:	2300      	movne	r3, #0
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f003 0310 	and.w	r3, r3, #16
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	bf0c      	ite	eq
 80070e4:	2301      	moveq	r3, #1
 80070e6:	2300      	movne	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80070ec:	7ffb      	ldrb	r3, [r7, #31]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d102      	bne.n	80070f8 <HAL_I2C_IsDeviceReady+0x12c>
 80070f2:	7fbb      	ldrb	r3, [r7, #30]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0c4      	beq.n	8007082 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	2b10      	cmp	r3, #16
 8007104:	d01a      	beq.n	800713c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2200      	movs	r2, #0
 800710e:	2120      	movs	r1, #32
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fe44 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e058      	b.n	80071d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2220      	movs	r2, #32
 8007126:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	e04a      	b.n	80071d2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	2120      	movs	r1, #32
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 fe29 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e03d      	b.n	80071d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2210      	movs	r2, #16
 800715c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2220      	movs	r2, #32
 8007164:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	429a      	cmp	r2, r3
 800716c:	d118      	bne.n	80071a0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800717c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2200      	movs	r2, #0
 8007186:	2120      	movs	r1, #32
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 fe08 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e01c      	b.n	80071d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2220      	movs	r2, #32
 800719e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	3301      	adds	r3, #1
 80071a4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	f63f af3b 	bhi.w	8007026 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071bc:	f043 0220 	orr.w	r2, r3, #32
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e000      	b.n	80071d2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80071d0:	2302      	movs	r3, #2
  }
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	68f9      	ldr	r1, [r7, #12]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
  }
}
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	0a1b      	lsrs	r3, r3, #8
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d010      	beq.n	8007254 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	09db      	lsrs	r3, r3, #7
 8007236:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007242:	f043 0201 	orr.w	r2, r3, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007252:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	0a9b      	lsrs	r3, r3, #10
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	d010      	beq.n	8007282 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	09db      	lsrs	r3, r3, #7
 8007264:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007270:	f043 0208 	orr.w	r2, r3, #8
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007280:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	0a5b      	lsrs	r3, r3, #9
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b00      	cmp	r3, #0
 800728c:	d010      	beq.n	80072b0 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	09db      	lsrs	r3, r3, #7
 8007292:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729e:	f043 0202 	orr.w	r2, r3, #2
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ae:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f003 030b 	and.w	r3, r3, #11
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80072c0:	68f9      	ldr	r1, [r7, #12]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fc32 	bl	8007b2c <I2C_ITError>
  }
}
 80072c8:	bf00      	nop
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
 8007304:	4613      	mov	r3, r2
 8007306:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <I2C_Slave_ISR_IT+0x24>
 8007370:	2302      	movs	r3, #2
 8007372:	e0ec      	b.n	800754e <I2C_Slave_ISR_IT+0x1fe>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	095b      	lsrs	r3, r3, #5
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d009      	beq.n	800739c <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007394:	6939      	ldr	r1, [r7, #16]
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 fa68 	bl	800786c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	091b      	lsrs	r3, r3, #4
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d04d      	beq.n	8007444 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	091b      	lsrs	r3, r3, #4
 80073ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d047      	beq.n	8007444 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d128      	bne.n	8007410 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b28      	cmp	r3, #40	; 0x28
 80073c8:	d108      	bne.n	80073dc <I2C_Slave_ISR_IT+0x8c>
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d0:	d104      	bne.n	80073dc <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80073d2:	6939      	ldr	r1, [r7, #16]
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 fb53 	bl	8007a80 <I2C_ITListenCplt>
 80073da:	e032      	b.n	8007442 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b29      	cmp	r3, #41	; 0x29
 80073e6:	d10e      	bne.n	8007406 <I2C_Slave_ISR_IT+0xb6>
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073ee:	d00a      	beq.n	8007406 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2210      	movs	r2, #16
 80073f6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 fc8e 	bl	8007d1a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f9d6 	bl	80077b0 <I2C_ITSlaveSeqCplt>
 8007404:	e01d      	b.n	8007442 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2210      	movs	r2, #16
 800740c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800740e:	e096      	b.n	800753e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2210      	movs	r2, #16
 8007416:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741c:	f043 0204 	orr.w	r2, r3, #4
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d004      	beq.n	8007434 <I2C_Slave_ISR_IT+0xe4>
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007430:	f040 8085 	bne.w	800753e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007438:	4619      	mov	r1, r3
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 fb76 	bl	8007b2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007440:	e07d      	b.n	800753e <I2C_Slave_ISR_IT+0x1ee>
 8007442:	e07c      	b.n	800753e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	089b      	lsrs	r3, r3, #2
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d030      	beq.n	80074b2 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	089b      	lsrs	r3, r3, #2
 8007454:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02a      	beq.n	80074b2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d018      	beq.n	8007498 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007482:	3b01      	subs	r3, #1
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d14f      	bne.n	8007542 <I2C_Slave_ISR_IT+0x1f2>
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074a8:	d04b      	beq.n	8007542 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 f980 	bl	80077b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80074b0:	e047      	b.n	8007542 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	08db      	lsrs	r3, r3, #3
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	08db      	lsrs	r3, r3, #3
 80074c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80074ca:	6939      	ldr	r1, [r7, #16]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f8eb 	bl	80076a8 <I2C_ITAddrCplt>
 80074d2:	e037      	b.n	8007544 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	085b      	lsrs	r3, r3, #1
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d031      	beq.n	8007544 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d02b      	beq.n	8007544 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d018      	beq.n	8007528 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	851a      	strh	r2, [r3, #40]	; 0x28
 8007526:	e00d      	b.n	8007544 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800752e:	d002      	beq.n	8007536 <I2C_Slave_ISR_IT+0x1e6>
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 f93a 	bl	80077b0 <I2C_ITSlaveSeqCplt>
 800753c:	e002      	b.n	8007544 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800753e:	bf00      	nop
 8007540:	e000      	b.n	8007544 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007542:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	461a      	mov	r2, r3
 8007566:	4603      	mov	r3, r0
 8007568:	817b      	strh	r3, [r7, #10]
 800756a:	460b      	mov	r3, r1
 800756c:	813b      	strh	r3, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007572:	88fb      	ldrh	r3, [r7, #6]
 8007574:	b2da      	uxtb	r2, r3
 8007576:	8979      	ldrh	r1, [r7, #10]
 8007578:	4b20      	ldr	r3, [pc, #128]	; (80075fc <I2C_RequestMemoryWrite+0xa4>)
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 fdab 	bl	80080dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	69b9      	ldr	r1, [r7, #24]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 fc47 	bl	8007e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e02c      	b.n	80075f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d105      	bne.n	80075ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075a0:	893b      	ldrh	r3, [r7, #8]
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	629a      	str	r2, [r3, #40]	; 0x28
 80075aa:	e015      	b.n	80075d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80075ac:	893b      	ldrh	r3, [r7, #8]
 80075ae:	0a1b      	lsrs	r3, r3, #8
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	69b9      	ldr	r1, [r7, #24]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 fc2d 	bl	8007e1e <I2C_WaitOnTXISFlagUntilTimeout>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e012      	b.n	80075f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075ce:	893b      	ldrh	r3, [r7, #8]
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	2200      	movs	r2, #0
 80075e0:	2180      	movs	r1, #128	; 0x80
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fbdb 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	80002000 	.word	0x80002000

08007600 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af02      	add	r7, sp, #8
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	4608      	mov	r0, r1
 800760a:	4611      	mov	r1, r2
 800760c:	461a      	mov	r2, r3
 800760e:	4603      	mov	r3, r0
 8007610:	817b      	strh	r3, [r7, #10]
 8007612:	460b      	mov	r3, r1
 8007614:	813b      	strh	r3, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800761a:	88fb      	ldrh	r3, [r7, #6]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	8979      	ldrh	r1, [r7, #10]
 8007620:	4b20      	ldr	r3, [pc, #128]	; (80076a4 <I2C_RequestMemoryRead+0xa4>)
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	2300      	movs	r3, #0
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 fd58 	bl	80080dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	69b9      	ldr	r1, [r7, #24]
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 fbf4 	bl	8007e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e02c      	b.n	800769a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d105      	bne.n	8007652 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007646:	893b      	ldrh	r3, [r7, #8]
 8007648:	b2da      	uxtb	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	629a      	str	r2, [r3, #40]	; 0x28
 8007650:	e015      	b.n	800767e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007652:	893b      	ldrh	r3, [r7, #8]
 8007654:	0a1b      	lsrs	r3, r3, #8
 8007656:	b29b      	uxth	r3, r3
 8007658:	b2da      	uxtb	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	69b9      	ldr	r1, [r7, #24]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 fbda 	bl	8007e1e <I2C_WaitOnTXISFlagUntilTimeout>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e012      	b.n	800769a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007674:	893b      	ldrh	r3, [r7, #8]
 8007676:	b2da      	uxtb	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2200      	movs	r2, #0
 8007686:	2140      	movs	r1, #64	; 0x40
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 fb88 	bl	8007d9e <I2C_WaitOnFlagUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	80002000 	.word	0x80002000

080076a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076be:	2b28      	cmp	r3, #40	; 0x28
 80076c0:	d16a      	bne.n	8007798 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	0c1b      	lsrs	r3, r3, #16
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	0c1b      	lsrs	r3, r3, #16
 80076da:	b29b      	uxth	r3, r3
 80076dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80076e0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80076fc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d138      	bne.n	8007778 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007706:	897b      	ldrh	r3, [r7, #10]
 8007708:	09db      	lsrs	r3, r3, #7
 800770a:	b29a      	uxth	r2, r3
 800770c:	89bb      	ldrh	r3, [r7, #12]
 800770e:	4053      	eors	r3, r2
 8007710:	b29b      	uxth	r3, r3
 8007712:	f003 0306 	and.w	r3, r3, #6
 8007716:	2b00      	cmp	r3, #0
 8007718:	d11c      	bne.n	8007754 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800771a:	897b      	ldrh	r3, [r7, #10]
 800771c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800772c:	2b02      	cmp	r3, #2
 800772e:	d13b      	bne.n	80077a8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2208      	movs	r2, #8
 800773c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007746:	89ba      	ldrh	r2, [r7, #12]
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff fdd3 	bl	80072f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007752:	e029      	b.n	80077a8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007754:	893b      	ldrh	r3, [r7, #8]
 8007756:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fceb 	bl	8008138 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800776a:	89ba      	ldrh	r2, [r7, #12]
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fdc1 	bl	80072f8 <HAL_I2C_AddrCallback>
}
 8007776:	e017      	b.n	80077a8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007778:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fcdb 	bl	8008138 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800778a:	89ba      	ldrh	r2, [r7, #12]
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff fdb1 	bl	80072f8 <HAL_I2C_AddrCallback>
}
 8007796:	e007      	b.n	80077a8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2208      	movs	r2, #8
 800779e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80077a8:	bf00      	nop
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	0b9b      	lsrs	r3, r3, #14
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	e00d      	b.n	8007802 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	0bdb      	lsrs	r3, r3, #15
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d007      	beq.n	8007802 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007800:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b29      	cmp	r3, #41	; 0x29
 800780c:	d112      	bne.n	8007834 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2228      	movs	r2, #40	; 0x28
 8007812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2221      	movs	r2, #33	; 0x21
 800781a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800781c:	2101      	movs	r1, #1
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fc8a 	bl	8008138 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff fd4f 	bl	80072d0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007832:	e017      	b.n	8007864 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b2a      	cmp	r3, #42	; 0x2a
 800783e:	d111      	bne.n	8007864 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2228      	movs	r2, #40	; 0x28
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2222      	movs	r2, #34	; 0x22
 800784c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800784e:	2102      	movs	r1, #2
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fc71 	bl	8008138 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff fd40 	bl	80072e4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007888:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2220      	movs	r2, #32
 8007890:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	2b21      	cmp	r3, #33	; 0x21
 8007896:	d002      	beq.n	800789e <I2C_ITSlaveCplt+0x32>
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	2b29      	cmp	r3, #41	; 0x29
 800789c:	d108      	bne.n	80078b0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800789e:	f248 0101 	movw	r1, #32769	; 0x8001
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fc48 	bl	8008138 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2221      	movs	r2, #33	; 0x21
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30
 80078ae:	e00d      	b.n	80078cc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b22      	cmp	r3, #34	; 0x22
 80078b4:	d002      	beq.n	80078bc <I2C_ITSlaveCplt+0x50>
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ba:	d107      	bne.n	80078cc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80078bc:	f248 0102 	movw	r1, #32770	; 0x8002
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fc39 	bl	8008138 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2222      	movs	r2, #34	; 0x22
 80078ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078da:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6859      	ldr	r1, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4b64      	ldr	r3, [pc, #400]	; (8007a78 <I2C_ITSlaveCplt+0x20c>)
 80078e8:	400b      	ands	r3, r1
 80078ea:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fa14 	bl	8007d1a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	0b9b      	lsrs	r3, r3, #14
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d013      	beq.n	8007926 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800790c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	2b00      	cmp	r3, #0
 8007914:	d020      	beq.n	8007958 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	b29a      	uxth	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007924:	e018      	b.n	8007958 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	0bdb      	lsrs	r3, r3, #15
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d012      	beq.n	8007958 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007940:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d006      	beq.n	8007958 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	b29a      	uxth	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	089b      	lsrs	r3, r3, #2
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d020      	beq.n	80079a6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f023 0304 	bic.w	r3, r3, #4
 800796a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00c      	beq.n	80079a6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d005      	beq.n	80079bc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b4:	f043 0204 	orr.w	r2, r3, #4
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d010      	beq.n	80079f4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8a7 	bl	8007b2c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b28      	cmp	r3, #40	; 0x28
 80079e8:	d141      	bne.n	8007a6e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80079ea:	6979      	ldr	r1, [r7, #20]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f847 	bl	8007a80 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079f2:	e03c      	b.n	8007a6e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079fc:	d014      	beq.n	8007a28 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff fed6 	bl	80077b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a1d      	ldr	r2, [pc, #116]	; (8007a7c <I2C_ITSlaveCplt+0x210>)
 8007a08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff fc77 	bl	8007314 <HAL_I2C_ListenCpltCallback>
}
 8007a26:	e022      	b.n	8007a6e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b22      	cmp	r3, #34	; 0x22
 8007a32:	d10e      	bne.n	8007a52 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff fc4a 	bl	80072e4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007a50:	e00d      	b.n	8007a6e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff fc31 	bl	80072d0 <HAL_I2C_SlaveTxCpltCallback>
}
 8007a6e:	bf00      	nop
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	fe00e800 	.word	0xfe00e800
 8007a7c:	ffff0000 	.word	0xffff0000

08007a80 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a26      	ldr	r2, [pc, #152]	; (8007b28 <I2C_ITListenCplt+0xa8>)
 8007a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	089b      	lsrs	r3, r3, #2
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d022      	beq.n	8007afe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d012      	beq.n	8007afe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af6:	f043 0204 	orr.w	r2, r3, #4
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007afe:	f248 0103 	movw	r1, #32771	; 0x8003
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fb18 	bl	8008138 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2210      	movs	r2, #16
 8007b0e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff fbfb 	bl	8007314 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	ffff0000 	.word	0xffff0000

08007b2c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a5d      	ldr	r2, [pc, #372]	; (8007cc0 <I2C_ITError+0x194>)
 8007b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	2b28      	cmp	r3, #40	; 0x28
 8007b62:	d005      	beq.n	8007b70 <I2C_ITError+0x44>
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	2b29      	cmp	r3, #41	; 0x29
 8007b68:	d002      	beq.n	8007b70 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b6e:	d10b      	bne.n	8007b88 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007b70:	2103      	movs	r1, #3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fae0 	bl	8008138 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2228      	movs	r2, #40	; 0x28
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a50      	ldr	r2, [pc, #320]	; (8007cc4 <I2C_ITError+0x198>)
 8007b84:	635a      	str	r2, [r3, #52]	; 0x34
 8007b86:	e011      	b.n	8007bac <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007b88:	f248 0103 	movw	r1, #32771	; 0x8003
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fad3 	bl	8008138 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b60      	cmp	r3, #96	; 0x60
 8007b9c:	d003      	beq.n	8007ba6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d039      	beq.n	8007c2e <I2C_ITError+0x102>
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b11      	cmp	r3, #17
 8007bbe:	d002      	beq.n	8007bc6 <I2C_ITError+0x9a>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b21      	cmp	r3, #33	; 0x21
 8007bc4:	d133      	bne.n	8007c2e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd4:	d107      	bne.n	8007be6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007be4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fb14 	bl	8006218 <HAL_DMA_GetState>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d017      	beq.n	8007c26 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	4a33      	ldr	r2, [pc, #204]	; (8007cc8 <I2C_ITError+0x19c>)
 8007bfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe fa23 	bl	8006056 <HAL_DMA_Abort_IT>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d04d      	beq.n	8007cb2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c24:	e045      	b.n	8007cb2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f850 	bl	8007ccc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c2c:	e041      	b.n	8007cb2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d039      	beq.n	8007caa <I2C_ITError+0x17e>
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b12      	cmp	r3, #18
 8007c3a:	d002      	beq.n	8007c42 <I2C_ITError+0x116>
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b22      	cmp	r3, #34	; 0x22
 8007c40:	d133      	bne.n	8007caa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c50:	d107      	bne.n	8007c62 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c60:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fad6 	bl	8006218 <HAL_DMA_GetState>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d017      	beq.n	8007ca2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c76:	4a14      	ldr	r2, [pc, #80]	; (8007cc8 <I2C_ITError+0x19c>)
 8007c78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe f9e5 	bl	8006056 <HAL_DMA_Abort_IT>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d011      	beq.n	8007cb6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ca0:	e009      	b.n	8007cb6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f812 	bl	8007ccc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ca8:	e005      	b.n	8007cb6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f80e 	bl	8007ccc <I2C_TreatErrorCallback>
  }
}
 8007cb0:	e002      	b.n	8007cb8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007cb2:	bf00      	nop
 8007cb4:	e000      	b.n	8007cb8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cb6:	bf00      	nop
}
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	ffff0000 	.word	0xffff0000
 8007cc4:	08007351 	.word	0x08007351
 8007cc8:	08007d63 	.word	0x08007d63

08007ccc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b60      	cmp	r3, #96	; 0x60
 8007cde:	d10e      	bne.n	8007cfe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fb20 	bl	800733c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007cfc:	e009      	b.n	8007d12 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff fb0b 	bl	8007328 <HAL_I2C_ErrorCallback>
}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d103      	bne.n	8007d38 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2200      	movs	r2, #0
 8007d36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d007      	beq.n	8007d56 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	699a      	ldr	r2, [r3, #24]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0201 	orr.w	r2, r2, #1
 8007d54:	619a      	str	r2, [r3, #24]
  }
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d003      	beq.n	8007d90 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f7ff ff9b 	bl	8007ccc <I2C_TreatErrorCallback>
}
 8007d96:	bf00      	nop
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	603b      	str	r3, [r7, #0]
 8007daa:	4613      	mov	r3, r2
 8007dac:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dae:	e022      	b.n	8007df6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db6:	d01e      	beq.n	8007df6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db8:	f7fc ff24 	bl	8004c04 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d302      	bcc.n	8007dce <I2C_WaitOnFlagUntilTimeout+0x30>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d113      	bne.n	8007df6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd2:	f043 0220 	orr.w	r2, r3, #32
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e00f      	b.n	8007e16 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	bf0c      	ite	eq
 8007e06:	2301      	moveq	r3, #1
 8007e08:	2300      	movne	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d0cd      	beq.n	8007db0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e2a:	e02c      	b.n	8007e86 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 f8dd 	bl	8007ff0 <I2C_IsAcknowledgeFailed>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e02a      	b.n	8007e96 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e46:	d01e      	beq.n	8007e86 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e48:	f7fc fedc 	bl	8004c04 <HAL_GetTick>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d302      	bcc.n	8007e5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d113      	bne.n	8007e86 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e62:	f043 0220 	orr.w	r2, r3, #32
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e007      	b.n	8007e96 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d1cb      	bne.n	8007e2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eaa:	e028      	b.n	8007efe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f89d 	bl	8007ff0 <I2C_IsAcknowledgeFailed>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e026      	b.n	8007f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ec0:	f7fc fea0 	bl	8004c04 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d302      	bcc.n	8007ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d113      	bne.n	8007efe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eda:	f043 0220 	orr.w	r2, r3, #32
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e007      	b.n	8007f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f003 0320 	and.w	r3, r3, #32
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d1cf      	bne.n	8007eac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f24:	e055      	b.n	8007fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	68b9      	ldr	r1, [r7, #8]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 f860 	bl	8007ff0 <I2C_IsAcknowledgeFailed>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e053      	b.n	8007fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d129      	bne.n	8007f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f003 0304 	and.w	r3, r3, #4
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d105      	bne.n	8007f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e03f      	b.n	8007fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2220      	movs	r2, #32
 8007f68:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6859      	ldr	r1, [r3, #4]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	4b1d      	ldr	r3, [pc, #116]	; (8007fec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007f76:	400b      	ands	r3, r1
 8007f78:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e022      	b.n	8007fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f9c:	f7fc fe32 	bl	8004c04 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d302      	bcc.n	8007fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10f      	bne.n	8007fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb6:	f043 0220 	orr.w	r2, r3, #32
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e007      	b.n	8007fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d1a2      	bne.n	8007f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	fe00e800 	.word	0xfe00e800

08007ff0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f003 0310 	and.w	r3, r3, #16
 8008006:	2b10      	cmp	r3, #16
 8008008:	d161      	bne.n	80080ce <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008014:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008018:	d02b      	beq.n	8008072 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008028:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800802a:	e022      	b.n	8008072 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008032:	d01e      	beq.n	8008072 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008034:	f7fc fde6 	bl	8004c04 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	429a      	cmp	r2, r3
 8008042:	d302      	bcc.n	800804a <I2C_IsAcknowledgeFailed+0x5a>
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d113      	bne.n	8008072 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804e:	f043 0220 	orr.w	r2, r3, #32
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e02e      	b.n	80080d0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b20      	cmp	r3, #32
 800807e:	d1d5      	bne.n	800802c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2210      	movs	r2, #16
 8008086:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2220      	movs	r2, #32
 800808e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f7ff fe42 	bl	8007d1a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6859      	ldr	r1, [r3, #4]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <I2C_IsAcknowledgeFailed+0xe8>)
 80080a2:	400b      	ands	r3, r1
 80080a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080aa:	f043 0204 	orr.w	r2, r3, #4
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	fe00e800 	.word	0xfe00e800

080080dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	607b      	str	r3, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	817b      	strh	r3, [r7, #10]
 80080ea:	4613      	mov	r3, r2
 80080ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	0d5b      	lsrs	r3, r3, #21
 80080f8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80080fc:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <I2C_TransferConfig+0x58>)
 80080fe:	430b      	orrs	r3, r1
 8008100:	43db      	mvns	r3, r3
 8008102:	ea02 0103 	and.w	r1, r2, r3
 8008106:	897b      	ldrh	r3, [r7, #10]
 8008108:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800810c:	7a7b      	ldrb	r3, [r7, #9]
 800810e:	041b      	lsls	r3, r3, #16
 8008110:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008114:	431a      	orrs	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	431a      	orrs	r2, r3
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	431a      	orrs	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8008126:	bf00      	nop
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	03ff63ff 	.word	0x03ff63ff

08008138 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008148:	887b      	ldrh	r3, [r7, #2]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00f      	beq.n	8008172 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008158:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008166:	2b28      	cmp	r3, #40	; 0x28
 8008168:	d003      	beq.n	8008172 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008170:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008172:	887b      	ldrh	r3, [r7, #2]
 8008174:	f003 0302 	and.w	r3, r3, #2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00f      	beq.n	800819c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008182:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800818a:	b2db      	uxtb	r3, r3
 800818c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008190:	2b28      	cmp	r3, #40	; 0x28
 8008192:	d003      	beq.n	800819c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800819a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800819c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	da03      	bge.n	80081ac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80081aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80081ac:	887b      	ldrh	r3, [r7, #2]
 80081ae:	2b10      	cmp	r3, #16
 80081b0:	d103      	bne.n	80081ba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80081b8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80081ba:	887b      	ldrh	r3, [r7, #2]
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d103      	bne.n	80081c8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f043 0320 	orr.w	r3, r3, #32
 80081c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80081c8:	887b      	ldrh	r3, [r7, #2]
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d103      	bne.n	80081d6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6819      	ldr	r1, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	43da      	mvns	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	400a      	ands	r2, r1
 80081e6:	601a      	str	r2, [r3, #0]
}
 80081e8:	bf00      	nop
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b20      	cmp	r3, #32
 8008208:	d138      	bne.n	800827c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008210:	2b01      	cmp	r3, #1
 8008212:	d101      	bne.n	8008218 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008214:	2302      	movs	r3, #2
 8008216:	e032      	b.n	800827e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2224      	movs	r2, #36	; 0x24
 8008224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0201 	bic.w	r2, r2, #1
 8008236:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008246:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6819      	ldr	r1, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f042 0201 	orr.w	r2, r2, #1
 8008266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2220      	movs	r2, #32
 800826c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	e000      	b.n	800827e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800827c:	2302      	movs	r3, #2
  }
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b20      	cmp	r3, #32
 800829e:	d139      	bne.n	8008314 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e033      	b.n	8008316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2224      	movs	r2, #36	; 0x24
 80082ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f022 0201 	bic.w	r2, r2, #1
 80082cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80082dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	021b      	lsls	r3, r3, #8
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2220      	movs	r2, #32
 8008304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	e000      	b.n	8008316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008314:	2302      	movs	r3, #2
  }
}
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
	...

08008324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800832a:	af00      	add	r7, sp, #0
 800832c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008330:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008334:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800833a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d102      	bne.n	800834a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	f001 b83a 	b.w	80093be <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800834a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800834e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 816f 	beq.w	800863e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008360:	4bb5      	ldr	r3, [pc, #724]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f003 030c 	and.w	r3, r3, #12
 8008368:	2b04      	cmp	r3, #4
 800836a:	d00c      	beq.n	8008386 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800836c:	4bb2      	ldr	r3, [pc, #712]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f003 030c 	and.w	r3, r3, #12
 8008374:	2b08      	cmp	r3, #8
 8008376:	d15c      	bne.n	8008432 <HAL_RCC_OscConfig+0x10e>
 8008378:	4baf      	ldr	r3, [pc, #700]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008384:	d155      	bne.n	8008432 <HAL_RCC_OscConfig+0x10e>
 8008386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800838a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800838e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008392:	fa93 f3a3 	rbit	r3, r3
 8008396:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800839a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800839e:	fab3 f383 	clz	r3, r3
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	095b      	lsrs	r3, r3, #5
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	f043 0301 	orr.w	r3, r3, #1
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d102      	bne.n	80083b8 <HAL_RCC_OscConfig+0x94>
 80083b2:	4ba1      	ldr	r3, [pc, #644]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	e015      	b.n	80083e4 <HAL_RCC_OscConfig+0xc0>
 80083b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80083c4:	fa93 f3a3 	rbit	r3, r3
 80083c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80083cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80083d4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80083d8:	fa93 f3a3 	rbit	r3, r3
 80083dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80083e0:	4b95      	ldr	r3, [pc, #596]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80083e8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80083ec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80083f0:	fa92 f2a2 	rbit	r2, r2
 80083f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80083f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80083fc:	fab2 f282 	clz	r2, r2
 8008400:	b2d2      	uxtb	r2, r2
 8008402:	f042 0220 	orr.w	r2, r2, #32
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	f002 021f 	and.w	r2, r2, #31
 800840c:	2101      	movs	r1, #1
 800840e:	fa01 f202 	lsl.w	r2, r1, r2
 8008412:	4013      	ands	r3, r2
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 8111 	beq.w	800863c <HAL_RCC_OscConfig+0x318>
 800841a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800841e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f040 8108 	bne.w	800863c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	f000 bfc6 	b.w	80093be <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008436:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008442:	d106      	bne.n	8008452 <HAL_RCC_OscConfig+0x12e>
 8008444:	4b7c      	ldr	r3, [pc, #496]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a7b      	ldr	r2, [pc, #492]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 800844a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	e036      	b.n	80084c0 <HAL_RCC_OscConfig+0x19c>
 8008452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008456:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10c      	bne.n	800847c <HAL_RCC_OscConfig+0x158>
 8008462:	4b75      	ldr	r3, [pc, #468]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a74      	ldr	r2, [pc, #464]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 8008468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	4b72      	ldr	r3, [pc, #456]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a71      	ldr	r2, [pc, #452]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 8008474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	e021      	b.n	80084c0 <HAL_RCC_OscConfig+0x19c>
 800847c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008480:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800848c:	d10c      	bne.n	80084a8 <HAL_RCC_OscConfig+0x184>
 800848e:	4b6a      	ldr	r3, [pc, #424]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a69      	ldr	r2, [pc, #420]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 8008494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	4b67      	ldr	r3, [pc, #412]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a66      	ldr	r2, [pc, #408]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 80084a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a4:	6013      	str	r3, [r2, #0]
 80084a6:	e00b      	b.n	80084c0 <HAL_RCC_OscConfig+0x19c>
 80084a8:	4b63      	ldr	r3, [pc, #396]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a62      	ldr	r2, [pc, #392]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 80084ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b2:	6013      	str	r3, [r2, #0]
 80084b4:	4b60      	ldr	r3, [pc, #384]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a5f      	ldr	r2, [pc, #380]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 80084ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084be:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d059      	beq.n	8008584 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084d0:	f7fc fb98 	bl	8004c04 <HAL_GetTick>
 80084d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084d8:	e00a      	b.n	80084f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084da:	f7fc fb93 	bl	8004c04 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	2b64      	cmp	r3, #100	; 0x64
 80084e8:	d902      	bls.n	80084f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	f000 bf67 	b.w	80093be <HAL_RCC_OscConfig+0x109a>
 80084f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084f4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80084fc:	fa93 f3a3 	rbit	r3, r3
 8008500:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8008504:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008508:	fab3 f383 	clz	r3, r3
 800850c:	b2db      	uxtb	r3, r3
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	b2db      	uxtb	r3, r3
 8008512:	f043 0301 	orr.w	r3, r3, #1
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b01      	cmp	r3, #1
 800851a:	d102      	bne.n	8008522 <HAL_RCC_OscConfig+0x1fe>
 800851c:	4b46      	ldr	r3, [pc, #280]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	e015      	b.n	800854e <HAL_RCC_OscConfig+0x22a>
 8008522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008526:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800852a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800852e:	fa93 f3a3 	rbit	r3, r3
 8008532:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800853a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800853e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8008542:	fa93 f3a3 	rbit	r3, r3
 8008546:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800854a:	4b3b      	ldr	r3, [pc, #236]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008552:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8008556:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800855a:	fa92 f2a2 	rbit	r2, r2
 800855e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8008562:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008566:	fab2 f282 	clz	r2, r2
 800856a:	b2d2      	uxtb	r2, r2
 800856c:	f042 0220 	orr.w	r2, r2, #32
 8008570:	b2d2      	uxtb	r2, r2
 8008572:	f002 021f 	and.w	r2, r2, #31
 8008576:	2101      	movs	r1, #1
 8008578:	fa01 f202 	lsl.w	r2, r1, r2
 800857c:	4013      	ands	r3, r2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0ab      	beq.n	80084da <HAL_RCC_OscConfig+0x1b6>
 8008582:	e05c      	b.n	800863e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008584:	f7fc fb3e 	bl	8004c04 <HAL_GetTick>
 8008588:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800858c:	e00a      	b.n	80085a4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800858e:	f7fc fb39 	bl	8004c04 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	2b64      	cmp	r3, #100	; 0x64
 800859c:	d902      	bls.n	80085a4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	f000 bf0d 	b.w	80093be <HAL_RCC_OscConfig+0x109a>
 80085a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80085b0:	fa93 f3a3 	rbit	r3, r3
 80085b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80085b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085bc:	fab3 f383 	clz	r3, r3
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	f043 0301 	orr.w	r3, r3, #1
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d102      	bne.n	80085d6 <HAL_RCC_OscConfig+0x2b2>
 80085d0:	4b19      	ldr	r3, [pc, #100]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	e015      	b.n	8008602 <HAL_RCC_OscConfig+0x2de>
 80085d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80085e2:	fa93 f3a3 	rbit	r3, r3
 80085e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80085ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80085f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80085f6:	fa93 f3a3 	rbit	r3, r3
 80085fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80085fe:	4b0e      	ldr	r3, [pc, #56]	; (8008638 <HAL_RCC_OscConfig+0x314>)
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008606:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800860a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800860e:	fa92 f2a2 	rbit	r2, r2
 8008612:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8008616:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800861a:	fab2 f282 	clz	r2, r2
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	f042 0220 	orr.w	r2, r2, #32
 8008624:	b2d2      	uxtb	r2, r2
 8008626:	f002 021f 	and.w	r2, r2, #31
 800862a:	2101      	movs	r1, #1
 800862c:	fa01 f202 	lsl.w	r2, r1, r2
 8008630:	4013      	ands	r3, r2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1ab      	bne.n	800858e <HAL_RCC_OscConfig+0x26a>
 8008636:	e002      	b.n	800863e <HAL_RCC_OscConfig+0x31a>
 8008638:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800863c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800863e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008642:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 817f 	beq.w	8008952 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008654:	4ba7      	ldr	r3, [pc, #668]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f003 030c 	and.w	r3, r3, #12
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00c      	beq.n	800867a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008660:	4ba4      	ldr	r3, [pc, #656]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f003 030c 	and.w	r3, r3, #12
 8008668:	2b08      	cmp	r3, #8
 800866a:	d173      	bne.n	8008754 <HAL_RCC_OscConfig+0x430>
 800866c:	4ba1      	ldr	r3, [pc, #644]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008678:	d16c      	bne.n	8008754 <HAL_RCC_OscConfig+0x430>
 800867a:	2302      	movs	r3, #2
 800867c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008680:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008684:	fa93 f3a3 	rbit	r3, r3
 8008688:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800868c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008690:	fab3 f383 	clz	r3, r3
 8008694:	b2db      	uxtb	r3, r3
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	b2db      	uxtb	r3, r3
 800869a:	f043 0301 	orr.w	r3, r3, #1
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d102      	bne.n	80086aa <HAL_RCC_OscConfig+0x386>
 80086a4:	4b93      	ldr	r3, [pc, #588]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	e013      	b.n	80086d2 <HAL_RCC_OscConfig+0x3ae>
 80086aa:	2302      	movs	r3, #2
 80086ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80086b4:	fa93 f3a3 	rbit	r3, r3
 80086b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80086bc:	2302      	movs	r3, #2
 80086be:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80086c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80086c6:	fa93 f3a3 	rbit	r3, r3
 80086ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80086ce:	4b89      	ldr	r3, [pc, #548]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 80086d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d2:	2202      	movs	r2, #2
 80086d4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80086d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80086dc:	fa92 f2a2 	rbit	r2, r2
 80086e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80086e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80086e8:	fab2 f282 	clz	r2, r2
 80086ec:	b2d2      	uxtb	r2, r2
 80086ee:	f042 0220 	orr.w	r2, r2, #32
 80086f2:	b2d2      	uxtb	r2, r2
 80086f4:	f002 021f 	and.w	r2, r2, #31
 80086f8:	2101      	movs	r1, #1
 80086fa:	fa01 f202 	lsl.w	r2, r1, r2
 80086fe:	4013      	ands	r3, r2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00a      	beq.n	800871a <HAL_RCC_OscConfig+0x3f6>
 8008704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008708:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d002      	beq.n	800871a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	f000 be52 	b.w	80093be <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800871a:	4b76      	ldr	r3, [pc, #472]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008726:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	21f8      	movs	r1, #248	; 0xf8
 8008730:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008734:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8008738:	fa91 f1a1 	rbit	r1, r1
 800873c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8008740:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8008744:	fab1 f181 	clz	r1, r1
 8008748:	b2c9      	uxtb	r1, r1
 800874a:	408b      	lsls	r3, r1
 800874c:	4969      	ldr	r1, [pc, #420]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 800874e:	4313      	orrs	r3, r2
 8008750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008752:	e0fe      	b.n	8008952 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008758:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 8088 	beq.w	8008876 <HAL_RCC_OscConfig+0x552>
 8008766:	2301      	movs	r3, #1
 8008768:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800876c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008770:	fa93 f3a3 	rbit	r3, r3
 8008774:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8008778:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800877c:	fab3 f383 	clz	r3, r3
 8008780:	b2db      	uxtb	r3, r3
 8008782:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008786:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	461a      	mov	r2, r3
 800878e:	2301      	movs	r3, #1
 8008790:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008792:	f7fc fa37 	bl	8004c04 <HAL_GetTick>
 8008796:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800879a:	e00a      	b.n	80087b2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800879c:	f7fc fa32 	bl	8004c04 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d902      	bls.n	80087b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	f000 be06 	b.w	80093be <HAL_RCC_OscConfig+0x109a>
 80087b2:	2302      	movs	r3, #2
 80087b4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80087bc:	fa93 f3a3 	rbit	r3, r3
 80087c0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80087c4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087c8:	fab3 f383 	clz	r3, r3
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	095b      	lsrs	r3, r3, #5
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	f043 0301 	orr.w	r3, r3, #1
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d102      	bne.n	80087e2 <HAL_RCC_OscConfig+0x4be>
 80087dc:	4b45      	ldr	r3, [pc, #276]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	e013      	b.n	800880a <HAL_RCC_OscConfig+0x4e6>
 80087e2:	2302      	movs	r3, #2
 80087e4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80087ec:	fa93 f3a3 	rbit	r3, r3
 80087f0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80087f4:	2302      	movs	r3, #2
 80087f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80087fa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80087fe:	fa93 f3a3 	rbit	r3, r3
 8008802:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008806:	4b3b      	ldr	r3, [pc, #236]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	2202      	movs	r2, #2
 800880c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008810:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008814:	fa92 f2a2 	rbit	r2, r2
 8008818:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800881c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008820:	fab2 f282 	clz	r2, r2
 8008824:	b2d2      	uxtb	r2, r2
 8008826:	f042 0220 	orr.w	r2, r2, #32
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	f002 021f 	and.w	r2, r2, #31
 8008830:	2101      	movs	r1, #1
 8008832:	fa01 f202 	lsl.w	r2, r1, r2
 8008836:	4013      	ands	r3, r2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0af      	beq.n	800879c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800883c:	4b2d      	ldr	r3, [pc, #180]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008848:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	21f8      	movs	r1, #248	; 0xf8
 8008852:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008856:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800885a:	fa91 f1a1 	rbit	r1, r1
 800885e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8008862:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008866:	fab1 f181 	clz	r1, r1
 800886a:	b2c9      	uxtb	r1, r1
 800886c:	408b      	lsls	r3, r1
 800886e:	4921      	ldr	r1, [pc, #132]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 8008870:	4313      	orrs	r3, r2
 8008872:	600b      	str	r3, [r1, #0]
 8008874:	e06d      	b.n	8008952 <HAL_RCC_OscConfig+0x62e>
 8008876:	2301      	movs	r3, #1
 8008878:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800887c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008880:	fa93 f3a3 	rbit	r3, r3
 8008884:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8008888:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800888c:	fab3 f383 	clz	r3, r3
 8008890:	b2db      	uxtb	r3, r3
 8008892:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008896:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	461a      	mov	r2, r3
 800889e:	2300      	movs	r3, #0
 80088a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088a2:	f7fc f9af 	bl	8004c04 <HAL_GetTick>
 80088a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088aa:	e00a      	b.n	80088c2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088ac:	f7fc f9aa 	bl	8004c04 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d902      	bls.n	80088c2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	f000 bd7e 	b.w	80093be <HAL_RCC_OscConfig+0x109a>
 80088c2:	2302      	movs	r3, #2
 80088c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088cc:	fa93 f3a3 	rbit	r3, r3
 80088d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80088d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088d8:	fab3 f383 	clz	r3, r3
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	095b      	lsrs	r3, r3, #5
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	f043 0301 	orr.w	r3, r3, #1
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d105      	bne.n	80088f8 <HAL_RCC_OscConfig+0x5d4>
 80088ec:	4b01      	ldr	r3, [pc, #4]	; (80088f4 <HAL_RCC_OscConfig+0x5d0>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	e016      	b.n	8008920 <HAL_RCC_OscConfig+0x5fc>
 80088f2:	bf00      	nop
 80088f4:	40021000 	.word	0x40021000
 80088f8:	2302      	movs	r3, #2
 80088fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008902:	fa93 f3a3 	rbit	r3, r3
 8008906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800890a:	2302      	movs	r3, #2
 800890c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008910:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008914:	fa93 f3a3 	rbit	r3, r3
 8008918:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800891c:	4bbf      	ldr	r3, [pc, #764]	; (8008c1c <HAL_RCC_OscConfig+0x8f8>)
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	2202      	movs	r2, #2
 8008922:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008926:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800892a:	fa92 f2a2 	rbit	r2, r2
 800892e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8008932:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008936:	fab2 f282 	clz	r2, r2
 800893a:	b2d2      	uxtb	r2, r2
 800893c:	f042 0220 	orr.w	r2, r2, #32
 8008940:	b2d2      	uxtb	r2, r2
 8008942:	f002 021f 	and.w	r2, r2, #31
 8008946:	2101      	movs	r1, #1
 8008948:	fa01 f202 	lsl.w	r2, r1, r2
 800894c:	4013      	ands	r3, r2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1ac      	bne.n	80088ac <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008956:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0308 	and.w	r3, r3, #8
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 8113 	beq.w	8008b8e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008968:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800896c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d07c      	beq.n	8008a72 <HAL_RCC_OscConfig+0x74e>
 8008978:	2301      	movs	r3, #1
 800897a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800897e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008982:	fa93 f3a3 	rbit	r3, r3
 8008986:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800898a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800898e:	fab3 f383 	clz	r3, r3
 8008992:	b2db      	uxtb	r3, r3
 8008994:	461a      	mov	r2, r3
 8008996:	4ba2      	ldr	r3, [pc, #648]	; (8008c20 <HAL_RCC_OscConfig+0x8fc>)
 8008998:	4413      	add	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	461a      	mov	r2, r3
 800899e:	2301      	movs	r3, #1
 80089a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089a2:	f7fc f92f 	bl	8004c04 <HAL_GetTick>
 80089a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089aa:	e00a      	b.n	80089c2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089ac:	f7fc f92a 	bl	8004c04 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d902      	bls.n	80089c2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	f000 bcfe 	b.w	80093be <HAL_RCC_OscConfig+0x109a>
 80089c2:	2302      	movs	r3, #2
 80089c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089cc:	fa93 f2a3 	rbit	r2, r3
 80089d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e2:	2202      	movs	r2, #2
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	fa93 f2a3 	rbit	r2, r3
 80089f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80089f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a06:	2202      	movs	r2, #2
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	fa93 f2a3 	rbit	r2, r3
 8008a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008a20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a22:	4b7e      	ldr	r3, [pc, #504]	; (8008c1c <HAL_RCC_OscConfig+0x8f8>)
 8008a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a2e:	2102      	movs	r1, #2
 8008a30:	6019      	str	r1, [r3, #0]
 8008a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	fa93 f1a3 	rbit	r1, r3
 8008a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008a48:	6019      	str	r1, [r3, #0]
  return result;
 8008a4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	fab3 f383 	clz	r3, r3
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2101      	movs	r1, #1
 8008a66:	fa01 f303 	lsl.w	r3, r1, r3
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d09d      	beq.n	80089ac <HAL_RCC_OscConfig+0x688>
 8008a70:	e08d      	b.n	8008b8e <HAL_RCC_OscConfig+0x86a>
 8008a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	fa93 f2a3 	rbit	r2, r3
 8008a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008a94:	601a      	str	r2, [r3, #0]
  return result;
 8008a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008a9e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008aa0:	fab3 f383 	clz	r3, r3
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	4b5d      	ldr	r3, [pc, #372]	; (8008c20 <HAL_RCC_OscConfig+0x8fc>)
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	461a      	mov	r2, r3
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ab4:	f7fc f8a6 	bl	8004c04 <HAL_GetTick>
 8008ab8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008abc:	e00a      	b.n	8008ad4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008abe:	f7fc f8a1 	bl	8004c04 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d902      	bls.n	8008ad4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	f000 bc75 	b.w	80093be <HAL_RCC_OscConfig+0x109a>
 8008ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ad8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008adc:	2202      	movs	r2, #2
 8008ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ae4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	fa93 f2a3 	rbit	r2, r3
 8008aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008af2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008afc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b00:	2202      	movs	r2, #2
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	fa93 f2a3 	rbit	r2, r3
 8008b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008b24:	2202      	movs	r2, #2
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	fa93 f2a3 	rbit	r2, r3
 8008b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008b3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b40:	4b36      	ldr	r3, [pc, #216]	; (8008c1c <HAL_RCC_OscConfig+0x8f8>)
 8008b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008b4c:	2102      	movs	r1, #2
 8008b4e:	6019      	str	r1, [r3, #0]
 8008b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	fa93 f1a3 	rbit	r1, r3
 8008b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b62:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008b66:	6019      	str	r1, [r3, #0]
  return result;
 8008b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	fab3 f383 	clz	r3, r3
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 031f 	and.w	r3, r3, #31
 8008b82:	2101      	movs	r1, #1
 8008b84:	fa01 f303 	lsl.w	r3, r1, r3
 8008b88:	4013      	ands	r3, r2
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d197      	bne.n	8008abe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008b92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0304 	and.w	r3, r3, #4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 81a5 	beq.w	8008eee <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008baa:	4b1c      	ldr	r3, [pc, #112]	; (8008c1c <HAL_RCC_OscConfig+0x8f8>)
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d116      	bne.n	8008be4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bb6:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <HAL_RCC_OscConfig+0x8f8>)
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	4a18      	ldr	r2, [pc, #96]	; (8008c1c <HAL_RCC_OscConfig+0x8f8>)
 8008bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bc0:	61d3      	str	r3, [r2, #28]
 8008bc2:	4b16      	ldr	r3, [pc, #88]	; (8008c1c <HAL_RCC_OscConfig+0x8f8>)
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008bdc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008bde:	2301      	movs	r3, #1
 8008be0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008be4:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <HAL_RCC_OscConfig+0x900>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d121      	bne.n	8008c34 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008bf0:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <HAL_RCC_OscConfig+0x900>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a0b      	ldr	r2, [pc, #44]	; (8008c24 <HAL_RCC_OscConfig+0x900>)
 8008bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bfa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bfc:	f7fc f802 	bl	8004c04 <HAL_GetTick>
 8008c00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c04:	e010      	b.n	8008c28 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c06:	f7fb fffd 	bl	8004c04 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	2b64      	cmp	r3, #100	; 0x64
 8008c14:	d908      	bls.n	8008c28 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e3d1      	b.n	80093be <HAL_RCC_OscConfig+0x109a>
 8008c1a:	bf00      	nop
 8008c1c:	40021000 	.word	0x40021000
 8008c20:	10908120 	.word	0x10908120
 8008c24:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c28:	4b8d      	ldr	r3, [pc, #564]	; (8008e60 <HAL_RCC_OscConfig+0xb3c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0e8      	beq.n	8008c06 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d106      	bne.n	8008c52 <HAL_RCC_OscConfig+0x92e>
 8008c44:	4b87      	ldr	r3, [pc, #540]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	4a86      	ldr	r2, [pc, #536]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008c4a:	f043 0301 	orr.w	r3, r3, #1
 8008c4e:	6213      	str	r3, [r2, #32]
 8008c50:	e035      	b.n	8008cbe <HAL_RCC_OscConfig+0x99a>
 8008c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10c      	bne.n	8008c7c <HAL_RCC_OscConfig+0x958>
 8008c62:	4b80      	ldr	r3, [pc, #512]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	4a7f      	ldr	r2, [pc, #508]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008c68:	f023 0301 	bic.w	r3, r3, #1
 8008c6c:	6213      	str	r3, [r2, #32]
 8008c6e:	4b7d      	ldr	r3, [pc, #500]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	4a7c      	ldr	r2, [pc, #496]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008c74:	f023 0304 	bic.w	r3, r3, #4
 8008c78:	6213      	str	r3, [r2, #32]
 8008c7a:	e020      	b.n	8008cbe <HAL_RCC_OscConfig+0x99a>
 8008c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	2b05      	cmp	r3, #5
 8008c8a:	d10c      	bne.n	8008ca6 <HAL_RCC_OscConfig+0x982>
 8008c8c:	4b75      	ldr	r3, [pc, #468]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	4a74      	ldr	r2, [pc, #464]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008c92:	f043 0304 	orr.w	r3, r3, #4
 8008c96:	6213      	str	r3, [r2, #32]
 8008c98:	4b72      	ldr	r3, [pc, #456]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008c9a:	6a1b      	ldr	r3, [r3, #32]
 8008c9c:	4a71      	ldr	r2, [pc, #452]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008c9e:	f043 0301 	orr.w	r3, r3, #1
 8008ca2:	6213      	str	r3, [r2, #32]
 8008ca4:	e00b      	b.n	8008cbe <HAL_RCC_OscConfig+0x99a>
 8008ca6:	4b6f      	ldr	r3, [pc, #444]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	4a6e      	ldr	r2, [pc, #440]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008cac:	f023 0301 	bic.w	r3, r3, #1
 8008cb0:	6213      	str	r3, [r2, #32]
 8008cb2:	4b6c      	ldr	r3, [pc, #432]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	4a6b      	ldr	r2, [pc, #428]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008cb8:	f023 0304 	bic.w	r3, r3, #4
 8008cbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008cc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 8081 	beq.w	8008dd2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cd0:	f7fb ff98 	bl	8004c04 <HAL_GetTick>
 8008cd4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cd8:	e00b      	b.n	8008cf2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cda:	f7fb ff93 	bl	8004c04 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d901      	bls.n	8008cf2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e365      	b.n	80093be <HAL_RCC_OscConfig+0x109a>
 8008cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008cf6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	fa93 f2a3 	rbit	r2, r3
 8008d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008d1e:	2202      	movs	r2, #2
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	fa93 f2a3 	rbit	r2, r3
 8008d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008d38:	601a      	str	r2, [r3, #0]
  return result;
 8008d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d3e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008d42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d44:	fab3 f383 	clz	r3, r3
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	095b      	lsrs	r3, r3, #5
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	f043 0302 	orr.w	r3, r3, #2
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d102      	bne.n	8008d5e <HAL_RCC_OscConfig+0xa3a>
 8008d58:	4b42      	ldr	r3, [pc, #264]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	e013      	b.n	8008d86 <HAL_RCC_OscConfig+0xa62>
 8008d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d62:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008d66:	2202      	movs	r2, #2
 8008d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	fa93 f2a3 	rbit	r2, r3
 8008d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d7c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	4b38      	ldr	r3, [pc, #224]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008d8a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008d8e:	2102      	movs	r1, #2
 8008d90:	6011      	str	r1, [r2, #0]
 8008d92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008d96:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008d9a:	6812      	ldr	r2, [r2, #0]
 8008d9c:	fa92 f1a2 	rbit	r1, r2
 8008da0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008da4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8008da8:	6011      	str	r1, [r2, #0]
  return result;
 8008daa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008dae:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8008db2:	6812      	ldr	r2, [r2, #0]
 8008db4:	fab2 f282 	clz	r2, r2
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dbe:	b2d2      	uxtb	r2, r2
 8008dc0:	f002 021f 	and.w	r2, r2, #31
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8008dca:	4013      	ands	r3, r2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d084      	beq.n	8008cda <HAL_RCC_OscConfig+0x9b6>
 8008dd0:	e083      	b.n	8008eda <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dd2:	f7fb ff17 	bl	8004c04 <HAL_GetTick>
 8008dd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dda:	e00b      	b.n	8008df4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ddc:	f7fb ff12 	bl	8004c04 <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e2e4      	b.n	80093be <HAL_RCC_OscConfig+0x109a>
 8008df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008df8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	fa93 f2a3 	rbit	r2, r3
 8008e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008e20:	2202      	movs	r2, #2
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	fa93 f2a3 	rbit	r2, r3
 8008e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008e3a:	601a      	str	r2, [r3, #0]
  return result;
 8008e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e40:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008e44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e46:	fab3 f383 	clz	r3, r3
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	f043 0302 	orr.w	r3, r3, #2
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d106      	bne.n	8008e68 <HAL_RCC_OscConfig+0xb44>
 8008e5a:	4b02      	ldr	r3, [pc, #8]	; (8008e64 <HAL_RCC_OscConfig+0xb40>)
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	e017      	b.n	8008e90 <HAL_RCC_OscConfig+0xb6c>
 8008e60:	40007000 	.word	0x40007000
 8008e64:	40021000 	.word	0x40021000
 8008e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008e70:	2202      	movs	r2, #2
 8008e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	fa93 f2a3 	rbit	r2, r3
 8008e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e86:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	4bb3      	ldr	r3, [pc, #716]	; (800915c <HAL_RCC_OscConfig+0xe38>)
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008e94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008e98:	2102      	movs	r1, #2
 8008e9a:	6011      	str	r1, [r2, #0]
 8008e9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008ea0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008ea4:	6812      	ldr	r2, [r2, #0]
 8008ea6:	fa92 f1a2 	rbit	r1, r2
 8008eaa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008eae:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8008eb2:	6011      	str	r1, [r2, #0]
  return result;
 8008eb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008eb8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8008ebc:	6812      	ldr	r2, [r2, #0]
 8008ebe:	fab2 f282 	clz	r2, r2
 8008ec2:	b2d2      	uxtb	r2, r2
 8008ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ec8:	b2d2      	uxtb	r2, r2
 8008eca:	f002 021f 	and.w	r2, r2, #31
 8008ece:	2101      	movs	r1, #1
 8008ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d180      	bne.n	8008ddc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008eda:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d105      	bne.n	8008eee <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ee2:	4b9e      	ldr	r3, [pc, #632]	; (800915c <HAL_RCC_OscConfig+0xe38>)
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	4a9d      	ldr	r2, [pc, #628]	; (800915c <HAL_RCC_OscConfig+0xe38>)
 8008ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ef2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 825e 	beq.w	80093bc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f00:	4b96      	ldr	r3, [pc, #600]	; (800915c <HAL_RCC_OscConfig+0xe38>)
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f003 030c 	and.w	r3, r3, #12
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	f000 821f 	beq.w	800934c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	f040 8170 	bne.w	8009200 <HAL_RCC_OscConfig+0xedc>
 8008f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f24:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f32:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	fa93 f2a3 	rbit	r2, r3
 8008f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f40:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008f44:	601a      	str	r2, [r3, #0]
  return result;
 8008f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f4a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008f4e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f50:	fab3 f383 	clz	r3, r3
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008f5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	461a      	mov	r2, r3
 8008f62:	2300      	movs	r3, #0
 8008f64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f66:	f7fb fe4d 	bl	8004c04 <HAL_GetTick>
 8008f6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f6e:	e009      	b.n	8008f84 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f70:	f7fb fe48 	bl	8004c04 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d901      	bls.n	8008f84 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e21c      	b.n	80093be <HAL_RCC_OscConfig+0x109a>
 8008f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f88:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008f8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f96:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	fa93 f2a3 	rbit	r2, r3
 8008fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fa4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008fa8:	601a      	str	r2, [r3, #0]
  return result;
 8008faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008fb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fb4:	fab3 f383 	clz	r3, r3
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	095b      	lsrs	r3, r3, #5
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	f043 0301 	orr.w	r3, r3, #1
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d102      	bne.n	8008fce <HAL_RCC_OscConfig+0xcaa>
 8008fc8:	4b64      	ldr	r3, [pc, #400]	; (800915c <HAL_RCC_OscConfig+0xe38>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	e027      	b.n	800901e <HAL_RCC_OscConfig+0xcfa>
 8008fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fd2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008fd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008fda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fe0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	fa93 f2a3 	rbit	r2, r3
 8008fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ff8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008ffc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009006:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	fa93 f2a3 	rbit	r2, r3
 8009010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009014:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	4b50      	ldr	r3, [pc, #320]	; (800915c <HAL_RCC_OscConfig+0xe38>)
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009022:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009026:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800902a:	6011      	str	r1, [r2, #0]
 800902c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009030:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	fa92 f1a2 	rbit	r1, r2
 800903a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800903e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8009042:	6011      	str	r1, [r2, #0]
  return result;
 8009044:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009048:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800904c:	6812      	ldr	r2, [r2, #0]
 800904e:	fab2 f282 	clz	r2, r2
 8009052:	b2d2      	uxtb	r2, r2
 8009054:	f042 0220 	orr.w	r2, r2, #32
 8009058:	b2d2      	uxtb	r2, r2
 800905a:	f002 021f 	and.w	r2, r2, #31
 800905e:	2101      	movs	r1, #1
 8009060:	fa01 f202 	lsl.w	r2, r1, r2
 8009064:	4013      	ands	r3, r2
 8009066:	2b00      	cmp	r3, #0
 8009068:	d182      	bne.n	8008f70 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800906a:	4b3c      	ldr	r3, [pc, #240]	; (800915c <HAL_RCC_OscConfig+0xe38>)
 800906c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906e:	f023 020f 	bic.w	r2, r3, #15
 8009072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009076:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	4937      	ldr	r1, [pc, #220]	; (800915c <HAL_RCC_OscConfig+0xe38>)
 8009080:	4313      	orrs	r3, r2
 8009082:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009084:	4b35      	ldr	r3, [pc, #212]	; (800915c <HAL_RCC_OscConfig+0xe38>)
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800908c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009090:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6a19      	ldr	r1, [r3, #32]
 8009098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800909c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69db      	ldr	r3, [r3, #28]
 80090a4:	430b      	orrs	r3, r1
 80090a6:	492d      	ldr	r1, [pc, #180]	; (800915c <HAL_RCC_OscConfig+0xe38>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	604b      	str	r3, [r1, #4]
 80090ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80090b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	fa93 f2a3 	rbit	r2, r3
 80090c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80090d0:	601a      	str	r2, [r3, #0]
  return result;
 80090d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80090da:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090dc:	fab3 f383 	clz	r3, r3
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80090e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	461a      	mov	r2, r3
 80090ee:	2301      	movs	r3, #1
 80090f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090f2:	f7fb fd87 	bl	8004c04 <HAL_GetTick>
 80090f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80090fa:	e009      	b.n	8009110 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090fc:	f7fb fd82 	bl	8004c04 <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	d901      	bls.n	8009110 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e156      	b.n	80093be <HAL_RCC_OscConfig+0x109a>
 8009110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009114:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800911c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800911e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009122:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	fa93 f2a3 	rbit	r2, r3
 800912c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009130:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009134:	601a      	str	r2, [r3, #0]
  return result;
 8009136:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800913a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800913e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009140:	fab3 f383 	clz	r3, r3
 8009144:	b2db      	uxtb	r3, r3
 8009146:	095b      	lsrs	r3, r3, #5
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f043 0301 	orr.w	r3, r3, #1
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b01      	cmp	r3, #1
 8009152:	d105      	bne.n	8009160 <HAL_RCC_OscConfig+0xe3c>
 8009154:	4b01      	ldr	r3, [pc, #4]	; (800915c <HAL_RCC_OscConfig+0xe38>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	e02a      	b.n	80091b0 <HAL_RCC_OscConfig+0xe8c>
 800915a:	bf00      	nop
 800915c:	40021000 	.word	0x40021000
 8009160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009164:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800916c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800916e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009172:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	fa93 f2a3 	rbit	r2, r3
 800917c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009180:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800918a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800918e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009198:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	fa93 f2a3 	rbit	r2, r3
 80091a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091a6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	4b86      	ldr	r3, [pc, #536]	; (80093c8 <HAL_RCC_OscConfig+0x10a4>)
 80091ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80091b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80091b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80091bc:	6011      	str	r1, [r2, #0]
 80091be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80091c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	fa92 f1a2 	rbit	r1, r2
 80091cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80091d0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80091d4:	6011      	str	r1, [r2, #0]
  return result;
 80091d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80091da:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80091de:	6812      	ldr	r2, [r2, #0]
 80091e0:	fab2 f282 	clz	r2, r2
 80091e4:	b2d2      	uxtb	r2, r2
 80091e6:	f042 0220 	orr.w	r2, r2, #32
 80091ea:	b2d2      	uxtb	r2, r2
 80091ec:	f002 021f 	and.w	r2, r2, #31
 80091f0:	2101      	movs	r1, #1
 80091f2:	fa01 f202 	lsl.w	r2, r1, r2
 80091f6:	4013      	ands	r3, r2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f43f af7f 	beq.w	80090fc <HAL_RCC_OscConfig+0xdd8>
 80091fe:	e0dd      	b.n	80093bc <HAL_RCC_OscConfig+0x1098>
 8009200:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009204:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800920c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800920e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009212:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	fa93 f2a3 	rbit	r2, r3
 800921c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009220:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009224:	601a      	str	r2, [r3, #0]
  return result;
 8009226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800922a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800922e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009230:	fab3 f383 	clz	r3, r3
 8009234:	b2db      	uxtb	r3, r3
 8009236:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800923a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	461a      	mov	r2, r3
 8009242:	2300      	movs	r3, #0
 8009244:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009246:	f7fb fcdd 	bl	8004c04 <HAL_GetTick>
 800924a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800924e:	e009      	b.n	8009264 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009250:	f7fb fcd8 	bl	8004c04 <HAL_GetTick>
 8009254:	4602      	mov	r2, r0
 8009256:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	2b02      	cmp	r3, #2
 800925e:	d901      	bls.n	8009264 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e0ac      	b.n	80093be <HAL_RCC_OscConfig+0x109a>
 8009264:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009268:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800926c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009276:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	fa93 f2a3 	rbit	r2, r3
 8009280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009284:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009288:	601a      	str	r2, [r3, #0]
  return result;
 800928a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800928e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009292:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009294:	fab3 f383 	clz	r3, r3
 8009298:	b2db      	uxtb	r3, r3
 800929a:	095b      	lsrs	r3, r3, #5
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f043 0301 	orr.w	r3, r3, #1
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d102      	bne.n	80092ae <HAL_RCC_OscConfig+0xf8a>
 80092a8:	4b47      	ldr	r3, [pc, #284]	; (80093c8 <HAL_RCC_OscConfig+0x10a4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	e027      	b.n	80092fe <HAL_RCC_OscConfig+0xfda>
 80092ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092b2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80092b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80092ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092c0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	fa93 f2a3 	rbit	r2, r3
 80092ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092d8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80092dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	fa93 f2a3 	rbit	r2, r3
 80092f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092f4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	4b33      	ldr	r3, [pc, #204]	; (80093c8 <HAL_RCC_OscConfig+0x10a4>)
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009302:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009306:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800930a:	6011      	str	r1, [r2, #0]
 800930c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009310:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009314:	6812      	ldr	r2, [r2, #0]
 8009316:	fa92 f1a2 	rbit	r1, r2
 800931a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800931e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8009322:	6011      	str	r1, [r2, #0]
  return result;
 8009324:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009328:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	fab2 f282 	clz	r2, r2
 8009332:	b2d2      	uxtb	r2, r2
 8009334:	f042 0220 	orr.w	r2, r2, #32
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	f002 021f 	and.w	r2, r2, #31
 800933e:	2101      	movs	r1, #1
 8009340:	fa01 f202 	lsl.w	r2, r1, r2
 8009344:	4013      	ands	r3, r2
 8009346:	2b00      	cmp	r3, #0
 8009348:	d182      	bne.n	8009250 <HAL_RCC_OscConfig+0xf2c>
 800934a:	e037      	b.n	80093bc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800934c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009350:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d101      	bne.n	8009360 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e02e      	b.n	80093be <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009360:	4b19      	ldr	r3, [pc, #100]	; (80093c8 <HAL_RCC_OscConfig+0x10a4>)
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8009368:	4b17      	ldr	r3, [pc, #92]	; (80093c8 <HAL_RCC_OscConfig+0x10a4>)
 800936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009370:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009374:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8009378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800937c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	429a      	cmp	r2, r3
 8009386:	d117      	bne.n	80093b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009388:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800938c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009394:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800939c:	429a      	cmp	r2, r3
 800939e:	d10b      	bne.n	80093b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80093a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80093a4:	f003 020f 	and.w	r2, r3, #15
 80093a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d001      	beq.n	80093bc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e000      	b.n	80093be <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	40021000 	.word	0x40021000

080093cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b09e      	sub	sp, #120	; 0x78
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80093d6:	2300      	movs	r3, #0
 80093d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e162      	b.n	80096aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80093e4:	4b90      	ldr	r3, [pc, #576]	; (8009628 <HAL_RCC_ClockConfig+0x25c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0307 	and.w	r3, r3, #7
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d910      	bls.n	8009414 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093f2:	4b8d      	ldr	r3, [pc, #564]	; (8009628 <HAL_RCC_ClockConfig+0x25c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f023 0207 	bic.w	r2, r3, #7
 80093fa:	498b      	ldr	r1, [pc, #556]	; (8009628 <HAL_RCC_ClockConfig+0x25c>)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	4313      	orrs	r3, r2
 8009400:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009402:	4b89      	ldr	r3, [pc, #548]	; (8009628 <HAL_RCC_ClockConfig+0x25c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	429a      	cmp	r2, r3
 800940e:	d001      	beq.n	8009414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e14a      	b.n	80096aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 0302 	and.w	r3, r3, #2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d008      	beq.n	8009432 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009420:	4b82      	ldr	r3, [pc, #520]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	497f      	ldr	r1, [pc, #508]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 800942e:	4313      	orrs	r3, r2
 8009430:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 80dc 	beq.w	80095f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d13c      	bne.n	80094c2 <HAL_RCC_ClockConfig+0xf6>
 8009448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800944c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800944e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009450:	fa93 f3a3 	rbit	r3, r3
 8009454:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009458:	fab3 f383 	clz	r3, r3
 800945c:	b2db      	uxtb	r3, r3
 800945e:	095b      	lsrs	r3, r3, #5
 8009460:	b2db      	uxtb	r3, r3
 8009462:	f043 0301 	orr.w	r3, r3, #1
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b01      	cmp	r3, #1
 800946a:	d102      	bne.n	8009472 <HAL_RCC_ClockConfig+0xa6>
 800946c:	4b6f      	ldr	r3, [pc, #444]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	e00f      	b.n	8009492 <HAL_RCC_ClockConfig+0xc6>
 8009472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009476:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800947a:	fa93 f3a3 	rbit	r3, r3
 800947e:	667b      	str	r3, [r7, #100]	; 0x64
 8009480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009484:	663b      	str	r3, [r7, #96]	; 0x60
 8009486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009488:	fa93 f3a3 	rbit	r3, r3
 800948c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800948e:	4b67      	ldr	r3, [pc, #412]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 8009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009492:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009496:	65ba      	str	r2, [r7, #88]	; 0x58
 8009498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800949a:	fa92 f2a2 	rbit	r2, r2
 800949e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80094a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094a2:	fab2 f282 	clz	r2, r2
 80094a6:	b2d2      	uxtb	r2, r2
 80094a8:	f042 0220 	orr.w	r2, r2, #32
 80094ac:	b2d2      	uxtb	r2, r2
 80094ae:	f002 021f 	and.w	r2, r2, #31
 80094b2:	2101      	movs	r1, #1
 80094b4:	fa01 f202 	lsl.w	r2, r1, r2
 80094b8:	4013      	ands	r3, r2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d17b      	bne.n	80095b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e0f3      	b.n	80096aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d13c      	bne.n	8009544 <HAL_RCC_ClockConfig+0x178>
 80094ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094d2:	fa93 f3a3 	rbit	r3, r3
 80094d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80094d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094da:	fab3 f383 	clz	r3, r3
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	095b      	lsrs	r3, r3, #5
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f043 0301 	orr.w	r3, r3, #1
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d102      	bne.n	80094f4 <HAL_RCC_ClockConfig+0x128>
 80094ee:	4b4f      	ldr	r3, [pc, #316]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	e00f      	b.n	8009514 <HAL_RCC_ClockConfig+0x148>
 80094f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094fc:	fa93 f3a3 	rbit	r3, r3
 8009500:	647b      	str	r3, [r7, #68]	; 0x44
 8009502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009506:	643b      	str	r3, [r7, #64]	; 0x40
 8009508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950a:	fa93 f3a3 	rbit	r3, r3
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009510:	4b46      	ldr	r3, [pc, #280]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 8009512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009518:	63ba      	str	r2, [r7, #56]	; 0x38
 800951a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800951c:	fa92 f2a2 	rbit	r2, r2
 8009520:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8009522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009524:	fab2 f282 	clz	r2, r2
 8009528:	b2d2      	uxtb	r2, r2
 800952a:	f042 0220 	orr.w	r2, r2, #32
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	f002 021f 	and.w	r2, r2, #31
 8009534:	2101      	movs	r1, #1
 8009536:	fa01 f202 	lsl.w	r2, r1, r2
 800953a:	4013      	ands	r3, r2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d13a      	bne.n	80095b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e0b2      	b.n	80096aa <HAL_RCC_ClockConfig+0x2de>
 8009544:	2302      	movs	r3, #2
 8009546:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	fa93 f3a3 	rbit	r3, r3
 800954e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009552:	fab3 f383 	clz	r3, r3
 8009556:	b2db      	uxtb	r3, r3
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f043 0301 	orr.w	r3, r3, #1
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b01      	cmp	r3, #1
 8009564:	d102      	bne.n	800956c <HAL_RCC_ClockConfig+0x1a0>
 8009566:	4b31      	ldr	r3, [pc, #196]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	e00d      	b.n	8009588 <HAL_RCC_ClockConfig+0x1bc>
 800956c:	2302      	movs	r3, #2
 800956e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009572:	fa93 f3a3 	rbit	r3, r3
 8009576:	627b      	str	r3, [r7, #36]	; 0x24
 8009578:	2302      	movs	r3, #2
 800957a:	623b      	str	r3, [r7, #32]
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	fa93 f3a3 	rbit	r3, r3
 8009582:	61fb      	str	r3, [r7, #28]
 8009584:	4b29      	ldr	r3, [pc, #164]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	2202      	movs	r2, #2
 800958a:	61ba      	str	r2, [r7, #24]
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	fa92 f2a2 	rbit	r2, r2
 8009592:	617a      	str	r2, [r7, #20]
  return result;
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	fab2 f282 	clz	r2, r2
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	f042 0220 	orr.w	r2, r2, #32
 80095a0:	b2d2      	uxtb	r2, r2
 80095a2:	f002 021f 	and.w	r2, r2, #31
 80095a6:	2101      	movs	r1, #1
 80095a8:	fa01 f202 	lsl.w	r2, r1, r2
 80095ac:	4013      	ands	r3, r2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e079      	b.n	80096aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80095b6:	4b1d      	ldr	r3, [pc, #116]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f023 0203 	bic.w	r2, r3, #3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	491a      	ldr	r1, [pc, #104]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80095c8:	f7fb fb1c 	bl	8004c04 <HAL_GetTick>
 80095cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095ce:	e00a      	b.n	80095e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095d0:	f7fb fb18 	bl	8004c04 <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	f241 3288 	movw	r2, #5000	; 0x1388
 80095de:	4293      	cmp	r3, r2
 80095e0:	d901      	bls.n	80095e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80095e2:	2303      	movs	r3, #3
 80095e4:	e061      	b.n	80096aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095e6:	4b11      	ldr	r3, [pc, #68]	; (800962c <HAL_RCC_ClockConfig+0x260>)
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	f003 020c 	and.w	r2, r3, #12
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d1eb      	bne.n	80095d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095f8:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <HAL_RCC_ClockConfig+0x25c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d214      	bcs.n	8009630 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009606:	4b08      	ldr	r3, [pc, #32]	; (8009628 <HAL_RCC_ClockConfig+0x25c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f023 0207 	bic.w	r2, r3, #7
 800960e:	4906      	ldr	r1, [pc, #24]	; (8009628 <HAL_RCC_ClockConfig+0x25c>)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	4313      	orrs	r3, r2
 8009614:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009616:	4b04      	ldr	r3, [pc, #16]	; (8009628 <HAL_RCC_ClockConfig+0x25c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0307 	and.w	r3, r3, #7
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	429a      	cmp	r2, r3
 8009622:	d005      	beq.n	8009630 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e040      	b.n	80096aa <HAL_RCC_ClockConfig+0x2de>
 8009628:	40022000 	.word	0x40022000
 800962c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b00      	cmp	r3, #0
 800963a:	d008      	beq.n	800964e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800963c:	4b1d      	ldr	r3, [pc, #116]	; (80096b4 <HAL_RCC_ClockConfig+0x2e8>)
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	491a      	ldr	r1, [pc, #104]	; (80096b4 <HAL_RCC_ClockConfig+0x2e8>)
 800964a:	4313      	orrs	r3, r2
 800964c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0308 	and.w	r3, r3, #8
 8009656:	2b00      	cmp	r3, #0
 8009658:	d009      	beq.n	800966e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800965a:	4b16      	ldr	r3, [pc, #88]	; (80096b4 <HAL_RCC_ClockConfig+0x2e8>)
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	4912      	ldr	r1, [pc, #72]	; (80096b4 <HAL_RCC_ClockConfig+0x2e8>)
 800966a:	4313      	orrs	r3, r2
 800966c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800966e:	f000 f829 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 8009672:	4601      	mov	r1, r0
 8009674:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <HAL_RCC_ClockConfig+0x2e8>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800967c:	22f0      	movs	r2, #240	; 0xf0
 800967e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	fa92 f2a2 	rbit	r2, r2
 8009686:	60fa      	str	r2, [r7, #12]
  return result;
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	fab2 f282 	clz	r2, r2
 800968e:	b2d2      	uxtb	r2, r2
 8009690:	40d3      	lsrs	r3, r2
 8009692:	4a09      	ldr	r2, [pc, #36]	; (80096b8 <HAL_RCC_ClockConfig+0x2ec>)
 8009694:	5cd3      	ldrb	r3, [r2, r3]
 8009696:	fa21 f303 	lsr.w	r3, r1, r3
 800969a:	4a08      	ldr	r2, [pc, #32]	; (80096bc <HAL_RCC_ClockConfig+0x2f0>)
 800969c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800969e:	4b08      	ldr	r3, [pc, #32]	; (80096c0 <HAL_RCC_ClockConfig+0x2f4>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fb fa6a 	bl	8004b7c <HAL_InitTick>
  
  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3778      	adds	r7, #120	; 0x78
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	40021000 	.word	0x40021000
 80096b8:	08013e2c 	.word	0x08013e2c
 80096bc:	2000000c 	.word	0x2000000c
 80096c0:	20000010 	.word	0x20000010

080096c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b08b      	sub	sp, #44	; 0x2c
 80096c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	2300      	movs	r3, #0
 80096d0:	61bb      	str	r3, [r7, #24]
 80096d2:	2300      	movs	r3, #0
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
 80096d6:	2300      	movs	r3, #0
 80096d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80096de:	4b2a      	ldr	r3, [pc, #168]	; (8009788 <HAL_RCC_GetSysClockFreq+0xc4>)
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	f003 030c 	and.w	r3, r3, #12
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	d002      	beq.n	80096f4 <HAL_RCC_GetSysClockFreq+0x30>
 80096ee:	2b08      	cmp	r3, #8
 80096f0:	d003      	beq.n	80096fa <HAL_RCC_GetSysClockFreq+0x36>
 80096f2:	e03f      	b.n	8009774 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80096f4:	4b25      	ldr	r3, [pc, #148]	; (800978c <HAL_RCC_GetSysClockFreq+0xc8>)
 80096f6:	623b      	str	r3, [r7, #32]
      break;
 80096f8:	e03f      	b.n	800977a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8009700:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8009704:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	fa92 f2a2 	rbit	r2, r2
 800970c:	607a      	str	r2, [r7, #4]
  return result;
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	fab2 f282 	clz	r2, r2
 8009714:	b2d2      	uxtb	r2, r2
 8009716:	40d3      	lsrs	r3, r2
 8009718:	4a1d      	ldr	r2, [pc, #116]	; (8009790 <HAL_RCC_GetSysClockFreq+0xcc>)
 800971a:	5cd3      	ldrb	r3, [r2, r3]
 800971c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800971e:	4b1a      	ldr	r3, [pc, #104]	; (8009788 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009722:	f003 030f 	and.w	r3, r3, #15
 8009726:	220f      	movs	r2, #15
 8009728:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	fa92 f2a2 	rbit	r2, r2
 8009730:	60fa      	str	r2, [r7, #12]
  return result;
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	fab2 f282 	clz	r2, r2
 8009738:	b2d2      	uxtb	r2, r2
 800973a:	40d3      	lsrs	r3, r2
 800973c:	4a15      	ldr	r2, [pc, #84]	; (8009794 <HAL_RCC_GetSysClockFreq+0xd0>)
 800973e:	5cd3      	ldrb	r3, [r2, r3]
 8009740:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d008      	beq.n	800975e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800974c:	4a0f      	ldr	r2, [pc, #60]	; (800978c <HAL_RCC_GetSysClockFreq+0xc8>)
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	fbb2 f2f3 	udiv	r2, r2, r3
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	fb02 f303 	mul.w	r3, r2, r3
 800975a:	627b      	str	r3, [r7, #36]	; 0x24
 800975c:	e007      	b.n	800976e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800975e:	4a0b      	ldr	r2, [pc, #44]	; (800978c <HAL_RCC_GetSysClockFreq+0xc8>)
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	fbb2 f2f3 	udiv	r2, r2, r3
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	fb02 f303 	mul.w	r3, r2, r3
 800976c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009770:	623b      	str	r3, [r7, #32]
      break;
 8009772:	e002      	b.n	800977a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009774:	4b05      	ldr	r3, [pc, #20]	; (800978c <HAL_RCC_GetSysClockFreq+0xc8>)
 8009776:	623b      	str	r3, [r7, #32]
      break;
 8009778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800977a:	6a3b      	ldr	r3, [r7, #32]
}
 800977c:	4618      	mov	r0, r3
 800977e:	372c      	adds	r7, #44	; 0x2c
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	40021000 	.word	0x40021000
 800978c:	007a1200 	.word	0x007a1200
 8009790:	08013e44 	.word	0x08013e44
 8009794:	08013e54 	.word	0x08013e54

08009798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800979c:	4b03      	ldr	r3, [pc, #12]	; (80097ac <HAL_RCC_GetHCLKFreq+0x14>)
 800979e:	681b      	ldr	r3, [r3, #0]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	2000000c 	.word	0x2000000c

080097b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80097b6:	f7ff ffef 	bl	8009798 <HAL_RCC_GetHCLKFreq>
 80097ba:	4601      	mov	r1, r0
 80097bc:	4b0b      	ldr	r3, [pc, #44]	; (80097ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80097c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	fa92 f2a2 	rbit	r2, r2
 80097d0:	603a      	str	r2, [r7, #0]
  return result;
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	fab2 f282 	clz	r2, r2
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	40d3      	lsrs	r3, r2
 80097dc:	4a04      	ldr	r2, [pc, #16]	; (80097f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80097de:	5cd3      	ldrb	r3, [r2, r3]
 80097e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	40021000 	.word	0x40021000
 80097f0:	08013e3c 	.word	0x08013e3c

080097f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80097fa:	f7ff ffcd 	bl	8009798 <HAL_RCC_GetHCLKFreq>
 80097fe:	4601      	mov	r1, r0
 8009800:	4b0b      	ldr	r3, [pc, #44]	; (8009830 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8009808:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800980c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	fa92 f2a2 	rbit	r2, r2
 8009814:	603a      	str	r2, [r7, #0]
  return result;
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	fab2 f282 	clz	r2, r2
 800981c:	b2d2      	uxtb	r2, r2
 800981e:	40d3      	lsrs	r3, r2
 8009820:	4a04      	ldr	r2, [pc, #16]	; (8009834 <HAL_RCC_GetPCLK2Freq+0x40>)
 8009822:	5cd3      	ldrb	r3, [r2, r3]
 8009824:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	40021000 	.word	0x40021000
 8009834:	08013e3c 	.word	0x08013e3c

08009838 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b092      	sub	sp, #72	; 0x48
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009840:	2300      	movs	r3, #0
 8009842:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8009848:	2300      	movs	r3, #0
 800984a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 80d4 	beq.w	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800985c:	4b4e      	ldr	r3, [pc, #312]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10e      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009868:	4b4b      	ldr	r3, [pc, #300]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	4a4a      	ldr	r2, [pc, #296]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800986e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009872:	61d3      	str	r3, [r2, #28]
 8009874:	4b48      	ldr	r3, [pc, #288]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800987c:	60bb      	str	r3, [r7, #8]
 800987e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009880:	2301      	movs	r3, #1
 8009882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009886:	4b45      	ldr	r3, [pc, #276]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800988e:	2b00      	cmp	r3, #0
 8009890:	d118      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009892:	4b42      	ldr	r3, [pc, #264]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a41      	ldr	r2, [pc, #260]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800989c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800989e:	f7fb f9b1 	bl	8004c04 <HAL_GetTick>
 80098a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098a4:	e008      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098a6:	f7fb f9ad 	bl	8004c04 <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b64      	cmp	r3, #100	; 0x64
 80098b2:	d901      	bls.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e1d6      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098b8:	4b38      	ldr	r3, [pc, #224]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d0f0      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80098c4:	4b34      	ldr	r3, [pc, #208]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80098ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 8084 	beq.w	80099de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d07c      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098e4:	4b2c      	ldr	r3, [pc, #176]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80098e6:	6a1b      	ldr	r3, [r3, #32]
 80098e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	fa93 f3a3 	rbit	r3, r3
 80098fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80098fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80098fe:	fab3 f383 	clz	r3, r3
 8009902:	b2db      	uxtb	r3, r3
 8009904:	461a      	mov	r2, r3
 8009906:	4b26      	ldr	r3, [pc, #152]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	461a      	mov	r2, r3
 800990e:	2301      	movs	r3, #1
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991a:	fa93 f3a3 	rbit	r3, r3
 800991e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009922:	fab3 f383 	clz	r3, r3
 8009926:	b2db      	uxtb	r3, r3
 8009928:	461a      	mov	r2, r3
 800992a:	4b1d      	ldr	r3, [pc, #116]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800992c:	4413      	add	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	461a      	mov	r2, r3
 8009932:	2300      	movs	r3, #0
 8009934:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009936:	4a18      	ldr	r2, [pc, #96]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800993a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800993c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	2b00      	cmp	r3, #0
 8009944:	d04b      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009946:	f7fb f95d 	bl	8004c04 <HAL_GetTick>
 800994a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800994c:	e00a      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800994e:	f7fb f959 	bl	8004c04 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	f241 3288 	movw	r2, #5000	; 0x1388
 800995c:	4293      	cmp	r3, r2
 800995e:	d901      	bls.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	e180      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009964:	2302      	movs	r3, #2
 8009966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996a:	fa93 f3a3 	rbit	r3, r3
 800996e:	627b      	str	r3, [r7, #36]	; 0x24
 8009970:	2302      	movs	r3, #2
 8009972:	623b      	str	r3, [r7, #32]
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	fa93 f3a3 	rbit	r3, r3
 800997a:	61fb      	str	r3, [r7, #28]
  return result;
 800997c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800997e:	fab3 f383 	clz	r3, r3
 8009982:	b2db      	uxtb	r3, r3
 8009984:	095b      	lsrs	r3, r3, #5
 8009986:	b2db      	uxtb	r3, r3
 8009988:	f043 0302 	orr.w	r3, r3, #2
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b02      	cmp	r3, #2
 8009990:	d108      	bne.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009992:	4b01      	ldr	r3, [pc, #4]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	e00d      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8009998:	40021000 	.word	0x40021000
 800999c:	40007000 	.word	0x40007000
 80099a0:	10908100 	.word	0x10908100
 80099a4:	2302      	movs	r3, #2
 80099a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	fa93 f3a3 	rbit	r3, r3
 80099ae:	617b      	str	r3, [r7, #20]
 80099b0:	4b9a      	ldr	r3, [pc, #616]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	2202      	movs	r2, #2
 80099b6:	613a      	str	r2, [r7, #16]
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	fa92 f2a2 	rbit	r2, r2
 80099be:	60fa      	str	r2, [r7, #12]
  return result;
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	fab2 f282 	clz	r2, r2
 80099c6:	b2d2      	uxtb	r2, r2
 80099c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099cc:	b2d2      	uxtb	r2, r2
 80099ce:	f002 021f 	and.w	r2, r2, #31
 80099d2:	2101      	movs	r1, #1
 80099d4:	fa01 f202 	lsl.w	r2, r1, r2
 80099d8:	4013      	ands	r3, r2
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0b7      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80099de:	4b8f      	ldr	r3, [pc, #572]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	498c      	ldr	r1, [pc, #560]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80099f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d105      	bne.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099f8:	4b88      	ldr	r3, [pc, #544]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	4a87      	ldr	r2, [pc, #540]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80099fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d008      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a10:	4b82      	ldr	r3, [pc, #520]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a14:	f023 0203 	bic.w	r2, r3, #3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	497f      	ldr	r1, [pc, #508]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0302 	and.w	r3, r3, #2
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d008      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a2e:	4b7b      	ldr	r3, [pc, #492]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	4978      	ldr	r1, [pc, #480]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d008      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009a4c:	4b73      	ldr	r3, [pc, #460]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	4970      	ldr	r1, [pc, #448]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d008      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a6a:	4b6c      	ldr	r3, [pc, #432]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a6e:	f023 0210 	bic.w	r2, r3, #16
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	4969      	ldr	r1, [pc, #420]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d008      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8009a88:	4b64      	ldr	r3, [pc, #400]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a94:	4961      	ldr	r1, [pc, #388]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d008      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009aa6:	4b5d      	ldr	r3, [pc, #372]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aaa:	f023 0220 	bic.w	r2, r3, #32
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	495a      	ldr	r1, [pc, #360]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d008      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009ac4:	4b55      	ldr	r3, [pc, #340]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	4952      	ldr	r1, [pc, #328]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0308 	and.w	r3, r3, #8
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d008      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ae2:	4b4e      	ldr	r3, [pc, #312]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	494b      	ldr	r1, [pc, #300]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009af0:	4313      	orrs	r3, r2
 8009af2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0310 	and.w	r3, r3, #16
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d008      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009b00:	4b46      	ldr	r3, [pc, #280]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	4943      	ldr	r1, [pc, #268]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d008      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009b1e:	4b3f      	ldr	r3, [pc, #252]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2a:	493c      	ldr	r1, [pc, #240]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d008      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009b3c:	4b37      	ldr	r3, [pc, #220]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b40:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b48:	4934      	ldr	r1, [pc, #208]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d008      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8009b5a:	4b30      	ldr	r3, [pc, #192]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b66:	492d      	ldr	r1, [pc, #180]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d008      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009b78:	4b28      	ldr	r3, [pc, #160]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b84:	4925      	ldr	r1, [pc, #148]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009b86:	4313      	orrs	r3, r2
 8009b88:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d008      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8009b96:	4b21      	ldr	r3, [pc, #132]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba2:	491e      	ldr	r1, [pc, #120]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d008      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8009bb4:	4b19      	ldr	r3, [pc, #100]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	4916      	ldr	r1, [pc, #88]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d008      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8009bd2:	4b12      	ldr	r3, [pc, #72]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bde:	490f      	ldr	r1, [pc, #60]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d008      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009bf0:	4b0a      	ldr	r3, [pc, #40]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bfc:	4907      	ldr	r1, [pc, #28]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00c      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8009c0e:	4b03      	ldr	r3, [pc, #12]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c12:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	e002      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009c1a:	bf00      	nop
 8009c1c:	40021000 	.word	0x40021000
 8009c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c22:	4913      	ldr	r1, [pc, #76]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d008      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8009c34:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c40:	490b      	ldr	r1, [pc, #44]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d008      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8009c52:	4b07      	ldr	r3, [pc, #28]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c56:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c5e:	4904      	ldr	r1, [pc, #16]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3748      	adds	r7, #72	; 0x48
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	40021000 	.word	0x40021000

08009c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e09d      	b.n	8009dc2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d108      	bne.n	8009ca0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c96:	d009      	beq.n	8009cac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	61da      	str	r2, [r3, #28]
 8009c9e:	e005      	b.n	8009cac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d106      	bne.n	8009ccc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7fa fbbe 	bl	8004448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ce2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cec:	d902      	bls.n	8009cf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	e002      	b.n	8009cfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009d02:	d007      	beq.n	8009d14 <HAL_SPI_Init+0xa0>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d0c:	d002      	beq.n	8009d14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009d24:	431a      	orrs	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	431a      	orrs	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d42:	431a      	orrs	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	69db      	ldr	r3, [r3, #28]
 8009d48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d4c:	431a      	orrs	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d56:	ea42 0103 	orr.w	r1, r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	0c1b      	lsrs	r3, r3, #16
 8009d70:	f003 0204 	and.w	r2, r3, #4
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	f003 0310 	and.w	r3, r3, #16
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d82:	f003 0308 	and.w	r3, r3, #8
 8009d86:	431a      	orrs	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009d90:	ea42 0103 	orr.w	r1, r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	69da      	ldr	r2, [r3, #28]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009db0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b088      	sub	sp, #32
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	60f8      	str	r0, [r7, #12]
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	603b      	str	r3, [r7, #0]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d101      	bne.n	8009dec <HAL_SPI_Transmit+0x22>
 8009de8:	2302      	movs	r3, #2
 8009dea:	e158      	b.n	800a09e <HAL_SPI_Transmit+0x2d4>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009df4:	f7fa ff06 	bl	8004c04 <HAL_GetTick>
 8009df8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009dfa:	88fb      	ldrh	r3, [r7, #6]
 8009dfc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d002      	beq.n	8009e10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009e0e:	e13d      	b.n	800a08c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d002      	beq.n	8009e1c <HAL_SPI_Transmit+0x52>
 8009e16:	88fb      	ldrh	r3, [r7, #6]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d102      	bne.n	8009e22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009e20:	e134      	b.n	800a08c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2203      	movs	r2, #3
 8009e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	88fa      	ldrh	r2, [r7, #6]
 8009e3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	88fa      	ldrh	r2, [r7, #6]
 8009e40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e6c:	d10f      	bne.n	8009e8e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e98:	2b40      	cmp	r3, #64	; 0x40
 8009e9a:	d007      	beq.n	8009eac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009eb4:	d94b      	bls.n	8009f4e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <HAL_SPI_Transmit+0xfa>
 8009ebe:	8afb      	ldrh	r3, [r7, #22]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d13e      	bne.n	8009f42 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec8:	881a      	ldrh	r2, [r3, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed4:	1c9a      	adds	r2, r3, #2
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009ee8:	e02b      	b.n	8009f42 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	f003 0302 	and.w	r3, r3, #2
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d112      	bne.n	8009f1e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efc:	881a      	ldrh	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f08:	1c9a      	adds	r2, r3, #2
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	3b01      	subs	r3, #1
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f1c:	e011      	b.n	8009f42 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f1e:	f7fa fe71 	bl	8004c04 <HAL_GetTick>
 8009f22:	4602      	mov	r2, r0
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d803      	bhi.n	8009f36 <HAL_SPI_Transmit+0x16c>
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f34:	d102      	bne.n	8009f3c <HAL_SPI_Transmit+0x172>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d102      	bne.n	8009f42 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009f40:	e0a4      	b.n	800a08c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1ce      	bne.n	8009eea <HAL_SPI_Transmit+0x120>
 8009f4c:	e07c      	b.n	800a048 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d002      	beq.n	8009f5c <HAL_SPI_Transmit+0x192>
 8009f56:	8afb      	ldrh	r3, [r7, #22]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d170      	bne.n	800a03e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d912      	bls.n	8009f8c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6a:	881a      	ldrh	r2, [r3, #0]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f76:	1c9a      	adds	r2, r3, #2
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	3b02      	subs	r3, #2
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f8a:	e058      	b.n	800a03e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	330c      	adds	r3, #12
 8009f96:	7812      	ldrb	r2, [r2, #0]
 8009f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	3b01      	subs	r3, #1
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009fb2:	e044      	b.n	800a03e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d12b      	bne.n	800a01a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d912      	bls.n	8009ff2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd0:	881a      	ldrh	r2, [r3, #0]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fdc:	1c9a      	adds	r2, r3, #2
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	3b02      	subs	r3, #2
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ff0:	e025      	b.n	800a03e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	330c      	adds	r3, #12
 8009ffc:	7812      	ldrb	r2, [r2, #0]
 8009ffe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a004:	1c5a      	adds	r2, r3, #1
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a00e:	b29b      	uxth	r3, r3
 800a010:	3b01      	subs	r3, #1
 800a012:	b29a      	uxth	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a018:	e011      	b.n	800a03e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a01a:	f7fa fdf3 	bl	8004c04 <HAL_GetTick>
 800a01e:	4602      	mov	r2, r0
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	d803      	bhi.n	800a032 <HAL_SPI_Transmit+0x268>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a030:	d102      	bne.n	800a038 <HAL_SPI_Transmit+0x26e>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a03c:	e026      	b.n	800a08c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a042:	b29b      	uxth	r3, r3
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1b5      	bne.n	8009fb4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 fc89 	bl	800a964 <SPI_EndRxTxTransaction>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2220      	movs	r2, #32
 800a05c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10a      	bne.n	800a07c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a066:	2300      	movs	r3, #0
 800a068:	613b      	str	r3, [r7, #16]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	613b      	str	r3, [r7, #16]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	613b      	str	r3, [r7, #16]
 800a07a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	77fb      	strb	r3, [r7, #31]
 800a088:	e000      	b.n	800a08c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a08a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a09c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3720      	adds	r7, #32
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b08a      	sub	sp, #40	; 0x28
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	60b9      	str	r1, [r7, #8]
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d101      	bne.n	800a0cc <HAL_SPI_TransmitReceive+0x26>
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	e1fb      	b.n	800a4c4 <HAL_SPI_TransmitReceive+0x41e>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0d4:	f7fa fd96 	bl	8004c04 <HAL_GetTick>
 800a0d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a0e8:	887b      	ldrh	r3, [r7, #2]
 800a0ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a0ec:	887b      	ldrh	r3, [r7, #2]
 800a0ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a0f0:	7efb      	ldrb	r3, [r7, #27]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d00e      	beq.n	800a114 <HAL_SPI_TransmitReceive+0x6e>
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0fc:	d106      	bne.n	800a10c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d102      	bne.n	800a10c <HAL_SPI_TransmitReceive+0x66>
 800a106:	7efb      	ldrb	r3, [r7, #27]
 800a108:	2b04      	cmp	r3, #4
 800a10a:	d003      	beq.n	800a114 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a10c:	2302      	movs	r3, #2
 800a10e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a112:	e1cd      	b.n	800a4b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d005      	beq.n	800a126 <HAL_SPI_TransmitReceive+0x80>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d002      	beq.n	800a126 <HAL_SPI_TransmitReceive+0x80>
 800a120:	887b      	ldrh	r3, [r7, #2]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d103      	bne.n	800a12e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a12c:	e1c0      	b.n	800a4b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b04      	cmp	r3, #4
 800a138:	d003      	beq.n	800a142 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2205      	movs	r2, #5
 800a13e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	887a      	ldrh	r2, [r7, #2]
 800a152:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	887a      	ldrh	r2, [r7, #2]
 800a15a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	887a      	ldrh	r2, [r7, #2]
 800a168:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	887a      	ldrh	r2, [r7, #2]
 800a16e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a184:	d802      	bhi.n	800a18c <HAL_SPI_TransmitReceive+0xe6>
 800a186:	8a3b      	ldrh	r3, [r7, #16]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d908      	bls.n	800a19e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a19a:	605a      	str	r2, [r3, #4]
 800a19c:	e007      	b.n	800a1ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a1ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b8:	2b40      	cmp	r3, #64	; 0x40
 800a1ba:	d007      	beq.n	800a1cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1d4:	d97c      	bls.n	800a2d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <HAL_SPI_TransmitReceive+0x13e>
 800a1de:	8a7b      	ldrh	r3, [r7, #18]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d169      	bne.n	800a2b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e8:	881a      	ldrh	r2, [r3, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f4:	1c9a      	adds	r2, r3, #2
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	3b01      	subs	r3, #1
 800a202:	b29a      	uxth	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a208:	e056      	b.n	800a2b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b02      	cmp	r3, #2
 800a216:	d11b      	bne.n	800a250 <HAL_SPI_TransmitReceive+0x1aa>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d016      	beq.n	800a250 <HAL_SPI_TransmitReceive+0x1aa>
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	2b01      	cmp	r3, #1
 800a226:	d113      	bne.n	800a250 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22c:	881a      	ldrh	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a238:	1c9a      	adds	r2, r3, #2
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a242:	b29b      	uxth	r3, r3
 800a244:	3b01      	subs	r3, #1
 800a246:	b29a      	uxth	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d11c      	bne.n	800a298 <HAL_SPI_TransmitReceive+0x1f2>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a264:	b29b      	uxth	r3, r3
 800a266:	2b00      	cmp	r3, #0
 800a268:	d016      	beq.n	800a298 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68da      	ldr	r2, [r3, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a274:	b292      	uxth	r2, r2
 800a276:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27c:	1c9a      	adds	r2, r3, #2
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a288:	b29b      	uxth	r3, r3
 800a28a:	3b01      	subs	r3, #1
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a294:	2301      	movs	r3, #1
 800a296:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a298:	f7fa fcb4 	bl	8004c04 <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d807      	bhi.n	800a2b8 <HAL_SPI_TransmitReceive+0x212>
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ae:	d003      	beq.n	800a2b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a2b6:	e0fb      	b.n	800a4b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1a3      	bne.n	800a20a <HAL_SPI_TransmitReceive+0x164>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d19d      	bne.n	800a20a <HAL_SPI_TransmitReceive+0x164>
 800a2ce:	e0df      	b.n	800a490 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d003      	beq.n	800a2e0 <HAL_SPI_TransmitReceive+0x23a>
 800a2d8:	8a7b      	ldrh	r3, [r7, #18]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	f040 80cb 	bne.w	800a476 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d912      	bls.n	800a310 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ee:	881a      	ldrh	r2, [r3, #0]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fa:	1c9a      	adds	r2, r3, #2
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a304:	b29b      	uxth	r3, r3
 800a306:	3b02      	subs	r3, #2
 800a308:	b29a      	uxth	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a30e:	e0b2      	b.n	800a476 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	330c      	adds	r3, #12
 800a31a:	7812      	ldrb	r2, [r2, #0]
 800a31c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	3b01      	subs	r3, #1
 800a330:	b29a      	uxth	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a336:	e09e      	b.n	800a476 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	2b02      	cmp	r3, #2
 800a344:	d134      	bne.n	800a3b0 <HAL_SPI_TransmitReceive+0x30a>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d02f      	beq.n	800a3b0 <HAL_SPI_TransmitReceive+0x30a>
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	2b01      	cmp	r3, #1
 800a354:	d12c      	bne.n	800a3b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d912      	bls.n	800a386 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a364:	881a      	ldrh	r2, [r3, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	1c9a      	adds	r2, r3, #2
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	3b02      	subs	r3, #2
 800a37e:	b29a      	uxth	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a384:	e012      	b.n	800a3ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	330c      	adds	r3, #12
 800a390:	7812      	ldrb	r2, [r2, #0]
 800a392:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d148      	bne.n	800a450 <HAL_SPI_TransmitReceive+0x3aa>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d042      	beq.n	800a450 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d923      	bls.n	800a41e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68da      	ldr	r2, [r3, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e0:	b292      	uxth	r2, r2
 800a3e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e8:	1c9a      	adds	r2, r3, #2
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	3b02      	subs	r3, #2
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a406:	b29b      	uxth	r3, r3
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d81f      	bhi.n	800a44c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a41a:	605a      	str	r2, [r3, #4]
 800a41c:	e016      	b.n	800a44c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f103 020c 	add.w	r2, r3, #12
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	7812      	ldrb	r2, [r2, #0]
 800a42c:	b2d2      	uxtb	r2, r2
 800a42e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a440:	b29b      	uxth	r3, r3
 800a442:	3b01      	subs	r3, #1
 800a444:	b29a      	uxth	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a44c:	2301      	movs	r3, #1
 800a44e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a450:	f7fa fbd8 	bl	8004c04 <HAL_GetTick>
 800a454:	4602      	mov	r2, r0
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d803      	bhi.n	800a468 <HAL_SPI_TransmitReceive+0x3c2>
 800a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a466:	d102      	bne.n	800a46e <HAL_SPI_TransmitReceive+0x3c8>
 800a468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d103      	bne.n	800a476 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a474:	e01c      	b.n	800a4b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f47f af5b 	bne.w	800a338 <HAL_SPI_TransmitReceive+0x292>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a488:	b29b      	uxth	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f47f af54 	bne.w	800a338 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a490:	69fa      	ldr	r2, [r7, #28]
 800a492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 fa65 	bl	800a964 <SPI_EndRxTxTransaction>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d006      	beq.n	800a4ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	661a      	str	r2, [r3, #96]	; 0x60
 800a4ac:	e000      	b.n	800a4b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a4ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a4c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3728      	adds	r7, #40	; 0x28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	099b      	lsrs	r3, r3, #6
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10f      	bne.n	800a510 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00a      	beq.n	800a510 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	099b      	lsrs	r3, r3, #6
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d004      	beq.n	800a510 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	4798      	blx	r3
    return;
 800a50e:	e0d7      	b.n	800a6c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	085b      	lsrs	r3, r3, #1
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00a      	beq.n	800a532 <HAL_SPI_IRQHandler+0x66>
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	09db      	lsrs	r3, r3, #7
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b00      	cmp	r3, #0
 800a526:	d004      	beq.n	800a532 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	4798      	blx	r3
    return;
 800a530:	e0c6      	b.n	800a6c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	095b      	lsrs	r3, r3, #5
 800a536:	f003 0301 	and.w	r3, r3, #1
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10c      	bne.n	800a558 <HAL_SPI_IRQHandler+0x8c>
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	099b      	lsrs	r3, r3, #6
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	0a1b      	lsrs	r3, r3, #8
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 80b4 	beq.w	800a6c0 <HAL_SPI_IRQHandler+0x1f4>
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	095b      	lsrs	r3, r3, #5
 800a55c:	f003 0301 	and.w	r3, r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	f000 80ad 	beq.w	800a6c0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	099b      	lsrs	r3, r3, #6
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d023      	beq.n	800a5ba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d011      	beq.n	800a5a2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a582:	f043 0204 	orr.w	r2, r3, #4
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a58a:	2300      	movs	r3, #0
 800a58c:	617b      	str	r3, [r7, #20]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	617b      	str	r3, [r7, #20]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	e00b      	b.n	800a5ba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	613b      	str	r3, [r7, #16]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	613b      	str	r3, [r7, #16]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	613b      	str	r3, [r7, #16]
 800a5b6:	693b      	ldr	r3, [r7, #16]
        return;
 800a5b8:	e082      	b.n	800a6c0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	095b      	lsrs	r3, r3, #5
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d014      	beq.n	800a5f0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5ca:	f043 0201 	orr.w	r2, r3, #1
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60fb      	str	r3, [r7, #12]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5ec:	601a      	str	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	0a1b      	lsrs	r3, r3, #8
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00c      	beq.n	800a616 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a600:	f043 0208 	orr.w	r2, r3, #8
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a608:	2300      	movs	r3, #0
 800a60a:	60bb      	str	r3, [r7, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	60bb      	str	r3, [r7, #8]
 800a614:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d04f      	beq.n	800a6be <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a62c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	f003 0302 	and.w	r3, r3, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d104      	bne.n	800a64a <HAL_SPI_IRQHandler+0x17e>
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	d034      	beq.n	800a6b4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f022 0203 	bic.w	r2, r2, #3
 800a658:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d011      	beq.n	800a686 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a666:	4a18      	ldr	r2, [pc, #96]	; (800a6c8 <HAL_SPI_IRQHandler+0x1fc>)
 800a668:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fb fcf1 	bl	8006056 <HAL_DMA_Abort_IT>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a67e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d016      	beq.n	800a6bc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a692:	4a0d      	ldr	r2, [pc, #52]	; (800a6c8 <HAL_SPI_IRQHandler+0x1fc>)
 800a694:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fb fcdb 	bl	8006056 <HAL_DMA_Abort_IT>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00a      	beq.n	800a6bc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a6b2:	e003      	b.n	800a6bc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f809 	bl	800a6cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a6ba:	e000      	b.n	800a6be <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a6bc:	bf00      	nop
    return;
 800a6be:	bf00      	nop
  }
}
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	0800a6fd 	.word	0x0800a6fd

0800a6cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a6ee:	b2db      	uxtb	r3, r3
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f7ff ffd7 	bl	800a6cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a71e:	bf00      	nop
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b088      	sub	sp, #32
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	603b      	str	r3, [r7, #0]
 800a734:	4613      	mov	r3, r2
 800a736:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a738:	f7fa fa64 	bl	8004c04 <HAL_GetTick>
 800a73c:	4602      	mov	r2, r0
 800a73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a740:	1a9b      	subs	r3, r3, r2
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	4413      	add	r3, r2
 800a746:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a748:	f7fa fa5c 	bl	8004c04 <HAL_GetTick>
 800a74c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a74e:	4b39      	ldr	r3, [pc, #228]	; (800a834 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	015b      	lsls	r3, r3, #5
 800a754:	0d1b      	lsrs	r3, r3, #20
 800a756:	69fa      	ldr	r2, [r7, #28]
 800a758:	fb02 f303 	mul.w	r3, r2, r3
 800a75c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a75e:	e054      	b.n	800a80a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a766:	d050      	beq.n	800a80a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a768:	f7fa fa4c 	bl	8004c04 <HAL_GetTick>
 800a76c:	4602      	mov	r2, r0
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	69fa      	ldr	r2, [r7, #28]
 800a774:	429a      	cmp	r2, r3
 800a776:	d902      	bls.n	800a77e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d13d      	bne.n	800a7fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a78c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a796:	d111      	bne.n	800a7bc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7a0:	d004      	beq.n	800a7ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7aa:	d107      	bne.n	800a7bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7c4:	d10f      	bne.n	800a7e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e017      	b.n	800a82a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a800:	2300      	movs	r3, #0
 800a802:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	3b01      	subs	r3, #1
 800a808:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	4013      	ands	r3, r2
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	429a      	cmp	r2, r3
 800a818:	bf0c      	ite	eq
 800a81a:	2301      	moveq	r3, #1
 800a81c:	2300      	movne	r3, #0
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	461a      	mov	r2, r3
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	429a      	cmp	r2, r3
 800a826:	d19b      	bne.n	800a760 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3720      	adds	r7, #32
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	2000000c 	.word	0x2000000c

0800a838 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08a      	sub	sp, #40	; 0x28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a84a:	f7fa f9db 	bl	8004c04 <HAL_GetTick>
 800a84e:	4602      	mov	r2, r0
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	1a9b      	subs	r3, r3, r2
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	4413      	add	r3, r2
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a85a:	f7fa f9d3 	bl	8004c04 <HAL_GetTick>
 800a85e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	330c      	adds	r3, #12
 800a866:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a868:	4b3d      	ldr	r3, [pc, #244]	; (800a960 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	4613      	mov	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4413      	add	r3, r2
 800a872:	00da      	lsls	r2, r3, #3
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	0d1b      	lsrs	r3, r3, #20
 800a878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a87a:	fb02 f303 	mul.w	r3, r2, r3
 800a87e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a880:	e060      	b.n	800a944 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a888:	d107      	bne.n	800a89a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d104      	bne.n	800a89a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	b2db      	uxtb	r3, r3
 800a896:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a898:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a0:	d050      	beq.n	800a944 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a8a2:	f7fa f9af 	bl	8004c04 <HAL_GetTick>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d902      	bls.n	800a8b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d13d      	bne.n	800a934 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a8c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8d0:	d111      	bne.n	800a8f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8da:	d004      	beq.n	800a8e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8e4:	d107      	bne.n	800a8f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8fe:	d10f      	bne.n	800a920 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a91e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a930:	2303      	movs	r3, #3
 800a932:	e010      	b.n	800a956 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a93a:	2300      	movs	r3, #0
 800a93c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	3b01      	subs	r3, #1
 800a942:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	689a      	ldr	r2, [r3, #8]
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	4013      	ands	r3, r2
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	429a      	cmp	r2, r3
 800a952:	d196      	bne.n	800a882 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3728      	adds	r7, #40	; 0x28
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	2000000c 	.word	0x2000000c

0800a964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af02      	add	r7, sp, #8
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2200      	movs	r2, #0
 800a978:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7ff ff5b 	bl	800a838 <SPI_WaitFifoStateUntilTimeout>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d007      	beq.n	800a998 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a98c:	f043 0220 	orr.w	r2, r3, #32
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e027      	b.n	800a9e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2180      	movs	r1, #128	; 0x80
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7ff fec0 	bl	800a728 <SPI_WaitFlagStateUntilTimeout>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d007      	beq.n	800a9be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9b2:	f043 0220 	orr.w	r2, r3, #32
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e014      	b.n	800a9e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f7ff ff34 	bl	800a838 <SPI_WaitFifoStateUntilTimeout>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d007      	beq.n	800a9e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9da:	f043 0220 	orr.w	r2, r3, #32
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e000      	b.n	800a9e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e049      	b.n	800aa96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d106      	bne.n	800aa1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7f9 fdb8 	bl	800458c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2202      	movs	r2, #2
 800aa20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	4610      	mov	r0, r2
 800aa30:	f000 fd72 	bl	800b518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d001      	beq.n	800aab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e04f      	b.n	800ab58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68da      	ldr	r2, [r3, #12]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f042 0201 	orr.w	r2, r2, #1
 800aace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a23      	ldr	r2, [pc, #140]	; (800ab64 <HAL_TIM_Base_Start_IT+0xc4>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d01d      	beq.n	800ab16 <HAL_TIM_Base_Start_IT+0x76>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae2:	d018      	beq.n	800ab16 <HAL_TIM_Base_Start_IT+0x76>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a1f      	ldr	r2, [pc, #124]	; (800ab68 <HAL_TIM_Base_Start_IT+0xc8>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d013      	beq.n	800ab16 <HAL_TIM_Base_Start_IT+0x76>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a1e      	ldr	r2, [pc, #120]	; (800ab6c <HAL_TIM_Base_Start_IT+0xcc>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d00e      	beq.n	800ab16 <HAL_TIM_Base_Start_IT+0x76>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a1c      	ldr	r2, [pc, #112]	; (800ab70 <HAL_TIM_Base_Start_IT+0xd0>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d009      	beq.n	800ab16 <HAL_TIM_Base_Start_IT+0x76>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a1b      	ldr	r2, [pc, #108]	; (800ab74 <HAL_TIM_Base_Start_IT+0xd4>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d004      	beq.n	800ab16 <HAL_TIM_Base_Start_IT+0x76>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a19      	ldr	r2, [pc, #100]	; (800ab78 <HAL_TIM_Base_Start_IT+0xd8>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d115      	bne.n	800ab42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	4b17      	ldr	r3, [pc, #92]	; (800ab7c <HAL_TIM_Base_Start_IT+0xdc>)
 800ab1e:	4013      	ands	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b06      	cmp	r3, #6
 800ab26:	d015      	beq.n	800ab54 <HAL_TIM_Base_Start_IT+0xb4>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab2e:	d011      	beq.n	800ab54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f042 0201 	orr.w	r2, r2, #1
 800ab3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab40:	e008      	b.n	800ab54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f042 0201 	orr.w	r2, r2, #1
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	e000      	b.n	800ab56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	40012c00 	.word	0x40012c00
 800ab68:	40000400 	.word	0x40000400
 800ab6c:	40000800 	.word	0x40000800
 800ab70:	40013400 	.word	0x40013400
 800ab74:	40014000 	.word	0x40014000
 800ab78:	40015000 	.word	0x40015000
 800ab7c:	00010007 	.word	0x00010007

0800ab80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68da      	ldr	r2, [r3, #12]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f022 0201 	bic.w	r2, r2, #1
 800ab96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6a1a      	ldr	r2, [r3, #32]
 800ab9e:	f241 1311 	movw	r3, #4369	; 0x1111
 800aba2:	4013      	ands	r3, r2
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10f      	bne.n	800abc8 <HAL_TIM_Base_Stop_IT+0x48>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6a1a      	ldr	r2, [r3, #32]
 800abae:	f240 4344 	movw	r3, #1092	; 0x444
 800abb2:	4013      	ands	r3, r2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d107      	bne.n	800abc8 <HAL_TIM_Base_Stop_IT+0x48>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f022 0201 	bic.w	r2, r2, #1
 800abc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d101      	bne.n	800abf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e049      	b.n	800ac84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d106      	bne.n	800ac0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 f841 	bl	800ac8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3304      	adds	r3, #4
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	f000 fc7b 	bl	800b518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d109      	bne.n	800acc4 <HAL_TIM_PWM_Start+0x24>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	2b01      	cmp	r3, #1
 800acba:	bf14      	ite	ne
 800acbc:	2301      	movne	r3, #1
 800acbe:	2300      	moveq	r3, #0
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	e03c      	b.n	800ad3e <HAL_TIM_PWM_Start+0x9e>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2b04      	cmp	r3, #4
 800acc8:	d109      	bne.n	800acde <HAL_TIM_PWM_Start+0x3e>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	bf14      	ite	ne
 800acd6:	2301      	movne	r3, #1
 800acd8:	2300      	moveq	r3, #0
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	e02f      	b.n	800ad3e <HAL_TIM_PWM_Start+0x9e>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d109      	bne.n	800acf8 <HAL_TIM_PWM_Start+0x58>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b01      	cmp	r3, #1
 800acee:	bf14      	ite	ne
 800acf0:	2301      	movne	r3, #1
 800acf2:	2300      	moveq	r3, #0
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	e022      	b.n	800ad3e <HAL_TIM_PWM_Start+0x9e>
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	2b0c      	cmp	r3, #12
 800acfc:	d109      	bne.n	800ad12 <HAL_TIM_PWM_Start+0x72>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	bf14      	ite	ne
 800ad0a:	2301      	movne	r3, #1
 800ad0c:	2300      	moveq	r3, #0
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	e015      	b.n	800ad3e <HAL_TIM_PWM_Start+0x9e>
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	2b10      	cmp	r3, #16
 800ad16:	d109      	bne.n	800ad2c <HAL_TIM_PWM_Start+0x8c>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	bf14      	ite	ne
 800ad24:	2301      	movne	r3, #1
 800ad26:	2300      	moveq	r3, #0
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	e008      	b.n	800ad3e <HAL_TIM_PWM_Start+0x9e>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	bf14      	ite	ne
 800ad38:	2301      	movne	r3, #1
 800ad3a:	2300      	moveq	r3, #0
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e0a1      	b.n	800ae8a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d104      	bne.n	800ad56 <HAL_TIM_PWM_Start+0xb6>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad54:	e023      	b.n	800ad9e <HAL_TIM_PWM_Start+0xfe>
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	2b04      	cmp	r3, #4
 800ad5a:	d104      	bne.n	800ad66 <HAL_TIM_PWM_Start+0xc6>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2202      	movs	r2, #2
 800ad60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad64:	e01b      	b.n	800ad9e <HAL_TIM_PWM_Start+0xfe>
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d104      	bne.n	800ad76 <HAL_TIM_PWM_Start+0xd6>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2202      	movs	r2, #2
 800ad70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad74:	e013      	b.n	800ad9e <HAL_TIM_PWM_Start+0xfe>
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	2b0c      	cmp	r3, #12
 800ad7a:	d104      	bne.n	800ad86 <HAL_TIM_PWM_Start+0xe6>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad84:	e00b      	b.n	800ad9e <HAL_TIM_PWM_Start+0xfe>
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	2b10      	cmp	r3, #16
 800ad8a:	d104      	bne.n	800ad96 <HAL_TIM_PWM_Start+0xf6>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2202      	movs	r2, #2
 800ad90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad94:	e003      	b.n	800ad9e <HAL_TIM_PWM_Start+0xfe>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2202      	movs	r2, #2
 800ad9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2201      	movs	r2, #1
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f000 fff4 	bl	800bd94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a38      	ldr	r2, [pc, #224]	; (800ae94 <HAL_TIM_PWM_Start+0x1f4>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d018      	beq.n	800ade8 <HAL_TIM_PWM_Start+0x148>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a37      	ldr	r2, [pc, #220]	; (800ae98 <HAL_TIM_PWM_Start+0x1f8>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d013      	beq.n	800ade8 <HAL_TIM_PWM_Start+0x148>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a35      	ldr	r2, [pc, #212]	; (800ae9c <HAL_TIM_PWM_Start+0x1fc>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d00e      	beq.n	800ade8 <HAL_TIM_PWM_Start+0x148>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a34      	ldr	r2, [pc, #208]	; (800aea0 <HAL_TIM_PWM_Start+0x200>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d009      	beq.n	800ade8 <HAL_TIM_PWM_Start+0x148>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a32      	ldr	r2, [pc, #200]	; (800aea4 <HAL_TIM_PWM_Start+0x204>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d004      	beq.n	800ade8 <HAL_TIM_PWM_Start+0x148>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a31      	ldr	r2, [pc, #196]	; (800aea8 <HAL_TIM_PWM_Start+0x208>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d101      	bne.n	800adec <HAL_TIM_PWM_Start+0x14c>
 800ade8:	2301      	movs	r3, #1
 800adea:	e000      	b.n	800adee <HAL_TIM_PWM_Start+0x14e>
 800adec:	2300      	movs	r3, #0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d007      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a23      	ldr	r2, [pc, #140]	; (800ae94 <HAL_TIM_PWM_Start+0x1f4>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d01d      	beq.n	800ae48 <HAL_TIM_PWM_Start+0x1a8>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae14:	d018      	beq.n	800ae48 <HAL_TIM_PWM_Start+0x1a8>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a24      	ldr	r2, [pc, #144]	; (800aeac <HAL_TIM_PWM_Start+0x20c>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d013      	beq.n	800ae48 <HAL_TIM_PWM_Start+0x1a8>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a22      	ldr	r2, [pc, #136]	; (800aeb0 <HAL_TIM_PWM_Start+0x210>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d00e      	beq.n	800ae48 <HAL_TIM_PWM_Start+0x1a8>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a1a      	ldr	r2, [pc, #104]	; (800ae98 <HAL_TIM_PWM_Start+0x1f8>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d009      	beq.n	800ae48 <HAL_TIM_PWM_Start+0x1a8>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a18      	ldr	r2, [pc, #96]	; (800ae9c <HAL_TIM_PWM_Start+0x1fc>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d004      	beq.n	800ae48 <HAL_TIM_PWM_Start+0x1a8>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a19      	ldr	r2, [pc, #100]	; (800aea8 <HAL_TIM_PWM_Start+0x208>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d115      	bne.n	800ae74 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	689a      	ldr	r2, [r3, #8]
 800ae4e:	4b19      	ldr	r3, [pc, #100]	; (800aeb4 <HAL_TIM_PWM_Start+0x214>)
 800ae50:	4013      	ands	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b06      	cmp	r3, #6
 800ae58:	d015      	beq.n	800ae86 <HAL_TIM_PWM_Start+0x1e6>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae60:	d011      	beq.n	800ae86 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f042 0201 	orr.w	r2, r2, #1
 800ae70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae72:	e008      	b.n	800ae86 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f042 0201 	orr.w	r2, r2, #1
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	e000      	b.n	800ae88 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	40012c00 	.word	0x40012c00
 800ae98:	40013400 	.word	0x40013400
 800ae9c:	40014000 	.word	0x40014000
 800aea0:	40014400 	.word	0x40014400
 800aea4:	40014800 	.word	0x40014800
 800aea8:	40015000 	.word	0x40015000
 800aeac:	40000400 	.word	0x40000400
 800aeb0:	40000800 	.word	0x40000800
 800aeb4:	00010007 	.word	0x00010007

0800aeb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	f003 0302 	and.w	r3, r3, #2
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d122      	bne.n	800af14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	f003 0302 	and.w	r3, r3, #2
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d11b      	bne.n	800af14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f06f 0202 	mvn.w	r2, #2
 800aee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	f003 0303 	and.w	r3, r3, #3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 faed 	bl	800b4da <HAL_TIM_IC_CaptureCallback>
 800af00:	e005      	b.n	800af0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fadf 	bl	800b4c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 faf0 	bl	800b4ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	f003 0304 	and.w	r3, r3, #4
 800af1e:	2b04      	cmp	r3, #4
 800af20:	d122      	bne.n	800af68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b04      	cmp	r3, #4
 800af2e:	d11b      	bne.n	800af68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f06f 0204 	mvn.w	r2, #4
 800af38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2202      	movs	r2, #2
 800af3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699b      	ldr	r3, [r3, #24]
 800af46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d003      	beq.n	800af56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fac3 	bl	800b4da <HAL_TIM_IC_CaptureCallback>
 800af54:	e005      	b.n	800af62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fab5 	bl	800b4c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fac6 	bl	800b4ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	f003 0308 	and.w	r3, r3, #8
 800af72:	2b08      	cmp	r3, #8
 800af74:	d122      	bne.n	800afbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	f003 0308 	and.w	r3, r3, #8
 800af80:	2b08      	cmp	r3, #8
 800af82:	d11b      	bne.n	800afbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f06f 0208 	mvn.w	r2, #8
 800af8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2204      	movs	r2, #4
 800af92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	f003 0303 	and.w	r3, r3, #3
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d003      	beq.n	800afaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fa99 	bl	800b4da <HAL_TIM_IC_CaptureCallback>
 800afa8:	e005      	b.n	800afb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fa8b 	bl	800b4c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fa9c 	bl	800b4ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	f003 0310 	and.w	r3, r3, #16
 800afc6:	2b10      	cmp	r3, #16
 800afc8:	d122      	bne.n	800b010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f003 0310 	and.w	r3, r3, #16
 800afd4:	2b10      	cmp	r3, #16
 800afd6:	d11b      	bne.n	800b010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f06f 0210 	mvn.w	r2, #16
 800afe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2208      	movs	r2, #8
 800afe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	69db      	ldr	r3, [r3, #28]
 800afee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fa6f 	bl	800b4da <HAL_TIM_IC_CaptureCallback>
 800affc:	e005      	b.n	800b00a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fa61 	bl	800b4c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fa72 	bl	800b4ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d10e      	bne.n	800b03c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d107      	bne.n	800b03c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f06f 0201 	mvn.w	r2, #1
 800b034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fa3b 	bl	800b4b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b046:	2b80      	cmp	r3, #128	; 0x80
 800b048:	d10e      	bne.n	800b068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b054:	2b80      	cmp	r3, #128	; 0x80
 800b056:	d107      	bne.n	800b068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 ff52 	bl	800bf0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b076:	d10e      	bne.n	800b096 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b082:	2b80      	cmp	r3, #128	; 0x80
 800b084:	d107      	bne.n	800b096 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b08e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 ff45 	bl	800bf20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a0:	2b40      	cmp	r3, #64	; 0x40
 800b0a2:	d10e      	bne.n	800b0c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ae:	2b40      	cmp	r3, #64	; 0x40
 800b0b0:	d107      	bne.n	800b0c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fa20 	bl	800b502 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	f003 0320 	and.w	r3, r3, #32
 800b0cc:	2b20      	cmp	r3, #32
 800b0ce:	d10e      	bne.n	800b0ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	f003 0320 	and.w	r3, r3, #32
 800b0da:	2b20      	cmp	r3, #32
 800b0dc:	d107      	bne.n	800b0ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f06f 0220 	mvn.w	r2, #32
 800b0e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 ff05 	bl	800bef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0ee:	bf00      	nop
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
	...

0800b0f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d101      	bne.n	800b116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b112:	2302      	movs	r3, #2
 800b114:	e0ff      	b.n	800b316 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2b14      	cmp	r3, #20
 800b122:	f200 80f0 	bhi.w	800b306 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b126:	a201      	add	r2, pc, #4	; (adr r2, 800b12c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12c:	0800b181 	.word	0x0800b181
 800b130:	0800b307 	.word	0x0800b307
 800b134:	0800b307 	.word	0x0800b307
 800b138:	0800b307 	.word	0x0800b307
 800b13c:	0800b1c1 	.word	0x0800b1c1
 800b140:	0800b307 	.word	0x0800b307
 800b144:	0800b307 	.word	0x0800b307
 800b148:	0800b307 	.word	0x0800b307
 800b14c:	0800b203 	.word	0x0800b203
 800b150:	0800b307 	.word	0x0800b307
 800b154:	0800b307 	.word	0x0800b307
 800b158:	0800b307 	.word	0x0800b307
 800b15c:	0800b243 	.word	0x0800b243
 800b160:	0800b307 	.word	0x0800b307
 800b164:	0800b307 	.word	0x0800b307
 800b168:	0800b307 	.word	0x0800b307
 800b16c:	0800b285 	.word	0x0800b285
 800b170:	0800b307 	.word	0x0800b307
 800b174:	0800b307 	.word	0x0800b307
 800b178:	0800b307 	.word	0x0800b307
 800b17c:	0800b2c5 	.word	0x0800b2c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68b9      	ldr	r1, [r7, #8]
 800b186:	4618      	mov	r0, r3
 800b188:	f000 fa64 	bl	800b654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	699a      	ldr	r2, [r3, #24]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f042 0208 	orr.w	r2, r2, #8
 800b19a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	699a      	ldr	r2, [r3, #24]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f022 0204 	bic.w	r2, r2, #4
 800b1aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6999      	ldr	r1, [r3, #24]
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	691a      	ldr	r2, [r3, #16]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	619a      	str	r2, [r3, #24]
      break;
 800b1be:	e0a5      	b.n	800b30c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68b9      	ldr	r1, [r7, #8]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 fade 	bl	800b788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	699a      	ldr	r2, [r3, #24]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	699a      	ldr	r2, [r3, #24]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6999      	ldr	r1, [r3, #24]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	021a      	lsls	r2, r3, #8
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	619a      	str	r2, [r3, #24]
      break;
 800b200:	e084      	b.n	800b30c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68b9      	ldr	r1, [r7, #8]
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 fb51 	bl	800b8b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	69da      	ldr	r2, [r3, #28]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f042 0208 	orr.w	r2, r2, #8
 800b21c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	69da      	ldr	r2, [r3, #28]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f022 0204 	bic.w	r2, r2, #4
 800b22c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	69d9      	ldr	r1, [r3, #28]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	691a      	ldr	r2, [r3, #16]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	430a      	orrs	r2, r1
 800b23e:	61da      	str	r2, [r3, #28]
      break;
 800b240:	e064      	b.n	800b30c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68b9      	ldr	r1, [r7, #8]
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 fbc3 	bl	800b9d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	69da      	ldr	r2, [r3, #28]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b25c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	69da      	ldr	r2, [r3, #28]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b26c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	69d9      	ldr	r1, [r3, #28]
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	691b      	ldr	r3, [r3, #16]
 800b278:	021a      	lsls	r2, r3, #8
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	430a      	orrs	r2, r1
 800b280:	61da      	str	r2, [r3, #28]
      break;
 800b282:	e043      	b.n	800b30c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68b9      	ldr	r1, [r7, #8]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 fc12 	bl	800bab4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f042 0208 	orr.w	r2, r2, #8
 800b29e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f022 0204 	bic.w	r2, r2, #4
 800b2ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	691a      	ldr	r2, [r3, #16]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b2c2:	e023      	b.n	800b30c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68b9      	ldr	r1, [r7, #8]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f000 fc5c 	bl	800bb88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	021a      	lsls	r2, r3, #8
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	430a      	orrs	r2, r1
 800b302:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b304:	e002      	b.n	800b30c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	75fb      	strb	r3, [r7, #23]
      break;
 800b30a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b314:	7dfb      	ldrb	r3, [r7, #23]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3718      	adds	r7, #24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop

0800b320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b334:	2b01      	cmp	r3, #1
 800b336:	d101      	bne.n	800b33c <HAL_TIM_ConfigClockSource+0x1c>
 800b338:	2302      	movs	r3, #2
 800b33a:	e0b6      	b.n	800b4aa <HAL_TIM_ConfigClockSource+0x18a>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2202      	movs	r2, #2
 800b348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b35a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b35e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b378:	d03e      	beq.n	800b3f8 <HAL_TIM_ConfigClockSource+0xd8>
 800b37a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b37e:	f200 8087 	bhi.w	800b490 <HAL_TIM_ConfigClockSource+0x170>
 800b382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b386:	f000 8086 	beq.w	800b496 <HAL_TIM_ConfigClockSource+0x176>
 800b38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b38e:	d87f      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x170>
 800b390:	2b70      	cmp	r3, #112	; 0x70
 800b392:	d01a      	beq.n	800b3ca <HAL_TIM_ConfigClockSource+0xaa>
 800b394:	2b70      	cmp	r3, #112	; 0x70
 800b396:	d87b      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x170>
 800b398:	2b60      	cmp	r3, #96	; 0x60
 800b39a:	d050      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x11e>
 800b39c:	2b60      	cmp	r3, #96	; 0x60
 800b39e:	d877      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x170>
 800b3a0:	2b50      	cmp	r3, #80	; 0x50
 800b3a2:	d03c      	beq.n	800b41e <HAL_TIM_ConfigClockSource+0xfe>
 800b3a4:	2b50      	cmp	r3, #80	; 0x50
 800b3a6:	d873      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x170>
 800b3a8:	2b40      	cmp	r3, #64	; 0x40
 800b3aa:	d058      	beq.n	800b45e <HAL_TIM_ConfigClockSource+0x13e>
 800b3ac:	2b40      	cmp	r3, #64	; 0x40
 800b3ae:	d86f      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x170>
 800b3b0:	2b30      	cmp	r3, #48	; 0x30
 800b3b2:	d064      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15e>
 800b3b4:	2b30      	cmp	r3, #48	; 0x30
 800b3b6:	d86b      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x170>
 800b3b8:	2b20      	cmp	r3, #32
 800b3ba:	d060      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15e>
 800b3bc:	2b20      	cmp	r3, #32
 800b3be:	d867      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x170>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d05c      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15e>
 800b3c4:	2b10      	cmp	r3, #16
 800b3c6:	d05a      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15e>
 800b3c8:	e062      	b.n	800b490 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6818      	ldr	r0, [r3, #0]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	6899      	ldr	r1, [r3, #8]
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	685a      	ldr	r2, [r3, #4]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	f000 fcbb 	bl	800bd54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b3ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	609a      	str	r2, [r3, #8]
      break;
 800b3f6:	e04f      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6818      	ldr	r0, [r3, #0]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	6899      	ldr	r1, [r3, #8]
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	685a      	ldr	r2, [r3, #4]
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f000 fca4 	bl	800bd54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689a      	ldr	r2, [r3, #8]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b41a:	609a      	str	r2, [r3, #8]
      break;
 800b41c:	e03c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	6859      	ldr	r1, [r3, #4]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	461a      	mov	r2, r3
 800b42c:	f000 fc18 	bl	800bc60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2150      	movs	r1, #80	; 0x50
 800b436:	4618      	mov	r0, r3
 800b438:	f000 fc71 	bl	800bd1e <TIM_ITRx_SetConfig>
      break;
 800b43c:	e02c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6818      	ldr	r0, [r3, #0]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	6859      	ldr	r1, [r3, #4]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	461a      	mov	r2, r3
 800b44c:	f000 fc37 	bl	800bcbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2160      	movs	r1, #96	; 0x60
 800b456:	4618      	mov	r0, r3
 800b458:	f000 fc61 	bl	800bd1e <TIM_ITRx_SetConfig>
      break;
 800b45c:	e01c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	6859      	ldr	r1, [r3, #4]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	461a      	mov	r2, r3
 800b46c:	f000 fbf8 	bl	800bc60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2140      	movs	r1, #64	; 0x40
 800b476:	4618      	mov	r0, r3
 800b478:	f000 fc51 	bl	800bd1e <TIM_ITRx_SetConfig>
      break;
 800b47c:	e00c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4619      	mov	r1, r3
 800b488:	4610      	mov	r0, r2
 800b48a:	f000 fc48 	bl	800bd1e <TIM_ITRx_SetConfig>
      break;
 800b48e:	e003      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	73fb      	strb	r3, [r7, #15]
      break;
 800b494:	e000      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b083      	sub	sp, #12
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b4ba:	bf00      	nop
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b083      	sub	sp, #12
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4ce:	bf00      	nop
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4da:	b480      	push	{r7}
 800b4dc:	b083      	sub	sp, #12
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b4e2:	bf00      	nop
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b083      	sub	sp, #12
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b4f6:	bf00      	nop
 800b4f8:	370c      	adds	r7, #12
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b502:	b480      	push	{r7}
 800b504:	b083      	sub	sp, #12
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b50a:	bf00      	nop
 800b50c:	370c      	adds	r7, #12
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
	...

0800b518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a42      	ldr	r2, [pc, #264]	; (800b634 <TIM_Base_SetConfig+0x11c>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d013      	beq.n	800b558 <TIM_Base_SetConfig+0x40>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b536:	d00f      	beq.n	800b558 <TIM_Base_SetConfig+0x40>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a3f      	ldr	r2, [pc, #252]	; (800b638 <TIM_Base_SetConfig+0x120>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d00b      	beq.n	800b558 <TIM_Base_SetConfig+0x40>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a3e      	ldr	r2, [pc, #248]	; (800b63c <TIM_Base_SetConfig+0x124>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d007      	beq.n	800b558 <TIM_Base_SetConfig+0x40>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a3d      	ldr	r2, [pc, #244]	; (800b640 <TIM_Base_SetConfig+0x128>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d003      	beq.n	800b558 <TIM_Base_SetConfig+0x40>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a3c      	ldr	r2, [pc, #240]	; (800b644 <TIM_Base_SetConfig+0x12c>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d108      	bne.n	800b56a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b55e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	4313      	orrs	r3, r2
 800b568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a31      	ldr	r2, [pc, #196]	; (800b634 <TIM_Base_SetConfig+0x11c>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d01f      	beq.n	800b5b2 <TIM_Base_SetConfig+0x9a>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b578:	d01b      	beq.n	800b5b2 <TIM_Base_SetConfig+0x9a>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a2e      	ldr	r2, [pc, #184]	; (800b638 <TIM_Base_SetConfig+0x120>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d017      	beq.n	800b5b2 <TIM_Base_SetConfig+0x9a>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a2d      	ldr	r2, [pc, #180]	; (800b63c <TIM_Base_SetConfig+0x124>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d013      	beq.n	800b5b2 <TIM_Base_SetConfig+0x9a>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a2c      	ldr	r2, [pc, #176]	; (800b640 <TIM_Base_SetConfig+0x128>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d00f      	beq.n	800b5b2 <TIM_Base_SetConfig+0x9a>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a2c      	ldr	r2, [pc, #176]	; (800b648 <TIM_Base_SetConfig+0x130>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d00b      	beq.n	800b5b2 <TIM_Base_SetConfig+0x9a>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a2b      	ldr	r2, [pc, #172]	; (800b64c <TIM_Base_SetConfig+0x134>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d007      	beq.n	800b5b2 <TIM_Base_SetConfig+0x9a>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a2a      	ldr	r2, [pc, #168]	; (800b650 <TIM_Base_SetConfig+0x138>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d003      	beq.n	800b5b2 <TIM_Base_SetConfig+0x9a>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a25      	ldr	r2, [pc, #148]	; (800b644 <TIM_Base_SetConfig+0x12c>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d108      	bne.n	800b5c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	689a      	ldr	r2, [r3, #8]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4a12      	ldr	r2, [pc, #72]	; (800b634 <TIM_Base_SetConfig+0x11c>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d013      	beq.n	800b618 <TIM_Base_SetConfig+0x100>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a13      	ldr	r2, [pc, #76]	; (800b640 <TIM_Base_SetConfig+0x128>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d00f      	beq.n	800b618 <TIM_Base_SetConfig+0x100>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a13      	ldr	r2, [pc, #76]	; (800b648 <TIM_Base_SetConfig+0x130>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00b      	beq.n	800b618 <TIM_Base_SetConfig+0x100>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a12      	ldr	r2, [pc, #72]	; (800b64c <TIM_Base_SetConfig+0x134>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d007      	beq.n	800b618 <TIM_Base_SetConfig+0x100>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a11      	ldr	r2, [pc, #68]	; (800b650 <TIM_Base_SetConfig+0x138>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d003      	beq.n	800b618 <TIM_Base_SetConfig+0x100>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a0c      	ldr	r2, [pc, #48]	; (800b644 <TIM_Base_SetConfig+0x12c>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d103      	bne.n	800b620 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	691a      	ldr	r2, [r3, #16]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	615a      	str	r2, [r3, #20]
}
 800b626:	bf00      	nop
 800b628:	3714      	adds	r7, #20
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	40012c00 	.word	0x40012c00
 800b638:	40000400 	.word	0x40000400
 800b63c:	40000800 	.word	0x40000800
 800b640:	40013400 	.word	0x40013400
 800b644:	40015000 	.word	0x40015000
 800b648:	40014000 	.word	0x40014000
 800b64c:	40014400 	.word	0x40014400
 800b650:	40014800 	.word	0x40014800

0800b654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	f023 0201 	bic.w	r2, r3, #1
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f023 0303 	bic.w	r3, r3, #3
 800b68e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	4313      	orrs	r3, r2
 800b698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f023 0302 	bic.w	r3, r3, #2
 800b6a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a30      	ldr	r2, [pc, #192]	; (800b770 <TIM_OC1_SetConfig+0x11c>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d013      	beq.n	800b6dc <TIM_OC1_SetConfig+0x88>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a2f      	ldr	r2, [pc, #188]	; (800b774 <TIM_OC1_SetConfig+0x120>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d00f      	beq.n	800b6dc <TIM_OC1_SetConfig+0x88>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a2e      	ldr	r2, [pc, #184]	; (800b778 <TIM_OC1_SetConfig+0x124>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d00b      	beq.n	800b6dc <TIM_OC1_SetConfig+0x88>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a2d      	ldr	r2, [pc, #180]	; (800b77c <TIM_OC1_SetConfig+0x128>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d007      	beq.n	800b6dc <TIM_OC1_SetConfig+0x88>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a2c      	ldr	r2, [pc, #176]	; (800b780 <TIM_OC1_SetConfig+0x12c>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d003      	beq.n	800b6dc <TIM_OC1_SetConfig+0x88>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a2b      	ldr	r2, [pc, #172]	; (800b784 <TIM_OC1_SetConfig+0x130>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d10c      	bne.n	800b6f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f023 0308 	bic.w	r3, r3, #8
 800b6e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	697a      	ldr	r2, [r7, #20]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f023 0304 	bic.w	r3, r3, #4
 800b6f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a1d      	ldr	r2, [pc, #116]	; (800b770 <TIM_OC1_SetConfig+0x11c>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d013      	beq.n	800b726 <TIM_OC1_SetConfig+0xd2>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a1c      	ldr	r2, [pc, #112]	; (800b774 <TIM_OC1_SetConfig+0x120>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d00f      	beq.n	800b726 <TIM_OC1_SetConfig+0xd2>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a1b      	ldr	r2, [pc, #108]	; (800b778 <TIM_OC1_SetConfig+0x124>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d00b      	beq.n	800b726 <TIM_OC1_SetConfig+0xd2>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a1a      	ldr	r2, [pc, #104]	; (800b77c <TIM_OC1_SetConfig+0x128>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d007      	beq.n	800b726 <TIM_OC1_SetConfig+0xd2>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a19      	ldr	r2, [pc, #100]	; (800b780 <TIM_OC1_SetConfig+0x12c>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d003      	beq.n	800b726 <TIM_OC1_SetConfig+0xd2>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a18      	ldr	r2, [pc, #96]	; (800b784 <TIM_OC1_SetConfig+0x130>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d111      	bne.n	800b74a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b72c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	693a      	ldr	r2, [r7, #16]
 800b746:	4313      	orrs	r3, r2
 800b748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	685a      	ldr	r2, [r3, #4]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	621a      	str	r2, [r3, #32]
}
 800b764:	bf00      	nop
 800b766:	371c      	adds	r7, #28
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	40012c00 	.word	0x40012c00
 800b774:	40013400 	.word	0x40013400
 800b778:	40014000 	.word	0x40014000
 800b77c:	40014400 	.word	0x40014400
 800b780:	40014800 	.word	0x40014800
 800b784:	40015000 	.word	0x40015000

0800b788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b788:	b480      	push	{r7}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	f023 0210 	bic.w	r2, r3, #16
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a1b      	ldr	r3, [r3, #32]
 800b7a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	699b      	ldr	r3, [r3, #24]
 800b7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	021b      	lsls	r3, r3, #8
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f023 0320 	bic.w	r3, r3, #32
 800b7d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	011b      	lsls	r3, r3, #4
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a2c      	ldr	r2, [pc, #176]	; (800b898 <TIM_OC2_SetConfig+0x110>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d007      	beq.n	800b7fc <TIM_OC2_SetConfig+0x74>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a2b      	ldr	r2, [pc, #172]	; (800b89c <TIM_OC2_SetConfig+0x114>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d003      	beq.n	800b7fc <TIM_OC2_SetConfig+0x74>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a2a      	ldr	r2, [pc, #168]	; (800b8a0 <TIM_OC2_SetConfig+0x118>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d10d      	bne.n	800b818 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	011b      	lsls	r3, r3, #4
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b816:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a1f      	ldr	r2, [pc, #124]	; (800b898 <TIM_OC2_SetConfig+0x110>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d013      	beq.n	800b848 <TIM_OC2_SetConfig+0xc0>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a1e      	ldr	r2, [pc, #120]	; (800b89c <TIM_OC2_SetConfig+0x114>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d00f      	beq.n	800b848 <TIM_OC2_SetConfig+0xc0>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a1e      	ldr	r2, [pc, #120]	; (800b8a4 <TIM_OC2_SetConfig+0x11c>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00b      	beq.n	800b848 <TIM_OC2_SetConfig+0xc0>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a1d      	ldr	r2, [pc, #116]	; (800b8a8 <TIM_OC2_SetConfig+0x120>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d007      	beq.n	800b848 <TIM_OC2_SetConfig+0xc0>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a1c      	ldr	r2, [pc, #112]	; (800b8ac <TIM_OC2_SetConfig+0x124>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d003      	beq.n	800b848 <TIM_OC2_SetConfig+0xc0>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a17      	ldr	r2, [pc, #92]	; (800b8a0 <TIM_OC2_SetConfig+0x118>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d113      	bne.n	800b870 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b84e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b856:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	4313      	orrs	r3, r2
 800b862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	693a      	ldr	r2, [r7, #16]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	621a      	str	r2, [r3, #32]
}
 800b88a:	bf00      	nop
 800b88c:	371c      	adds	r7, #28
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	40012c00 	.word	0x40012c00
 800b89c:	40013400 	.word	0x40013400
 800b8a0:	40015000 	.word	0x40015000
 800b8a4:	40014000 	.word	0x40014000
 800b8a8:	40014400 	.word	0x40014400
 800b8ac:	40014800 	.word	0x40014800

0800b8b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b087      	sub	sp, #28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	69db      	ldr	r3, [r3, #28]
 800b8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f023 0303 	bic.w	r3, r3, #3
 800b8ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	021b      	lsls	r3, r3, #8
 800b904:	697a      	ldr	r2, [r7, #20]
 800b906:	4313      	orrs	r3, r2
 800b908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a2b      	ldr	r2, [pc, #172]	; (800b9bc <TIM_OC3_SetConfig+0x10c>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d007      	beq.n	800b922 <TIM_OC3_SetConfig+0x72>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a2a      	ldr	r2, [pc, #168]	; (800b9c0 <TIM_OC3_SetConfig+0x110>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d003      	beq.n	800b922 <TIM_OC3_SetConfig+0x72>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a29      	ldr	r2, [pc, #164]	; (800b9c4 <TIM_OC3_SetConfig+0x114>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d10d      	bne.n	800b93e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	021b      	lsls	r3, r3, #8
 800b930:	697a      	ldr	r2, [r7, #20]
 800b932:	4313      	orrs	r3, r2
 800b934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b93c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	4a1e      	ldr	r2, [pc, #120]	; (800b9bc <TIM_OC3_SetConfig+0x10c>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d013      	beq.n	800b96e <TIM_OC3_SetConfig+0xbe>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4a1d      	ldr	r2, [pc, #116]	; (800b9c0 <TIM_OC3_SetConfig+0x110>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d00f      	beq.n	800b96e <TIM_OC3_SetConfig+0xbe>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4a1d      	ldr	r2, [pc, #116]	; (800b9c8 <TIM_OC3_SetConfig+0x118>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d00b      	beq.n	800b96e <TIM_OC3_SetConfig+0xbe>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	4a1c      	ldr	r2, [pc, #112]	; (800b9cc <TIM_OC3_SetConfig+0x11c>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d007      	beq.n	800b96e <TIM_OC3_SetConfig+0xbe>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4a1b      	ldr	r2, [pc, #108]	; (800b9d0 <TIM_OC3_SetConfig+0x120>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d003      	beq.n	800b96e <TIM_OC3_SetConfig+0xbe>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a16      	ldr	r2, [pc, #88]	; (800b9c4 <TIM_OC3_SetConfig+0x114>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d113      	bne.n	800b996 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b97c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	011b      	lsls	r3, r3, #4
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	4313      	orrs	r3, r2
 800b988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	011b      	lsls	r3, r3, #4
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	4313      	orrs	r3, r2
 800b994:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	621a      	str	r2, [r3, #32]
}
 800b9b0:	bf00      	nop
 800b9b2:	371c      	adds	r7, #28
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	40012c00 	.word	0x40012c00
 800b9c0:	40013400 	.word	0x40013400
 800b9c4:	40015000 	.word	0x40015000
 800b9c8:	40014000 	.word	0x40014000
 800b9cc:	40014400 	.word	0x40014400
 800b9d0:	40014800 	.word	0x40014800

0800b9d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b087      	sub	sp, #28
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a1b      	ldr	r3, [r3, #32]
 800b9e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a1b      	ldr	r3, [r3, #32]
 800b9ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	69db      	ldr	r3, [r3, #28]
 800b9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	021b      	lsls	r3, r3, #8
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	031b      	lsls	r3, r3, #12
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a1a      	ldr	r2, [pc, #104]	; (800ba9c <TIM_OC4_SetConfig+0xc8>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d013      	beq.n	800ba60 <TIM_OC4_SetConfig+0x8c>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a19      	ldr	r2, [pc, #100]	; (800baa0 <TIM_OC4_SetConfig+0xcc>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d00f      	beq.n	800ba60 <TIM_OC4_SetConfig+0x8c>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a18      	ldr	r2, [pc, #96]	; (800baa4 <TIM_OC4_SetConfig+0xd0>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d00b      	beq.n	800ba60 <TIM_OC4_SetConfig+0x8c>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a17      	ldr	r2, [pc, #92]	; (800baa8 <TIM_OC4_SetConfig+0xd4>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d007      	beq.n	800ba60 <TIM_OC4_SetConfig+0x8c>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a16      	ldr	r2, [pc, #88]	; (800baac <TIM_OC4_SetConfig+0xd8>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d003      	beq.n	800ba60 <TIM_OC4_SetConfig+0x8c>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a15      	ldr	r2, [pc, #84]	; (800bab0 <TIM_OC4_SetConfig+0xdc>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d109      	bne.n	800ba74 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	695b      	ldr	r3, [r3, #20]
 800ba6c:	019b      	lsls	r3, r3, #6
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	4313      	orrs	r3, r2
 800ba72:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	685a      	ldr	r2, [r3, #4]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	621a      	str	r2, [r3, #32]
}
 800ba8e:	bf00      	nop
 800ba90:	371c      	adds	r7, #28
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	40012c00 	.word	0x40012c00
 800baa0:	40013400 	.word	0x40013400
 800baa4:	40014000 	.word	0x40014000
 800baa8:	40014400 	.word	0x40014400
 800baac:	40014800 	.word	0x40014800
 800bab0:	40015000 	.word	0x40015000

0800bab4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b087      	sub	sp, #28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	4313      	orrs	r3, r2
 800baf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800baf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	041b      	lsls	r3, r3, #16
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a19      	ldr	r2, [pc, #100]	; (800bb70 <TIM_OC5_SetConfig+0xbc>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d013      	beq.n	800bb36 <TIM_OC5_SetConfig+0x82>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a18      	ldr	r2, [pc, #96]	; (800bb74 <TIM_OC5_SetConfig+0xc0>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d00f      	beq.n	800bb36 <TIM_OC5_SetConfig+0x82>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a17      	ldr	r2, [pc, #92]	; (800bb78 <TIM_OC5_SetConfig+0xc4>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d00b      	beq.n	800bb36 <TIM_OC5_SetConfig+0x82>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a16      	ldr	r2, [pc, #88]	; (800bb7c <TIM_OC5_SetConfig+0xc8>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d007      	beq.n	800bb36 <TIM_OC5_SetConfig+0x82>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a15      	ldr	r2, [pc, #84]	; (800bb80 <TIM_OC5_SetConfig+0xcc>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d003      	beq.n	800bb36 <TIM_OC5_SetConfig+0x82>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a14      	ldr	r2, [pc, #80]	; (800bb84 <TIM_OC5_SetConfig+0xd0>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d109      	bne.n	800bb4a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	695b      	ldr	r3, [r3, #20]
 800bb42:	021b      	lsls	r3, r3, #8
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	621a      	str	r2, [r3, #32]
}
 800bb64:	bf00      	nop
 800bb66:	371c      	adds	r7, #28
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	40012c00 	.word	0x40012c00
 800bb74:	40013400 	.word	0x40013400
 800bb78:	40014000 	.word	0x40014000
 800bb7c:	40014400 	.word	0x40014400
 800bb80:	40014800 	.word	0x40014800
 800bb84:	40015000 	.word	0x40015000

0800bb88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b087      	sub	sp, #28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a1b      	ldr	r3, [r3, #32]
 800bb96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a1b      	ldr	r3, [r3, #32]
 800bba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bbb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	021b      	lsls	r3, r3, #8
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bbce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	051b      	lsls	r3, r3, #20
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a1a      	ldr	r2, [pc, #104]	; (800bc48 <TIM_OC6_SetConfig+0xc0>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d013      	beq.n	800bc0c <TIM_OC6_SetConfig+0x84>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a19      	ldr	r2, [pc, #100]	; (800bc4c <TIM_OC6_SetConfig+0xc4>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d00f      	beq.n	800bc0c <TIM_OC6_SetConfig+0x84>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a18      	ldr	r2, [pc, #96]	; (800bc50 <TIM_OC6_SetConfig+0xc8>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d00b      	beq.n	800bc0c <TIM_OC6_SetConfig+0x84>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a17      	ldr	r2, [pc, #92]	; (800bc54 <TIM_OC6_SetConfig+0xcc>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d007      	beq.n	800bc0c <TIM_OC6_SetConfig+0x84>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a16      	ldr	r2, [pc, #88]	; (800bc58 <TIM_OC6_SetConfig+0xd0>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d003      	beq.n	800bc0c <TIM_OC6_SetConfig+0x84>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a15      	ldr	r2, [pc, #84]	; (800bc5c <TIM_OC6_SetConfig+0xd4>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d109      	bne.n	800bc20 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	695b      	ldr	r3, [r3, #20]
 800bc18:	029b      	lsls	r3, r3, #10
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	685a      	ldr	r2, [r3, #4]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	621a      	str	r2, [r3, #32]
}
 800bc3a:	bf00      	nop
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	40012c00 	.word	0x40012c00
 800bc4c:	40013400 	.word	0x40013400
 800bc50:	40014000 	.word	0x40014000
 800bc54:	40014400 	.word	0x40014400
 800bc58:	40014800 	.word	0x40014800
 800bc5c:	40015000 	.word	0x40015000

0800bc60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b087      	sub	sp, #28
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6a1b      	ldr	r3, [r3, #32]
 800bc70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	f023 0201 	bic.w	r2, r3, #1
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	699b      	ldr	r3, [r3, #24]
 800bc82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	011b      	lsls	r3, r3, #4
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f023 030a 	bic.w	r3, r3, #10
 800bc9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	621a      	str	r2, [r3, #32]
}
 800bcb2:	bf00      	nop
 800bcb4:	371c      	adds	r7, #28
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b087      	sub	sp, #28
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	60f8      	str	r0, [r7, #12]
 800bcc6:	60b9      	str	r1, [r7, #8]
 800bcc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	f023 0210 	bic.w	r2, r3, #16
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6a1b      	ldr	r3, [r3, #32]
 800bce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	031b      	lsls	r3, r3, #12
 800bcee:	697a      	ldr	r2, [r7, #20]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bcfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	011b      	lsls	r3, r3, #4
 800bd00:	693a      	ldr	r2, [r7, #16]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	697a      	ldr	r2, [r7, #20]
 800bd0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	621a      	str	r2, [r3, #32]
}
 800bd12:	bf00      	nop
 800bd14:	371c      	adds	r7, #28
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr

0800bd1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b085      	sub	sp, #20
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	f043 0307 	orr.w	r3, r3, #7
 800bd40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	609a      	str	r2, [r3, #8]
}
 800bd48:	bf00      	nop
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b087      	sub	sp, #28
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
 800bd60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	021a      	lsls	r2, r3, #8
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	431a      	orrs	r2, r3
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	697a      	ldr	r2, [r7, #20]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	609a      	str	r2, [r3, #8]
}
 800bd88:	bf00      	nop
 800bd8a:	371c      	adds	r7, #28
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b087      	sub	sp, #28
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	f003 031f 	and.w	r3, r3, #31
 800bda6:	2201      	movs	r2, #1
 800bda8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6a1a      	ldr	r2, [r3, #32]
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	43db      	mvns	r3, r3
 800bdb6:	401a      	ands	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6a1a      	ldr	r2, [r3, #32]
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	f003 031f 	and.w	r3, r3, #31
 800bdc6:	6879      	ldr	r1, [r7, #4]
 800bdc8:	fa01 f303 	lsl.w	r3, r1, r3
 800bdcc:	431a      	orrs	r2, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	621a      	str	r2, [r3, #32]
}
 800bdd2:	bf00      	nop
 800bdd4:	371c      	adds	r7, #28
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr
	...

0800bde0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d101      	bne.n	800bdf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	e06d      	b.n	800bed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2202      	movs	r2, #2
 800be04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a30      	ldr	r2, [pc, #192]	; (800bee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d009      	beq.n	800be36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a2f      	ldr	r2, [pc, #188]	; (800bee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d004      	beq.n	800be36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a2d      	ldr	r2, [pc, #180]	; (800bee8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d108      	bne.n	800be48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	4313      	orrs	r3, r2
 800be46:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	4313      	orrs	r3, r2
 800be58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a1e      	ldr	r2, [pc, #120]	; (800bee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d01d      	beq.n	800bea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be74:	d018      	beq.n	800bea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a1c      	ldr	r2, [pc, #112]	; (800beec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d013      	beq.n	800bea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a1a      	ldr	r2, [pc, #104]	; (800bef0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d00e      	beq.n	800bea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a15      	ldr	r2, [pc, #84]	; (800bee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d009      	beq.n	800bea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a16      	ldr	r2, [pc, #88]	; (800bef4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d004      	beq.n	800bea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a11      	ldr	r2, [pc, #68]	; (800bee8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d10c      	bne.n	800bec2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3714      	adds	r7, #20
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	40012c00 	.word	0x40012c00
 800bee4:	40013400 	.word	0x40013400
 800bee8:	40015000 	.word	0x40015000
 800beec:	40000400 	.word	0x40000400
 800bef0:	40000800 	.word	0x40000800
 800bef4:	40014000 	.word	0x40014000

0800bef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf28:	bf00      	nop
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e040      	b.n	800bfc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d106      	bne.n	800bf5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7f8 fba6 	bl	80046a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2224      	movs	r2, #36	; 0x24
 800bf60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f022 0201 	bic.w	r2, r2, #1
 800bf70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f82c 	bl	800bfd0 <UART_SetConfig>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d101      	bne.n	800bf82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e022      	b.n	800bfc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d002      	beq.n	800bf90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f9f6 	bl	800c37c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bfae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f042 0201 	orr.w	r2, r2, #1
 800bfbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fa7d 	bl	800c4c0 <UART_CheckIdleState>
 800bfc6:	4603      	mov	r3, r0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b088      	sub	sp, #32
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	689a      	ldr	r2, [r3, #8]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	431a      	orrs	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	695b      	ldr	r3, [r3, #20]
 800bfea:	431a      	orrs	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	69db      	ldr	r3, [r3, #28]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	4b92      	ldr	r3, [pc, #584]	; (800c244 <UART_SetConfig+0x274>)
 800bffc:	4013      	ands	r3, r2
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	6812      	ldr	r2, [r2, #0]
 800c002:	6979      	ldr	r1, [r7, #20]
 800c004:	430b      	orrs	r3, r1
 800c006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	68da      	ldr	r2, [r3, #12]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	430a      	orrs	r2, r1
 800c01c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a1b      	ldr	r3, [r3, #32]
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	430a      	orrs	r2, r1
 800c040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a80      	ldr	r2, [pc, #512]	; (800c248 <UART_SetConfig+0x278>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d120      	bne.n	800c08e <UART_SetConfig+0xbe>
 800c04c:	4b7f      	ldr	r3, [pc, #508]	; (800c24c <UART_SetConfig+0x27c>)
 800c04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c050:	f003 0303 	and.w	r3, r3, #3
 800c054:	2b03      	cmp	r3, #3
 800c056:	d817      	bhi.n	800c088 <UART_SetConfig+0xb8>
 800c058:	a201      	add	r2, pc, #4	; (adr r2, 800c060 <UART_SetConfig+0x90>)
 800c05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05e:	bf00      	nop
 800c060:	0800c071 	.word	0x0800c071
 800c064:	0800c07d 	.word	0x0800c07d
 800c068:	0800c083 	.word	0x0800c083
 800c06c:	0800c077 	.word	0x0800c077
 800c070:	2301      	movs	r3, #1
 800c072:	77fb      	strb	r3, [r7, #31]
 800c074:	e0b5      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c076:	2302      	movs	r3, #2
 800c078:	77fb      	strb	r3, [r7, #31]
 800c07a:	e0b2      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c07c:	2304      	movs	r3, #4
 800c07e:	77fb      	strb	r3, [r7, #31]
 800c080:	e0af      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c082:	2308      	movs	r3, #8
 800c084:	77fb      	strb	r3, [r7, #31]
 800c086:	e0ac      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c088:	2310      	movs	r3, #16
 800c08a:	77fb      	strb	r3, [r7, #31]
 800c08c:	e0a9      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a6f      	ldr	r2, [pc, #444]	; (800c250 <UART_SetConfig+0x280>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d124      	bne.n	800c0e2 <UART_SetConfig+0x112>
 800c098:	4b6c      	ldr	r3, [pc, #432]	; (800c24c <UART_SetConfig+0x27c>)
 800c09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c09c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c0a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c0a4:	d011      	beq.n	800c0ca <UART_SetConfig+0xfa>
 800c0a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c0aa:	d817      	bhi.n	800c0dc <UART_SetConfig+0x10c>
 800c0ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0b0:	d011      	beq.n	800c0d6 <UART_SetConfig+0x106>
 800c0b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0b6:	d811      	bhi.n	800c0dc <UART_SetConfig+0x10c>
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d003      	beq.n	800c0c4 <UART_SetConfig+0xf4>
 800c0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0c0:	d006      	beq.n	800c0d0 <UART_SetConfig+0x100>
 800c0c2:	e00b      	b.n	800c0dc <UART_SetConfig+0x10c>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	77fb      	strb	r3, [r7, #31]
 800c0c8:	e08b      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c0ca:	2302      	movs	r3, #2
 800c0cc:	77fb      	strb	r3, [r7, #31]
 800c0ce:	e088      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c0d0:	2304      	movs	r3, #4
 800c0d2:	77fb      	strb	r3, [r7, #31]
 800c0d4:	e085      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c0d6:	2308      	movs	r3, #8
 800c0d8:	77fb      	strb	r3, [r7, #31]
 800c0da:	e082      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c0dc:	2310      	movs	r3, #16
 800c0de:	77fb      	strb	r3, [r7, #31]
 800c0e0:	e07f      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a5b      	ldr	r2, [pc, #364]	; (800c254 <UART_SetConfig+0x284>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d124      	bne.n	800c136 <UART_SetConfig+0x166>
 800c0ec:	4b57      	ldr	r3, [pc, #348]	; (800c24c <UART_SetConfig+0x27c>)
 800c0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c0f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c0f8:	d011      	beq.n	800c11e <UART_SetConfig+0x14e>
 800c0fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c0fe:	d817      	bhi.n	800c130 <UART_SetConfig+0x160>
 800c100:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c104:	d011      	beq.n	800c12a <UART_SetConfig+0x15a>
 800c106:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c10a:	d811      	bhi.n	800c130 <UART_SetConfig+0x160>
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d003      	beq.n	800c118 <UART_SetConfig+0x148>
 800c110:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c114:	d006      	beq.n	800c124 <UART_SetConfig+0x154>
 800c116:	e00b      	b.n	800c130 <UART_SetConfig+0x160>
 800c118:	2300      	movs	r3, #0
 800c11a:	77fb      	strb	r3, [r7, #31]
 800c11c:	e061      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c11e:	2302      	movs	r3, #2
 800c120:	77fb      	strb	r3, [r7, #31]
 800c122:	e05e      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c124:	2304      	movs	r3, #4
 800c126:	77fb      	strb	r3, [r7, #31]
 800c128:	e05b      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c12a:	2308      	movs	r3, #8
 800c12c:	77fb      	strb	r3, [r7, #31]
 800c12e:	e058      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c130:	2310      	movs	r3, #16
 800c132:	77fb      	strb	r3, [r7, #31]
 800c134:	e055      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a47      	ldr	r2, [pc, #284]	; (800c258 <UART_SetConfig+0x288>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d124      	bne.n	800c18a <UART_SetConfig+0x1ba>
 800c140:	4b42      	ldr	r3, [pc, #264]	; (800c24c <UART_SetConfig+0x27c>)
 800c142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c144:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c148:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c14c:	d011      	beq.n	800c172 <UART_SetConfig+0x1a2>
 800c14e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c152:	d817      	bhi.n	800c184 <UART_SetConfig+0x1b4>
 800c154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c158:	d011      	beq.n	800c17e <UART_SetConfig+0x1ae>
 800c15a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c15e:	d811      	bhi.n	800c184 <UART_SetConfig+0x1b4>
 800c160:	2b00      	cmp	r3, #0
 800c162:	d003      	beq.n	800c16c <UART_SetConfig+0x19c>
 800c164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c168:	d006      	beq.n	800c178 <UART_SetConfig+0x1a8>
 800c16a:	e00b      	b.n	800c184 <UART_SetConfig+0x1b4>
 800c16c:	2300      	movs	r3, #0
 800c16e:	77fb      	strb	r3, [r7, #31]
 800c170:	e037      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c172:	2302      	movs	r3, #2
 800c174:	77fb      	strb	r3, [r7, #31]
 800c176:	e034      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c178:	2304      	movs	r3, #4
 800c17a:	77fb      	strb	r3, [r7, #31]
 800c17c:	e031      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c17e:	2308      	movs	r3, #8
 800c180:	77fb      	strb	r3, [r7, #31]
 800c182:	e02e      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c184:	2310      	movs	r3, #16
 800c186:	77fb      	strb	r3, [r7, #31]
 800c188:	e02b      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a33      	ldr	r2, [pc, #204]	; (800c25c <UART_SetConfig+0x28c>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d124      	bne.n	800c1de <UART_SetConfig+0x20e>
 800c194:	4b2d      	ldr	r3, [pc, #180]	; (800c24c <UART_SetConfig+0x27c>)
 800c196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c198:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c19c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c1a0:	d011      	beq.n	800c1c6 <UART_SetConfig+0x1f6>
 800c1a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c1a6:	d817      	bhi.n	800c1d8 <UART_SetConfig+0x208>
 800c1a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1ac:	d011      	beq.n	800c1d2 <UART_SetConfig+0x202>
 800c1ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1b2:	d811      	bhi.n	800c1d8 <UART_SetConfig+0x208>
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d003      	beq.n	800c1c0 <UART_SetConfig+0x1f0>
 800c1b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1bc:	d006      	beq.n	800c1cc <UART_SetConfig+0x1fc>
 800c1be:	e00b      	b.n	800c1d8 <UART_SetConfig+0x208>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	77fb      	strb	r3, [r7, #31]
 800c1c4:	e00d      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	77fb      	strb	r3, [r7, #31]
 800c1ca:	e00a      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c1cc:	2304      	movs	r3, #4
 800c1ce:	77fb      	strb	r3, [r7, #31]
 800c1d0:	e007      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c1d2:	2308      	movs	r3, #8
 800c1d4:	77fb      	strb	r3, [r7, #31]
 800c1d6:	e004      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c1d8:	2310      	movs	r3, #16
 800c1da:	77fb      	strb	r3, [r7, #31]
 800c1dc:	e001      	b.n	800c1e2 <UART_SetConfig+0x212>
 800c1de:	2310      	movs	r3, #16
 800c1e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	69db      	ldr	r3, [r3, #28]
 800c1e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1ea:	d16c      	bne.n	800c2c6 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800c1ec:	7ffb      	ldrb	r3, [r7, #31]
 800c1ee:	2b08      	cmp	r3, #8
 800c1f0:	d838      	bhi.n	800c264 <UART_SetConfig+0x294>
 800c1f2:	a201      	add	r2, pc, #4	; (adr r2, 800c1f8 <UART_SetConfig+0x228>)
 800c1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f8:	0800c21d 	.word	0x0800c21d
 800c1fc:	0800c225 	.word	0x0800c225
 800c200:	0800c22d 	.word	0x0800c22d
 800c204:	0800c265 	.word	0x0800c265
 800c208:	0800c233 	.word	0x0800c233
 800c20c:	0800c265 	.word	0x0800c265
 800c210:	0800c265 	.word	0x0800c265
 800c214:	0800c265 	.word	0x0800c265
 800c218:	0800c23b 	.word	0x0800c23b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c21c:	f7fd fac8 	bl	80097b0 <HAL_RCC_GetPCLK1Freq>
 800c220:	61b8      	str	r0, [r7, #24]
        break;
 800c222:	e024      	b.n	800c26e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c224:	f7fd fae6 	bl	80097f4 <HAL_RCC_GetPCLK2Freq>
 800c228:	61b8      	str	r0, [r7, #24]
        break;
 800c22a:	e020      	b.n	800c26e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c22c:	4b0c      	ldr	r3, [pc, #48]	; (800c260 <UART_SetConfig+0x290>)
 800c22e:	61bb      	str	r3, [r7, #24]
        break;
 800c230:	e01d      	b.n	800c26e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c232:	f7fd fa47 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800c236:	61b8      	str	r0, [r7, #24]
        break;
 800c238:	e019      	b.n	800c26e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c23a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c23e:	61bb      	str	r3, [r7, #24]
        break;
 800c240:	e015      	b.n	800c26e <UART_SetConfig+0x29e>
 800c242:	bf00      	nop
 800c244:	efff69f3 	.word	0xefff69f3
 800c248:	40013800 	.word	0x40013800
 800c24c:	40021000 	.word	0x40021000
 800c250:	40004400 	.word	0x40004400
 800c254:	40004800 	.word	0x40004800
 800c258:	40004c00 	.word	0x40004c00
 800c25c:	40005000 	.word	0x40005000
 800c260:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800c264:	2300      	movs	r3, #0
 800c266:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	77bb      	strb	r3, [r7, #30]
        break;
 800c26c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d075      	beq.n	800c360 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	005a      	lsls	r2, r3, #1
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	085b      	lsrs	r3, r3, #1
 800c27e:	441a      	add	r2, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	fbb2 f3f3 	udiv	r3, r2, r3
 800c288:	b29b      	uxth	r3, r3
 800c28a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	2b0f      	cmp	r3, #15
 800c290:	d916      	bls.n	800c2c0 <UART_SetConfig+0x2f0>
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c298:	d212      	bcs.n	800c2c0 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	f023 030f 	bic.w	r3, r3, #15
 800c2a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	085b      	lsrs	r3, r3, #1
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	f003 0307 	and.w	r3, r3, #7
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	89fb      	ldrh	r3, [r7, #14]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	89fa      	ldrh	r2, [r7, #14]
 800c2bc:	60da      	str	r2, [r3, #12]
 800c2be:	e04f      	b.n	800c360 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	77bb      	strb	r3, [r7, #30]
 800c2c4:	e04c      	b.n	800c360 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c2c6:	7ffb      	ldrb	r3, [r7, #31]
 800c2c8:	2b08      	cmp	r3, #8
 800c2ca:	d828      	bhi.n	800c31e <UART_SetConfig+0x34e>
 800c2cc:	a201      	add	r2, pc, #4	; (adr r2, 800c2d4 <UART_SetConfig+0x304>)
 800c2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d2:	bf00      	nop
 800c2d4:	0800c2f9 	.word	0x0800c2f9
 800c2d8:	0800c301 	.word	0x0800c301
 800c2dc:	0800c309 	.word	0x0800c309
 800c2e0:	0800c31f 	.word	0x0800c31f
 800c2e4:	0800c30f 	.word	0x0800c30f
 800c2e8:	0800c31f 	.word	0x0800c31f
 800c2ec:	0800c31f 	.word	0x0800c31f
 800c2f0:	0800c31f 	.word	0x0800c31f
 800c2f4:	0800c317 	.word	0x0800c317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2f8:	f7fd fa5a 	bl	80097b0 <HAL_RCC_GetPCLK1Freq>
 800c2fc:	61b8      	str	r0, [r7, #24]
        break;
 800c2fe:	e013      	b.n	800c328 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c300:	f7fd fa78 	bl	80097f4 <HAL_RCC_GetPCLK2Freq>
 800c304:	61b8      	str	r0, [r7, #24]
        break;
 800c306:	e00f      	b.n	800c328 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c308:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <UART_SetConfig+0x3a8>)
 800c30a:	61bb      	str	r3, [r7, #24]
        break;
 800c30c:	e00c      	b.n	800c328 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c30e:	f7fd f9d9 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800c312:	61b8      	str	r0, [r7, #24]
        break;
 800c314:	e008      	b.n	800c328 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c31a:	61bb      	str	r3, [r7, #24]
        break;
 800c31c:	e004      	b.n	800c328 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800c31e:	2300      	movs	r3, #0
 800c320:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	77bb      	strb	r3, [r7, #30]
        break;
 800c326:	bf00      	nop
    }

    if (pclk != 0U)
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d018      	beq.n	800c360 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	085a      	lsrs	r2, r3, #1
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	441a      	add	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c340:	b29b      	uxth	r3, r3
 800c342:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	2b0f      	cmp	r3, #15
 800c348:	d908      	bls.n	800c35c <UART_SetConfig+0x38c>
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c350:	d204      	bcs.n	800c35c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	693a      	ldr	r2, [r7, #16]
 800c358:	60da      	str	r2, [r3, #12]
 800c35a:	e001      	b.n	800c360 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c36c:	7fbb      	ldrb	r3, [r7, #30]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3720      	adds	r7, #32
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	007a1200 	.word	0x007a1200

0800c37c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00a      	beq.n	800c3a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	430a      	orrs	r2, r1
 800c3a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3aa:	f003 0302 	and.w	r3, r3, #2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00a      	beq.n	800c3c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	430a      	orrs	r2, r1
 800c3c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3cc:	f003 0304 	and.w	r3, r3, #4
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00a      	beq.n	800c3ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ee:	f003 0308 	and.w	r3, r3, #8
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00a      	beq.n	800c40c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	430a      	orrs	r2, r1
 800c40a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c410:	f003 0310 	and.w	r3, r3, #16
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00a      	beq.n	800c42e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c432:	f003 0320 	and.w	r3, r3, #32
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00a      	beq.n	800c450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d01a      	beq.n	800c492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	430a      	orrs	r2, r1
 800c470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c47a:	d10a      	bne.n	800c492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	430a      	orrs	r2, r1
 800c490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00a      	beq.n	800c4b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	430a      	orrs	r2, r1
 800c4b2:	605a      	str	r2, [r3, #4]
  }
}
 800c4b4:	bf00      	nop
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af02      	add	r7, sp, #8
 800c4c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4d0:	f7f8 fb98 	bl	8004c04 <HAL_GetTick>
 800c4d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f003 0308 	and.w	r3, r3, #8
 800c4e0:	2b08      	cmp	r3, #8
 800c4e2:	d10e      	bne.n	800c502 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4e8:	9300      	str	r3, [sp, #0]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f82d 	bl	800c552 <UART_WaitOnFlagUntilTimeout>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d001      	beq.n	800c502 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e023      	b.n	800c54a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f003 0304 	and.w	r3, r3, #4
 800c50c:	2b04      	cmp	r3, #4
 800c50e:	d10e      	bne.n	800c52e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 f817 	bl	800c552 <UART_WaitOnFlagUntilTimeout>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d001      	beq.n	800c52e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c52a:	2303      	movs	r3, #3
 800c52c:	e00d      	b.n	800c54a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2220      	movs	r2, #32
 800c532:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2220      	movs	r2, #32
 800c538:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b09c      	sub	sp, #112	; 0x70
 800c556:	af00      	add	r7, sp, #0
 800c558:	60f8      	str	r0, [r7, #12]
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	603b      	str	r3, [r7, #0]
 800c55e:	4613      	mov	r3, r2
 800c560:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c562:	e0a5      	b.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c56a:	f000 80a1 	beq.w	800c6b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c56e:	f7f8 fb49 	bl	8004c04 <HAL_GetTick>
 800c572:	4602      	mov	r2, r0
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d302      	bcc.n	800c584 <UART_WaitOnFlagUntilTimeout+0x32>
 800c57e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c580:	2b00      	cmp	r3, #0
 800c582:	d13e      	bne.n	800c602 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c58c:	e853 3f00 	ldrex	r3, [r3]
 800c590:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c594:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c598:	667b      	str	r3, [r7, #100]	; 0x64
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5aa:	e841 2300 	strex	r3, r2, [r1]
 800c5ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c5b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1e6      	bne.n	800c584 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	3308      	adds	r3, #8
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c0:	e853 3f00 	ldrex	r3, [r3]
 800c5c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c8:	f023 0301 	bic.w	r3, r3, #1
 800c5cc:	663b      	str	r3, [r7, #96]	; 0x60
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5d6:	64ba      	str	r2, [r7, #72]	; 0x48
 800c5d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5de:	e841 2300 	strex	r3, r2, [r1]
 800c5e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1e5      	bne.n	800c5b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2220      	movs	r2, #32
 800c5ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2220      	movs	r2, #32
 800c5f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e067      	b.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 0304 	and.w	r3, r3, #4
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d04f      	beq.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	69db      	ldr	r3, [r3, #28]
 800c616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c61a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c61e:	d147      	bne.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c628:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c632:	e853 3f00 	ldrex	r3, [r3]
 800c636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c63e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	461a      	mov	r2, r3
 800c646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c648:	637b      	str	r3, [r7, #52]	; 0x34
 800c64a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c64e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c650:	e841 2300 	strex	r3, r2, [r1]
 800c654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1e6      	bne.n	800c62a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	3308      	adds	r3, #8
 800c662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	e853 3f00 	ldrex	r3, [r3]
 800c66a:	613b      	str	r3, [r7, #16]
   return(result);
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	f023 0301 	bic.w	r3, r3, #1
 800c672:	66bb      	str	r3, [r7, #104]	; 0x68
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3308      	adds	r3, #8
 800c67a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c67c:	623a      	str	r2, [r7, #32]
 800c67e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c680:	69f9      	ldr	r1, [r7, #28]
 800c682:	6a3a      	ldr	r2, [r7, #32]
 800c684:	e841 2300 	strex	r3, r2, [r1]
 800c688:	61bb      	str	r3, [r7, #24]
   return(result);
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1e5      	bne.n	800c65c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2220      	movs	r2, #32
 800c694:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2220      	movs	r2, #32
 800c69a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	e010      	b.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	69da      	ldr	r2, [r3, #28]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	4013      	ands	r3, r2
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	bf0c      	ite	eq
 800c6c0:	2301      	moveq	r3, #1
 800c6c2:	2300      	movne	r3, #0
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	79fb      	ldrb	r3, [r7, #7]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	f43f af4a 	beq.w	800c564 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3770      	adds	r7, #112	; 0x70
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
	...

0800c6dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c6e0:	4904      	ldr	r1, [pc, #16]	; (800c6f4 <MX_FATFS_Init+0x18>)
 800c6e2:	4805      	ldr	r0, [pc, #20]	; (800c6f8 <MX_FATFS_Init+0x1c>)
 800c6e4:	f003 ff26 	bl	8010534 <FATFS_LinkDriver>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	4b03      	ldr	r3, [pc, #12]	; (800c6fc <MX_FATFS_Init+0x20>)
 800c6ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c6f0:	bf00      	nop
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	20002ffc 	.word	0x20002ffc
 800c6f8:	20000018 	.word	0x20000018
 800c6fc:	20002ff8 	.word	0x20002ff8

0800c700 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c700:	b480      	push	{r7}
 800c702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c704:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c706:	4618      	mov	r0, r3
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//return SD_disk_initialize(pdrv);
	return SD_disk_initialize(pdrv);
 800c71a:	79fb      	ldrb	r3, [r7, #7]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7f5 fa95 	bl	8001c4c <SD_disk_initialize>
 800c722:	4603      	mov	r3, r0
 800c724:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c726:	4618      	mov	r0, r3
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	4603      	mov	r3, r0
 800c736:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	//return SD_disk_status(pdrv);
	return SD_disk_status(pdrv);
 800c738:	79fb      	ldrb	r3, [r7, #7]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f5 fb70 	bl	8001e20 <SD_disk_status>
 800c740:	4603      	mov	r3, r0
 800c742:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c744:	4618      	mov	r0, r3
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	60b9      	str	r1, [r7, #8]
 800c754:	607a      	str	r2, [r7, #4]
 800c756:	603b      	str	r3, [r7, #0]
 800c758:	4603      	mov	r3, r0
 800c75a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	//return SD_disk_read(pdrv, buff, sector, count);
	return SD_disk_read(pdrv, buff, sector, count);
 800c75c:	7bf8      	ldrb	r0, [r7, #15]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	68b9      	ldr	r1, [r7, #8]
 800c764:	f7f5 fb72 	bl	8001e4c <SD_disk_read>
 800c768:	4603      	mov	r3, r0
 800c76a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60b9      	str	r1, [r7, #8]
 800c77c:	607a      	str	r2, [r7, #4]
 800c77e:	603b      	str	r3, [r7, #0]
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	//return SD_disk_write(pdrv, buff, sector, count);
	return SD_disk_write(pdrv, buff, sector, count);
 800c784:	7bf8      	ldrb	r0, [r7, #15]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	68b9      	ldr	r1, [r7, #8]
 800c78c:	f7f5 fbc8 	bl	8001f20 <SD_disk_write>
 800c790:	4603      	mov	r3, r0
 800c792:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800c794:	4618      	mov	r0, r3
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	603a      	str	r2, [r7, #0]
 800c7a6:	71fb      	strb	r3, [r7, #7]
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	//return SD_disk_ioctl(pdrv, cmd, buff);
	return SD_disk_ioctl(pdrv, cmd, buff);
 800c7ac:	79fb      	ldrb	r3, [r7, #7]
 800c7ae:	79b9      	ldrb	r1, [r7, #6]
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7f5 fc38 	bl	8002028 <SD_disk_ioctl>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c7ce:	79fb      	ldrb	r3, [r7, #7]
 800c7d0:	4a08      	ldr	r2, [pc, #32]	; (800c7f4 <disk_status+0x30>)
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	4413      	add	r3, r2
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	79fa      	ldrb	r2, [r7, #7]
 800c7dc:	4905      	ldr	r1, [pc, #20]	; (800c7f4 <disk_status+0x30>)
 800c7de:	440a      	add	r2, r1
 800c7e0:	7a12      	ldrb	r2, [r2, #8]
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	4798      	blx	r3
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	20003220 	.word	0x20003220

0800c7f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	4603      	mov	r3, r0
 800c800:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800c806:	79fb      	ldrb	r3, [r7, #7]
 800c808:	4a0d      	ldr	r2, [pc, #52]	; (800c840 <disk_initialize+0x48>)
 800c80a:	5cd3      	ldrb	r3, [r2, r3]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d111      	bne.n	800c834 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800c810:	79fb      	ldrb	r3, [r7, #7]
 800c812:	4a0b      	ldr	r2, [pc, #44]	; (800c840 <disk_initialize+0x48>)
 800c814:	2101      	movs	r1, #1
 800c816:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c818:	79fb      	ldrb	r3, [r7, #7]
 800c81a:	4a09      	ldr	r2, [pc, #36]	; (800c840 <disk_initialize+0x48>)
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	4413      	add	r3, r2
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	79fa      	ldrb	r2, [r7, #7]
 800c826:	4906      	ldr	r1, [pc, #24]	; (800c840 <disk_initialize+0x48>)
 800c828:	440a      	add	r2, r1
 800c82a:	7a12      	ldrb	r2, [r2, #8]
 800c82c:	4610      	mov	r0, r2
 800c82e:	4798      	blx	r3
 800c830:	4603      	mov	r3, r0
 800c832:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c834:	7bfb      	ldrb	r3, [r7, #15]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20003220 	.word	0x20003220

0800c844 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c844:	b590      	push	{r4, r7, lr}
 800c846:	b087      	sub	sp, #28
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60b9      	str	r1, [r7, #8]
 800c84c:	607a      	str	r2, [r7, #4]
 800c84e:	603b      	str	r3, [r7, #0]
 800c850:	4603      	mov	r3, r0
 800c852:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c854:	7bfb      	ldrb	r3, [r7, #15]
 800c856:	4a0a      	ldr	r2, [pc, #40]	; (800c880 <disk_read+0x3c>)
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4413      	add	r3, r2
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	689c      	ldr	r4, [r3, #8]
 800c860:	7bfb      	ldrb	r3, [r7, #15]
 800c862:	4a07      	ldr	r2, [pc, #28]	; (800c880 <disk_read+0x3c>)
 800c864:	4413      	add	r3, r2
 800c866:	7a18      	ldrb	r0, [r3, #8]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	68b9      	ldr	r1, [r7, #8]
 800c86e:	47a0      	blx	r4
 800c870:	4603      	mov	r3, r0
 800c872:	75fb      	strb	r3, [r7, #23]
  return res;
 800c874:	7dfb      	ldrb	r3, [r7, #23]
}
 800c876:	4618      	mov	r0, r3
 800c878:	371c      	adds	r7, #28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd90      	pop	{r4, r7, pc}
 800c87e:	bf00      	nop
 800c880:	20003220 	.word	0x20003220

0800c884 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c884:	b590      	push	{r4, r7, lr}
 800c886:	b087      	sub	sp, #28
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60b9      	str	r1, [r7, #8]
 800c88c:	607a      	str	r2, [r7, #4]
 800c88e:	603b      	str	r3, [r7, #0]
 800c890:	4603      	mov	r3, r0
 800c892:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	4a0a      	ldr	r2, [pc, #40]	; (800c8c0 <disk_write+0x3c>)
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	4413      	add	r3, r2
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	68dc      	ldr	r4, [r3, #12]
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
 800c8a2:	4a07      	ldr	r2, [pc, #28]	; (800c8c0 <disk_write+0x3c>)
 800c8a4:	4413      	add	r3, r2
 800c8a6:	7a18      	ldrb	r0, [r3, #8]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	68b9      	ldr	r1, [r7, #8]
 800c8ae:	47a0      	blx	r4
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	371c      	adds	r7, #28
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd90      	pop	{r4, r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	20003220 	.word	0x20003220

0800c8c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	603a      	str	r2, [r7, #0]
 800c8ce:	71fb      	strb	r3, [r7, #7]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	4a09      	ldr	r2, [pc, #36]	; (800c8fc <disk_ioctl+0x38>)
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	691b      	ldr	r3, [r3, #16]
 800c8e0:	79fa      	ldrb	r2, [r7, #7]
 800c8e2:	4906      	ldr	r1, [pc, #24]	; (800c8fc <disk_ioctl+0x38>)
 800c8e4:	440a      	add	r2, r1
 800c8e6:	7a10      	ldrb	r0, [r2, #8]
 800c8e8:	79b9      	ldrb	r1, [r7, #6]
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	4798      	blx	r3
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	73fb      	strb	r3, [r7, #15]
  return res;
 800c8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3710      	adds	r7, #16
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	20003220 	.word	0x20003220

0800c900 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c900:	b480      	push	{r7}
 800c902:	b087      	sub	sp, #28
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800c914:	e007      	b.n	800c926 <mem_cpy+0x26>
		*d++ = *s++;
 800c916:	693a      	ldr	r2, [r7, #16]
 800c918:	1c53      	adds	r3, r2, #1
 800c91a:	613b      	str	r3, [r7, #16]
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	1c59      	adds	r1, r3, #1
 800c920:	6179      	str	r1, [r7, #20]
 800c922:	7812      	ldrb	r2, [r2, #0]
 800c924:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	1e5a      	subs	r2, r3, #1
 800c92a:	607a      	str	r2, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1f2      	bne.n	800c916 <mem_cpy+0x16>
}
 800c930:	bf00      	nop
 800c932:	bf00      	nop
 800c934:	371c      	adds	r7, #28
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr

0800c93e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c93e:	b480      	push	{r7}
 800c940:	b087      	sub	sp, #28
 800c942:	af00      	add	r7, sp, #0
 800c944:	60f8      	str	r0, [r7, #12]
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800c94e:	e005      	b.n	800c95c <mem_set+0x1e>
		*d++ = (BYTE)val;
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	617a      	str	r2, [r7, #20]
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	b2d2      	uxtb	r2, r2
 800c95a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	1e5a      	subs	r2, r3, #1
 800c960:	607a      	str	r2, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1f4      	bne.n	800c950 <mem_set+0x12>
}
 800c966:	bf00      	nop
 800c968:	bf00      	nop
 800c96a:	371c      	adds	r7, #28
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800c974:	b480      	push	{r7}
 800c976:	b089      	sub	sp, #36	; 0x24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	61fb      	str	r3, [r7, #28]
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c988:	2300      	movs	r3, #0
 800c98a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800c98c:	bf00      	nop
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	1e5a      	subs	r2, r3, #1
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00d      	beq.n	800c9b4 <mem_cmp+0x40>
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	1c5a      	adds	r2, r3, #1
 800c99c:	61fa      	str	r2, [r7, #28]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	1c5a      	adds	r2, r3, #1
 800c9a6:	61ba      	str	r2, [r7, #24]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	1acb      	subs	r3, r1, r3
 800c9ac:	617b      	str	r3, [r7, #20]
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d0ec      	beq.n	800c98e <mem_cmp+0x1a>
	return r;
 800c9b4:	697b      	ldr	r3, [r7, #20]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3724      	adds	r7, #36	; 0x24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800c9c2:	b480      	push	{r7}
 800c9c4:	b083      	sub	sp, #12
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c9cc:	e002      	b.n	800c9d4 <chk_chr+0x12>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	607b      	str	r3, [r7, #4]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d005      	beq.n	800c9e8 <chk_chr+0x26>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d1f2      	bne.n	800c9ce <chk_chr+0xc>
	return *str;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca02:	2300      	movs	r3, #0
 800ca04:	60bb      	str	r3, [r7, #8]
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	e03b      	b.n	800ca84 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 800ca0c:	4931      	ldr	r1, [pc, #196]	; (800cad4 <chk_lock+0xdc>)
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	4613      	mov	r3, r2
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	4413      	add	r3, r2
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	440b      	add	r3, r1
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d02c      	beq.n	800ca7a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ca20:	492c      	ldr	r1, [pc, #176]	; (800cad4 <chk_lock+0xdc>)
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	4613      	mov	r3, r2
 800ca26:	005b      	lsls	r3, r3, #1
 800ca28:	4413      	add	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	440b      	add	r3, r1
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d120      	bne.n	800ca7e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 800ca3c:	4925      	ldr	r1, [pc, #148]	; (800cad4 <chk_lock+0xdc>)
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	4613      	mov	r3, r2
 800ca42:	005b      	lsls	r3, r3, #1
 800ca44:	4413      	add	r3, r2
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	440b      	add	r3, r1
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca54:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d111      	bne.n	800ca7e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800ca5a:	491e      	ldr	r1, [pc, #120]	; (800cad4 <chk_lock+0xdc>)
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	005b      	lsls	r3, r3, #1
 800ca62:	4413      	add	r3, r2
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	440b      	add	r3, r1
 800ca68:	3308      	adds	r3, #8
 800ca6a:	881a      	ldrh	r2, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca72:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d102      	bne.n	800ca7e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800ca78:	e007      	b.n	800ca8a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3301      	adds	r3, #1
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d9c0      	bls.n	800ca0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d109      	bne.n	800caa4 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d102      	bne.n	800ca9c <chk_lock+0xa4>
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d101      	bne.n	800caa0 <chk_lock+0xa8>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	e013      	b.n	800cac8 <chk_lock+0xd0>
 800caa0:	2312      	movs	r3, #18
 800caa2:	e011      	b.n	800cac8 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d10b      	bne.n	800cac2 <chk_lock+0xca>
 800caaa:	490a      	ldr	r1, [pc, #40]	; (800cad4 <chk_lock+0xdc>)
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	4613      	mov	r3, r2
 800cab0:	005b      	lsls	r3, r3, #1
 800cab2:	4413      	add	r3, r2
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	440b      	add	r3, r1
 800cab8:	330a      	adds	r3, #10
 800caba:	881b      	ldrh	r3, [r3, #0]
 800cabc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cac0:	d101      	bne.n	800cac6 <chk_lock+0xce>
 800cac2:	2310      	movs	r3, #16
 800cac4:	e000      	b.n	800cac8 <chk_lock+0xd0>
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3714      	adds	r7, #20
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr
 800cad4:	20003008 	.word	0x20003008

0800cad8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cade:	2300      	movs	r3, #0
 800cae0:	607b      	str	r3, [r7, #4]
 800cae2:	e002      	b.n	800caea <enq_lock+0x12>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3301      	adds	r3, #1
 800cae8:	607b      	str	r3, [r7, #4]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d809      	bhi.n	800cb04 <enq_lock+0x2c>
 800caf0:	490a      	ldr	r1, [pc, #40]	; (800cb1c <enq_lock+0x44>)
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	4613      	mov	r3, r2
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	4413      	add	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	440b      	add	r3, r1
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1ef      	bne.n	800cae4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	bf14      	ite	ne
 800cb0a:	2301      	movne	r3, #1
 800cb0c:	2300      	moveq	r3, #0
 800cb0e:	b2db      	uxtb	r3, r3
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	20003008 	.word	0x20003008

0800cb20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	e02e      	b.n	800cb8e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800cb30:	4959      	ldr	r1, [pc, #356]	; (800cc98 <inc_lock+0x178>)
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	4613      	mov	r3, r2
 800cb36:	005b      	lsls	r3, r3, #1
 800cb38:	4413      	add	r3, r2
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	440b      	add	r3, r1
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d11d      	bne.n	800cb88 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800cb4c:	4952      	ldr	r1, [pc, #328]	; (800cc98 <inc_lock+0x178>)
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	4613      	mov	r3, r2
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	4413      	add	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	440b      	add	r3, r1
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d10e      	bne.n	800cb88 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800cb6a:	494b      	ldr	r1, [pc, #300]	; (800cc98 <inc_lock+0x178>)
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	4413      	add	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	440b      	add	r3, r1
 800cb78:	3308      	adds	r3, #8
 800cb7a:	881a      	ldrh	r2, [r3, #0]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb82:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d006      	beq.n	800cb96 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	60fb      	str	r3, [r7, #12]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d9cd      	bls.n	800cb30 <inc_lock+0x10>
 800cb94:	e000      	b.n	800cb98 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800cb96:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d148      	bne.n	800cc30 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	60fb      	str	r3, [r7, #12]
 800cba2:	e002      	b.n	800cbaa <inc_lock+0x8a>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	3301      	adds	r3, #1
 800cba8:	60fb      	str	r3, [r7, #12]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d809      	bhi.n	800cbc4 <inc_lock+0xa4>
 800cbb0:	4939      	ldr	r1, [pc, #228]	; (800cc98 <inc_lock+0x178>)
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	4413      	add	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	440b      	add	r3, r1
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1ef      	bne.n	800cba4 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d101      	bne.n	800cbce <inc_lock+0xae>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	e05d      	b.n	800cc8a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbd4:	6819      	ldr	r1, [r3, #0]
 800cbd6:	4830      	ldr	r0, [pc, #192]	; (800cc98 <inc_lock+0x178>)
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	4613      	mov	r3, r2
 800cbdc:	005b      	lsls	r3, r3, #1
 800cbde:	4413      	add	r3, r2
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4403      	add	r3, r0
 800cbe4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbec:	6899      	ldr	r1, [r3, #8]
 800cbee:	482a      	ldr	r0, [pc, #168]	; (800cc98 <inc_lock+0x178>)
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	4413      	add	r3, r2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4403      	add	r3, r0
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc06:	88d8      	ldrh	r0, [r3, #6]
 800cc08:	4923      	ldr	r1, [pc, #140]	; (800cc98 <inc_lock+0x178>)
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	4413      	add	r3, r2
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	440b      	add	r3, r1
 800cc16:	3308      	adds	r3, #8
 800cc18:	4602      	mov	r2, r0
 800cc1a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800cc1c:	491e      	ldr	r1, [pc, #120]	; (800cc98 <inc_lock+0x178>)
 800cc1e:	68fa      	ldr	r2, [r7, #12]
 800cc20:	4613      	mov	r3, r2
 800cc22:	005b      	lsls	r3, r3, #1
 800cc24:	4413      	add	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	440b      	add	r3, r1
 800cc2a:	330a      	adds	r3, #10
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00c      	beq.n	800cc50 <inc_lock+0x130>
 800cc36:	4918      	ldr	r1, [pc, #96]	; (800cc98 <inc_lock+0x178>)
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	005b      	lsls	r3, r3, #1
 800cc3e:	4413      	add	r3, r2
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	440b      	add	r3, r1
 800cc44:	330a      	adds	r3, #10
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d001      	beq.n	800cc50 <inc_lock+0x130>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	e01c      	b.n	800cc8a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10b      	bne.n	800cc6e <inc_lock+0x14e>
 800cc56:	4910      	ldr	r1, [pc, #64]	; (800cc98 <inc_lock+0x178>)
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	005b      	lsls	r3, r3, #1
 800cc5e:	4413      	add	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	440b      	add	r3, r1
 800cc64:	330a      	adds	r3, #10
 800cc66:	881b      	ldrh	r3, [r3, #0]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	b299      	uxth	r1, r3
 800cc6c:	e001      	b.n	800cc72 <inc_lock+0x152>
 800cc6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cc72:	4809      	ldr	r0, [pc, #36]	; (800cc98 <inc_lock+0x178>)
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	4613      	mov	r3, r2
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	4413      	add	r3, r2
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	4403      	add	r3, r0
 800cc80:	330a      	adds	r3, #10
 800cc82:	460a      	mov	r2, r1
 800cc84:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	3301      	adds	r3, #1
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	20003008 	.word	0x20003008

0800cc9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b085      	sub	sp, #20
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	607b      	str	r3, [r7, #4]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d82e      	bhi.n	800cd0e <dec_lock+0x72>
		n = Files[i].ctr;
 800ccb0:	491b      	ldr	r1, [pc, #108]	; (800cd20 <dec_lock+0x84>)
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	4413      	add	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	440b      	add	r3, r1
 800ccbe:	330a      	adds	r3, #10
 800ccc0:	881b      	ldrh	r3, [r3, #0]
 800ccc2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ccc4:	89fb      	ldrh	r3, [r7, #14]
 800ccc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccca:	d101      	bne.n	800ccd0 <dec_lock+0x34>
 800cccc:	2300      	movs	r3, #0
 800ccce:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800ccd0:	89fb      	ldrh	r3, [r7, #14]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d002      	beq.n	800ccdc <dec_lock+0x40>
 800ccd6:	89fb      	ldrh	r3, [r7, #14]
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ccdc:	4910      	ldr	r1, [pc, #64]	; (800cd20 <dec_lock+0x84>)
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	4613      	mov	r3, r2
 800cce2:	005b      	lsls	r3, r3, #1
 800cce4:	4413      	add	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	440b      	add	r3, r1
 800ccea:	330a      	adds	r3, #10
 800ccec:	89fa      	ldrh	r2, [r7, #14]
 800ccee:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ccf0:	89fb      	ldrh	r3, [r7, #14]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d108      	bne.n	800cd08 <dec_lock+0x6c>
 800ccf6:	490a      	ldr	r1, [pc, #40]	; (800cd20 <dec_lock+0x84>)
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	005b      	lsls	r3, r3, #1
 800ccfe:	4413      	add	r3, r2
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	440b      	add	r3, r1
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	737b      	strb	r3, [r7, #13]
 800cd0c:	e001      	b.n	800cd12 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cd0e:	2302      	movs	r3, #2
 800cd10:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cd12:	7b7b      	ldrb	r3, [r7, #13]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3714      	adds	r7, #20
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr
 800cd20:	20003008 	.word	0x20003008

0800cd24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b085      	sub	sp, #20
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	60fb      	str	r3, [r7, #12]
 800cd30:	e016      	b.n	800cd60 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cd32:	4910      	ldr	r1, [pc, #64]	; (800cd74 <clear_lock+0x50>)
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	4613      	mov	r3, r2
 800cd38:	005b      	lsls	r3, r3, #1
 800cd3a:	4413      	add	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	440b      	add	r3, r1
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d108      	bne.n	800cd5a <clear_lock+0x36>
 800cd48:	490a      	ldr	r1, [pc, #40]	; (800cd74 <clear_lock+0x50>)
 800cd4a:	68fa      	ldr	r2, [r7, #12]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	005b      	lsls	r3, r3, #1
 800cd50:	4413      	add	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	440b      	add	r3, r1
 800cd56:	2200      	movs	r2, #0
 800cd58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	60fb      	str	r3, [r7, #12]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d9e5      	bls.n	800cd32 <clear_lock+0xe>
	}
}
 800cd66:	bf00      	nop
 800cd68:	bf00      	nop
 800cd6a:	3714      	adds	r7, #20
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr
 800cd74:	20003008 	.word	0x20003008

0800cd78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b086      	sub	sp, #24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cd80:	2300      	movs	r3, #0
 800cd82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd8a:	791b      	ldrb	r3, [r3, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d040      	beq.n	800ce12 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cda0:	7858      	ldrb	r0, [r3, #1]
 800cda2:	6879      	ldr	r1, [r7, #4]
 800cda4:	2301      	movs	r3, #1
 800cda6:	697a      	ldr	r2, [r7, #20]
 800cda8:	f7ff fd6c 	bl	800c884 <disk_write>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d002      	beq.n	800cdb8 <sync_window+0x40>
			res = FR_DISK_ERR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	73fb      	strb	r3, [r7, #15]
 800cdb6:	e02c      	b.n	800ce12 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdc8:	6a1b      	ldr	r3, [r3, #32]
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	1ad2      	subs	r2, r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d21b      	bcs.n	800ce12 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cde0:	78db      	ldrb	r3, [r3, #3]
 800cde2:	613b      	str	r3, [r7, #16]
 800cde4:	e012      	b.n	800ce0c <sync_window+0x94>
					wsect += fs->fsize;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdec:	699b      	ldr	r3, [r3, #24]
 800cdee:	697a      	ldr	r2, [r7, #20]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdfa:	7858      	ldrb	r0, [r3, #1]
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	2301      	movs	r3, #1
 800ce00:	697a      	ldr	r2, [r7, #20]
 800ce02:	f7ff fd3f 	bl	800c884 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	613b      	str	r3, [r7, #16]
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d8e9      	bhi.n	800cde6 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800ce12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3718      	adds	r7, #24
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ce26:	2300      	movs	r3, #0
 800ce28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d01e      	beq.n	800ce76 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff ff9d 	bl	800cd78 <sync_window>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d116      	bne.n	800ce76 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce4e:	7858      	ldrb	r0, [r3, #1]
 800ce50:	6879      	ldr	r1, [r7, #4]
 800ce52:	2301      	movs	r3, #1
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	f7ff fcf5 	bl	800c844 <disk_read>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d004      	beq.n	800ce6a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ce60:	f04f 33ff 	mov.w	r3, #4294967295
 800ce64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ce66:	2301      	movs	r3, #1
 800ce68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce70:	461a      	mov	r2, r3
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800ce76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f7ff ff75 	bl	800cd78 <sync_window>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ce92:	7bfb      	ldrb	r3, [r7, #15]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f040 80ad 	bne.w	800cff4 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2b03      	cmp	r3, #3
 800cea4:	f040 8098 	bne.w	800cfd8 <sync_fs+0x158>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceae:	795b      	ldrb	r3, [r3, #5]
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	f040 8091 	bne.w	800cfd8 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cebe:	895b      	ldrh	r3, [r3, #10]
 800cec0:	461a      	mov	r2, r3
 800cec2:	2100      	movs	r1, #0
 800cec4:	f7ff fd3b 	bl	800c93e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2255      	movs	r2, #85	; 0x55
 800cecc:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	22aa      	movs	r2, #170	; 0xaa
 800ced4:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2252      	movs	r2, #82	; 0x52
 800cedc:	701a      	strb	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2252      	movs	r2, #82	; 0x52
 800cee2:	705a      	strb	r2, [r3, #1]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2261      	movs	r2, #97	; 0x61
 800cee8:	709a      	strb	r2, [r3, #2]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2241      	movs	r2, #65	; 0x41
 800ceee:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2272      	movs	r2, #114	; 0x72
 800cef4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2272      	movs	r2, #114	; 0x72
 800cefc:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2241      	movs	r2, #65	; 0x41
 800cf04:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2261      	movs	r2, #97	; 0x61
 800cf0c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf26:	691b      	ldr	r3, [r3, #16]
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	0a1b      	lsrs	r3, r3, #8
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	0c1b      	lsrs	r3, r3, #16
 800cf40:	b2da      	uxtb	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf4e:	691b      	ldr	r3, [r3, #16]
 800cf50:	0e1b      	lsrs	r3, r3, #24
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	b2da      	uxtb	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	0a1b      	lsrs	r3, r3, #8
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	0c1b      	lsrs	r3, r3, #16
 800cf8a:	b2da      	uxtb	r2, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	0e1b      	lsrs	r3, r3, #24
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfaa:	69db      	ldr	r3, [r3, #28]
 800cfac:	3301      	adds	r3, #1
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cfb4:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfbc:	7858      	ldrb	r0, [r3, #1]
 800cfbe:	6879      	ldr	r1, [r7, #4]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc8:	2301      	movs	r3, #1
 800cfca:	f7ff fc5b 	bl	800c884 <disk_write>
			fs->fsi_flag = 0;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfde:	785b      	ldrb	r3, [r3, #1]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7ff fc6d 	bl	800c8c4 <disk_ioctl>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cffe:	b480      	push	{r7}
 800d000:	b083      	sub	sp, #12
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	3b02      	subs	r3, #2
 800d00c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	3b02      	subs	r3, #2
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d301      	bcc.n	800d022 <clust2sect+0x24>
 800d01e:	2300      	movs	r3, #0
 800d020:	e00c      	b.n	800d03c <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d028:	789b      	ldrb	r3, [r3, #2]
 800d02a:	461a      	mov	r2, r3
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	fb03 f202 	mul.w	r2, r3, r2
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03a:	4413      	add	r3, r2
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	2b01      	cmp	r3, #1
 800d056:	d906      	bls.n	800d066 <get_fat+0x1e>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d05e:	695b      	ldr	r3, [r3, #20]
 800d060:	683a      	ldr	r2, [r7, #0]
 800d062:	429a      	cmp	r2, r3
 800d064:	d302      	bcc.n	800d06c <get_fat+0x24>
		val = 1;	/* Internal error */
 800d066:	2301      	movs	r3, #1
 800d068:	617b      	str	r3, [r7, #20]
 800d06a:	e0e4      	b.n	800d236 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d06c:	f04f 33ff 	mov.w	r3, #4294967295
 800d070:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	f000 8098 	beq.w	800d1b0 <get_fat+0x168>
 800d080:	2b03      	cmp	r3, #3
 800d082:	f300 80ce 	bgt.w	800d222 <get_fat+0x1da>
 800d086:	2b01      	cmp	r3, #1
 800d088:	d002      	beq.n	800d090 <get_fat+0x48>
 800d08a:	2b02      	cmp	r3, #2
 800d08c:	d05f      	beq.n	800d14e <get_fat+0x106>
 800d08e:	e0c8      	b.n	800d222 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	60fb      	str	r3, [r7, #12]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	085b      	lsrs	r3, r3, #1
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	4413      	add	r3, r2
 800d09c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0a4:	6a1a      	ldr	r2, [r3, #32]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0ac:	895b      	ldrh	r3, [r3, #10]
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d0b6:	4413      	add	r3, r2
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7ff feae 	bl	800ce1c <move_window>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f040 80b0 	bne.w	800d228 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	1c5a      	adds	r2, r3, #1
 800d0cc:	60fa      	str	r2, [r7, #12]
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d0d4:	8952      	ldrh	r2, [r2, #10]
 800d0d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0da:	fb01 f202 	mul.w	r2, r1, r2
 800d0de:	1a9b      	subs	r3, r3, r2
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	5cd3      	ldrb	r3, [r2, r3]
 800d0e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0ec:	6a1a      	ldr	r2, [r3, #32]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0f4:	895b      	ldrh	r3, [r3, #10]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800d0fe:	4413      	add	r3, r2
 800d100:	4619      	mov	r1, r3
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7ff fe8a 	bl	800ce1c <move_window>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f040 808e 	bne.w	800d22c <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d116:	895b      	ldrh	r3, [r3, #10]
 800d118:	461a      	mov	r2, r3
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d120:	fb01 f202 	mul.w	r2, r1, r2
 800d124:	1a9b      	subs	r3, r3, r2
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	5cd3      	ldrb	r3, [r2, r3]
 800d12a:	021b      	lsls	r3, r3, #8
 800d12c:	461a      	mov	r2, r3
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	4313      	orrs	r3, r2
 800d132:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d002      	beq.n	800d144 <get_fat+0xfc>
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	091b      	lsrs	r3, r3, #4
 800d142:	e002      	b.n	800d14a <get_fat+0x102>
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d14a:	617b      	str	r3, [r7, #20]
			break;
 800d14c:	e073      	b.n	800d236 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d154:	6a1a      	ldr	r2, [r3, #32]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d15c:	895b      	ldrh	r3, [r3, #10]
 800d15e:	085b      	lsrs	r3, r3, #1
 800d160:	b29b      	uxth	r3, r3
 800d162:	4619      	mov	r1, r3
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	fbb3 f3f1 	udiv	r3, r3, r1
 800d16a:	4413      	add	r3, r2
 800d16c:	4619      	mov	r1, r3
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7ff fe54 	bl	800ce1c <move_window>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d15a      	bne.n	800d230 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	005b      	lsls	r3, r3, #1
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d184:	8952      	ldrh	r2, [r2, #10]
 800d186:	fbb3 f1f2 	udiv	r1, r3, r2
 800d18a:	fb01 f202 	mul.w	r2, r1, r2
 800d18e:	1a9b      	subs	r3, r3, r2
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	4413      	add	r3, r2
 800d194:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	3301      	adds	r3, #1
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	021b      	lsls	r3, r3, #8
 800d19e:	b21a      	sxth	r2, r3
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	b21b      	sxth	r3, r3
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	b21b      	sxth	r3, r3
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	617b      	str	r3, [r7, #20]
			break;
 800d1ae:	e042      	b.n	800d236 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1b6:	6a1a      	ldr	r2, [r3, #32]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1be:	895b      	ldrh	r3, [r3, #10]
 800d1c0:	089b      	lsrs	r3, r3, #2
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1cc:	4413      	add	r3, r2
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff fe23 	bl	800ce1c <move_window>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d12b      	bne.n	800d234 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d1e6:	8952      	ldrh	r2, [r2, #10]
 800d1e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1ec:	fb01 f202 	mul.w	r2, r1, r2
 800d1f0:	1a9b      	subs	r3, r3, r2
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	3303      	adds	r3, #3
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	061a      	lsls	r2, r3, #24
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	3302      	adds	r3, #2
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	041b      	lsls	r3, r3, #16
 800d208:	4313      	orrs	r3, r2
 800d20a:	693a      	ldr	r2, [r7, #16]
 800d20c:	3201      	adds	r2, #1
 800d20e:	7812      	ldrb	r2, [r2, #0]
 800d210:	0212      	lsls	r2, r2, #8
 800d212:	4313      	orrs	r3, r2
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	7812      	ldrb	r2, [r2, #0]
 800d218:	4313      	orrs	r3, r2
 800d21a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d21e:	617b      	str	r3, [r7, #20]
			break;
 800d220:	e009      	b.n	800d236 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800d222:	2301      	movs	r3, #1
 800d224:	617b      	str	r3, [r7, #20]
 800d226:	e006      	b.n	800d236 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d228:	bf00      	nop
 800d22a:	e004      	b.n	800d236 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d22c:	bf00      	nop
 800d22e:	e002      	b.n	800d236 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d230:	bf00      	nop
 800d232:	e000      	b.n	800d236 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d234:	bf00      	nop
		}
	}

	return val;
 800d236:	697b      	ldr	r3, [r7, #20]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3718      	adds	r7, #24
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b088      	sub	sp, #32
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d906      	bls.n	800d260 <put_fat+0x20>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d258:	695b      	ldr	r3, [r3, #20]
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d302      	bcc.n	800d266 <put_fat+0x26>
		res = FR_INT_ERR;
 800d260:	2302      	movs	r3, #2
 800d262:	77fb      	strb	r3, [r7, #31]
 800d264:	e13a      	b.n	800d4dc <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	2b03      	cmp	r3, #3
 800d270:	f000 80d0 	beq.w	800d414 <put_fat+0x1d4>
 800d274:	2b03      	cmp	r3, #3
 800d276:	f300 8127 	bgt.w	800d4c8 <put_fat+0x288>
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d003      	beq.n	800d286 <put_fat+0x46>
 800d27e:	2b02      	cmp	r3, #2
 800d280:	f000 808f 	beq.w	800d3a2 <put_fat+0x162>
 800d284:	e120      	b.n	800d4c8 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	617b      	str	r3, [r7, #20]
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	085b      	lsrs	r3, r3, #1
 800d28e:	697a      	ldr	r2, [r7, #20]
 800d290:	4413      	add	r3, r2
 800d292:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d29a:	6a1a      	ldr	r2, [r3, #32]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2a2:	895b      	ldrh	r3, [r3, #10]
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d2ac:	4413      	add	r3, r2
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f7ff fdb3 	bl	800ce1c <move_window>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d2ba:	7ffb      	ldrb	r3, [r7, #31]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f040 8106 	bne.w	800d4ce <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	617a      	str	r2, [r7, #20]
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d2ce:	8952      	ldrh	r2, [r2, #10]
 800d2d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2d4:	fb01 f202 	mul.w	r2, r1, r2
 800d2d8:	1a9b      	subs	r3, r3, r2
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	4413      	add	r3, r2
 800d2de:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00d      	beq.n	800d306 <put_fat+0xc6>
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	b25b      	sxtb	r3, r3
 800d2f0:	f003 030f 	and.w	r3, r3, #15
 800d2f4:	b25a      	sxtb	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	011b      	lsls	r3, r3, #4
 800d2fc:	b25b      	sxtb	r3, r3
 800d2fe:	4313      	orrs	r3, r2
 800d300:	b25b      	sxtb	r3, r3
 800d302:	b2db      	uxtb	r3, r3
 800d304:	e001      	b.n	800d30a <put_fat+0xca>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	69ba      	ldr	r2, [r7, #24]
 800d30c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d314:	2201      	movs	r2, #1
 800d316:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d31e:	6a1a      	ldr	r2, [r3, #32]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d326:	895b      	ldrh	r3, [r3, #10]
 800d328:	4619      	mov	r1, r3
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d330:	4413      	add	r3, r2
 800d332:	4619      	mov	r1, r3
 800d334:	68f8      	ldr	r0, [r7, #12]
 800d336:	f7ff fd71 	bl	800ce1c <move_window>
 800d33a:	4603      	mov	r3, r0
 800d33c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d33e:	7ffb      	ldrb	r3, [r7, #31]
 800d340:	2b00      	cmp	r3, #0
 800d342:	f040 80c6 	bne.w	800d4d2 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d34c:	895b      	ldrh	r3, [r3, #10]
 800d34e:	461a      	mov	r2, r3
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	fbb3 f1f2 	udiv	r1, r3, r2
 800d356:	fb01 f202 	mul.w	r2, r1, r2
 800d35a:	1a9b      	subs	r3, r3, r2
 800d35c:	68fa      	ldr	r2, [r7, #12]
 800d35e:	4413      	add	r3, r2
 800d360:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	f003 0301 	and.w	r3, r3, #1
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <put_fat+0x134>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	091b      	lsrs	r3, r3, #4
 800d370:	b2db      	uxtb	r3, r3
 800d372:	e00e      	b.n	800d392 <put_fat+0x152>
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	b25b      	sxtb	r3, r3
 800d37a:	f023 030f 	bic.w	r3, r3, #15
 800d37e:	b25a      	sxtb	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	0a1b      	lsrs	r3, r3, #8
 800d384:	b25b      	sxtb	r3, r3
 800d386:	f003 030f 	and.w	r3, r3, #15
 800d38a:	b25b      	sxtb	r3, r3
 800d38c:	4313      	orrs	r3, r2
 800d38e:	b25b      	sxtb	r3, r3
 800d390:	b2db      	uxtb	r3, r3
 800d392:	69ba      	ldr	r2, [r7, #24]
 800d394:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d39c:	2201      	movs	r2, #1
 800d39e:	711a      	strb	r2, [r3, #4]
			break;
 800d3a0:	e09c      	b.n	800d4dc <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3a8:	6a1a      	ldr	r2, [r3, #32]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3b0:	895b      	ldrh	r3, [r3, #10]
 800d3b2:	085b      	lsrs	r3, r3, #1
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3be:	4413      	add	r3, r2
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f7ff fd2a 	bl	800ce1c <move_window>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3cc:	7ffb      	ldrb	r3, [r7, #31]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f040 8081 	bne.w	800d4d6 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	005b      	lsls	r3, r3, #1
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d3de:	8952      	ldrh	r2, [r2, #10]
 800d3e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3e4:	fb01 f202 	mul.w	r2, r1, r2
 800d3e8:	1a9b      	subs	r3, r3, r2
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	701a      	strb	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	0a1b      	lsrs	r3, r3, #8
 800d3fe:	b29a      	uxth	r2, r3
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	3301      	adds	r3, #1
 800d404:	b2d2      	uxtb	r2, r2
 800d406:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d40e:	2201      	movs	r2, #1
 800d410:	711a      	strb	r2, [r3, #4]
			break;
 800d412:	e063      	b.n	800d4dc <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d41a:	6a1a      	ldr	r2, [r3, #32]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d422:	895b      	ldrh	r3, [r3, #10]
 800d424:	089b      	lsrs	r3, r3, #2
 800d426:	b29b      	uxth	r3, r3
 800d428:	4619      	mov	r1, r3
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d430:	4413      	add	r3, r2
 800d432:	4619      	mov	r1, r3
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f7ff fcf1 	bl	800ce1c <move_window>
 800d43a:	4603      	mov	r3, r0
 800d43c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d43e:	7ffb      	ldrb	r3, [r7, #31]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d14a      	bne.n	800d4da <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d44e:	8952      	ldrh	r2, [r2, #10]
 800d450:	fbb3 f1f2 	udiv	r1, r3, r2
 800d454:	fb01 f202 	mul.w	r2, r1, r2
 800d458:	1a9b      	subs	r3, r3, r2
 800d45a:	68fa      	ldr	r2, [r7, #12]
 800d45c:	4413      	add	r3, r2
 800d45e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	3303      	adds	r3, #3
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	061a      	lsls	r2, r3, #24
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	3302      	adds	r3, #2
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	041b      	lsls	r3, r3, #16
 800d470:	4313      	orrs	r3, r2
 800d472:	69ba      	ldr	r2, [r7, #24]
 800d474:	3201      	adds	r2, #1
 800d476:	7812      	ldrb	r2, [r2, #0]
 800d478:	0212      	lsls	r2, r2, #8
 800d47a:	4313      	orrs	r3, r2
 800d47c:	69ba      	ldr	r2, [r7, #24]
 800d47e:	7812      	ldrb	r2, [r2, #0]
 800d480:	4313      	orrs	r3, r2
 800d482:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	4313      	orrs	r3, r2
 800d48a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	701a      	strb	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	b29b      	uxth	r3, r3
 800d498:	0a1b      	lsrs	r3, r3, #8
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	69bb      	ldr	r3, [r7, #24]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	b2d2      	uxtb	r2, r2
 800d4a2:	701a      	strb	r2, [r3, #0]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	0c1a      	lsrs	r2, r3, #16
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	3302      	adds	r3, #2
 800d4ac:	b2d2      	uxtb	r2, r2
 800d4ae:	701a      	strb	r2, [r3, #0]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	0e1a      	lsrs	r2, r3, #24
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	3303      	adds	r3, #3
 800d4b8:	b2d2      	uxtb	r2, r2
 800d4ba:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	711a      	strb	r2, [r3, #4]
			break;
 800d4c6:	e009      	b.n	800d4dc <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	77fb      	strb	r3, [r7, #31]
 800d4cc:	e006      	b.n	800d4dc <put_fat+0x29c>
			if (res != FR_OK) break;
 800d4ce:	bf00      	nop
 800d4d0:	e004      	b.n	800d4dc <put_fat+0x29c>
			if (res != FR_OK) break;
 800d4d2:	bf00      	nop
 800d4d4:	e002      	b.n	800d4dc <put_fat+0x29c>
			if (res != FR_OK) break;
 800d4d6:	bf00      	nop
 800d4d8:	e000      	b.n	800d4dc <put_fat+0x29c>
			if (res != FR_OK) break;
 800d4da:	bf00      	nop
		}
	}

	return res;
 800d4dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3720      	adds	r7, #32
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b084      	sub	sp, #16
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
 800d4ee:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d906      	bls.n	800d504 <remove_chain+0x1e>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	429a      	cmp	r2, r3
 800d502:	d302      	bcc.n	800d50a <remove_chain+0x24>
		res = FR_INT_ERR;
 800d504:	2302      	movs	r3, #2
 800d506:	73fb      	strb	r3, [r7, #15]
 800d508:	e049      	b.n	800d59e <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800d50a:	2300      	movs	r3, #0
 800d50c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800d50e:	e03b      	b.n	800d588 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800d510:	6839      	ldr	r1, [r7, #0]
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f7ff fd98 	bl	800d048 <get_fat>
 800d518:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d03b      	beq.n	800d598 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	2b01      	cmp	r3, #1
 800d524:	d102      	bne.n	800d52c <remove_chain+0x46>
 800d526:	2302      	movs	r3, #2
 800d528:	73fb      	strb	r3, [r7, #15]
 800d52a:	e038      	b.n	800d59e <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d532:	d102      	bne.n	800d53a <remove_chain+0x54>
 800d534:	2301      	movs	r3, #1
 800d536:	73fb      	strb	r3, [r7, #15]
 800d538:	e031      	b.n	800d59e <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800d53a:	2200      	movs	r2, #0
 800d53c:	6839      	ldr	r1, [r7, #0]
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f7ff fe7e 	bl	800d240 <put_fat>
 800d544:	4603      	mov	r3, r0
 800d546:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800d548:	7bfb      	ldrb	r3, [r7, #15]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d126      	bne.n	800d59c <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d554:	691b      	ldr	r3, [r3, #16]
 800d556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d55a:	d013      	beq.n	800d584 <remove_chain+0x9e>
				fs->free_clust++;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d562:	691b      	ldr	r3, [r3, #16]
 800d564:	3301      	adds	r3, #1
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d56c:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d574:	795b      	ldrb	r3, [r3, #5]
 800d576:	f043 0301 	orr.w	r3, r3, #1
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d582:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	429a      	cmp	r2, r3
 800d594:	d3bc      	bcc.n	800d510 <remove_chain+0x2a>
 800d596:	e002      	b.n	800d59e <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800d598:	bf00      	nop
 800d59a:	e000      	b.n	800d59e <remove_chain+0xb8>
			if (res != FR_OK) break;
 800d59c:	bf00      	nop
		}
	}

	return res;
 800d59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d111      	bne.n	800d5dc <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d006      	beq.n	800d5d6 <create_chain+0x2e>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ce:	695b      	ldr	r3, [r3, #20]
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d31d      	bcc.n	800d612 <create_chain+0x6a>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	613b      	str	r3, [r7, #16]
 800d5da:	e01a      	b.n	800d612 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800d5dc:	6839      	ldr	r1, [r7, #0]
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f7ff fd32 	bl	800d048 <get_fat>
 800d5e4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d801      	bhi.n	800d5f0 <create_chain+0x48>
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e07f      	b.n	800d6f0 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f6:	d101      	bne.n	800d5fc <create_chain+0x54>
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	e079      	b.n	800d6f0 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d602:	695b      	ldr	r3, [r3, #20]
 800d604:	68ba      	ldr	r2, [r7, #8]
 800d606:	429a      	cmp	r2, r3
 800d608:	d201      	bcs.n	800d60e <create_chain+0x66>
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	e070      	b.n	800d6f0 <create_chain+0x148>
		scl = clst;
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	3301      	adds	r3, #1
 800d61a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	697a      	ldr	r2, [r7, #20]
 800d626:	429a      	cmp	r2, r3
 800d628:	d307      	bcc.n	800d63a <create_chain+0x92>
			ncl = 2;
 800d62a:	2302      	movs	r3, #2
 800d62c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	429a      	cmp	r2, r3
 800d634:	d901      	bls.n	800d63a <create_chain+0x92>
 800d636:	2300      	movs	r3, #0
 800d638:	e05a      	b.n	800d6f0 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800d63a:	6979      	ldr	r1, [r7, #20]
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff fd03 	bl	800d048 <get_fat>
 800d642:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00e      	beq.n	800d668 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d650:	d002      	beq.n	800d658 <create_chain+0xb0>
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d101      	bne.n	800d65c <create_chain+0xb4>
			return cs;
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	e049      	b.n	800d6f0 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	429a      	cmp	r2, r3
 800d662:	d1d8      	bne.n	800d616 <create_chain+0x6e>
 800d664:	2300      	movs	r3, #0
 800d666:	e043      	b.n	800d6f0 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800d668:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800d66a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800d66e:	6979      	ldr	r1, [r7, #20]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7ff fde5 	bl	800d240 <put_fat>
 800d676:	4603      	mov	r3, r0
 800d678:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d109      	bne.n	800d694 <create_chain+0xec>
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d006      	beq.n	800d694 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800d686:	697a      	ldr	r2, [r7, #20]
 800d688:	6839      	ldr	r1, [r7, #0]
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7ff fdd8 	bl	800d240 <put_fat>
 800d690:	4603      	mov	r3, r0
 800d692:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800d694:	7bfb      	ldrb	r3, [r7, #15]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d121      	bne.n	800d6de <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6ac:	691b      	ldr	r3, [r3, #16]
 800d6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b2:	d01c      	beq.n	800d6ee <create_chain+0x146>
			fs->free_clust--;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d6c4:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6cc:	795b      	ldrb	r3, [r3, #5]
 800d6ce:	f043 0301 	orr.w	r3, r3, #1
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6da:	715a      	strb	r2, [r3, #5]
 800d6dc:	e007      	b.n	800d6ee <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d102      	bne.n	800d6ea <create_chain+0x142>
 800d6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e8:	e000      	b.n	800d6ec <create_chain+0x144>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800d6ee:	697b      	ldr	r3, [r7, #20]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3718      	adds	r7, #24
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b087      	sub	sp, #28
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70a:	3304      	adds	r3, #4
 800d70c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d71a:	895b      	ldrh	r3, [r3, #10]
 800d71c:	461a      	mov	r2, r3
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	fbb3 f3f2 	udiv	r3, r3, r2
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d72a:	6812      	ldr	r2, [r2, #0]
 800d72c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d730:	7892      	ldrb	r2, [r2, #2]
 800d732:	fbb3 f3f2 	udiv	r3, r3, r2
 800d736:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	1d1a      	adds	r2, r3, #4
 800d73c:	613a      	str	r2, [r7, #16]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d101      	bne.n	800d74c <clmt_clust+0x54>
 800d748:	2300      	movs	r3, #0
 800d74a:	e010      	b.n	800d76e <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800d74c:	697a      	ldr	r2, [r7, #20]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	429a      	cmp	r2, r3
 800d752:	d307      	bcc.n	800d764 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800d754:	697a      	ldr	r2, [r7, #20]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	617b      	str	r3, [r7, #20]
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	3304      	adds	r3, #4
 800d760:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d762:	e7e9      	b.n	800d738 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800d764:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	4413      	add	r3, r2
}
 800d76e:	4618      	mov	r0, r3
 800d770:	371c      	adds	r7, #28
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b086      	sub	sp, #24
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	b29a      	uxth	r2, r3
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d78e:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d009      	beq.n	800d7b4 <dir_sdi+0x3a>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7ac:	695b      	ldr	r3, [r3, #20]
 800d7ae:	697a      	ldr	r2, [r7, #20]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d301      	bcc.n	800d7b8 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800d7b4:	2302      	movs	r3, #2
 800d7b6:	e0aa      	b.n	800d90e <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d110      	bne.n	800d7e0 <dir_sdi+0x66>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	2b03      	cmp	r3, #3
 800d7ce:	d107      	bne.n	800d7e0 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7de:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d115      	bne.n	800d812 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7f2:	891b      	ldrh	r3, [r3, #8]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d301      	bcc.n	800d800 <dir_sdi+0x86>
			return FR_INT_ERR;
 800d7fc:	2302      	movs	r3, #2
 800d7fe:	e086      	b.n	800d90e <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80e:	613b      	str	r3, [r7, #16]
 800d810:	e043      	b.n	800d89a <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d81e:	895b      	ldrh	r3, [r3, #10]
 800d820:	095b      	lsrs	r3, r3, #5
 800d822:	b29b      	uxth	r3, r3
 800d824:	461a      	mov	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d832:	789b      	ldrb	r3, [r3, #2]
 800d834:	fb02 f303 	mul.w	r3, r2, r3
 800d838:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800d83a:	e021      	b.n	800d880 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	6979      	ldr	r1, [r7, #20]
 800d846:	4618      	mov	r0, r3
 800d848:	f7ff fbfe 	bl	800d048 <get_fat>
 800d84c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d854:	d101      	bne.n	800d85a <dir_sdi+0xe0>
 800d856:	2301      	movs	r3, #1
 800d858:	e059      	b.n	800d90e <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d909      	bls.n	800d874 <dir_sdi+0xfa>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d86c:	695b      	ldr	r3, [r3, #20]
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	429a      	cmp	r2, r3
 800d872:	d301      	bcc.n	800d878 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800d874:	2302      	movs	r3, #2
 800d876:	e04a      	b.n	800d90e <dir_sdi+0x194>
			idx -= ic;
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	1ad3      	subs	r3, r2, r3
 800d87e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800d880:	683a      	ldr	r2, [r7, #0]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	429a      	cmp	r2, r3
 800d886:	d2d9      	bcs.n	800d83c <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6979      	ldr	r1, [r7, #20]
 800d892:	4618      	mov	r0, r3
 800d894:	f7ff fbb3 	bl	800cffe <clust2sect>
 800d898:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d101      	bne.n	800d8b0 <dir_sdi+0x136>
 800d8ac:	2302      	movs	r3, #2
 800d8ae:	e02e      	b.n	800d90e <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8bc:	895b      	ldrh	r3, [r3, #10]
 800d8be:	095b      	lsrs	r3, r3, #5
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	fbb3 f2f2 	udiv	r2, r3, r2
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d8d4:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ec:	895b      	ldrh	r3, [r3, #10]
 800d8ee:	095b      	lsrs	r3, r3, #5
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8fa:	fb01 f202 	mul.w	r2, r1, r2
 800d8fe:	1a9b      	subs	r3, r3, r2
 800d900:	015b      	lsls	r3, r3, #5
 800d902:	4403      	add	r3, r0
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d90a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3718      	adds	r7, #24
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d916:	b590      	push	{r4, r7, lr}
 800d918:	b087      	sub	sp, #28
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
 800d91e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d926:	88db      	ldrh	r3, [r3, #6]
 800d928:	3301      	adds	r3, #1
 800d92a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	b29b      	uxth	r3, r3
 800d930:	2b00      	cmp	r3, #0
 800d932:	d005      	beq.n	800d940 <dir_next+0x2a>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d93a:	691b      	ldr	r3, [r3, #16]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d101      	bne.n	800d944 <dir_next+0x2e>
		return FR_NO_FILE;
 800d940:	2304      	movs	r3, #4
 800d942:	e12e      	b.n	800dba2 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d950:	895b      	ldrh	r3, [r3, #10]
 800d952:	095b      	lsrs	r3, r3, #5
 800d954:	b29b      	uxth	r3, r3
 800d956:	461a      	mov	r2, r3
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d95e:	fb01 f202 	mul.w	r2, r1, r2
 800d962:	1a9b      	subs	r3, r3, r2
 800d964:	2b00      	cmp	r3, #0
 800d966:	f040 80fa 	bne.w	800db5e <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	3301      	adds	r3, #1
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d97a:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10d      	bne.n	800d9a4 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d994:	891b      	ldrh	r3, [r3, #8]
 800d996:	461a      	mov	r2, r3
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	4293      	cmp	r3, r2
 800d99c:	f0c0 80df 	bcc.w	800db5e <dir_next+0x248>
				return FR_NO_FILE;
 800d9a0:	2304      	movs	r3, #4
 800d9a2:	e0fe      	b.n	800dba2 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9b0:	895b      	ldrh	r3, [r3, #10]
 800d9b2:	095b      	lsrs	r3, r3, #5
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d9c4:	6812      	ldr	r2, [r2, #0]
 800d9c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d9ca:	7892      	ldrb	r2, [r2, #2]
 800d9cc:	3a01      	subs	r2, #1
 800d9ce:	4013      	ands	r3, r2
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f040 80c4 	bne.w	800db5e <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9dc:	681a      	ldr	r2, [r3, #0]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	4610      	mov	r0, r2
 800d9ea:	f7ff fb2d 	bl	800d048 <get_fat>
 800d9ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d801      	bhi.n	800d9fa <dir_next+0xe4>
 800d9f6:	2302      	movs	r3, #2
 800d9f8:	e0d3      	b.n	800dba2 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da00:	d101      	bne.n	800da06 <dir_next+0xf0>
 800da02:	2301      	movs	r3, #1
 800da04:	e0cd      	b.n	800dba2 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da12:	695b      	ldr	r3, [r3, #20]
 800da14:	697a      	ldr	r2, [r7, #20]
 800da16:	429a      	cmp	r2, r3
 800da18:	f0c0 808e 	bcc.w	800db38 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d101      	bne.n	800da26 <dir_next+0x110>
 800da22:	2304      	movs	r3, #4
 800da24:	e0bd      	b.n	800dba2 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	4619      	mov	r1, r3
 800da38:	4610      	mov	r0, r2
 800da3a:	f7ff fdb5 	bl	800d5a8 <create_chain>
 800da3e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d101      	bne.n	800da4a <dir_next+0x134>
 800da46:	2307      	movs	r3, #7
 800da48:	e0ab      	b.n	800dba2 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d101      	bne.n	800da54 <dir_next+0x13e>
 800da50:	2302      	movs	r3, #2
 800da52:	e0a6      	b.n	800dba2 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da5a:	d101      	bne.n	800da60 <dir_next+0x14a>
 800da5c:	2301      	movs	r3, #1
 800da5e:	e0a0      	b.n	800dba2 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4618      	mov	r0, r3
 800da6a:	f7ff f985 	bl	800cd78 <sync_window>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d001      	beq.n	800da78 <dir_next+0x162>
 800da74:	2301      	movs	r3, #1
 800da76:	e094      	b.n	800dba2 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4618      	mov	r0, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da8e:	895b      	ldrh	r3, [r3, #10]
 800da90:	461a      	mov	r2, r3
 800da92:	2100      	movs	r1, #0
 800da94:	f7fe ff53 	bl	800c93e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daa6:	681c      	ldr	r4, [r3, #0]
 800daa8:	6979      	ldr	r1, [r7, #20]
 800daaa:	4610      	mov	r0, r2
 800daac:	f7ff faa7 	bl	800cffe <clust2sect>
 800dab0:	4603      	mov	r3, r0
 800dab2:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800dab6:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800dab8:	2300      	movs	r3, #0
 800daba:	613b      	str	r3, [r7, #16]
 800dabc:	e021      	b.n	800db02 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daca:	2201      	movs	r2, #1
 800dacc:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7ff f94e 	bl	800cd78 <sync_window>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d001      	beq.n	800dae6 <dir_next+0x1d0>
 800dae2:	2301      	movs	r3, #1
 800dae4:	e05d      	b.n	800dba2 <dir_next+0x28c>
						dp->fs->winsect++;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800daf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800daf4:	3201      	adds	r2, #1
 800daf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dafa:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	3301      	adds	r3, #1
 800db00:	613b      	str	r3, [r7, #16]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db0e:	789b      	ldrb	r3, [r3, #2]
 800db10:	461a      	mov	r2, r3
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	4293      	cmp	r3, r2
 800db16:	d3d2      	bcc.n	800dabe <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	1acb      	subs	r3, r1, r3
 800db32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800db36:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db3e:	461a      	mov	r2, r3
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	6979      	ldr	r1, [r7, #20]
 800db4e:	4618      	mov	r0, r3
 800db50:	f7ff fa55 	bl	800cffe <clust2sect>
 800db54:	4602      	mov	r2, r0
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db5c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	b29a      	uxth	r2, r3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db68:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4618      	mov	r0, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db80:	895b      	ldrh	r3, [r3, #10]
 800db82:	095b      	lsrs	r3, r3, #5
 800db84:	b29b      	uxth	r3, r3
 800db86:	461a      	mov	r2, r3
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800db8e:	fb01 f202 	mul.w	r2, r1, r2
 800db92:	1a9b      	subs	r3, r3, r2
 800db94:	015b      	lsls	r3, r3, #5
 800db96:	4403      	add	r3, r0
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800db9e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	371c      	adds	r7, #28
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd90      	pop	{r4, r7, pc}

0800dbaa <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b084      	sub	sp, #16
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
 800dbb2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800dbb4:	2100      	movs	r1, #0
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff fddf 	bl	800d77a <dir_sdi>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d135      	bne.n	800dc32 <dir_alloc+0x88>
		n = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	4619      	mov	r1, r3
 800dbdc:	4610      	mov	r0, r2
 800dbde:	f7ff f91d 	bl	800ce1c <move_window>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800dbe6:	7bfb      	ldrb	r3, [r7, #15]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d121      	bne.n	800dc30 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbf2:	695b      	ldr	r3, [r3, #20]
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	2be5      	cmp	r3, #229	; 0xe5
 800dbf8:	d006      	beq.n	800dc08 <dir_alloc+0x5e>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc00:	695b      	ldr	r3, [r3, #20]
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d107      	bne.n	800dc18 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	60bb      	str	r3, [r7, #8]
 800dc0e:	68ba      	ldr	r2, [r7, #8]
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d102      	bne.n	800dc1c <dir_alloc+0x72>
 800dc16:	e00c      	b.n	800dc32 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc18:	2300      	movs	r3, #0
 800dc1a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800dc1c:	2101      	movs	r1, #1
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7ff fe79 	bl	800d916 <dir_next>
 800dc24:	4603      	mov	r3, r0
 800dc26:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800dc28:	7bfb      	ldrb	r3, [r7, #15]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d0cd      	beq.n	800dbca <dir_alloc+0x20>
 800dc2e:	e000      	b.n	800dc32 <dir_alloc+0x88>
			if (res != FR_OK) break;
 800dc30:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc32:	7bfb      	ldrb	r3, [r7, #15]
 800dc34:	2b04      	cmp	r3, #4
 800dc36:	d101      	bne.n	800dc3c <dir_alloc+0x92>
 800dc38:	2307      	movs	r3, #7
 800dc3a:	73fb      	strb	r3, [r7, #15]
	return res;
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800dc46:	b480      	push	{r7}
 800dc48:	b085      	sub	sp, #20
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	331b      	adds	r3, #27
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	021b      	lsls	r3, r3, #8
 800dc58:	b21a      	sxth	r2, r3
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	331a      	adds	r3, #26
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	b21b      	sxth	r3, r3
 800dc62:	4313      	orrs	r3, r2
 800dc64:	b21b      	sxth	r3, r3
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	2b03      	cmp	r3, #3
 800dc74:	d10f      	bne.n	800dc96 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	3315      	adds	r3, #21
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	021b      	lsls	r3, r3, #8
 800dc7e:	b21a      	sxth	r2, r3
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	3314      	adds	r3, #20
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	b21b      	sxth	r3, r3
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	b21b      	sxth	r3, r3
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	041b      	lsls	r3, r3, #16
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	4313      	orrs	r3, r2
 800dc94:	60fb      	str	r3, [r7, #12]

	return cl;
 800dc96:	68fb      	ldr	r3, [r7, #12]
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3714      	adds	r7, #20
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	331a      	adds	r3, #26
 800dcb2:	683a      	ldr	r2, [r7, #0]
 800dcb4:	b2d2      	uxtb	r2, r2
 800dcb6:	701a      	strb	r2, [r3, #0]
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	0a1b      	lsrs	r3, r3, #8
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	331b      	adds	r3, #27
 800dcc4:	b2d2      	uxtb	r2, r2
 800dcc6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	0c1a      	lsrs	r2, r3, #16
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	3314      	adds	r3, #20
 800dcd0:	b2d2      	uxtb	r2, r2
 800dcd2:	701a      	strb	r2, [r3, #0]
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	0c1b      	lsrs	r3, r3, #16
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	0a1b      	lsrs	r3, r3, #8
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	3315      	adds	r3, #21
 800dce2:	b2d2      	uxtb	r2, r2
 800dce4:	701a      	strb	r2, [r3, #0]
}
 800dce6:	bf00      	nop
 800dce8:	370c      	adds	r7, #12
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
	...

0800dcf4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd06:	1e5a      	subs	r2, r3, #1
 800dd08:	4613      	mov	r3, r2
 800dd0a:	005b      	lsls	r3, r3, #1
 800dd0c:	4413      	add	r3, r2
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4413      	add	r3, r2
 800dd12:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800dd14:	2300      	movs	r3, #0
 800dd16:	613b      	str	r3, [r7, #16]
 800dd18:	2301      	movs	r3, #1
 800dd1a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800dd1c:	4a2b      	ldr	r2, [pc, #172]	; (800ddcc <cmp_lfn+0xd8>)
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	4413      	add	r3, r2
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	3301      	adds	r3, #1
 800dd26:	683a      	ldr	r2, [r7, #0]
 800dd28:	4413      	add	r3, r2
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	021b      	lsls	r3, r3, #8
 800dd2e:	b21a      	sxth	r2, r3
 800dd30:	4926      	ldr	r1, [pc, #152]	; (800ddcc <cmp_lfn+0xd8>)
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	440b      	add	r3, r1
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	4619      	mov	r1, r3
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	440b      	add	r3, r1
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	b21b      	sxth	r3, r3
 800dd42:	4313      	orrs	r3, r2
 800dd44:	b21b      	sxth	r3, r3
 800dd46:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800dd48:	89fb      	ldrh	r3, [r7, #14]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d019      	beq.n	800dd82 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800dd4e:	89bb      	ldrh	r3, [r7, #12]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f002 fc3b 	bl	80105cc <ff_wtoupper>
 800dd56:	4603      	mov	r3, r0
 800dd58:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	2bfe      	cmp	r3, #254	; 0xfe
 800dd5e:	d80e      	bhi.n	800dd7e <cmp_lfn+0x8a>
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	1c5a      	adds	r2, r3, #1
 800dd64:	617a      	str	r2, [r7, #20]
 800dd66:	005b      	lsls	r3, r3, #1
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	881b      	ldrh	r3, [r3, #0]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f002 fc2c 	bl	80105cc <ff_wtoupper>
 800dd74:	4603      	mov	r3, r0
 800dd76:	461a      	mov	r2, r3
 800dd78:	89fb      	ldrh	r3, [r7, #14]
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d008      	beq.n	800dd90 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800dd7e:	2300      	movs	r3, #0
 800dd80:	e01f      	b.n	800ddc2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800dd82:	89bb      	ldrh	r3, [r7, #12]
 800dd84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d001      	beq.n	800dd90 <cmp_lfn+0x9c>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	e018      	b.n	800ddc2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	3301      	adds	r3, #1
 800dd94:	613b      	str	r3, [r7, #16]
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	2b0c      	cmp	r3, #12
 800dd9a:	d9bf      	bls.n	800dd1c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00b      	beq.n	800ddc0 <cmp_lfn+0xcc>
 800dda8:	89fb      	ldrh	r3, [r7, #14]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d008      	beq.n	800ddc0 <cmp_lfn+0xcc>
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	005b      	lsls	r3, r3, #1
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	881b      	ldrh	r3, [r3, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d001      	beq.n	800ddc0 <cmp_lfn+0xcc>
		return 0;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	e000      	b.n	800ddc2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800ddc0:	2301      	movs	r3, #1
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3718      	adds	r7, #24
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	08013ee4 	.word	0x08013ee4

0800ddd0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b089      	sub	sp, #36	; 0x24
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	4611      	mov	r1, r2
 800dddc:	461a      	mov	r2, r3
 800ddde:	460b      	mov	r3, r1
 800dde0:	71fb      	strb	r3, [r7, #7]
 800dde2:	4613      	mov	r3, r2
 800dde4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	330d      	adds	r3, #13
 800ddea:	79ba      	ldrb	r2, [r7, #6]
 800ddec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	330b      	adds	r3, #11
 800ddf2:	220f      	movs	r2, #15
 800ddf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	330c      	adds	r3, #12
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	331a      	adds	r3, #26
 800de02:	2200      	movs	r2, #0
 800de04:	701a      	strb	r2, [r3, #0]
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	331b      	adds	r3, #27
 800de0a:	2200      	movs	r2, #0
 800de0c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800de0e:	79fb      	ldrb	r3, [r7, #7]
 800de10:	1e5a      	subs	r2, r3, #1
 800de12:	4613      	mov	r3, r2
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	4413      	add	r3, r2
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	4413      	add	r3, r2
 800de1c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800de1e:	2300      	movs	r3, #0
 800de20:	82fb      	strh	r3, [r7, #22]
 800de22:	2300      	movs	r3, #0
 800de24:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800de26:	8afb      	ldrh	r3, [r7, #22]
 800de28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d007      	beq.n	800de40 <fit_lfn+0x70>
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	1c5a      	adds	r2, r3, #1
 800de34:	61fa      	str	r2, [r7, #28]
 800de36:	005b      	lsls	r3, r3, #1
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	4413      	add	r3, r2
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800de40:	4a1d      	ldr	r2, [pc, #116]	; (800deb8 <fit_lfn+0xe8>)
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	4413      	add	r3, r2
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	461a      	mov	r2, r3
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	4413      	add	r3, r2
 800de4e:	8afa      	ldrh	r2, [r7, #22]
 800de50:	b2d2      	uxtb	r2, r2
 800de52:	701a      	strb	r2, [r3, #0]
 800de54:	8afb      	ldrh	r3, [r7, #22]
 800de56:	0a1b      	lsrs	r3, r3, #8
 800de58:	b299      	uxth	r1, r3
 800de5a:	4a17      	ldr	r2, [pc, #92]	; (800deb8 <fit_lfn+0xe8>)
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	4413      	add	r3, r2
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	3301      	adds	r3, #1
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	4413      	add	r3, r2
 800de68:	b2ca      	uxtb	r2, r1
 800de6a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800de6c:	8afb      	ldrh	r3, [r7, #22]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d102      	bne.n	800de78 <fit_lfn+0xa8>
 800de72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de76:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	3301      	adds	r3, #1
 800de7c:	61bb      	str	r3, [r7, #24]
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	2b0c      	cmp	r3, #12
 800de82:	d9d0      	bls.n	800de26 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800de84:	8afb      	ldrh	r3, [r7, #22]
 800de86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d006      	beq.n	800de9c <fit_lfn+0xcc>
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	005b      	lsls	r3, r3, #1
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	4413      	add	r3, r2
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d103      	bne.n	800dea4 <fit_lfn+0xd4>
 800de9c:	79fb      	ldrb	r3, [r7, #7]
 800de9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dea2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	79fa      	ldrb	r2, [r7, #7]
 800dea8:	701a      	strb	r2, [r3, #0]
}
 800deaa:	bf00      	nop
 800deac:	3724      	adds	r7, #36	; 0x24
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	08013ee4 	.word	0x08013ee4

0800debc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b08c      	sub	sp, #48	; 0x30
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800deca:	220b      	movs	r2, #11
 800decc:	68b9      	ldr	r1, [r7, #8]
 800dece:	68f8      	ldr	r0, [r7, #12]
 800ded0:	f7fe fd16 	bl	800c900 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	2b05      	cmp	r3, #5
 800ded8:	d92b      	bls.n	800df32 <gen_numname+0x76>
		sr = seq;
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800dede:	e022      	b.n	800df26 <gen_numname+0x6a>
			wc = *lfn++;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	1c9a      	adds	r2, r3, #2
 800dee4:	607a      	str	r2, [r7, #4]
 800dee6:	881b      	ldrh	r3, [r3, #0]
 800dee8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800deea:	2300      	movs	r3, #0
 800deec:	62bb      	str	r3, [r7, #40]	; 0x28
 800deee:	e017      	b.n	800df20 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	005a      	lsls	r2, r3, #1
 800def4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800def6:	f003 0301 	and.w	r3, r3, #1
 800defa:	4413      	add	r3, r2
 800defc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800defe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df00:	085b      	lsrs	r3, r3, #1
 800df02:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d005      	beq.n	800df1a <gen_numname+0x5e>
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800df14:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800df18:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800df1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1c:	3301      	adds	r3, #1
 800df1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800df20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df22:	2b0f      	cmp	r3, #15
 800df24:	d9e4      	bls.n	800def0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	881b      	ldrh	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1d8      	bne.n	800dee0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800df32:	2307      	movs	r3, #7
 800df34:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	f003 030f 	and.w	r3, r3, #15
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	3330      	adds	r3, #48	; 0x30
 800df42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800df46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df4a:	2b39      	cmp	r3, #57	; 0x39
 800df4c:	d904      	bls.n	800df58 <gen_numname+0x9c>
 800df4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df52:	3307      	adds	r3, #7
 800df54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800df58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5a:	1e5a      	subs	r2, r3, #1
 800df5c:	62ba      	str	r2, [r7, #40]	; 0x28
 800df5e:	3330      	adds	r3, #48	; 0x30
 800df60:	443b      	add	r3, r7
 800df62:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800df66:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	091b      	lsrs	r3, r3, #4
 800df6e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d1df      	bne.n	800df36 <gen_numname+0x7a>
	ns[i] = '~';
 800df76:	f107 0214 	add.w	r2, r7, #20
 800df7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7c:	4413      	add	r3, r2
 800df7e:	227e      	movs	r2, #126	; 0x7e
 800df80:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800df82:	2300      	movs	r3, #0
 800df84:	627b      	str	r3, [r7, #36]	; 0x24
 800df86:	e002      	b.n	800df8e <gen_numname+0xd2>
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	3301      	adds	r3, #1
 800df8c:	627b      	str	r3, [r7, #36]	; 0x24
 800df8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df92:	429a      	cmp	r2, r3
 800df94:	d205      	bcs.n	800dfa2 <gen_numname+0xe6>
 800df96:	68fa      	ldr	r2, [r7, #12]
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	4413      	add	r3, r2
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	2b20      	cmp	r3, #32
 800dfa0:	d1f2      	bne.n	800df88 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa4:	2b07      	cmp	r3, #7
 800dfa6:	d807      	bhi.n	800dfb8 <gen_numname+0xfc>
 800dfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfaa:	1c5a      	adds	r2, r3, #1
 800dfac:	62ba      	str	r2, [r7, #40]	; 0x28
 800dfae:	3330      	adds	r3, #48	; 0x30
 800dfb0:	443b      	add	r3, r7
 800dfb2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800dfb6:	e000      	b.n	800dfba <gen_numname+0xfe>
 800dfb8:	2120      	movs	r1, #32
 800dfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbc:	1c5a      	adds	r2, r3, #1
 800dfbe:	627a      	str	r2, [r7, #36]	; 0x24
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	460a      	mov	r2, r1
 800dfc6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	2b07      	cmp	r3, #7
 800dfcc:	d9e9      	bls.n	800dfa2 <gen_numname+0xe6>
}
 800dfce:	bf00      	nop
 800dfd0:	bf00      	nop
 800dfd2:	3730      	adds	r7, #48	; 0x30
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800dfe4:	230b      	movs	r3, #11
 800dfe6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	0852      	lsrs	r2, r2, #1
 800dfee:	01db      	lsls	r3, r3, #7
 800dff0:	4313      	orrs	r3, r2
 800dff2:	b2da      	uxtb	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	1c59      	adds	r1, r3, #1
 800dff8:	6079      	str	r1, [r7, #4]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	4413      	add	r3, r2
 800dffe:	73fb      	strb	r3, [r7, #15]
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	3b01      	subs	r3, #1
 800e004:	60bb      	str	r3, [r7, #8]
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1ed      	bne.n	800dfe8 <sum_sfn+0x10>
	return sum;
 800e00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3714      	adds	r7, #20
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr

0800e01a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b086      	sub	sp, #24
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e022:	2100      	movs	r1, #0
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7ff fba8 	bl	800d77a <dir_sdi>
 800e02a:	4603      	mov	r3, r0
 800e02c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e02e:	7dfb      	ldrb	r3, [r7, #23]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d001      	beq.n	800e038 <dir_find+0x1e>
 800e034:	7dfb      	ldrb	r3, [r7, #23]
 800e036:	e0b8      	b.n	800e1aa <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800e038:	23ff      	movs	r3, #255	; 0xff
 800e03a:	753b      	strb	r3, [r7, #20]
 800e03c:	7d3b      	ldrb	r3, [r7, #20]
 800e03e:	757b      	strb	r3, [r7, #21]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e04a:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	4619      	mov	r1, r3
 800e05e:	4610      	mov	r0, r2
 800e060:	f7fe fedc 	bl	800ce1c <move_window>
 800e064:	4603      	mov	r3, r0
 800e066:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e068:	7dfb      	ldrb	r3, [r7, #23]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f040 8097 	bne.w	800e19e <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e076:	695b      	ldr	r3, [r3, #20]
 800e078:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e080:	7dbb      	ldrb	r3, [r7, #22]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d102      	bne.n	800e08c <dir_find+0x72>
 800e086:	2304      	movs	r3, #4
 800e088:	75fb      	strb	r3, [r7, #23]
 800e08a:	e08d      	b.n	800e1a8 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	330b      	adds	r3, #11
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e096:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e098:	7dbb      	ldrb	r3, [r7, #22]
 800e09a:	2be5      	cmp	r3, #229	; 0xe5
 800e09c:	d007      	beq.n	800e0ae <dir_find+0x94>
 800e09e:	7bfb      	ldrb	r3, [r7, #15]
 800e0a0:	f003 0308 	and.w	r3, r3, #8
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00b      	beq.n	800e0c0 <dir_find+0xa6>
 800e0a8:	7bfb      	ldrb	r3, [r7, #15]
 800e0aa:	2b0f      	cmp	r3, #15
 800e0ac:	d008      	beq.n	800e0c0 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800e0ae:	23ff      	movs	r3, #255	; 0xff
 800e0b0:	757b      	strb	r3, [r7, #21]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0bc:	849a      	strh	r2, [r3, #36]	; 0x24
 800e0be:	e063      	b.n	800e188 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e0c0:	7bfb      	ldrb	r3, [r7, #15]
 800e0c2:	2b0f      	cmp	r3, #15
 800e0c4:	d137      	bne.n	800e136 <dir_find+0x11c>
				if (dp->lfn) {
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0cc:	6a1b      	ldr	r3, [r3, #32]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d05a      	beq.n	800e188 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e0d2:	7dbb      	ldrb	r3, [r7, #22]
 800e0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d010      	beq.n	800e0fe <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	7b5b      	ldrb	r3, [r3, #13]
 800e0e0:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800e0e2:	7dbb      	ldrb	r3, [r7, #22]
 800e0e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0e8:	75bb      	strb	r3, [r7, #22]
 800e0ea:	7dbb      	ldrb	r3, [r7, #22]
 800e0ec:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0f4:	88da      	ldrh	r2, [r3, #6]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0fc:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800e0fe:	7dba      	ldrb	r2, [r7, #22]
 800e100:	7d7b      	ldrb	r3, [r7, #21]
 800e102:	429a      	cmp	r2, r3
 800e104:	d114      	bne.n	800e130 <dir_find+0x116>
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	330d      	adds	r3, #13
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	7d3a      	ldrb	r2, [r7, #20]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d10e      	bne.n	800e130 <dir_find+0x116>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e118:	6a1b      	ldr	r3, [r3, #32]
 800e11a:	6939      	ldr	r1, [r7, #16]
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7ff fde9 	bl	800dcf4 <cmp_lfn>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d003      	beq.n	800e130 <dir_find+0x116>
 800e128:	7d7b      	ldrb	r3, [r7, #21]
 800e12a:	3b01      	subs	r3, #1
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	e000      	b.n	800e132 <dir_find+0x118>
 800e130:	23ff      	movs	r3, #255	; 0xff
 800e132:	757b      	strb	r3, [r7, #21]
 800e134:	e028      	b.n	800e188 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800e136:	7d7b      	ldrb	r3, [r7, #21]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d107      	bne.n	800e14c <dir_find+0x132>
 800e13c:	6938      	ldr	r0, [r7, #16]
 800e13e:	f7ff ff4b 	bl	800dfd8 <sum_sfn>
 800e142:	4603      	mov	r3, r0
 800e144:	461a      	mov	r2, r3
 800e146:	7d3b      	ldrb	r3, [r7, #20]
 800e148:	4293      	cmp	r3, r2
 800e14a:	d02a      	beq.n	800e1a2 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e152:	699b      	ldr	r3, [r3, #24]
 800e154:	330b      	adds	r3, #11
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	f003 0301 	and.w	r3, r3, #1
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d10b      	bne.n	800e178 <dir_find+0x15e>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e166:	699b      	ldr	r3, [r3, #24]
 800e168:	220b      	movs	r2, #11
 800e16a:	4619      	mov	r1, r3
 800e16c:	6938      	ldr	r0, [r7, #16]
 800e16e:	f7fe fc01 	bl	800c974 <mem_cmp>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d016      	beq.n	800e1a6 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800e178:	23ff      	movs	r3, #255	; 0xff
 800e17a:	757b      	strb	r3, [r7, #21]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e186:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800e188:	2100      	movs	r1, #0
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f7ff fbc3 	bl	800d916 <dir_next>
 800e190:	4603      	mov	r3, r0
 800e192:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e194:	7dfb      	ldrb	r3, [r7, #23]
 800e196:	2b00      	cmp	r3, #0
 800e198:	f43f af58 	beq.w	800e04c <dir_find+0x32>
 800e19c:	e004      	b.n	800e1a8 <dir_find+0x18e>
		if (res != FR_OK) break;
 800e19e:	bf00      	nop
 800e1a0:	e002      	b.n	800e1a8 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800e1a2:	bf00      	nop
 800e1a4:	e000      	b.n	800e1a8 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800e1a6:	bf00      	nop

	return res;
 800e1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3718      	adds	r7, #24
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
	...

0800e1b4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08c      	sub	sp, #48	; 0x30
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1c2:	699b      	ldr	r3, [r3, #24]
 800e1c4:	623b      	str	r3, [r7, #32]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800e1d0:	f107 030c 	add.w	r3, r7, #12
 800e1d4:	220c      	movs	r2, #12
 800e1d6:	6a39      	ldr	r1, [r7, #32]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fe fb91 	bl	800c900 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e1de:	7dfb      	ldrb	r3, [r7, #23]
 800e1e0:	f003 0301 	and.w	r3, r3, #1
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d03b      	beq.n	800e260 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800e1e8:	6a3b      	ldr	r3, [r7, #32]
 800e1ea:	330b      	adds	r3, #11
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	701a      	strb	r2, [r3, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800e200:	e013      	b.n	800e22a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800e202:	f107 010c 	add.w	r1, r7, #12
 800e206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e208:	69fa      	ldr	r2, [r7, #28]
 800e20a:	6a38      	ldr	r0, [r7, #32]
 800e20c:	f7ff fe56 	bl	800debc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7ff ff02 	bl	800e01a <dir_find>
 800e216:	4603      	mov	r3, r0
 800e218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e21c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e220:	2b00      	cmp	r3, #0
 800e222:	d106      	bne.n	800e232 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800e224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e226:	3301      	adds	r3, #1
 800e228:	62bb      	str	r3, [r7, #40]	; 0x28
 800e22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22c:	2b63      	cmp	r3, #99	; 0x63
 800e22e:	d9e8      	bls.n	800e202 <dir_register+0x4e>
 800e230:	e000      	b.n	800e234 <dir_register+0x80>
			if (res != FR_OK) break;
 800e232:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e236:	2b64      	cmp	r3, #100	; 0x64
 800e238:	d101      	bne.n	800e23e <dir_register+0x8a>
 800e23a:	2307      	movs	r3, #7
 800e23c:	e0d8      	b.n	800e3f0 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e23e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e242:	2b04      	cmp	r3, #4
 800e244:	d002      	beq.n	800e24c <dir_register+0x98>
 800e246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e24a:	e0d1      	b.n	800e3f0 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	330b      	adds	r3, #11
 800e250:	7dfa      	ldrb	r2, [r7, #23]
 800e252:	701a      	strb	r2, [r3, #0]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e25a:	461a      	mov	r2, r3
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800e260:	7dfb      	ldrb	r3, [r7, #23]
 800e262:	f003 0302 	and.w	r3, r3, #2
 800e266:	2b00      	cmp	r3, #0
 800e268:	d014      	beq.n	800e294 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800e26a:	2300      	movs	r3, #0
 800e26c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e26e:	e002      	b.n	800e276 <dir_register+0xc2>
 800e270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e272:	3301      	adds	r3, #1
 800e274:	62bb      	str	r3, [r7, #40]	; 0x28
 800e276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e278:	005b      	lsls	r3, r3, #1
 800e27a:	69fa      	ldr	r2, [r7, #28]
 800e27c:	4413      	add	r3, r2
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d1f5      	bne.n	800e270 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800e284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e286:	3319      	adds	r3, #25
 800e288:	4a5b      	ldr	r2, [pc, #364]	; (800e3f8 <dir_register+0x244>)
 800e28a:	fba2 2303 	umull	r2, r3, r2, r3
 800e28e:	089b      	lsrs	r3, r3, #2
 800e290:	627b      	str	r3, [r7, #36]	; 0x24
 800e292:	e001      	b.n	800e298 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800e294:	2301      	movs	r3, #1
 800e296:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff fc85 	bl	800dbaa <dir_alloc>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e2a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d15b      	bne.n	800e366 <dir_register+0x1b2>
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d055      	beq.n	800e366 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2c0:	88db      	ldrh	r3, [r3, #6]
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff fa55 	bl	800d77a <dir_sdi>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e2d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d143      	bne.n	800e366 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2e4:	699b      	ldr	r3, [r3, #24]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7ff fe76 	bl	800dfd8 <sum_sfn>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2fe:	691b      	ldr	r3, [r3, #16]
 800e300:	4619      	mov	r1, r3
 800e302:	4610      	mov	r0, r2
 800e304:	f7fe fd8a 	bl	800ce1c <move_window>
 800e308:	4603      	mov	r3, r0
 800e30a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e30e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e312:	2b00      	cmp	r3, #0
 800e314:	d126      	bne.n	800e364 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e31c:	6a18      	ldr	r0, [r3, #32]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e324:	6959      	ldr	r1, [r3, #20]
 800e326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e328:	b2da      	uxtb	r2, r3
 800e32a:	7efb      	ldrb	r3, [r7, #27]
 800e32c:	f7ff fd50 	bl	800ddd0 <fit_lfn>
				dp->fs->wflag = 1;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e33c:	2201      	movs	r2, #1
 800e33e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800e340:	2100      	movs	r1, #0
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7ff fae7 	bl	800d916 <dir_next>
 800e348:	4603      	mov	r3, r0
 800e34a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e34e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e352:	2b00      	cmp	r3, #0
 800e354:	d107      	bne.n	800e366 <dir_register+0x1b2>
 800e356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e358:	3b01      	subs	r3, #1
 800e35a:	627b      	str	r3, [r7, #36]	; 0x24
 800e35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d1c6      	bne.n	800e2f0 <dir_register+0x13c>
 800e362:	e000      	b.n	800e366 <dir_register+0x1b2>
				if (res != FR_OK) break;
 800e364:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800e366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d13e      	bne.n	800e3ec <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e37c:	691b      	ldr	r3, [r3, #16]
 800e37e:	4619      	mov	r1, r3
 800e380:	4610      	mov	r0, r2
 800e382:	f7fe fd4b 	bl	800ce1c <move_window>
 800e386:	4603      	mov	r3, r0
 800e388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e38c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e390:	2b00      	cmp	r3, #0
 800e392:	d12b      	bne.n	800e3ec <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e39a:	695b      	ldr	r3, [r3, #20]
 800e39c:	2220      	movs	r2, #32
 800e39e:	2100      	movs	r1, #0
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fe facc 	bl	800c93e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3ac:	6958      	ldr	r0, [r3, #20]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3b4:	699b      	ldr	r3, [r3, #24]
 800e3b6:	220b      	movs	r2, #11
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	f7fe faa1 	bl	800c900 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3c4:	699b      	ldr	r3, [r3, #24]
 800e3c6:	330b      	adds	r3, #11
 800e3c8:	781a      	ldrb	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3d0:	695b      	ldr	r3, [r3, #20]
 800e3d2:	330c      	adds	r3, #12
 800e3d4:	f002 0218 	and.w	r2, r2, #24
 800e3d8:	b2d2      	uxtb	r2, r2
 800e3da:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800e3ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3730      	adds	r7, #48	; 0x30
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	4ec4ec4f 	.word	0x4ec4ec4f

0800e3fc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b08a      	sub	sp, #40	; 0x28
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	613b      	str	r3, [r7, #16]
 800e40c:	e002      	b.n	800e414 <create_name+0x18>
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	3301      	adds	r3, #1
 800e412:	613b      	str	r3, [r7, #16]
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	2b2f      	cmp	r3, #47	; 0x2f
 800e41a:	d0f8      	beq.n	800e40e <create_name+0x12>
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	2b5c      	cmp	r3, #92	; 0x5c
 800e422:	d0f4      	beq.n	800e40e <create_name+0x12>
	lfn = dp->lfn;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e42a:	6a1b      	ldr	r3, [r3, #32]
 800e42c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800e42e:	2300      	movs	r3, #0
 800e430:	617b      	str	r3, [r7, #20]
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	1c5a      	adds	r2, r3, #1
 800e43a:	61ba      	str	r2, [r7, #24]
 800e43c:	693a      	ldr	r2, [r7, #16]
 800e43e:	4413      	add	r3, r2
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800e444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e446:	2b1f      	cmp	r3, #31
 800e448:	d92f      	bls.n	800e4aa <create_name+0xae>
 800e44a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e44c:	2b2f      	cmp	r3, #47	; 0x2f
 800e44e:	d02c      	beq.n	800e4aa <create_name+0xae>
 800e450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e452:	2b5c      	cmp	r3, #92	; 0x5c
 800e454:	d029      	beq.n	800e4aa <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	2bfe      	cmp	r3, #254	; 0xfe
 800e45a:	d901      	bls.n	800e460 <create_name+0x64>
			return FR_INVALID_NAME;
 800e45c:	2306      	movs	r3, #6
 800e45e:	e186      	b.n	800e76e <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e462:	b2db      	uxtb	r3, r3
 800e464:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e468:	2101      	movs	r1, #1
 800e46a:	4618      	mov	r0, r3
 800e46c:	f002 f872 	bl	8010554 <ff_convert>
 800e470:	4603      	mov	r3, r0
 800e472:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e476:	2b00      	cmp	r3, #0
 800e478:	d101      	bne.n	800e47e <create_name+0x82>
 800e47a:	2306      	movs	r3, #6
 800e47c:	e177      	b.n	800e76e <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800e47e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e480:	2b7f      	cmp	r3, #127	; 0x7f
 800e482:	d809      	bhi.n	800e498 <create_name+0x9c>
 800e484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e486:	4619      	mov	r1, r3
 800e488:	488e      	ldr	r0, [pc, #568]	; (800e6c4 <create_name+0x2c8>)
 800e48a:	f7fe fa9a 	bl	800c9c2 <chk_chr>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d001      	beq.n	800e498 <create_name+0x9c>
			return FR_INVALID_NAME;
 800e494:	2306      	movs	r3, #6
 800e496:	e16a      	b.n	800e76e <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	1c5a      	adds	r2, r3, #1
 800e49c:	617a      	str	r2, [r7, #20]
 800e49e:	005b      	lsls	r3, r3, #1
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e4a8:	e7c5      	b.n	800e436 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e4aa:	693a      	ldr	r2, [r7, #16]
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	441a      	add	r2, r3
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800e4b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4b6:	2b1f      	cmp	r3, #31
 800e4b8:	d801      	bhi.n	800e4be <create_name+0xc2>
 800e4ba:	2304      	movs	r3, #4
 800e4bc:	e000      	b.n	800e4c0 <create_name+0xc4>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800e4c4:	e011      	b.n	800e4ea <create_name+0xee>
		w = lfn[di - 1];
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	005b      	lsls	r3, r3, #1
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	881b      	ldrh	r3, [r3, #0]
 800e4d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e4d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4da:	2b20      	cmp	r3, #32
 800e4dc:	d002      	beq.n	800e4e4 <create_name+0xe8>
 800e4de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4e0:	2b2e      	cmp	r3, #46	; 0x2e
 800e4e2:	d106      	bne.n	800e4f2 <create_name+0xf6>
		di--;
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	3b01      	subs	r3, #1
 800e4e8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1ea      	bne.n	800e4c6 <create_name+0xca>
 800e4f0:	e000      	b.n	800e4f4 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800e4f2:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d101      	bne.n	800e4fe <create_name+0x102>
 800e4fa:	2306      	movs	r3, #6
 800e4fc:	e137      	b.n	800e76e <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	005b      	lsls	r3, r3, #1
 800e502:	68fa      	ldr	r2, [r7, #12]
 800e504:	4413      	add	r3, r2
 800e506:	2200      	movs	r2, #0
 800e508:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e510:	699b      	ldr	r3, [r3, #24]
 800e512:	220b      	movs	r2, #11
 800e514:	2120      	movs	r1, #32
 800e516:	4618      	mov	r0, r3
 800e518:	f7fe fa11 	bl	800c93e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e51c:	2300      	movs	r3, #0
 800e51e:	61bb      	str	r3, [r7, #24]
 800e520:	e002      	b.n	800e528 <create_name+0x12c>
 800e522:	69bb      	ldr	r3, [r7, #24]
 800e524:	3301      	adds	r3, #1
 800e526:	61bb      	str	r3, [r7, #24]
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	4413      	add	r3, r2
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	2b20      	cmp	r3, #32
 800e534:	d0f5      	beq.n	800e522 <create_name+0x126>
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	005b      	lsls	r3, r3, #1
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	4413      	add	r3, r2
 800e53e:	881b      	ldrh	r3, [r3, #0]
 800e540:	2b2e      	cmp	r3, #46	; 0x2e
 800e542:	d0ee      	beq.n	800e522 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d009      	beq.n	800e55e <create_name+0x162>
 800e54a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e54e:	f043 0303 	orr.w	r3, r3, #3
 800e552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e556:	e002      	b.n	800e55e <create_name+0x162>
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	617b      	str	r3, [r7, #20]
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d009      	beq.n	800e578 <create_name+0x17c>
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e56a:	3b01      	subs	r3, #1
 800e56c:	005b      	lsls	r3, r3, #1
 800e56e:	68fa      	ldr	r2, [r7, #12]
 800e570:	4413      	add	r3, r2
 800e572:	881b      	ldrh	r3, [r3, #0]
 800e574:	2b2e      	cmp	r3, #46	; 0x2e
 800e576:	d1ef      	bne.n	800e558 <create_name+0x15c>

	b = i = 0; ni = 8;
 800e578:	2300      	movs	r3, #0
 800e57a:	623b      	str	r3, [r7, #32]
 800e57c:	2300      	movs	r3, #0
 800e57e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e582:	2308      	movs	r3, #8
 800e584:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	1c5a      	adds	r2, r3, #1
 800e58a:	61ba      	str	r2, [r7, #24]
 800e58c:	005b      	lsls	r3, r3, #1
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	4413      	add	r3, r2
 800e592:	881b      	ldrh	r3, [r3, #0]
 800e594:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 8091 	beq.w	800e6c0 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e59e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5a0:	2b20      	cmp	r3, #32
 800e5a2:	d006      	beq.n	800e5b2 <create_name+0x1b6>
 800e5a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5a6:	2b2e      	cmp	r3, #46	; 0x2e
 800e5a8:	d10a      	bne.n	800e5c0 <create_name+0x1c4>
 800e5aa:	69ba      	ldr	r2, [r7, #24]
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d006      	beq.n	800e5c0 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800e5b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5b6:	f043 0303 	orr.w	r3, r3, #3
 800e5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e5be:	e07e      	b.n	800e6be <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e5c0:	6a3a      	ldr	r2, [r7, #32]
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d203      	bcs.n	800e5d0 <create_name+0x1d4>
 800e5c8:	69ba      	ldr	r2, [r7, #24]
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d123      	bne.n	800e618 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	2b0b      	cmp	r3, #11
 800e5d4:	d106      	bne.n	800e5e4 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800e5d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5da:	f043 0303 	orr.w	r3, r3, #3
 800e5de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e5e2:	e076      	b.n	800e6d2 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e5e4:	69ba      	ldr	r2, [r7, #24]
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d005      	beq.n	800e5f8 <create_name+0x1fc>
 800e5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5f0:	f043 0303 	orr.w	r3, r3, #3
 800e5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e5f8:	69ba      	ldr	r2, [r7, #24]
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d867      	bhi.n	800e6d0 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	61bb      	str	r3, [r7, #24]
 800e604:	2308      	movs	r3, #8
 800e606:	623b      	str	r3, [r7, #32]
 800e608:	230b      	movs	r3, #11
 800e60a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e60c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e616:	e052      	b.n	800e6be <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e61a:	2b7f      	cmp	r3, #127	; 0x7f
 800e61c:	d914      	bls.n	800e648 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e61e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e620:	2100      	movs	r1, #0
 800e622:	4618      	mov	r0, r3
 800e624:	f001 ff96 	bl	8010554 <ff_convert>
 800e628:	4603      	mov	r3, r0
 800e62a:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e62c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d004      	beq.n	800e63c <create_name+0x240>
 800e632:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e634:	3b80      	subs	r3, #128	; 0x80
 800e636:	4a24      	ldr	r2, [pc, #144]	; (800e6c8 <create_name+0x2cc>)
 800e638:	5cd3      	ldrb	r3, [r2, r3]
 800e63a:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e640:	f043 0302 	orr.w	r3, r3, #2
 800e644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d007      	beq.n	800e65e <create_name+0x262>
 800e64e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e650:	4619      	mov	r1, r3
 800e652:	481e      	ldr	r0, [pc, #120]	; (800e6cc <create_name+0x2d0>)
 800e654:	f7fe f9b5 	bl	800c9c2 <chk_chr>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d008      	beq.n	800e670 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e65e:	235f      	movs	r3, #95	; 0x5f
 800e660:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e666:	f043 0303 	orr.w	r3, r3, #3
 800e66a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e66e:	e01b      	b.n	800e6a8 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e672:	2b40      	cmp	r3, #64	; 0x40
 800e674:	d909      	bls.n	800e68a <create_name+0x28e>
 800e676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e678:	2b5a      	cmp	r3, #90	; 0x5a
 800e67a:	d806      	bhi.n	800e68a <create_name+0x28e>
					b |= 2;
 800e67c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e680:	f043 0302 	orr.w	r3, r3, #2
 800e684:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e688:	e00e      	b.n	800e6a8 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e68a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e68c:	2b60      	cmp	r3, #96	; 0x60
 800e68e:	d90b      	bls.n	800e6a8 <create_name+0x2ac>
 800e690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e692:	2b7a      	cmp	r3, #122	; 0x7a
 800e694:	d808      	bhi.n	800e6a8 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800e696:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e69a:	f043 0301 	orr.w	r3, r3, #1
 800e69e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e6a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6a4:	3b20      	subs	r3, #32
 800e6a6:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6ae:	699a      	ldr	r2, [r3, #24]
 800e6b0:	6a3b      	ldr	r3, [r7, #32]
 800e6b2:	1c59      	adds	r1, r3, #1
 800e6b4:	6239      	str	r1, [r7, #32]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6ba:	b2d2      	uxtb	r2, r2
 800e6bc:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800e6be:	e762      	b.n	800e586 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800e6c0:	bf00      	nop
 800e6c2:	e006      	b.n	800e6d2 <create_name+0x2d6>
 800e6c4:	0801375c 	.word	0x0801375c
 800e6c8:	08013e64 	.word	0x08013e64
 800e6cc:	08013768 	.word	0x08013768
			if (si > di) break;			/* No extension */
 800e6d0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6d8:	699b      	ldr	r3, [r3, #24]
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	2be5      	cmp	r3, #229	; 0xe5
 800e6de:	d105      	bne.n	800e6ec <create_name+0x2f0>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6e6:	699b      	ldr	r3, [r3, #24]
 800e6e8:	2205      	movs	r2, #5
 800e6ea:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	2b08      	cmp	r3, #8
 800e6f0:	d104      	bne.n	800e6fc <create_name+0x300>
 800e6f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800e6fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e700:	f003 030c 	and.w	r3, r3, #12
 800e704:	2b0c      	cmp	r3, #12
 800e706:	d005      	beq.n	800e714 <create_name+0x318>
 800e708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e70c:	f003 0303 	and.w	r3, r3, #3
 800e710:	2b03      	cmp	r3, #3
 800e712:	d105      	bne.n	800e720 <create_name+0x324>
		cf |= NS_LFN;
 800e714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e718:	f043 0302 	orr.w	r3, r3, #2
 800e71c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e724:	f003 0302 	and.w	r3, r3, #2
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d117      	bne.n	800e75c <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e72c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e730:	f003 0303 	and.w	r3, r3, #3
 800e734:	2b01      	cmp	r3, #1
 800e736:	d105      	bne.n	800e744 <create_name+0x348>
 800e738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e73c:	f043 0310 	orr.w	r3, r3, #16
 800e740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e748:	f003 030c 	and.w	r3, r3, #12
 800e74c:	2b04      	cmp	r3, #4
 800e74e:	d105      	bne.n	800e75c <create_name+0x360>
 800e750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e754:	f043 0308 	orr.w	r3, r3, #8
 800e758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e762:	699b      	ldr	r3, [r3, #24]
 800e764:	330b      	adds	r3, #11
 800e766:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e76a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e76c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3728      	adds	r7, #40	; 0x28
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop

0800e778 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	2b2f      	cmp	r3, #47	; 0x2f
 800e788:	d003      	beq.n	800e792 <follow_path+0x1a>
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	2b5c      	cmp	r3, #92	; 0x5c
 800e790:	d102      	bne.n	800e798 <follow_path+0x20>
		path++;
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	3301      	adds	r3, #1
 800e796:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e79e:	461a      	mov	r2, r3
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	2b1f      	cmp	r3, #31
 800e7aa:	d80c      	bhi.n	800e7c6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7fe ffe3 	bl	800d77a <dir_sdi>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7be:	461a      	mov	r2, r3
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	6153      	str	r3, [r2, #20]
 800e7c4:	e049      	b.n	800e85a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e7c6:	463b      	mov	r3, r7
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff fe16 	bl	800e3fc <create_name>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d13a      	bne.n	800e850 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7ff fc1d 	bl	800e01a <dir_find>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7ea:	699b      	ldr	r3, [r3, #24]
 800e7ec:	7adb      	ldrb	r3, [r3, #11]
 800e7ee:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800e7f0:	7bfb      	ldrb	r3, [r7, #15]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00a      	beq.n	800e80c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e7f6:	7bfb      	ldrb	r3, [r7, #15]
 800e7f8:	2b04      	cmp	r3, #4
 800e7fa:	d12b      	bne.n	800e854 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e7fc:	7bbb      	ldrb	r3, [r7, #14]
 800e7fe:	f003 0304 	and.w	r3, r3, #4
 800e802:	2b00      	cmp	r3, #0
 800e804:	d126      	bne.n	800e854 <follow_path+0xdc>
 800e806:	2305      	movs	r3, #5
 800e808:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800e80a:	e023      	b.n	800e854 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e80c:	7bbb      	ldrb	r3, [r7, #14]
 800e80e:	f003 0304 	and.w	r3, r3, #4
 800e812:	2b00      	cmp	r3, #0
 800e814:	d120      	bne.n	800e858 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e81c:	695b      	ldr	r3, [r3, #20]
 800e81e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	330b      	adds	r3, #11
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	f003 0310 	and.w	r3, r3, #16
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d102      	bne.n	800e834 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800e82e:	2305      	movs	r3, #5
 800e830:	73fb      	strb	r3, [r7, #15]
 800e832:	e012      	b.n	800e85a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68b9      	ldr	r1, [r7, #8]
 800e83e:	4618      	mov	r0, r3
 800e840:	f7ff fa01 	bl	800dc46 <ld_clust>
 800e844:	4602      	mov	r2, r0
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e84c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e84e:	e7ba      	b.n	800e7c6 <follow_path+0x4e>
			if (res != FR_OK) break;
 800e850:	bf00      	nop
 800e852:	e002      	b.n	800e85a <follow_path+0xe2>
				break;
 800e854:	bf00      	nop
 800e856:	e000      	b.n	800e85a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e858:	bf00      	nop
		}
	}

	return res;
 800e85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e864:	b480      	push	{r7}
 800e866:	b087      	sub	sp, #28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e86c:	f04f 33ff 	mov.w	r3, #4294967295
 800e870:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d031      	beq.n	800e8de <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	617b      	str	r3, [r7, #20]
 800e880:	e002      	b.n	800e888 <get_ldnumber+0x24>
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	3301      	adds	r3, #1
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	2b1f      	cmp	r3, #31
 800e88e:	d903      	bls.n	800e898 <get_ldnumber+0x34>
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	2b3a      	cmp	r3, #58	; 0x3a
 800e896:	d1f4      	bne.n	800e882 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	2b3a      	cmp	r3, #58	; 0x3a
 800e89e:	d11c      	bne.n	800e8da <get_ldnumber+0x76>
			tp = *path;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	1c5a      	adds	r2, r3, #1
 800e8aa:	60fa      	str	r2, [r7, #12]
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	3b30      	subs	r3, #48	; 0x30
 800e8b0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	2b09      	cmp	r3, #9
 800e8b6:	d80e      	bhi.n	800e8d6 <get_ldnumber+0x72>
 800e8b8:	68fa      	ldr	r2, [r7, #12]
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d10a      	bne.n	800e8d6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d107      	bne.n	800e8d6 <get_ldnumber+0x72>
					vol = (int)i;
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	617b      	str	r3, [r7, #20]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	697a      	ldr	r2, [r7, #20]
 800e8d4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	e002      	b.n	800e8e0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e8da:	2300      	movs	r3, #0
 800e8dc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e8de:	693b      	ldr	r3, [r7, #16]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	371c      	adds	r7, #28
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	711a      	strb	r2, [r3, #4]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e906:	461a      	mov	r2, r3
 800e908:	f04f 33ff 	mov.w	r3, #4294967295
 800e90c:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800e90e:	6839      	ldr	r1, [r7, #0]
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f7fe fa83 	bl	800ce1c <move_window>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d001      	beq.n	800e920 <check_fs+0x34>
		return 3;
 800e91c:	2303      	movs	r3, #3
 800e91e:	e04a      	b.n	800e9b6 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e926:	3301      	adds	r3, #1
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	021b      	lsls	r3, r3, #8
 800e92c:	b21a      	sxth	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800e934:	b21b      	sxth	r3, r3
 800e936:	4313      	orrs	r3, r2
 800e938:	b21b      	sxth	r3, r3
 800e93a:	4a21      	ldr	r2, [pc, #132]	; (800e9c0 <check_fs+0xd4>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d001      	beq.n	800e944 <check_fs+0x58>
		return 2;
 800e940:	2302      	movs	r3, #2
 800e942:	e038      	b.n	800e9b6 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	3336      	adds	r3, #54	; 0x36
 800e948:	3303      	adds	r3, #3
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	061a      	lsls	r2, r3, #24
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	3336      	adds	r3, #54	; 0x36
 800e952:	3302      	adds	r3, #2
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	041b      	lsls	r3, r3, #16
 800e958:	4313      	orrs	r3, r2
 800e95a:	687a      	ldr	r2, [r7, #4]
 800e95c:	3236      	adds	r2, #54	; 0x36
 800e95e:	3201      	adds	r2, #1
 800e960:	7812      	ldrb	r2, [r2, #0]
 800e962:	0212      	lsls	r2, r2, #8
 800e964:	4313      	orrs	r3, r2
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800e96c:	4313      	orrs	r3, r2
 800e96e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e972:	4a14      	ldr	r2, [pc, #80]	; (800e9c4 <check_fs+0xd8>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d101      	bne.n	800e97c <check_fs+0x90>
		return 0;
 800e978:	2300      	movs	r3, #0
 800e97a:	e01c      	b.n	800e9b6 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	3352      	adds	r3, #82	; 0x52
 800e980:	3303      	adds	r3, #3
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	061a      	lsls	r2, r3, #24
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	3352      	adds	r3, #82	; 0x52
 800e98a:	3302      	adds	r3, #2
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	041b      	lsls	r3, r3, #16
 800e990:	4313      	orrs	r3, r2
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	3252      	adds	r2, #82	; 0x52
 800e996:	3201      	adds	r2, #1
 800e998:	7812      	ldrb	r2, [r2, #0]
 800e99a:	0212      	lsls	r2, r2, #8
 800e99c:	4313      	orrs	r3, r2
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e9aa:	4a06      	ldr	r2, [pc, #24]	; (800e9c4 <check_fs+0xd8>)
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d101      	bne.n	800e9b4 <check_fs+0xc8>
		return 0;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	e000      	b.n	800e9b6 <check_fs+0xca>

	return 1;
 800e9b4:	2301      	movs	r3, #1
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	ffffaa55 	.word	0xffffaa55
 800e9c4:	00544146 	.word	0x00544146

0800e9c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b096      	sub	sp, #88	; 0x58
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e9dc:	68b8      	ldr	r0, [r7, #8]
 800e9de:	f7ff ff41 	bl	800e864 <get_ldnumber>
 800e9e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e9e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	da01      	bge.n	800e9ee <find_volume+0x26>
 800e9ea:	230b      	movs	r3, #11
 800e9ec:	e311      	b.n	800f012 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e9ee:	4a98      	ldr	r2, [pc, #608]	; (800ec50 <find_volume+0x288>)
 800e9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d101      	bne.n	800ea02 <find_volume+0x3a>
 800e9fe:	230c      	movs	r3, #12
 800ea00:	e307      	b.n	800f012 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea06:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800ea08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d01c      	beq.n	800ea4e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ea14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea1a:	785b      	ldrb	r3, [r3, #1]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7fd fed1 	bl	800c7c4 <disk_status>
 800ea22:	4603      	mov	r3, r0
 800ea24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ea28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea2c:	f003 0301 	and.w	r3, r3, #1
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d10c      	bne.n	800ea4e <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800ea34:	79fb      	ldrb	r3, [r7, #7]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d007      	beq.n	800ea4a <find_volume+0x82>
 800ea3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea3e:	f003 0304 	and.w	r3, r3, #4
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d001      	beq.n	800ea4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ea46:	230a      	movs	r3, #10
 800ea48:	e2e3      	b.n	800f012 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	e2e1      	b.n	800f012 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ea4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea54:	2200      	movs	r2, #0
 800ea56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ea58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea5a:	b2da      	uxtb	r2, r3
 800ea5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ea64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea6a:	785b      	ldrb	r3, [r3, #1]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7fd fec3 	bl	800c7f8 <disk_initialize>
 800ea72:	4603      	mov	r3, r0
 800ea74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800ea78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea7c:	f003 0301 	and.w	r3, r3, #1
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d001      	beq.n	800ea88 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ea84:	2303      	movs	r3, #3
 800ea86:	e2c4      	b.n	800f012 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800ea88:	79fb      	ldrb	r3, [r7, #7]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d007      	beq.n	800ea9e <find_volume+0xd6>
 800ea8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea92:	f003 0304 	and.w	r3, r3, #4
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d001      	beq.n	800ea9e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800ea9a:	230a      	movs	r3, #10
 800ea9c:	e2b9      	b.n	800f012 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800ea9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eaa4:	7858      	ldrb	r0, [r3, #1]
 800eaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eaac:	330a      	adds	r3, #10
 800eaae:	461a      	mov	r2, r3
 800eab0:	2102      	movs	r1, #2
 800eab2:	f7fd ff07 	bl	800c8c4 <disk_ioctl>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d10d      	bne.n	800ead8 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800eabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eabe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eac2:	895b      	ldrh	r3, [r3, #10]
 800eac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eac8:	d306      	bcc.n	800ead8 <find_volume+0x110>
 800eaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eacc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ead0:	895b      	ldrh	r3, [r3, #10]
 800ead2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ead6:	d901      	bls.n	800eadc <find_volume+0x114>
 800ead8:	2301      	movs	r3, #1
 800eada:	e29a      	b.n	800f012 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800eadc:	2300      	movs	r3, #0
 800eade:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800eae0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eae2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eae4:	f7ff ff02 	bl	800e8ec <check_fs>
 800eae8:	4603      	mov	r3, r0
 800eaea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800eaee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d153      	bne.n	800eb9e <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	643b      	str	r3, [r7, #64]	; 0x40
 800eafa:	e028      	b.n	800eb4e <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800eafc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb00:	011b      	lsls	r3, r3, #4
 800eb02:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800eb06:	4413      	add	r3, r2
 800eb08:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800eb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d012      	beq.n	800eb3a <find_volume+0x172>
 800eb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb16:	330b      	adds	r3, #11
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	061a      	lsls	r2, r3, #24
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1e:	330a      	adds	r3, #10
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	041b      	lsls	r3, r3, #16
 800eb24:	4313      	orrs	r3, r2
 800eb26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb28:	3209      	adds	r2, #9
 800eb2a:	7812      	ldrb	r2, [r2, #0]
 800eb2c:	0212      	lsls	r2, r2, #8
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb32:	3208      	adds	r2, #8
 800eb34:	7812      	ldrb	r2, [r2, #0]
 800eb36:	431a      	orrs	r2, r3
 800eb38:	e000      	b.n	800eb3c <find_volume+0x174>
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	3358      	adds	r3, #88	; 0x58
 800eb42:	443b      	add	r3, r7
 800eb44:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800eb48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	643b      	str	r3, [r7, #64]	; 0x40
 800eb4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb50:	2b03      	cmp	r3, #3
 800eb52:	d9d3      	bls.n	800eafc <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800eb54:	2300      	movs	r3, #0
 800eb56:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800eb58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d002      	beq.n	800eb64 <find_volume+0x19c>
 800eb5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb60:	3b01      	subs	r3, #1
 800eb62:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800eb64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	3358      	adds	r3, #88	; 0x58
 800eb6a:	443b      	add	r3, r7
 800eb6c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800eb70:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800eb72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d005      	beq.n	800eb84 <find_volume+0x1bc>
 800eb78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eb7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eb7c:	f7ff feb6 	bl	800e8ec <check_fs>
 800eb80:	4603      	mov	r3, r0
 800eb82:	e000      	b.n	800eb86 <find_volume+0x1be>
 800eb84:	2302      	movs	r3, #2
 800eb86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800eb8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d005      	beq.n	800eb9e <find_volume+0x1d6>
 800eb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb94:	3301      	adds	r3, #1
 800eb96:	643b      	str	r3, [r7, #64]	; 0x40
 800eb98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb9a:	2b03      	cmp	r3, #3
 800eb9c:	d9e2      	bls.n	800eb64 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eb9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eba2:	2b03      	cmp	r3, #3
 800eba4:	d101      	bne.n	800ebaa <find_volume+0x1e2>
 800eba6:	2301      	movs	r3, #1
 800eba8:	e233      	b.n	800f012 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800ebaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d001      	beq.n	800ebb6 <find_volume+0x1ee>
 800ebb2:	230d      	movs	r3, #13
 800ebb4:	e22d      	b.n	800f012 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb8:	7b1b      	ldrb	r3, [r3, #12]
 800ebba:	021b      	lsls	r3, r3, #8
 800ebbc:	b21a      	sxth	r2, r3
 800ebbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc0:	7adb      	ldrb	r3, [r3, #11]
 800ebc2:	b21b      	sxth	r3, r3
 800ebc4:	4313      	orrs	r3, r2
 800ebc6:	b21a      	sxth	r2, r3
 800ebc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebce:	895b      	ldrh	r3, [r3, #10]
 800ebd0:	b21b      	sxth	r3, r3
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d001      	beq.n	800ebda <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800ebd6:	230d      	movs	r3, #13
 800ebd8:	e21b      	b.n	800f012 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800ebda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebdc:	7ddb      	ldrb	r3, [r3, #23]
 800ebde:	021b      	lsls	r3, r3, #8
 800ebe0:	b21a      	sxth	r2, r3
 800ebe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe4:	7d9b      	ldrb	r3, [r3, #22]
 800ebe6:	b21b      	sxth	r3, r3
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	b21b      	sxth	r3, r3
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800ebf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d112      	bne.n	800ec1c <find_volume+0x254>
 800ebf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ebfc:	061a      	lsls	r2, r3, #24
 800ebfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec00:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ec04:	041b      	lsls	r3, r3, #16
 800ec06:	4313      	orrs	r3, r2
 800ec08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec0a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ec0e:	0212      	lsls	r2, r2, #8
 800ec10:	4313      	orrs	r3, r2
 800ec12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec14:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800ec1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec22:	461a      	mov	r2, r3
 800ec24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec26:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800ec28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2a:	7c1a      	ldrb	r2, [r3, #16]
 800ec2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec32:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800ec34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec3a:	78db      	ldrb	r3, [r3, #3]
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d009      	beq.n	800ec54 <find_volume+0x28c>
 800ec40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec46:	78db      	ldrb	r3, [r3, #3]
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	d003      	beq.n	800ec54 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800ec4c:	230d      	movs	r3, #13
 800ec4e:	e1e0      	b.n	800f012 <find_volume+0x64a>
 800ec50:	20003000 	.word	0x20003000
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800ec54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec5a:	78db      	ldrb	r3, [r3, #3]
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec60:	fb02 f303 	mul.w	r3, r2, r3
 800ec64:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800ec66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec68:	7b5a      	ldrb	r2, [r3, #13]
 800ec6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec70:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800ec72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec78:	789b      	ldrb	r3, [r3, #2]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00c      	beq.n	800ec98 <find_volume+0x2d0>
 800ec7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec84:	789b      	ldrb	r3, [r3, #2]
 800ec86:	461a      	mov	r2, r3
 800ec88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec8e:	789b      	ldrb	r3, [r3, #2]
 800ec90:	3b01      	subs	r3, #1
 800ec92:	4013      	ands	r3, r2
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d001      	beq.n	800ec9c <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800ec98:	230d      	movs	r3, #13
 800ec9a:	e1ba      	b.n	800f012 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800ec9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9e:	7c9b      	ldrb	r3, [r3, #18]
 800eca0:	021b      	lsls	r3, r3, #8
 800eca2:	b21a      	sxth	r2, r3
 800eca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca6:	7c5b      	ldrb	r3, [r3, #17]
 800eca8:	b21b      	sxth	r3, r3
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	b21b      	sxth	r3, r3
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecb6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecbe:	891b      	ldrh	r3, [r3, #8]
 800ecc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ecc6:	8952      	ldrh	r2, [r2, #10]
 800ecc8:	0952      	lsrs	r2, r2, #5
 800ecca:	b292      	uxth	r2, r2
 800eccc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ecd0:	fb01 f202 	mul.w	r2, r1, r2
 800ecd4:	1a9b      	subs	r3, r3, r2
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d001      	beq.n	800ece0 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800ecdc:	230d      	movs	r3, #13
 800ecde:	e198      	b.n	800f012 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800ece0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece2:	7d1b      	ldrb	r3, [r3, #20]
 800ece4:	021b      	lsls	r3, r3, #8
 800ece6:	b21a      	sxth	r2, r3
 800ece8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecea:	7cdb      	ldrb	r3, [r3, #19]
 800ecec:	b21b      	sxth	r3, r3
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	b21b      	sxth	r3, r3
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800ecf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d112      	bne.n	800ed22 <find_volume+0x35a>
 800ecfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ed02:	061a      	lsls	r2, r3, #24
 800ed04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed06:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ed0a:	041b      	lsls	r3, r3, #16
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed10:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ed14:	0212      	lsls	r2, r2, #8
 800ed16:	4313      	orrs	r3, r2
 800ed18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800ed22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed24:	7bdb      	ldrb	r3, [r3, #15]
 800ed26:	021b      	lsls	r3, r3, #8
 800ed28:	b21a      	sxth	r2, r3
 800ed2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2c:	7b9b      	ldrb	r3, [r3, #14]
 800ed2e:	b21b      	sxth	r3, r3
 800ed30:	4313      	orrs	r3, r2
 800ed32:	b21b      	sxth	r3, r3
 800ed34:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800ed36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d101      	bne.n	800ed40 <find_volume+0x378>
 800ed3c:	230d      	movs	r3, #13
 800ed3e:	e168      	b.n	800f012 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800ed40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ed42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed44:	4413      	add	r3, r2
 800ed46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ed4c:	8911      	ldrh	r1, [r2, #8]
 800ed4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ed54:	8952      	ldrh	r2, [r2, #10]
 800ed56:	0952      	lsrs	r2, r2, #5
 800ed58:	b292      	uxth	r2, r2
 800ed5a:	fbb1 f2f2 	udiv	r2, r1, r2
 800ed5e:	b292      	uxth	r2, r2
 800ed60:	4413      	add	r3, r2
 800ed62:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ed64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d201      	bcs.n	800ed70 <find_volume+0x3a8>
 800ed6c:	230d      	movs	r3, #13
 800ed6e:	e150      	b.n	800f012 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800ed70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ed7c:	7892      	ldrb	r2, [r2, #2]
 800ed7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed82:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800ed84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d101      	bne.n	800ed8e <find_volume+0x3c6>
 800ed8a:	230d      	movs	r3, #13
 800ed8c:	e141      	b.n	800f012 <find_volume+0x64a>
	fmt = FS_FAT12;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800ed94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed96:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d902      	bls.n	800eda4 <find_volume+0x3dc>
 800ed9e:	2302      	movs	r3, #2
 800eda0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800eda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800edaa:	4293      	cmp	r3, r2
 800edac:	d902      	bls.n	800edb4 <find_volume+0x3ec>
 800edae:	2303      	movs	r3, #3
 800edb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800edb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb6:	3302      	adds	r3, #2
 800edb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800edbe:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800edc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edc6:	461a      	mov	r2, r3
 800edc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edca:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800edcc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800edce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edd0:	4413      	add	r3, r2
 800edd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800edd8:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800edda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edde:	4413      	add	r3, r2
 800ede0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ede2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ede6:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800ede8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edec:	2b03      	cmp	r3, #3
 800edee:	d124      	bne.n	800ee3a <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800edf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edf6:	891b      	ldrh	r3, [r3, #8]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d001      	beq.n	800ee00 <find_volume+0x438>
 800edfc:	230d      	movs	r3, #13
 800edfe:	e108      	b.n	800f012 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800ee00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ee06:	061a      	lsls	r2, r3, #24
 800ee08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ee0e:	041b      	lsls	r3, r3, #16
 800ee10:	4313      	orrs	r3, r2
 800ee12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee14:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ee18:	0212      	lsls	r2, r2, #8
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee1e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ee22:	4313      	orrs	r3, r2
 800ee24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ee2a:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee32:	695b      	ldr	r3, [r3, #20]
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	647b      	str	r3, [r7, #68]	; 0x44
 800ee38:	e02b      	b.n	800ee92 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800ee3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee40:	891b      	ldrh	r3, [r3, #8]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d101      	bne.n	800ee4a <find_volume+0x482>
 800ee46:	230d      	movs	r3, #13
 800ee48:	e0e3      	b.n	800f012 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800ee4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee50:	6a1a      	ldr	r2, [r3, #32]
 800ee52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee54:	4413      	add	r3, r2
 800ee56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ee5c:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ee5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	d105      	bne.n	800ee72 <find_volume+0x4aa>
 800ee66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee6c:	695b      	ldr	r3, [r3, #20]
 800ee6e:	005b      	lsls	r3, r3, #1
 800ee70:	e00e      	b.n	800ee90 <find_volume+0x4c8>
 800ee72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee78:	695a      	ldr	r2, [r3, #20]
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	005b      	lsls	r3, r3, #1
 800ee7e:	4413      	add	r3, r2
 800ee80:	085a      	lsrs	r2, r3, #1
 800ee82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee88:	695b      	ldr	r3, [r3, #20]
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800ee90:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800ee92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee98:	699a      	ldr	r2, [r3, #24]
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eea0:	895b      	ldrh	r3, [r3, #10]
 800eea2:	4619      	mov	r1, r3
 800eea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eea6:	440b      	add	r3, r1
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eeac:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800eeb0:	8949      	ldrh	r1, [r1, #10]
 800eeb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d201      	bcs.n	800eebe <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800eeba:	230d      	movs	r3, #13
 800eebc:	e0a9      	b.n	800f012 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800eebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eec4:	461a      	mov	r2, r3
 800eec6:	f04f 33ff 	mov.w	r3, #4294967295
 800eeca:	6113      	str	r3, [r2, #16]
 800eecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eed2:	691b      	ldr	r3, [r3, #16]
 800eed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eed6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eeda:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800eedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eee2:	2280      	movs	r2, #128	; 0x80
 800eee4:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800eee6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eeea:	2b03      	cmp	r3, #3
 800eeec:	d17a      	bne.n	800efe4 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800eeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eef4:	021b      	lsls	r3, r3, #8
 800eef6:	b21a      	sxth	r2, r3
 800eef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eefe:	b21b      	sxth	r3, r3
 800ef00:	4313      	orrs	r3, r2
 800ef02:	b21b      	sxth	r3, r3
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d16d      	bne.n	800efe4 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800ef08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef10:	f7fd ff84 	bl	800ce1c <move_window>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d164      	bne.n	800efe4 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800ef1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef20:	2200      	movs	r2, #0
 800ef22:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ef24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef26:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800ef2a:	021b      	lsls	r3, r3, #8
 800ef2c:	b21a      	sxth	r2, r3
 800ef2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef30:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ef34:	b21b      	sxth	r3, r3
 800ef36:	4313      	orrs	r3, r2
 800ef38:	b21b      	sxth	r3, r3
 800ef3a:	4a38      	ldr	r2, [pc, #224]	; (800f01c <find_volume+0x654>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d151      	bne.n	800efe4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800ef40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef42:	78db      	ldrb	r3, [r3, #3]
 800ef44:	061a      	lsls	r2, r3, #24
 800ef46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef48:	789b      	ldrb	r3, [r3, #2]
 800ef4a:	041b      	lsls	r3, r3, #16
 800ef4c:	4313      	orrs	r3, r2
 800ef4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef50:	7852      	ldrb	r2, [r2, #1]
 800ef52:	0212      	lsls	r2, r2, #8
 800ef54:	4313      	orrs	r3, r2
 800ef56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef58:	7812      	ldrb	r2, [r2, #0]
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	4a30      	ldr	r2, [pc, #192]	; (800f020 <find_volume+0x658>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d140      	bne.n	800efe4 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800ef62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef64:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800ef68:	061a      	lsls	r2, r3, #24
 800ef6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef6c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800ef70:	041b      	lsls	r3, r3, #16
 800ef72:	4313      	orrs	r3, r2
 800ef74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef76:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800ef7a:	0212      	lsls	r2, r2, #8
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef80:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800ef84:	4313      	orrs	r3, r2
 800ef86:	4a27      	ldr	r2, [pc, #156]	; (800f024 <find_volume+0x65c>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d12b      	bne.n	800efe4 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800ef8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800ef92:	061a      	lsls	r2, r3, #24
 800ef94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef96:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800ef9a:	041b      	lsls	r3, r3, #16
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efa0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800efa4:	0212      	lsls	r2, r2, #8
 800efa6:	4313      	orrs	r3, r2
 800efa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efaa:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800efae:	4313      	orrs	r3, r2
 800efb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800efb6:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800efb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efba:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800efbe:	061a      	lsls	r2, r3, #24
 800efc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800efc6:	041b      	lsls	r3, r3, #16
 800efc8:	4313      	orrs	r3, r2
 800efca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efcc:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800efd0:	0212      	lsls	r2, r2, #8
 800efd2:	4313      	orrs	r3, r2
 800efd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efd6:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800efda:	4313      	orrs	r3, r2
 800efdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800efe2:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800efe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efea:	461a      	mov	r2, r3
 800efec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eff0:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800eff2:	4b0d      	ldr	r3, [pc, #52]	; (800f028 <find_volume+0x660>)
 800eff4:	881b      	ldrh	r3, [r3, #0]
 800eff6:	3301      	adds	r3, #1
 800eff8:	b29a      	uxth	r2, r3
 800effa:	4b0b      	ldr	r3, [pc, #44]	; (800f028 <find_volume+0x660>)
 800effc:	801a      	strh	r2, [r3, #0]
 800effe:	4b0a      	ldr	r3, [pc, #40]	; (800f028 <find_volume+0x660>)
 800f000:	881a      	ldrh	r2, [r3, #0]
 800f002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f008:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800f00a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f00c:	f7fd fe8a 	bl	800cd24 <clear_lock>
#endif

	return FR_OK;
 800f010:	2300      	movs	r3, #0
}
 800f012:	4618      	mov	r0, r3
 800f014:	3758      	adds	r7, #88	; 0x58
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	ffffaa55 	.word	0xffffaa55
 800f020:	41615252 	.word	0x41615252
 800f024:	61417272 	.word	0x61417272
 800f028:	20003004 	.word	0x20003004

0800f02c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d02a      	beq.n	800f094 <validate+0x68>
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d024      	beq.n	800f094 <validate+0x68>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d01b      	beq.n	800f094 <validate+0x68>
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f068:	88da      	ldrh	r2, [r3, #6]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f070:	889b      	ldrh	r3, [r3, #4]
 800f072:	429a      	cmp	r2, r3
 800f074:	d10e      	bne.n	800f094 <validate+0x68>
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f082:	785b      	ldrb	r3, [r3, #1]
 800f084:	4618      	mov	r0, r3
 800f086:	f7fd fb9d 	bl	800c7c4 <disk_status>
 800f08a:	4603      	mov	r3, r0
 800f08c:	f003 0301 	and.w	r3, r3, #1
 800f090:	2b00      	cmp	r3, #0
 800f092:	d001      	beq.n	800f098 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800f094:	2309      	movs	r3, #9
 800f096:	e000      	b.n	800f09a <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
	...

0800f0a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b088      	sub	sp, #32
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	4613      	mov	r3, r2
 800f0b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800f0b6:	f107 0310 	add.w	r3, r7, #16
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7ff fbd2 	bl	800e864 <get_ldnumber>
 800f0c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	da01      	bge.n	800f0cc <f_mount+0x28>
 800f0c8:	230b      	movs	r3, #11
 800f0ca:	e02f      	b.n	800f12c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f0cc:	4a19      	ldr	r2, [pc, #100]	; (800f134 <f_mount+0x90>)
 800f0ce:	69fb      	ldr	r3, [r7, #28]
 800f0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f0d6:	69bb      	ldr	r3, [r7, #24]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d007      	beq.n	800f0ec <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800f0dc:	69b8      	ldr	r0, [r7, #24]
 800f0de:	f7fd fe21 	bl	800cd24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d004      	beq.n	800f0fc <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	490d      	ldr	r1, [pc, #52]	; (800f134 <f_mount+0x90>)
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d002      	beq.n	800f112 <f_mount+0x6e>
 800f10c:	79fb      	ldrb	r3, [r7, #7]
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d001      	beq.n	800f116 <f_mount+0x72>
 800f112:	2300      	movs	r3, #0
 800f114:	e00a      	b.n	800f12c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800f116:	f107 0108 	add.w	r1, r7, #8
 800f11a:	f107 030c 	add.w	r3, r7, #12
 800f11e:	2200      	movs	r2, #0
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fc51 	bl	800e9c8 <find_volume>
 800f126:	4603      	mov	r3, r0
 800f128:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f12a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3720      	adds	r7, #32
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	20003000 	.word	0x20003000

0800f138 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800f13e:	b086      	sub	sp, #24
 800f140:	af00      	add	r7, sp, #0
 800f142:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f146:	f843 0c4c 	str.w	r0, [r3, #-76]
 800f14a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f14e:	f843 1c50 	str.w	r1, [r3, #-80]
 800f152:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f156:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800f15a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f15e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d101      	bne.n	800f16a <f_open+0x32>
 800f166:	2309      	movs	r3, #9
 800f168:	e2f7      	b.n	800f75a <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800f16a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f16e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f176:	461a      	mov	r2, r3
 800f178:	2300      	movs	r3, #0
 800f17a:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800f17c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f180:	461a      	mov	r2, r3
 800f182:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f186:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f18a:	f003 031f 	and.w	r3, r3, #31
 800f18e:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800f192:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f196:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f19a:	f023 0301 	bic.w	r3, r3, #1
 800f19e:	b2da      	uxtb	r2, r3
 800f1a0:	f107 0118 	add.w	r1, r7, #24
 800f1a4:	3910      	subs	r1, #16
 800f1a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f1aa:	3b18      	subs	r3, #24
 800f1ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7ff fc09 	bl	800e9c8 <find_volume>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f1bc:	f102 0217 	add.w	r2, r2, #23
 800f1c0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800f1c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f1c6:	f103 0317 	add.w	r3, r3, #23
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f040 82bf 	bne.w	800f750 <f_open+0x618>
		INIT_BUF(dj);
 800f1d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	f107 0318 	add.w	r3, r7, #24
 800f1dc:	3b04      	subs	r3, #4
 800f1de:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800f1e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	4bd4      	ldr	r3, [pc, #848]	; (800f53c <f_open+0x404>)
 800f1ea:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800f1ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f1f2:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800f1f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f1fa:	3b18      	subs	r3, #24
 800f1fc:	4611      	mov	r1, r2
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7ff faba 	bl	800e778 <follow_path>
 800f204:	4603      	mov	r3, r0
 800f206:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f20a:	f102 0217 	add.w	r2, r2, #23
 800f20e:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800f210:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f214:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800f218:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f21c:	f102 0210 	add.w	r2, r2, #16
 800f220:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f222:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f226:	f103 0317 	add.w	r3, r3, #23
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d126      	bne.n	800f27e <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800f230:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f234:	f103 0310 	add.w	r3, r3, #16
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d106      	bne.n	800f24c <f_open+0x114>
				res = FR_INVALID_NAME;
 800f23e:	2306      	movs	r3, #6
 800f240:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f244:	f102 0217 	add.w	r2, r2, #23
 800f248:	7013      	strb	r3, [r2, #0]
 800f24a:	e018      	b.n	800f27e <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f24c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f250:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f254:	f023 0301 	bic.w	r3, r3, #1
 800f258:	2b00      	cmp	r3, #0
 800f25a:	bf14      	ite	ne
 800f25c:	2301      	movne	r3, #1
 800f25e:	2300      	moveq	r3, #0
 800f260:	b2db      	uxtb	r3, r3
 800f262:	461a      	mov	r2, r3
 800f264:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f268:	3b18      	subs	r3, #24
 800f26a:	4611      	mov	r1, r2
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7fd fbc3 	bl	800c9f8 <chk_lock>
 800f272:	4603      	mov	r3, r0
 800f274:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f278:	f102 0217 	add.w	r2, r2, #23
 800f27c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f27e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f282:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f286:	f003 031c 	and.w	r3, r3, #28
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f000 813c 	beq.w	800f508 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800f290:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f294:	f103 0317 	add.w	r3, r3, #23
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d02e      	beq.n	800f2fc <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800f29e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f2a2:	f103 0317 	add.w	r3, r3, #23
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	2b04      	cmp	r3, #4
 800f2aa:	d112      	bne.n	800f2d2 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f2ac:	f7fd fc14 	bl	800cad8 <enq_lock>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d007      	beq.n	800f2c6 <f_open+0x18e>
 800f2b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f2ba:	3b18      	subs	r3, #24
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7fe ff79 	bl	800e1b4 <dir_register>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	e000      	b.n	800f2c8 <f_open+0x190>
 800f2c6:	2312      	movs	r3, #18
 800f2c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f2cc:	f102 0217 	add.w	r2, r2, #23
 800f2d0:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f2d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f2dc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f2e0:	f043 0308 	orr.w	r3, r3, #8
 800f2e4:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800f2e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f2ec:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800f2f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f2f4:	f102 0210 	add.w	r2, r2, #16
 800f2f8:	6013      	str	r3, [r2, #0]
 800f2fa:	e01f      	b.n	800f33c <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f2fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f300:	f103 0310 	add.w	r3, r3, #16
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	330b      	adds	r3, #11
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	f003 0311 	and.w	r3, r3, #17
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d006      	beq.n	800f320 <f_open+0x1e8>
					res = FR_DENIED;
 800f312:	2307      	movs	r3, #7
 800f314:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f318:	f102 0217 	add.w	r2, r2, #23
 800f31c:	7013      	strb	r3, [r2, #0]
 800f31e:	e00d      	b.n	800f33c <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800f320:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f324:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f328:	f003 0304 	and.w	r3, r3, #4
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d005      	beq.n	800f33c <f_open+0x204>
						res = FR_EXIST;
 800f330:	2308      	movs	r3, #8
 800f332:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f336:	f102 0217 	add.w	r2, r2, #23
 800f33a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f33c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f340:	f103 0317 	add.w	r3, r3, #23
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	f040 8113 	bne.w	800f572 <f_open+0x43a>
 800f34c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f350:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f354:	f003 0308 	and.w	r3, r3, #8
 800f358:	2b00      	cmp	r3, #0
 800f35a:	f000 810a 	beq.w	800f572 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800f35e:	f7fd f9cf 	bl	800c700 <get_fattime>
 800f362:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f366:	f103 030c 	add.w	r3, r3, #12
 800f36a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800f36c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f370:	f103 0310 	add.w	r3, r3, #16
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	330e      	adds	r3, #14
 800f378:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f37c:	f102 020c 	add.w	r2, r2, #12
 800f380:	6812      	ldr	r2, [r2, #0]
 800f382:	b2d2      	uxtb	r2, r2
 800f384:	701a      	strb	r2, [r3, #0]
 800f386:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f38a:	f103 030c 	add.w	r3, r3, #12
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	b29b      	uxth	r3, r3
 800f392:	0a1b      	lsrs	r3, r3, #8
 800f394:	b29a      	uxth	r2, r3
 800f396:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f39a:	f103 0310 	add.w	r3, r3, #16
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	330f      	adds	r3, #15
 800f3a2:	b2d2      	uxtb	r2, r2
 800f3a4:	701a      	strb	r2, [r3, #0]
 800f3a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f3aa:	f103 030c 	add.w	r3, r3, #12
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	0c1a      	lsrs	r2, r3, #16
 800f3b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f3b6:	f103 0310 	add.w	r3, r3, #16
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	3310      	adds	r3, #16
 800f3be:	b2d2      	uxtb	r2, r2
 800f3c0:	701a      	strb	r2, [r3, #0]
 800f3c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f3c6:	f103 030c 	add.w	r3, r3, #12
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	0e1a      	lsrs	r2, r3, #24
 800f3ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f3d2:	f103 0310 	add.w	r3, r3, #16
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	3311      	adds	r3, #17
 800f3da:	b2d2      	uxtb	r2, r2
 800f3dc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800f3de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f3e2:	f103 0310 	add.w	r3, r3, #16
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	330b      	adds	r3, #11
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800f3ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f3f2:	f103 0310 	add.w	r3, r3, #16
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	331c      	adds	r3, #28
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	701a      	strb	r2, [r3, #0]
 800f3fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f402:	f103 0310 	add.w	r3, r3, #16
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	331d      	adds	r3, #29
 800f40a:	2200      	movs	r2, #0
 800f40c:	701a      	strb	r2, [r3, #0]
 800f40e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f412:	f103 0310 	add.w	r3, r3, #16
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	331e      	adds	r3, #30
 800f41a:	2200      	movs	r2, #0
 800f41c:	701a      	strb	r2, [r3, #0]
 800f41e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f422:	f103 0310 	add.w	r3, r3, #16
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	331f      	adds	r3, #31
 800f42a:	2200      	movs	r2, #0
 800f42c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800f42e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f432:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f436:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f43a:	f102 0210 	add.w	r2, r2, #16
 800f43e:	6811      	ldr	r1, [r2, #0]
 800f440:	4618      	mov	r0, r3
 800f442:	f7fe fc00 	bl	800dc46 <ld_clust>
 800f446:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f44a:	f103 0308 	add.w	r3, r3, #8
 800f44e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800f450:	2100      	movs	r1, #0
 800f452:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f456:	f103 0310 	add.w	r3, r3, #16
 800f45a:	6818      	ldr	r0, [r3, #0]
 800f45c:	f7fe fc22 	bl	800dca4 <st_clust>
				dj.fs->wflag = 1;
 800f460:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f464:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f46c:	2201      	movs	r2, #1
 800f46e:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800f470:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f474:	f103 0308 	add.w	r3, r3, #8
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d079      	beq.n	800f572 <f_open+0x43a>
					dw = dj.fs->winsect;
 800f47e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f482:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f48c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f490:	f102 020c 	add.w	r2, r2, #12
 800f494:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800f496:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f49a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f49e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f4a2:	f102 0208 	add.w	r2, r2, #8
 800f4a6:	6811      	ldr	r1, [r2, #0]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7fe f81c 	bl	800d4e6 <remove_chain>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f4b4:	f102 0217 	add.w	r2, r2, #23
 800f4b8:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800f4ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f4be:	f103 0317 	add.w	r3, r3, #23
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d154      	bne.n	800f572 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800f4c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f4cc:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800f4d0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f4d4:	f103 0308 	add.w	r3, r3, #8
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f4e0:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800f4e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f4e6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f4ea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f4ee:	f102 020c 	add.w	r2, r2, #12
 800f4f2:	6811      	ldr	r1, [r2, #0]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7fd fc91 	bl	800ce1c <move_window>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f500:	f102 0217 	add.w	r2, r2, #23
 800f504:	7013      	strb	r3, [r2, #0]
 800f506:	e034      	b.n	800f572 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800f508:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f50c:	f103 0317 	add.w	r3, r3, #23
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d12d      	bne.n	800f572 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800f516:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f51a:	f103 0310 	add.w	r3, r3, #16
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	330b      	adds	r3, #11
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	f003 0310 	and.w	r3, r3, #16
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d009      	beq.n	800f540 <f_open+0x408>
					res = FR_NO_FILE;
 800f52c:	2304      	movs	r3, #4
 800f52e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f532:	f102 0217 	add.w	r2, r2, #23
 800f536:	7013      	strb	r3, [r2, #0]
 800f538:	e01b      	b.n	800f572 <f_open+0x43a>
 800f53a:	bf00      	nop
 800f53c:	20003020 	.word	0x20003020
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800f540:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f544:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f548:	f003 0302 	and.w	r3, r3, #2
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d010      	beq.n	800f572 <f_open+0x43a>
 800f550:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f554:	f103 0310 	add.w	r3, r3, #16
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	330b      	adds	r3, #11
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	f003 0301 	and.w	r3, r3, #1
 800f562:	2b00      	cmp	r3, #0
 800f564:	d005      	beq.n	800f572 <f_open+0x43a>
						res = FR_DENIED;
 800f566:	2307      	movs	r3, #7
 800f568:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f56c:	f102 0217 	add.w	r2, r2, #23
 800f570:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800f572:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f576:	f103 0317 	add.w	r3, r3, #23
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d157      	bne.n	800f630 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f580:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f584:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f588:	f003 0308 	and.w	r3, r3, #8
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d00a      	beq.n	800f5a6 <f_open+0x46e>
				mode |= FA__WRITTEN;
 800f590:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f594:	461a      	mov	r2, r3
 800f596:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f59a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f59e:	f043 0320 	orr.w	r3, r3, #32
 800f5a2:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800f5a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f5aa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f5b8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800f5bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f5c0:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800f5c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f5c6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f5ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f5d4:	f103 0310 	add.w	r3, r3, #16
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f5dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f5e0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f5e4:	f023 0301 	bic.w	r3, r3, #1
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	bf14      	ite	ne
 800f5ec:	2301      	movne	r3, #1
 800f5ee:	2300      	moveq	r3, #0
 800f5f0:	b2db      	uxtb	r3, r3
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5f8:	3b18      	subs	r3, #24
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fd fa8f 	bl	800cb20 <inc_lock>
 800f602:	4602      	mov	r2, r0
 800f604:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f608:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f610:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800f612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f616:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f61a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f620:	2b00      	cmp	r3, #0
 800f622:	d105      	bne.n	800f630 <f_open+0x4f8>
 800f624:	2302      	movs	r3, #2
 800f626:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f62a:	f102 0217 	add.w	r2, r2, #23
 800f62e:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800f630:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f634:	f103 0317 	add.w	r3, r3, #23
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f040 8088 	bne.w	800f750 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800f640:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f644:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f64c:	461a      	mov	r2, r3
 800f64e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f652:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800f656:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800f658:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f65c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f664:	2200      	movs	r2, #0
 800f666:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800f668:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f66c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f670:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f674:	f102 0210 	add.w	r2, r2, #16
 800f678:	6811      	ldr	r1, [r2, #0]
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fe fae3 	bl	800dc46 <ld_clust>
 800f680:	4602      	mov	r2, r0
 800f682:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f686:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f68a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f68e:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800f690:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f694:	f103 0310 	add.w	r3, r3, #16
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	331f      	adds	r3, #31
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	061a      	lsls	r2, r3, #24
 800f6a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f6a4:	f103 0310 	add.w	r3, r3, #16
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	331e      	adds	r3, #30
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	041b      	lsls	r3, r3, #16
 800f6b0:	4313      	orrs	r3, r2
 800f6b2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f6b6:	f102 0210 	add.w	r2, r2, #16
 800f6ba:	6812      	ldr	r2, [r2, #0]
 800f6bc:	321d      	adds	r2, #29
 800f6be:	7812      	ldrb	r2, [r2, #0]
 800f6c0:	0212      	lsls	r2, r2, #8
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f6c8:	f102 0210 	add.w	r2, r2, #16
 800f6cc:	6812      	ldr	r2, [r2, #0]
 800f6ce:	321c      	adds	r2, #28
 800f6d0:	7812      	ldrb	r2, [r2, #0]
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f6d8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800f6dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f6e0:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800f6e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f6e6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f6ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800f6f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f6f8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f700:	461a      	mov	r2, r3
 800f702:	2300      	movs	r3, #0
 800f704:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800f706:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f70a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f70e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f712:	461a      	mov	r2, r3
 800f714:	2300      	movs	r3, #0
 800f716:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800f718:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f71c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800f720:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f724:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800f728:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f72c:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800f72e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f732:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f740:	88da      	ldrh	r2, [r3, #6]
 800f742:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f746:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f74a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f74e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800f750:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f754:	f103 0317 	add.w	r3, r3, #23
 800f758:	781b      	ldrb	r3, [r3, #0]
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800f760:	3718      	adds	r7, #24
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop

0800f768 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b08a      	sub	sp, #40	; 0x28
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
 800f774:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	2200      	movs	r2, #0
 800f77e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f7ff fc53 	bl	800f02c <validate>
 800f786:	4603      	mov	r3, r0
 800f788:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800f78a:	7dfb      	ldrb	r3, [r7, #23]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d001      	beq.n	800f794 <f_write+0x2c>
 800f790:	7dfb      	ldrb	r3, [r7, #23]
 800f792:	e21e      	b.n	800fbd2 <f_write+0x46a>
	if (fp->err)							/* Check error */
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f79a:	79db      	ldrb	r3, [r3, #7]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d004      	beq.n	800f7aa <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7a6:	79db      	ldrb	r3, [r3, #7]
 800f7a8:	e213      	b.n	800fbd2 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7b0:	799b      	ldrb	r3, [r3, #6]
 800f7b2:	f003 0302 	and.w	r3, r3, #2
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d101      	bne.n	800f7be <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800f7ba:	2307      	movs	r3, #7
 800f7bc:	e209      	b.n	800fbd2 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7c4:	689a      	ldr	r2, [r3, #8]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	441a      	add	r2, r3
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	f080 81d9 	bcs.w	800fb8a <f_write+0x422>
 800f7d8:	2300      	movs	r3, #0
 800f7da:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800f7dc:	e1d5      	b.n	800fb8a <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	68fa      	ldr	r2, [r7, #12]
 800f7e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f7ec:	6812      	ldr	r2, [r2, #0]
 800f7ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f7f2:	8952      	ldrh	r2, [r2, #10]
 800f7f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f7f8:	fb01 f202 	mul.w	r2, r1, r2
 800f7fc:	1a9b      	subs	r3, r3, r2
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f040 8169 	bne.w	800fad6 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f80a:	689b      	ldr	r3, [r3, #8]
 800f80c:	68fa      	ldr	r2, [r7, #12]
 800f80e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f812:	6812      	ldr	r2, [r2, #0]
 800f814:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f818:	8952      	ldrh	r2, [r2, #10]
 800f81a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f81e:	b2da      	uxtb	r2, r3
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f82c:	789b      	ldrb	r3, [r3, #2]
 800f82e:	3b01      	subs	r3, #1
 800f830:	b2db      	uxtb	r3, r3
 800f832:	4013      	ands	r3, r2
 800f834:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800f836:	7dbb      	ldrb	r3, [r7, #22]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d15f      	bne.n	800f8fc <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d111      	bne.n	800f86c <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800f852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f854:	2b00      	cmp	r3, #0
 800f856:	d126      	bne.n	800f8a6 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2100      	movs	r1, #0
 800f862:	4618      	mov	r0, r3
 800f864:	f7fd fea0 	bl	800d5a8 <create_chain>
 800f868:	6278      	str	r0, [r7, #36]	; 0x24
 800f86a:	e01c      	b.n	800f8a6 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f874:	2b00      	cmp	r3, #0
 800f876:	d009      	beq.n	800f88c <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f87e:	689b      	ldr	r3, [r3, #8]
 800f880:	4619      	mov	r1, r3
 800f882:	68f8      	ldr	r0, [r7, #12]
 800f884:	f7fd ff38 	bl	800d6f8 <clmt_clust>
 800f888:	6278      	str	r0, [r7, #36]	; 0x24
 800f88a:	e00c      	b.n	800f8a6 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f89a:	695b      	ldr	r3, [r3, #20]
 800f89c:	4619      	mov	r1, r3
 800f89e:	4610      	mov	r0, r2
 800f8a0:	f7fd fe82 	bl	800d5a8 <create_chain>
 800f8a4:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f000 8173 	beq.w	800fb94 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d106      	bne.n	800f8c2 <f_write+0x15a>
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8ba:	2202      	movs	r2, #2
 800f8bc:	71da      	strb	r2, [r3, #7]
 800f8be:	2302      	movs	r3, #2
 800f8c0:	e187      	b.n	800fbd2 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800f8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8c8:	d106      	bne.n	800f8d8 <f_write+0x170>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	71da      	strb	r2, [r3, #7]
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	e17c      	b.n	800fbd2 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8de:	461a      	mov	r2, r3
 800f8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e2:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8ea:	691b      	ldr	r3, [r3, #16]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d105      	bne.n	800f8fc <f_write+0x194>
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fa:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f902:	799b      	ldrb	r3, [r3, #6]
 800f904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d023      	beq.n	800f954 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f918:	7858      	ldrb	r0, [r3, #1]
 800f91a:	68f9      	ldr	r1, [r7, #12]
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f922:	699a      	ldr	r2, [r3, #24]
 800f924:	2301      	movs	r3, #1
 800f926:	f7fc ffad 	bl	800c884 <disk_write>
 800f92a:	4603      	mov	r3, r0
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d006      	beq.n	800f93e <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f936:	2201      	movs	r2, #1
 800f938:	71da      	strb	r2, [r3, #7]
 800f93a:	2301      	movs	r3, #1
 800f93c:	e149      	b.n	800fbd2 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f944:	799b      	ldrb	r3, [r3, #6]
 800f946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f94a:	b2da      	uxtb	r2, r3
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f952:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f962:	695b      	ldr	r3, [r3, #20]
 800f964:	4619      	mov	r1, r3
 800f966:	4610      	mov	r0, r2
 800f968:	f7fd fb49 	bl	800cffe <clust2sect>
 800f96c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d106      	bne.n	800f982 <f_write+0x21a>
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f97a:	2202      	movs	r2, #2
 800f97c:	71da      	strb	r2, [r3, #7]
 800f97e:	2302      	movs	r3, #2
 800f980:	e127      	b.n	800fbd2 <f_write+0x46a>
			sect += csect;
 800f982:	7dbb      	ldrb	r3, [r7, #22]
 800f984:	693a      	ldr	r2, [r7, #16]
 800f986:	4413      	add	r3, r2
 800f988:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f996:	895b      	ldrh	r3, [r3, #10]
 800f998:	461a      	mov	r2, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9a0:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d069      	beq.n	800fa7c <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800f9a8:	7dba      	ldrb	r2, [r7, #22]
 800f9aa:	69fb      	ldr	r3, [r7, #28]
 800f9ac:	4413      	add	r3, r2
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f9b4:	6812      	ldr	r2, [r2, #0]
 800f9b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f9ba:	7892      	ldrb	r2, [r2, #2]
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d90a      	bls.n	800f9d6 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9cc:	789b      	ldrb	r3, [r3, #2]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	7dbb      	ldrb	r3, [r7, #22]
 800f9d2:	1ad3      	subs	r3, r2, r3
 800f9d4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9e2:	7858      	ldrb	r0, [r3, #1]
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	693a      	ldr	r2, [r7, #16]
 800f9e8:	69b9      	ldr	r1, [r7, #24]
 800f9ea:	f7fc ff4b 	bl	800c884 <disk_write>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d006      	beq.n	800fa02 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	71da      	strb	r2, [r3, #7]
 800f9fe:	2301      	movs	r3, #1
 800fa00:	e0e7      	b.n	800fbd2 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa08:	699a      	ldr	r2, [r3, #24]
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	1ad3      	subs	r3, r2, r3
 800fa0e:	69fa      	ldr	r2, [r7, #28]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d926      	bls.n	800fa62 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa1c:	699a      	ldr	r2, [r3, #24]
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	1ad3      	subs	r3, r2, r3
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa28:	6812      	ldr	r2, [r2, #0]
 800fa2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa2e:	8952      	ldrh	r2, [r2, #10]
 800fa30:	fb02 f303 	mul.w	r3, r2, r3
 800fa34:	69ba      	ldr	r2, [r7, #24]
 800fa36:	18d1      	adds	r1, r2, r3
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa44:	895b      	ldrh	r3, [r3, #10]
 800fa46:	461a      	mov	r2, r3
 800fa48:	f7fc ff5a 	bl	800c900 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa52:	799b      	ldrb	r3, [r3, #6]
 800fa54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa58:	b2da      	uxtb	r2, r3
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa60:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa6e:	895b      	ldrh	r3, [r3, #10]
 800fa70:	461a      	mov	r2, r3
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	fb02 f303 	mul.w	r3, r2, r3
 800fa78:	623b      	str	r3, [r7, #32]
				continue;
 800fa7a:	e06e      	b.n	800fb5a <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa82:	699b      	ldr	r3, [r3, #24]
 800fa84:	693a      	ldr	r2, [r7, #16]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d01f      	beq.n	800faca <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa90:	689a      	ldr	r2, [r3, #8]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d215      	bcs.n	800faca <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faaa:	7858      	ldrb	r0, [r3, #1]
 800faac:	68f9      	ldr	r1, [r7, #12]
 800faae:	2301      	movs	r3, #1
 800fab0:	693a      	ldr	r2, [r7, #16]
 800fab2:	f7fc fec7 	bl	800c844 <disk_read>
 800fab6:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d006      	beq.n	800faca <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fac2:	2201      	movs	r2, #1
 800fac4:	71da      	strb	r2, [r3, #7]
 800fac6:	2301      	movs	r3, #1
 800fac8:	e083      	b.n	800fbd2 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fad0:	461a      	mov	r2, r3
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fae2:	895b      	ldrh	r3, [r3, #10]
 800fae4:	4618      	mov	r0, r3
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	68fa      	ldr	r2, [r7, #12]
 800faf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800faf4:	6812      	ldr	r2, [r2, #0]
 800faf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fafa:	8952      	ldrh	r2, [r2, #10]
 800fafc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb00:	fb01 f202 	mul.w	r2, r1, r2
 800fb04:	1a9b      	subs	r3, r3, r2
 800fb06:	1ac3      	subs	r3, r0, r3
 800fb08:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800fb0a:	6a3a      	ldr	r2, [r7, #32]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d901      	bls.n	800fb16 <f_write+0x3ae>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fb24:	6812      	ldr	r2, [r2, #0]
 800fb26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fb2a:	8952      	ldrh	r2, [r2, #10]
 800fb2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb30:	fb01 f202 	mul.w	r2, r1, r2
 800fb34:	1a9b      	subs	r3, r3, r2
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	4413      	add	r3, r2
 800fb3a:	6a3a      	ldr	r2, [r7, #32]
 800fb3c:	69b9      	ldr	r1, [r7, #24]
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fc fede 	bl	800c900 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb4a:	799b      	ldrb	r3, [r3, #6]
 800fb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb50:	b2da      	uxtb	r2, r3
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb58:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800fb5a:	69ba      	ldr	r2, [r7, #24]
 800fb5c:	6a3b      	ldr	r3, [r7, #32]
 800fb5e:	4413      	add	r3, r2
 800fb60:	61bb      	str	r3, [r7, #24]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb68:	689a      	ldr	r2, [r3, #8]
 800fb6a:	6a3b      	ldr	r3, [r7, #32]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fb74:	6093      	str	r3, [r2, #8]
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	6a3b      	ldr	r3, [r7, #32]
 800fb7c:	441a      	add	r2, r3
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	601a      	str	r2, [r3, #0]
 800fb82:	687a      	ldr	r2, [r7, #4]
 800fb84:	6a3b      	ldr	r3, [r7, #32]
 800fb86:	1ad3      	subs	r3, r2, r3
 800fb88:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f47f ae26 	bne.w	800f7de <f_write+0x76>
 800fb92:	e000      	b.n	800fb96 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fb94:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb9c:	689a      	ldr	r2, [r3, #8]
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d907      	bls.n	800fbba <f_write+0x452>
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbb0:	689b      	ldr	r3, [r3, #8]
 800fbb2:	68fa      	ldr	r2, [r7, #12]
 800fbb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fbb8:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbc0:	799b      	ldrb	r3, [r3, #6]
 800fbc2:	f043 0320 	orr.w	r3, r3, #32
 800fbc6:	b2da      	uxtb	r2, r3
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbce:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800fbd0:	2300      	movs	r3, #0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3728      	adds	r7, #40	; 0x28
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b086      	sub	sp, #24
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f7ff fa22 	bl	800f02c <validate>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fbec:	7dfb      	ldrb	r3, [r7, #23]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	f040 80bc 	bne.w	800fd6c <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbfa:	799b      	ldrb	r3, [r3, #6]
 800fbfc:	f003 0320 	and.w	r3, r3, #32
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f000 80b3 	beq.w	800fd6c <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc0c:	799b      	ldrb	r3, [r3, #6]
 800fc0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d01e      	beq.n	800fc54 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc22:	7858      	ldrb	r0, [r3, #1]
 800fc24:	6879      	ldr	r1, [r7, #4]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc2c:	699a      	ldr	r2, [r3, #24]
 800fc2e:	2301      	movs	r3, #1
 800fc30:	f7fc fe28 	bl	800c884 <disk_write>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d001      	beq.n	800fc3e <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e097      	b.n	800fd6e <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc44:	799b      	ldrb	r3, [r3, #6]
 800fc46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc4a:	b2da      	uxtb	r2, r3
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc52:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc62:	69db      	ldr	r3, [r3, #28]
 800fc64:	4619      	mov	r1, r3
 800fc66:	4610      	mov	r0, r2
 800fc68:	f7fd f8d8 	bl	800ce1c <move_window>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800fc70:	7dfb      	ldrb	r3, [r7, #23]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d17a      	bne.n	800fd6c <f_sync+0x192>
				dir = fp->dir_ptr;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc7c:	6a1b      	ldr	r3, [r3, #32]
 800fc7e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	330b      	adds	r3, #11
 800fc84:	781a      	ldrb	r2, [r3, #0]
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	330b      	adds	r3, #11
 800fc8a:	f042 0220 	orr.w	r2, r2, #32
 800fc8e:	b2d2      	uxtb	r2, r2
 800fc90:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc98:	68da      	ldr	r2, [r3, #12]
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	331c      	adds	r3, #28
 800fc9e:	b2d2      	uxtb	r2, r2
 800fca0:	701a      	strb	r2, [r3, #0]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fca8:	68db      	ldr	r3, [r3, #12]
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	0a1b      	lsrs	r3, r3, #8
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	331d      	adds	r3, #29
 800fcb4:	b2d2      	uxtb	r2, r2
 800fcb6:	701a      	strb	r2, [r3, #0]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	0c1a      	lsrs	r2, r3, #16
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	331e      	adds	r3, #30
 800fcc6:	b2d2      	uxtb	r2, r2
 800fcc8:	701a      	strb	r2, [r3, #0]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcd0:	68db      	ldr	r3, [r3, #12]
 800fcd2:	0e1a      	lsrs	r2, r3, #24
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	331f      	adds	r3, #31
 800fcd8:	b2d2      	uxtb	r2, r2
 800fcda:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fce2:	691b      	ldr	r3, [r3, #16]
 800fce4:	4619      	mov	r1, r3
 800fce6:	6938      	ldr	r0, [r7, #16]
 800fce8:	f7fd ffdc 	bl	800dca4 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800fcec:	f7fc fd08 	bl	800c700 <get_fattime>
 800fcf0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	3316      	adds	r3, #22
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	b2d2      	uxtb	r2, r2
 800fcfa:	701a      	strb	r2, [r3, #0]
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	0a1b      	lsrs	r3, r3, #8
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	3317      	adds	r3, #23
 800fd08:	b2d2      	uxtb	r2, r2
 800fd0a:	701a      	strb	r2, [r3, #0]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	0c1a      	lsrs	r2, r3, #16
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	3318      	adds	r3, #24
 800fd14:	b2d2      	uxtb	r2, r2
 800fd16:	701a      	strb	r2, [r3, #0]
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	0e1a      	lsrs	r2, r3, #24
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	3319      	adds	r3, #25
 800fd20:	b2d2      	uxtb	r2, r2
 800fd22:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	3312      	adds	r3, #18
 800fd28:	2200      	movs	r2, #0
 800fd2a:	701a      	strb	r2, [r3, #0]
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	3313      	adds	r3, #19
 800fd30:	2200      	movs	r2, #0
 800fd32:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd3a:	799b      	ldrb	r3, [r3, #6]
 800fd3c:	f023 0320 	bic.w	r3, r3, #32
 800fd40:	b2da      	uxtb	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd48:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd56:	2201      	movs	r2, #1
 800fd58:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fd f88c 	bl	800ce80 <sync_fs>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800fd6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3718      	adds	r7, #24
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b084      	sub	sp, #16
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f7ff ff2b 	bl	800fbda <f_sync>
 800fd84:	4603      	mov	r3, r0
 800fd86:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fd88:	7bfb      	ldrb	r3, [r7, #15]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d119      	bne.n	800fdc2 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f7ff f94c 	bl	800f02c <validate>
 800fd94:	4603      	mov	r3, r0
 800fd96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fd98:	7bfb      	ldrb	r3, [r7, #15]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d111      	bne.n	800fdc2 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fda4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7fc ff78 	bl	800cc9c <dec_lock>
 800fdac:	4603      	mov	r3, r0
 800fdae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fdb0:	7bfb      	ldrb	r3, [r7, #15]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d105      	bne.n	800fdc2 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdbc:	461a      	mov	r2, r3
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fdc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3710      	adds	r7, #16
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}

0800fdcc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b090      	sub	sp, #64	; 0x40
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f7ff f928 	bl	800f02c <validate>
 800fddc:	4603      	mov	r3, r0
 800fdde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800fde2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d002      	beq.n	800fdf0 <f_lseek+0x24>
 800fdea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fdee:	e2da      	b.n	80103a6 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdf6:	79db      	ldrb	r3, [r3, #7]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d004      	beq.n	800fe06 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe02:	79db      	ldrb	r3, [r3, #7]
 800fe04:	e2cf      	b.n	80103a6 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	f000 8124 	beq.w	801005c <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe1a:	d16c      	bne.n	800fef6 <f_lseek+0x12a>
			tbl = fp->cltbl;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe24:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fe26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe28:	1d1a      	adds	r2, r3, #4
 800fe2a:	627a      	str	r2, [r7, #36]	; 0x24
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	617b      	str	r3, [r7, #20]
 800fe30:	2302      	movs	r3, #2
 800fe32:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe3a:	691b      	ldr	r3, [r3, #16]
 800fe3c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800fe3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d046      	beq.n	800fed2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fe44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe46:	613b      	str	r3, [r7, #16]
 800fe48:	2300      	movs	r3, #0
 800fe4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4e:	3302      	adds	r3, #2
 800fe50:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800fe52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe54:	60fb      	str	r3, [r7, #12]
 800fe56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe58:	3301      	adds	r3, #1
 800fe5a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7fd f8ee 	bl	800d048 <get_fat>
 800fe6c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800fe6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d806      	bhi.n	800fe82 <f_lseek+0xb6>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe7a:	2202      	movs	r2, #2
 800fe7c:	71da      	strb	r2, [r3, #7]
 800fe7e:	2302      	movs	r3, #2
 800fe80:	e291      	b.n	80103a6 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800fe82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe88:	d106      	bne.n	800fe98 <f_lseek+0xcc>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe90:	2201      	movs	r2, #1
 800fe92:	71da      	strb	r2, [r3, #7]
 800fe94:	2301      	movs	r3, #1
 800fe96:	e286      	b.n	80103a6 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d0d7      	beq.n	800fe52 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d809      	bhi.n	800febe <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800feaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feac:	1d1a      	adds	r2, r3, #4
 800feae:	627a      	str	r2, [r7, #36]	; 0x24
 800feb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800feb2:	601a      	str	r2, [r3, #0]
 800feb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb6:	1d1a      	adds	r2, r3, #4
 800feb8:	627a      	str	r2, [r7, #36]	; 0x24
 800feba:	693a      	ldr	r2, [r7, #16]
 800febc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800feca:	695b      	ldr	r3, [r3, #20]
 800fecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fece:	429a      	cmp	r2, r3
 800fed0:	d3b8      	bcc.n	800fe44 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fedc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800fede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d803      	bhi.n	800feee <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800fee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee8:	2200      	movs	r2, #0
 800feea:	601a      	str	r2, [r3, #0]
 800feec:	e259      	b.n	80103a2 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800feee:	2311      	movs	r3, #17
 800fef0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fef4:	e255      	b.n	80103a2 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d904      	bls.n	800ff0e <f_lseek+0x142>
				ofs = fp->fsize;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff14:	461a      	mov	r2, r3
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f000 8240 	beq.w	80103a2 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	3b01      	subs	r3, #1
 800ff26:	4619      	mov	r1, r3
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f7fd fbe5 	bl	800d6f8 <clmt_clust>
 800ff2e:	4602      	mov	r2, r0
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff36:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff46:	695b      	ldr	r3, [r3, #20]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	4610      	mov	r0, r2
 800ff4c:	f7fd f857 	bl	800cffe <clust2sect>
 800ff50:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d106      	bne.n	800ff66 <f_lseek+0x19a>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff5e:	2202      	movs	r2, #2
 800ff60:	71da      	strb	r2, [r3, #7]
 800ff62:	2302      	movs	r3, #2
 800ff64:	e21f      	b.n	80103a6 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	3b01      	subs	r3, #1
 800ff6a:	687a      	ldr	r2, [r7, #4]
 800ff6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ff70:	6812      	ldr	r2, [r2, #0]
 800ff72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ff76:	8952      	ldrh	r2, [r2, #10]
 800ff78:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ff82:	6812      	ldr	r2, [r2, #0]
 800ff84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ff88:	7892      	ldrb	r2, [r2, #2]
 800ff8a:	3a01      	subs	r2, #1
 800ff8c:	4013      	ands	r3, r2
 800ff8e:	69ba      	ldr	r2, [r7, #24]
 800ff90:	4413      	add	r3, r2
 800ff92:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff9a:	689b      	ldr	r3, [r3, #8]
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ffa2:	6812      	ldr	r2, [r2, #0]
 800ffa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ffa8:	8952      	ldrh	r2, [r2, #10]
 800ffaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffae:	fb01 f202 	mul.w	r2, r1, r2
 800ffb2:	1a9b      	subs	r3, r3, r2
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	f000 81f4 	beq.w	80103a2 <f_lseek+0x5d6>
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffc0:	699b      	ldr	r3, [r3, #24]
 800ffc2:	69ba      	ldr	r2, [r7, #24]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	f000 81ec 	beq.w	80103a2 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffd0:	799b      	ldrb	r3, [r3, #6]
 800ffd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d023      	beq.n	8010022 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffe6:	7858      	ldrb	r0, [r3, #1]
 800ffe8:	6879      	ldr	r1, [r7, #4]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fff0:	699a      	ldr	r2, [r3, #24]
 800fff2:	2301      	movs	r3, #1
 800fff4:	f7fc fc46 	bl	800c884 <disk_write>
 800fff8:	4603      	mov	r3, r0
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d006      	beq.n	801000c <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010004:	2201      	movs	r2, #1
 8010006:	71da      	strb	r2, [r3, #7]
 8010008:	2301      	movs	r3, #1
 801000a:	e1cc      	b.n	80103a6 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010012:	799b      	ldrb	r3, [r3, #6]
 8010014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010018:	b2da      	uxtb	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010020:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801002e:	7858      	ldrb	r0, [r3, #1]
 8010030:	6879      	ldr	r1, [r7, #4]
 8010032:	2301      	movs	r3, #1
 8010034:	69ba      	ldr	r2, [r7, #24]
 8010036:	f7fc fc05 	bl	800c844 <disk_read>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d006      	beq.n	801004e <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010046:	2201      	movs	r2, #1
 8010048:	71da      	strb	r2, [r3, #7]
 801004a:	2301      	movs	r3, #1
 801004c:	e1ab      	b.n	80103a6 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010054:	461a      	mov	r2, r3
 8010056:	69bb      	ldr	r3, [r7, #24]
 8010058:	6193      	str	r3, [r2, #24]
 801005a:	e1a2      	b.n	80103a2 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	683a      	ldr	r2, [r7, #0]
 8010066:	429a      	cmp	r2, r3
 8010068:	d90c      	bls.n	8010084 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010070:	799b      	ldrb	r3, [r3, #6]
 8010072:	f003 0302 	and.w	r3, r3, #2
 8010076:	2b00      	cmp	r3, #0
 8010078:	d104      	bne.n	8010084 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801008a:	689b      	ldr	r3, [r3, #8]
 801008c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801008e:	2300      	movs	r3, #0
 8010090:	637b      	str	r3, [r7, #52]	; 0x34
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010098:	461a      	mov	r2, r3
 801009a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801009c:	6093      	str	r3, [r2, #8]
		if (ofs) {
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	f000 8100 	beq.w	80102a6 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100b2:	789b      	ldrb	r3, [r3, #2]
 80100b4:	461a      	mov	r2, r3
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100c2:	895b      	ldrh	r3, [r3, #10]
 80100c4:	fb02 f303 	mul.w	r3, r2, r3
 80100c8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80100ca:	6a3b      	ldr	r3, [r7, #32]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d021      	beq.n	8010114 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	1e5a      	subs	r2, r3, #1
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80100da:	6a3b      	ldr	r3, [r7, #32]
 80100dc:	1e59      	subs	r1, r3, #1
 80100de:	69fb      	ldr	r3, [r7, #28]
 80100e0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d315      	bcc.n	8010114 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80100e8:	6a3b      	ldr	r3, [r7, #32]
 80100ea:	1e5a      	subs	r2, r3, #1
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	425b      	negs	r3, r3
 80100f0:	4013      	ands	r3, r2
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80100f8:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	683a      	ldr	r2, [r7, #0]
 8010104:	1ad3      	subs	r3, r2, r3
 8010106:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801010e:	695b      	ldr	r3, [r3, #20]
 8010110:	63bb      	str	r3, [r7, #56]	; 0x38
 8010112:	e031      	b.n	8010178 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801011a:	691b      	ldr	r3, [r3, #16]
 801011c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	2b00      	cmp	r3, #0
 8010122:	d123      	bne.n	801016c <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	2100      	movs	r1, #0
 801012e:	4618      	mov	r0, r3
 8010130:	f7fd fa3a 	bl	800d5a8 <create_chain>
 8010134:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8010136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010138:	2b01      	cmp	r3, #1
 801013a:	d106      	bne.n	801014a <f_lseek+0x37e>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010142:	2202      	movs	r2, #2
 8010144:	71da      	strb	r2, [r3, #7]
 8010146:	2302      	movs	r3, #2
 8010148:	e12d      	b.n	80103a6 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801014a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010150:	d106      	bne.n	8010160 <f_lseek+0x394>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010158:	2201      	movs	r2, #1
 801015a:	71da      	strb	r2, [r3, #7]
 801015c:	2301      	movs	r3, #1
 801015e:	e122      	b.n	80103a6 <f_lseek+0x5da>
					fp->sclust = clst;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010166:	461a      	mov	r2, r3
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010172:	461a      	mov	r2, r3
 8010174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010176:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8010178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017a:	2b00      	cmp	r3, #0
 801017c:	f000 8093 	beq.w	80102a6 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8010180:	e052      	b.n	8010228 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010188:	799b      	ldrb	r3, [r3, #6]
 801018a:	f003 0302 	and.w	r3, r3, #2
 801018e:	2b00      	cmp	r3, #0
 8010190:	d00e      	beq.n	80101b0 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801019c:	4618      	mov	r0, r3
 801019e:	f7fd fa03 	bl	800d5a8 <create_chain>
 80101a2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80101a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d10b      	bne.n	80101c2 <f_lseek+0x3f6>
							ofs = bcs; break;
 80101aa:	69fb      	ldr	r3, [r7, #28]
 80101ac:	603b      	str	r3, [r7, #0]
 80101ae:	e03f      	b.n	8010230 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fc ff44 	bl	800d048 <get_fat>
 80101c0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80101c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101c8:	d106      	bne.n	80101d8 <f_lseek+0x40c>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101d0:	2201      	movs	r2, #1
 80101d2:	71da      	strb	r2, [r3, #7]
 80101d4:	2301      	movs	r3, #1
 80101d6:	e0e6      	b.n	80103a6 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80101d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101da:	2b01      	cmp	r3, #1
 80101dc:	d909      	bls.n	80101f2 <f_lseek+0x426>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101ea:	695b      	ldr	r3, [r3, #20]
 80101ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d306      	bcc.n	8010200 <f_lseek+0x434>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101f8:	2202      	movs	r2, #2
 80101fa:	71da      	strb	r2, [r3, #7]
 80101fc:	2302      	movs	r3, #2
 80101fe:	e0d2      	b.n	80103a6 <f_lseek+0x5da>
					fp->clust = clst;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010206:	461a      	mov	r2, r3
 8010208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020a:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010212:	689a      	ldr	r2, [r3, #8]
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	4413      	add	r3, r2
 8010218:	687a      	ldr	r2, [r7, #4]
 801021a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801021e:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8010220:	683a      	ldr	r2, [r7, #0]
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	1ad3      	subs	r3, r2, r3
 8010226:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8010228:	683a      	ldr	r2, [r7, #0]
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	429a      	cmp	r2, r3
 801022e:	d8a8      	bhi.n	8010182 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010236:	689a      	ldr	r2, [r3, #8]
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	4413      	add	r3, r2
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010242:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010250:	895b      	ldrh	r3, [r3, #10]
 8010252:	461a      	mov	r2, r3
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	fbb3 f1f2 	udiv	r1, r3, r2
 801025a:	fb01 f202 	mul.w	r2, r1, r2
 801025e:	1a9b      	subs	r3, r3, r2
 8010260:	2b00      	cmp	r3, #0
 8010262:	d020      	beq.n	80102a6 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801026e:	4618      	mov	r0, r3
 8010270:	f7fc fec5 	bl	800cffe <clust2sect>
 8010274:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8010276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010278:	2b00      	cmp	r3, #0
 801027a:	d106      	bne.n	801028a <f_lseek+0x4be>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010282:	2202      	movs	r2, #2
 8010284:	71da      	strb	r2, [r3, #7]
 8010286:	2302      	movs	r3, #2
 8010288:	e08d      	b.n	80103a6 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010296:	895b      	ldrh	r3, [r3, #10]
 8010298:	461a      	mov	r2, r3
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	fbb3 f3f2 	udiv	r3, r3, r2
 80102a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102a2:	4413      	add	r3, r2
 80102a4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102ac:	689b      	ldr	r3, [r3, #8]
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80102b4:	6812      	ldr	r2, [r2, #0]
 80102b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80102ba:	8952      	ldrh	r2, [r2, #10]
 80102bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80102c0:	fb01 f202 	mul.w	r2, r1, r2
 80102c4:	1a9b      	subs	r3, r3, r2
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d04e      	beq.n	8010368 <f_lseek+0x59c>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102d0:	699b      	ldr	r3, [r3, #24]
 80102d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d047      	beq.n	8010368 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102de:	799b      	ldrb	r3, [r3, #6]
 80102e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d023      	beq.n	8010330 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102f4:	7858      	ldrb	r0, [r3, #1]
 80102f6:	6879      	ldr	r1, [r7, #4]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102fe:	699a      	ldr	r2, [r3, #24]
 8010300:	2301      	movs	r3, #1
 8010302:	f7fc fabf 	bl	800c884 <disk_write>
 8010306:	4603      	mov	r3, r0
 8010308:	2b00      	cmp	r3, #0
 801030a:	d006      	beq.n	801031a <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010312:	2201      	movs	r2, #1
 8010314:	71da      	strb	r2, [r3, #7]
 8010316:	2301      	movs	r3, #1
 8010318:	e045      	b.n	80103a6 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010320:	799b      	ldrb	r3, [r3, #6]
 8010322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010326:	b2da      	uxtb	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801032e:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801033c:	7858      	ldrb	r0, [r3, #1]
 801033e:	6879      	ldr	r1, [r7, #4]
 8010340:	2301      	movs	r3, #1
 8010342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010344:	f7fc fa7e 	bl	800c844 <disk_read>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d006      	beq.n	801035c <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010354:	2201      	movs	r2, #1
 8010356:	71da      	strb	r2, [r3, #7]
 8010358:	2301      	movs	r3, #1
 801035a:	e024      	b.n	80103a6 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010362:	461a      	mov	r2, r3
 8010364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010366:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801036e:	689a      	ldr	r2, [r3, #8]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	429a      	cmp	r2, r3
 801037a:	d912      	bls.n	80103a2 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801038a:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010392:	799b      	ldrb	r3, [r3, #6]
 8010394:	f043 0320 	orr.w	r3, r3, #32
 8010398:	b2da      	uxtb	r2, r3
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103a0:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80103a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3740      	adds	r7, #64	; 0x40
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}

080103ae <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80103ae:	b580      	push	{r7, lr}
 80103b0:	b084      	sub	sp, #16
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	6078      	str	r0, [r7, #4]
 80103b6:	460b      	mov	r3, r1
 80103b8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80103ba:	78fb      	ldrb	r3, [r7, #3]
 80103bc:	2b0a      	cmp	r3, #10
 80103be:	d103      	bne.n	80103c8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80103c0:	210d      	movs	r1, #13
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f7ff fff3 	bl	80103ae <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	db25      	blt.n	8010420 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	1c5a      	adds	r2, r3, #1
 80103d8:	60fa      	str	r2, [r7, #12]
 80103da:	687a      	ldr	r2, [r7, #4]
 80103dc:	4413      	add	r3, r2
 80103de:	78fa      	ldrb	r2, [r7, #3]
 80103e0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2b3c      	cmp	r3, #60	; 0x3c
 80103e6:	dd12      	ble.n	801040e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6818      	ldr	r0, [r3, #0]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f103 010c 	add.w	r1, r3, #12
 80103f2:	68fa      	ldr	r2, [r7, #12]
 80103f4:	f107 0308 	add.w	r3, r7, #8
 80103f8:	f7ff f9b6 	bl	800f768 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80103fc:	68ba      	ldr	r2, [r7, #8]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	429a      	cmp	r2, r3
 8010402:	d101      	bne.n	8010408 <putc_bfd+0x5a>
 8010404:	2300      	movs	r3, #0
 8010406:	e001      	b.n	801040c <putc_bfd+0x5e>
 8010408:	f04f 33ff 	mov.w	r3, #4294967295
 801040c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	68fa      	ldr	r2, [r7, #12]
 8010412:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	689b      	ldr	r3, [r3, #8]
 8010418:	1c5a      	adds	r2, r3, #1
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	609a      	str	r2, [r3, #8]
 801041e:	e000      	b.n	8010422 <putc_bfd+0x74>
	if (i < 0) return;
 8010420:	bf00      	nop
}
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8010428:	b590      	push	{r4, r7, lr}
 801042a:	b097      	sub	sp, #92	; 0x5c
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8010436:	2300      	movs	r3, #0
 8010438:	613b      	str	r3, [r7, #16]
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 801043e:	e009      	b.n	8010454 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	1c5a      	adds	r2, r3, #1
 8010444:	607a      	str	r2, [r7, #4]
 8010446:	781a      	ldrb	r2, [r3, #0]
 8010448:	f107 030c 	add.w	r3, r7, #12
 801044c:	4611      	mov	r1, r2
 801044e:	4618      	mov	r0, r3
 8010450:	f7ff ffad 	bl	80103ae <putc_bfd>
	while (*str)			/* Put the string */
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d1f1      	bne.n	8010440 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	2b00      	cmp	r3, #0
 8010460:	db15      	blt.n	801048e <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8010462:	68f8      	ldr	r0, [r7, #12]
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	461c      	mov	r4, r3
 8010468:	f107 0208 	add.w	r2, r7, #8
 801046c:	f107 030c 	add.w	r3, r7, #12
 8010470:	f103 010c 	add.w	r1, r3, #12
 8010474:	4613      	mov	r3, r2
 8010476:	4622      	mov	r2, r4
 8010478:	f7ff f976 	bl	800f768 <f_write>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d105      	bne.n	801048e <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	4293      	cmp	r3, r2
 8010488:	d101      	bne.n	801048e <f_puts+0x66>
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	e001      	b.n	8010492 <f_puts+0x6a>
	return EOF;
 801048e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010492:	4618      	mov	r0, r3
 8010494:	375c      	adds	r7, #92	; 0x5c
 8010496:	46bd      	mov	sp, r7
 8010498:	bd90      	pop	{r4, r7, pc}
	...

0801049c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801049c:	b480      	push	{r7}
 801049e:	b087      	sub	sp, #28
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	60b9      	str	r1, [r7, #8]
 80104a6:	4613      	mov	r3, r2
 80104a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80104aa:	2301      	movs	r3, #1
 80104ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80104ae:	2300      	movs	r3, #0
 80104b0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80104b2:	4b1f      	ldr	r3, [pc, #124]	; (8010530 <FATFS_LinkDriverEx+0x94>)
 80104b4:	7a5b      	ldrb	r3, [r3, #9]
 80104b6:	b2db      	uxtb	r3, r3
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d831      	bhi.n	8010520 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80104bc:	4b1c      	ldr	r3, [pc, #112]	; (8010530 <FATFS_LinkDriverEx+0x94>)
 80104be:	7a5b      	ldrb	r3, [r3, #9]
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	461a      	mov	r2, r3
 80104c4:	4b1a      	ldr	r3, [pc, #104]	; (8010530 <FATFS_LinkDriverEx+0x94>)
 80104c6:	2100      	movs	r1, #0
 80104c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80104ca:	4b19      	ldr	r3, [pc, #100]	; (8010530 <FATFS_LinkDriverEx+0x94>)
 80104cc:	7a5b      	ldrb	r3, [r3, #9]
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	4a17      	ldr	r2, [pc, #92]	; (8010530 <FATFS_LinkDriverEx+0x94>)
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	4413      	add	r3, r2
 80104d6:	68fa      	ldr	r2, [r7, #12]
 80104d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80104da:	4b15      	ldr	r3, [pc, #84]	; (8010530 <FATFS_LinkDriverEx+0x94>)
 80104dc:	7a5b      	ldrb	r3, [r3, #9]
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	461a      	mov	r2, r3
 80104e2:	4b13      	ldr	r3, [pc, #76]	; (8010530 <FATFS_LinkDriverEx+0x94>)
 80104e4:	4413      	add	r3, r2
 80104e6:	79fa      	ldrb	r2, [r7, #7]
 80104e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80104ea:	4b11      	ldr	r3, [pc, #68]	; (8010530 <FATFS_LinkDriverEx+0x94>)
 80104ec:	7a5b      	ldrb	r3, [r3, #9]
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	1c5a      	adds	r2, r3, #1
 80104f2:	b2d1      	uxtb	r1, r2
 80104f4:	4a0e      	ldr	r2, [pc, #56]	; (8010530 <FATFS_LinkDriverEx+0x94>)
 80104f6:	7251      	strb	r1, [r2, #9]
 80104f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80104fa:	7dbb      	ldrb	r3, [r7, #22]
 80104fc:	3330      	adds	r3, #48	; 0x30
 80104fe:	b2da      	uxtb	r2, r3
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	3301      	adds	r3, #1
 8010508:	223a      	movs	r2, #58	; 0x3a
 801050a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	3302      	adds	r3, #2
 8010510:	222f      	movs	r2, #47	; 0x2f
 8010512:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	3303      	adds	r3, #3
 8010518:	2200      	movs	r2, #0
 801051a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801051c:	2300      	movs	r3, #0
 801051e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8010520:	7dfb      	ldrb	r3, [r7, #23]
}
 8010522:	4618      	mov	r0, r3
 8010524:	371c      	adds	r7, #28
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop
 8010530:	20003220 	.word	0x20003220

08010534 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801053e:	2200      	movs	r2, #0
 8010540:	6839      	ldr	r1, [r7, #0]
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f7ff ffaa 	bl	801049c <FATFS_LinkDriverEx>
 8010548:	4603      	mov	r3, r0
}
 801054a:	4618      	mov	r0, r3
 801054c:	3708      	adds	r7, #8
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
	...

08010554 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8010554:	b480      	push	{r7}
 8010556:	b085      	sub	sp, #20
 8010558:	af00      	add	r7, sp, #0
 801055a:	4603      	mov	r3, r0
 801055c:	6039      	str	r1, [r7, #0]
 801055e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010560:	88fb      	ldrh	r3, [r7, #6]
 8010562:	2b7f      	cmp	r3, #127	; 0x7f
 8010564:	d802      	bhi.n	801056c <ff_convert+0x18>
		c = chr;
 8010566:	88fb      	ldrh	r3, [r7, #6]
 8010568:	81fb      	strh	r3, [r7, #14]
 801056a:	e025      	b.n	80105b8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d00b      	beq.n	801058a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010572:	88fb      	ldrh	r3, [r7, #6]
 8010574:	2bff      	cmp	r3, #255	; 0xff
 8010576:	d805      	bhi.n	8010584 <ff_convert+0x30>
 8010578:	88fb      	ldrh	r3, [r7, #6]
 801057a:	3b80      	subs	r3, #128	; 0x80
 801057c:	4a12      	ldr	r2, [pc, #72]	; (80105c8 <ff_convert+0x74>)
 801057e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010582:	e000      	b.n	8010586 <ff_convert+0x32>
 8010584:	2300      	movs	r3, #0
 8010586:	81fb      	strh	r3, [r7, #14]
 8010588:	e016      	b.n	80105b8 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 801058a:	2300      	movs	r3, #0
 801058c:	81fb      	strh	r3, [r7, #14]
 801058e:	e009      	b.n	80105a4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010590:	89fb      	ldrh	r3, [r7, #14]
 8010592:	4a0d      	ldr	r2, [pc, #52]	; (80105c8 <ff_convert+0x74>)
 8010594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010598:	88fa      	ldrh	r2, [r7, #6]
 801059a:	429a      	cmp	r2, r3
 801059c:	d006      	beq.n	80105ac <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801059e:	89fb      	ldrh	r3, [r7, #14]
 80105a0:	3301      	adds	r3, #1
 80105a2:	81fb      	strh	r3, [r7, #14]
 80105a4:	89fb      	ldrh	r3, [r7, #14]
 80105a6:	2b7f      	cmp	r3, #127	; 0x7f
 80105a8:	d9f2      	bls.n	8010590 <ff_convert+0x3c>
 80105aa:	e000      	b.n	80105ae <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80105ac:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80105ae:	89fb      	ldrh	r3, [r7, #14]
 80105b0:	3380      	adds	r3, #128	; 0x80
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80105b8:	89fb      	ldrh	r3, [r7, #14]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3714      	adds	r7, #20
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	08013ef4 	.word	0x08013ef4

080105cc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b085      	sub	sp, #20
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	4603      	mov	r3, r0
 80105d4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80105d6:	2300      	movs	r3, #0
 80105d8:	60fb      	str	r3, [r7, #12]
 80105da:	e002      	b.n	80105e2 <ff_wtoupper+0x16>
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	3301      	adds	r3, #1
 80105e0:	60fb      	str	r3, [r7, #12]
 80105e2:	4a0f      	ldr	r2, [pc, #60]	; (8010620 <ff_wtoupper+0x54>)
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d006      	beq.n	80105fc <ff_wtoupper+0x30>
 80105ee:	4a0c      	ldr	r2, [pc, #48]	; (8010620 <ff_wtoupper+0x54>)
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105f6:	88fa      	ldrh	r2, [r7, #6]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d1ef      	bne.n	80105dc <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80105fc:	4a08      	ldr	r2, [pc, #32]	; (8010620 <ff_wtoupper+0x54>)
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d004      	beq.n	8010612 <ff_wtoupper+0x46>
 8010608:	4a06      	ldr	r2, [pc, #24]	; (8010624 <ff_wtoupper+0x58>)
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010610:	e000      	b.n	8010614 <ff_wtoupper+0x48>
 8010612:	88fb      	ldrh	r3, [r7, #6]
}
 8010614:	4618      	mov	r0, r3
 8010616:	3714      	adds	r7, #20
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr
 8010620:	08013ff4 	.word	0x08013ff4
 8010624:	080141d4 	.word	0x080141d4

08010628 <__errno>:
 8010628:	4b01      	ldr	r3, [pc, #4]	; (8010630 <__errno+0x8>)
 801062a:	6818      	ldr	r0, [r3, #0]
 801062c:	4770      	bx	lr
 801062e:	bf00      	nop
 8010630:	2000002c 	.word	0x2000002c

08010634 <__libc_init_array>:
 8010634:	b570      	push	{r4, r5, r6, lr}
 8010636:	4d0d      	ldr	r5, [pc, #52]	; (801066c <__libc_init_array+0x38>)
 8010638:	4c0d      	ldr	r4, [pc, #52]	; (8010670 <__libc_init_array+0x3c>)
 801063a:	1b64      	subs	r4, r4, r5
 801063c:	10a4      	asrs	r4, r4, #2
 801063e:	2600      	movs	r6, #0
 8010640:	42a6      	cmp	r6, r4
 8010642:	d109      	bne.n	8010658 <__libc_init_array+0x24>
 8010644:	4d0b      	ldr	r5, [pc, #44]	; (8010674 <__libc_init_array+0x40>)
 8010646:	4c0c      	ldr	r4, [pc, #48]	; (8010678 <__libc_init_array+0x44>)
 8010648:	f002 ff02 	bl	8013450 <_init>
 801064c:	1b64      	subs	r4, r4, r5
 801064e:	10a4      	asrs	r4, r4, #2
 8010650:	2600      	movs	r6, #0
 8010652:	42a6      	cmp	r6, r4
 8010654:	d105      	bne.n	8010662 <__libc_init_array+0x2e>
 8010656:	bd70      	pop	{r4, r5, r6, pc}
 8010658:	f855 3b04 	ldr.w	r3, [r5], #4
 801065c:	4798      	blx	r3
 801065e:	3601      	adds	r6, #1
 8010660:	e7ee      	b.n	8010640 <__libc_init_array+0xc>
 8010662:	f855 3b04 	ldr.w	r3, [r5], #4
 8010666:	4798      	blx	r3
 8010668:	3601      	adds	r6, #1
 801066a:	e7f2      	b.n	8010652 <__libc_init_array+0x1e>
 801066c:	0801478c 	.word	0x0801478c
 8010670:	0801478c 	.word	0x0801478c
 8010674:	0801478c 	.word	0x0801478c
 8010678:	08014790 	.word	0x08014790

0801067c <memset>:
 801067c:	4402      	add	r2, r0
 801067e:	4603      	mov	r3, r0
 8010680:	4293      	cmp	r3, r2
 8010682:	d100      	bne.n	8010686 <memset+0xa>
 8010684:	4770      	bx	lr
 8010686:	f803 1b01 	strb.w	r1, [r3], #1
 801068a:	e7f9      	b.n	8010680 <memset+0x4>

0801068c <__cvt>:
 801068c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010690:	ec55 4b10 	vmov	r4, r5, d0
 8010694:	2d00      	cmp	r5, #0
 8010696:	460e      	mov	r6, r1
 8010698:	4619      	mov	r1, r3
 801069a:	462b      	mov	r3, r5
 801069c:	bfbb      	ittet	lt
 801069e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80106a2:	461d      	movlt	r5, r3
 80106a4:	2300      	movge	r3, #0
 80106a6:	232d      	movlt	r3, #45	; 0x2d
 80106a8:	700b      	strb	r3, [r1, #0]
 80106aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80106b0:	4691      	mov	r9, r2
 80106b2:	f023 0820 	bic.w	r8, r3, #32
 80106b6:	bfbc      	itt	lt
 80106b8:	4622      	movlt	r2, r4
 80106ba:	4614      	movlt	r4, r2
 80106bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80106c0:	d005      	beq.n	80106ce <__cvt+0x42>
 80106c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80106c6:	d100      	bne.n	80106ca <__cvt+0x3e>
 80106c8:	3601      	adds	r6, #1
 80106ca:	2102      	movs	r1, #2
 80106cc:	e000      	b.n	80106d0 <__cvt+0x44>
 80106ce:	2103      	movs	r1, #3
 80106d0:	ab03      	add	r3, sp, #12
 80106d2:	9301      	str	r3, [sp, #4]
 80106d4:	ab02      	add	r3, sp, #8
 80106d6:	9300      	str	r3, [sp, #0]
 80106d8:	ec45 4b10 	vmov	d0, r4, r5
 80106dc:	4653      	mov	r3, sl
 80106de:	4632      	mov	r2, r6
 80106e0:	f000 fcea 	bl	80110b8 <_dtoa_r>
 80106e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80106e8:	4607      	mov	r7, r0
 80106ea:	d102      	bne.n	80106f2 <__cvt+0x66>
 80106ec:	f019 0f01 	tst.w	r9, #1
 80106f0:	d022      	beq.n	8010738 <__cvt+0xac>
 80106f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80106f6:	eb07 0906 	add.w	r9, r7, r6
 80106fa:	d110      	bne.n	801071e <__cvt+0x92>
 80106fc:	783b      	ldrb	r3, [r7, #0]
 80106fe:	2b30      	cmp	r3, #48	; 0x30
 8010700:	d10a      	bne.n	8010718 <__cvt+0x8c>
 8010702:	2200      	movs	r2, #0
 8010704:	2300      	movs	r3, #0
 8010706:	4620      	mov	r0, r4
 8010708:	4629      	mov	r1, r5
 801070a:	f7f0 f9e5 	bl	8000ad8 <__aeabi_dcmpeq>
 801070e:	b918      	cbnz	r0, 8010718 <__cvt+0x8c>
 8010710:	f1c6 0601 	rsb	r6, r6, #1
 8010714:	f8ca 6000 	str.w	r6, [sl]
 8010718:	f8da 3000 	ldr.w	r3, [sl]
 801071c:	4499      	add	r9, r3
 801071e:	2200      	movs	r2, #0
 8010720:	2300      	movs	r3, #0
 8010722:	4620      	mov	r0, r4
 8010724:	4629      	mov	r1, r5
 8010726:	f7f0 f9d7 	bl	8000ad8 <__aeabi_dcmpeq>
 801072a:	b108      	cbz	r0, 8010730 <__cvt+0xa4>
 801072c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010730:	2230      	movs	r2, #48	; 0x30
 8010732:	9b03      	ldr	r3, [sp, #12]
 8010734:	454b      	cmp	r3, r9
 8010736:	d307      	bcc.n	8010748 <__cvt+0xbc>
 8010738:	9b03      	ldr	r3, [sp, #12]
 801073a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801073c:	1bdb      	subs	r3, r3, r7
 801073e:	4638      	mov	r0, r7
 8010740:	6013      	str	r3, [r2, #0]
 8010742:	b004      	add	sp, #16
 8010744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010748:	1c59      	adds	r1, r3, #1
 801074a:	9103      	str	r1, [sp, #12]
 801074c:	701a      	strb	r2, [r3, #0]
 801074e:	e7f0      	b.n	8010732 <__cvt+0xa6>

08010750 <__exponent>:
 8010750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010752:	4603      	mov	r3, r0
 8010754:	2900      	cmp	r1, #0
 8010756:	bfb8      	it	lt
 8010758:	4249      	neglt	r1, r1
 801075a:	f803 2b02 	strb.w	r2, [r3], #2
 801075e:	bfb4      	ite	lt
 8010760:	222d      	movlt	r2, #45	; 0x2d
 8010762:	222b      	movge	r2, #43	; 0x2b
 8010764:	2909      	cmp	r1, #9
 8010766:	7042      	strb	r2, [r0, #1]
 8010768:	dd2a      	ble.n	80107c0 <__exponent+0x70>
 801076a:	f10d 0407 	add.w	r4, sp, #7
 801076e:	46a4      	mov	ip, r4
 8010770:	270a      	movs	r7, #10
 8010772:	46a6      	mov	lr, r4
 8010774:	460a      	mov	r2, r1
 8010776:	fb91 f6f7 	sdiv	r6, r1, r7
 801077a:	fb07 1516 	mls	r5, r7, r6, r1
 801077e:	3530      	adds	r5, #48	; 0x30
 8010780:	2a63      	cmp	r2, #99	; 0x63
 8010782:	f104 34ff 	add.w	r4, r4, #4294967295
 8010786:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801078a:	4631      	mov	r1, r6
 801078c:	dcf1      	bgt.n	8010772 <__exponent+0x22>
 801078e:	3130      	adds	r1, #48	; 0x30
 8010790:	f1ae 0502 	sub.w	r5, lr, #2
 8010794:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010798:	1c44      	adds	r4, r0, #1
 801079a:	4629      	mov	r1, r5
 801079c:	4561      	cmp	r1, ip
 801079e:	d30a      	bcc.n	80107b6 <__exponent+0x66>
 80107a0:	f10d 0209 	add.w	r2, sp, #9
 80107a4:	eba2 020e 	sub.w	r2, r2, lr
 80107a8:	4565      	cmp	r5, ip
 80107aa:	bf88      	it	hi
 80107ac:	2200      	movhi	r2, #0
 80107ae:	4413      	add	r3, r2
 80107b0:	1a18      	subs	r0, r3, r0
 80107b2:	b003      	add	sp, #12
 80107b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80107be:	e7ed      	b.n	801079c <__exponent+0x4c>
 80107c0:	2330      	movs	r3, #48	; 0x30
 80107c2:	3130      	adds	r1, #48	; 0x30
 80107c4:	7083      	strb	r3, [r0, #2]
 80107c6:	70c1      	strb	r1, [r0, #3]
 80107c8:	1d03      	adds	r3, r0, #4
 80107ca:	e7f1      	b.n	80107b0 <__exponent+0x60>

080107cc <_printf_float>:
 80107cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d0:	ed2d 8b02 	vpush	{d8}
 80107d4:	b08d      	sub	sp, #52	; 0x34
 80107d6:	460c      	mov	r4, r1
 80107d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80107dc:	4616      	mov	r6, r2
 80107de:	461f      	mov	r7, r3
 80107e0:	4605      	mov	r5, r0
 80107e2:	f001 fa57 	bl	8011c94 <_localeconv_r>
 80107e6:	f8d0 a000 	ldr.w	sl, [r0]
 80107ea:	4650      	mov	r0, sl
 80107ec:	f7ef fcf8 	bl	80001e0 <strlen>
 80107f0:	2300      	movs	r3, #0
 80107f2:	930a      	str	r3, [sp, #40]	; 0x28
 80107f4:	6823      	ldr	r3, [r4, #0]
 80107f6:	9305      	str	r3, [sp, #20]
 80107f8:	f8d8 3000 	ldr.w	r3, [r8]
 80107fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010800:	3307      	adds	r3, #7
 8010802:	f023 0307 	bic.w	r3, r3, #7
 8010806:	f103 0208 	add.w	r2, r3, #8
 801080a:	f8c8 2000 	str.w	r2, [r8]
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010816:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801081a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801081e:	9307      	str	r3, [sp, #28]
 8010820:	f8cd 8018 	str.w	r8, [sp, #24]
 8010824:	ee08 0a10 	vmov	s16, r0
 8010828:	4b9f      	ldr	r3, [pc, #636]	; (8010aa8 <_printf_float+0x2dc>)
 801082a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801082e:	f04f 32ff 	mov.w	r2, #4294967295
 8010832:	f7f0 f983 	bl	8000b3c <__aeabi_dcmpun>
 8010836:	bb88      	cbnz	r0, 801089c <_printf_float+0xd0>
 8010838:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801083c:	4b9a      	ldr	r3, [pc, #616]	; (8010aa8 <_printf_float+0x2dc>)
 801083e:	f04f 32ff 	mov.w	r2, #4294967295
 8010842:	f7f0 f95d 	bl	8000b00 <__aeabi_dcmple>
 8010846:	bb48      	cbnz	r0, 801089c <_printf_float+0xd0>
 8010848:	2200      	movs	r2, #0
 801084a:	2300      	movs	r3, #0
 801084c:	4640      	mov	r0, r8
 801084e:	4649      	mov	r1, r9
 8010850:	f7f0 f94c 	bl	8000aec <__aeabi_dcmplt>
 8010854:	b110      	cbz	r0, 801085c <_printf_float+0x90>
 8010856:	232d      	movs	r3, #45	; 0x2d
 8010858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801085c:	4b93      	ldr	r3, [pc, #588]	; (8010aac <_printf_float+0x2e0>)
 801085e:	4894      	ldr	r0, [pc, #592]	; (8010ab0 <_printf_float+0x2e4>)
 8010860:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010864:	bf94      	ite	ls
 8010866:	4698      	movls	r8, r3
 8010868:	4680      	movhi	r8, r0
 801086a:	2303      	movs	r3, #3
 801086c:	6123      	str	r3, [r4, #16]
 801086e:	9b05      	ldr	r3, [sp, #20]
 8010870:	f023 0204 	bic.w	r2, r3, #4
 8010874:	6022      	str	r2, [r4, #0]
 8010876:	f04f 0900 	mov.w	r9, #0
 801087a:	9700      	str	r7, [sp, #0]
 801087c:	4633      	mov	r3, r6
 801087e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010880:	4621      	mov	r1, r4
 8010882:	4628      	mov	r0, r5
 8010884:	f000 f9d8 	bl	8010c38 <_printf_common>
 8010888:	3001      	adds	r0, #1
 801088a:	f040 8090 	bne.w	80109ae <_printf_float+0x1e2>
 801088e:	f04f 30ff 	mov.w	r0, #4294967295
 8010892:	b00d      	add	sp, #52	; 0x34
 8010894:	ecbd 8b02 	vpop	{d8}
 8010898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089c:	4642      	mov	r2, r8
 801089e:	464b      	mov	r3, r9
 80108a0:	4640      	mov	r0, r8
 80108a2:	4649      	mov	r1, r9
 80108a4:	f7f0 f94a 	bl	8000b3c <__aeabi_dcmpun>
 80108a8:	b140      	cbz	r0, 80108bc <_printf_float+0xf0>
 80108aa:	464b      	mov	r3, r9
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	bfbc      	itt	lt
 80108b0:	232d      	movlt	r3, #45	; 0x2d
 80108b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80108b6:	487f      	ldr	r0, [pc, #508]	; (8010ab4 <_printf_float+0x2e8>)
 80108b8:	4b7f      	ldr	r3, [pc, #508]	; (8010ab8 <_printf_float+0x2ec>)
 80108ba:	e7d1      	b.n	8010860 <_printf_float+0x94>
 80108bc:	6863      	ldr	r3, [r4, #4]
 80108be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80108c2:	9206      	str	r2, [sp, #24]
 80108c4:	1c5a      	adds	r2, r3, #1
 80108c6:	d13f      	bne.n	8010948 <_printf_float+0x17c>
 80108c8:	2306      	movs	r3, #6
 80108ca:	6063      	str	r3, [r4, #4]
 80108cc:	9b05      	ldr	r3, [sp, #20]
 80108ce:	6861      	ldr	r1, [r4, #4]
 80108d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80108d4:	2300      	movs	r3, #0
 80108d6:	9303      	str	r3, [sp, #12]
 80108d8:	ab0a      	add	r3, sp, #40	; 0x28
 80108da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80108de:	ab09      	add	r3, sp, #36	; 0x24
 80108e0:	ec49 8b10 	vmov	d0, r8, r9
 80108e4:	9300      	str	r3, [sp, #0]
 80108e6:	6022      	str	r2, [r4, #0]
 80108e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80108ec:	4628      	mov	r0, r5
 80108ee:	f7ff fecd 	bl	801068c <__cvt>
 80108f2:	9b06      	ldr	r3, [sp, #24]
 80108f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108f6:	2b47      	cmp	r3, #71	; 0x47
 80108f8:	4680      	mov	r8, r0
 80108fa:	d108      	bne.n	801090e <_printf_float+0x142>
 80108fc:	1cc8      	adds	r0, r1, #3
 80108fe:	db02      	blt.n	8010906 <_printf_float+0x13a>
 8010900:	6863      	ldr	r3, [r4, #4]
 8010902:	4299      	cmp	r1, r3
 8010904:	dd41      	ble.n	801098a <_printf_float+0x1be>
 8010906:	f1ab 0b02 	sub.w	fp, fp, #2
 801090a:	fa5f fb8b 	uxtb.w	fp, fp
 801090e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010912:	d820      	bhi.n	8010956 <_printf_float+0x18a>
 8010914:	3901      	subs	r1, #1
 8010916:	465a      	mov	r2, fp
 8010918:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801091c:	9109      	str	r1, [sp, #36]	; 0x24
 801091e:	f7ff ff17 	bl	8010750 <__exponent>
 8010922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010924:	1813      	adds	r3, r2, r0
 8010926:	2a01      	cmp	r2, #1
 8010928:	4681      	mov	r9, r0
 801092a:	6123      	str	r3, [r4, #16]
 801092c:	dc02      	bgt.n	8010934 <_printf_float+0x168>
 801092e:	6822      	ldr	r2, [r4, #0]
 8010930:	07d2      	lsls	r2, r2, #31
 8010932:	d501      	bpl.n	8010938 <_printf_float+0x16c>
 8010934:	3301      	adds	r3, #1
 8010936:	6123      	str	r3, [r4, #16]
 8010938:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801093c:	2b00      	cmp	r3, #0
 801093e:	d09c      	beq.n	801087a <_printf_float+0xae>
 8010940:	232d      	movs	r3, #45	; 0x2d
 8010942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010946:	e798      	b.n	801087a <_printf_float+0xae>
 8010948:	9a06      	ldr	r2, [sp, #24]
 801094a:	2a47      	cmp	r2, #71	; 0x47
 801094c:	d1be      	bne.n	80108cc <_printf_float+0x100>
 801094e:	2b00      	cmp	r3, #0
 8010950:	d1bc      	bne.n	80108cc <_printf_float+0x100>
 8010952:	2301      	movs	r3, #1
 8010954:	e7b9      	b.n	80108ca <_printf_float+0xfe>
 8010956:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801095a:	d118      	bne.n	801098e <_printf_float+0x1c2>
 801095c:	2900      	cmp	r1, #0
 801095e:	6863      	ldr	r3, [r4, #4]
 8010960:	dd0b      	ble.n	801097a <_printf_float+0x1ae>
 8010962:	6121      	str	r1, [r4, #16]
 8010964:	b913      	cbnz	r3, 801096c <_printf_float+0x1a0>
 8010966:	6822      	ldr	r2, [r4, #0]
 8010968:	07d0      	lsls	r0, r2, #31
 801096a:	d502      	bpl.n	8010972 <_printf_float+0x1a6>
 801096c:	3301      	adds	r3, #1
 801096e:	440b      	add	r3, r1
 8010970:	6123      	str	r3, [r4, #16]
 8010972:	65a1      	str	r1, [r4, #88]	; 0x58
 8010974:	f04f 0900 	mov.w	r9, #0
 8010978:	e7de      	b.n	8010938 <_printf_float+0x16c>
 801097a:	b913      	cbnz	r3, 8010982 <_printf_float+0x1b6>
 801097c:	6822      	ldr	r2, [r4, #0]
 801097e:	07d2      	lsls	r2, r2, #31
 8010980:	d501      	bpl.n	8010986 <_printf_float+0x1ba>
 8010982:	3302      	adds	r3, #2
 8010984:	e7f4      	b.n	8010970 <_printf_float+0x1a4>
 8010986:	2301      	movs	r3, #1
 8010988:	e7f2      	b.n	8010970 <_printf_float+0x1a4>
 801098a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801098e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010990:	4299      	cmp	r1, r3
 8010992:	db05      	blt.n	80109a0 <_printf_float+0x1d4>
 8010994:	6823      	ldr	r3, [r4, #0]
 8010996:	6121      	str	r1, [r4, #16]
 8010998:	07d8      	lsls	r0, r3, #31
 801099a:	d5ea      	bpl.n	8010972 <_printf_float+0x1a6>
 801099c:	1c4b      	adds	r3, r1, #1
 801099e:	e7e7      	b.n	8010970 <_printf_float+0x1a4>
 80109a0:	2900      	cmp	r1, #0
 80109a2:	bfd4      	ite	le
 80109a4:	f1c1 0202 	rsble	r2, r1, #2
 80109a8:	2201      	movgt	r2, #1
 80109aa:	4413      	add	r3, r2
 80109ac:	e7e0      	b.n	8010970 <_printf_float+0x1a4>
 80109ae:	6823      	ldr	r3, [r4, #0]
 80109b0:	055a      	lsls	r2, r3, #21
 80109b2:	d407      	bmi.n	80109c4 <_printf_float+0x1f8>
 80109b4:	6923      	ldr	r3, [r4, #16]
 80109b6:	4642      	mov	r2, r8
 80109b8:	4631      	mov	r1, r6
 80109ba:	4628      	mov	r0, r5
 80109bc:	47b8      	blx	r7
 80109be:	3001      	adds	r0, #1
 80109c0:	d12c      	bne.n	8010a1c <_printf_float+0x250>
 80109c2:	e764      	b.n	801088e <_printf_float+0xc2>
 80109c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80109c8:	f240 80e0 	bls.w	8010b8c <_printf_float+0x3c0>
 80109cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80109d0:	2200      	movs	r2, #0
 80109d2:	2300      	movs	r3, #0
 80109d4:	f7f0 f880 	bl	8000ad8 <__aeabi_dcmpeq>
 80109d8:	2800      	cmp	r0, #0
 80109da:	d034      	beq.n	8010a46 <_printf_float+0x27a>
 80109dc:	4a37      	ldr	r2, [pc, #220]	; (8010abc <_printf_float+0x2f0>)
 80109de:	2301      	movs	r3, #1
 80109e0:	4631      	mov	r1, r6
 80109e2:	4628      	mov	r0, r5
 80109e4:	47b8      	blx	r7
 80109e6:	3001      	adds	r0, #1
 80109e8:	f43f af51 	beq.w	801088e <_printf_float+0xc2>
 80109ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80109f0:	429a      	cmp	r2, r3
 80109f2:	db02      	blt.n	80109fa <_printf_float+0x22e>
 80109f4:	6823      	ldr	r3, [r4, #0]
 80109f6:	07d8      	lsls	r0, r3, #31
 80109f8:	d510      	bpl.n	8010a1c <_printf_float+0x250>
 80109fa:	ee18 3a10 	vmov	r3, s16
 80109fe:	4652      	mov	r2, sl
 8010a00:	4631      	mov	r1, r6
 8010a02:	4628      	mov	r0, r5
 8010a04:	47b8      	blx	r7
 8010a06:	3001      	adds	r0, #1
 8010a08:	f43f af41 	beq.w	801088e <_printf_float+0xc2>
 8010a0c:	f04f 0800 	mov.w	r8, #0
 8010a10:	f104 091a 	add.w	r9, r4, #26
 8010a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a16:	3b01      	subs	r3, #1
 8010a18:	4543      	cmp	r3, r8
 8010a1a:	dc09      	bgt.n	8010a30 <_printf_float+0x264>
 8010a1c:	6823      	ldr	r3, [r4, #0]
 8010a1e:	079b      	lsls	r3, r3, #30
 8010a20:	f100 8105 	bmi.w	8010c2e <_printf_float+0x462>
 8010a24:	68e0      	ldr	r0, [r4, #12]
 8010a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a28:	4298      	cmp	r0, r3
 8010a2a:	bfb8      	it	lt
 8010a2c:	4618      	movlt	r0, r3
 8010a2e:	e730      	b.n	8010892 <_printf_float+0xc6>
 8010a30:	2301      	movs	r3, #1
 8010a32:	464a      	mov	r2, r9
 8010a34:	4631      	mov	r1, r6
 8010a36:	4628      	mov	r0, r5
 8010a38:	47b8      	blx	r7
 8010a3a:	3001      	adds	r0, #1
 8010a3c:	f43f af27 	beq.w	801088e <_printf_float+0xc2>
 8010a40:	f108 0801 	add.w	r8, r8, #1
 8010a44:	e7e6      	b.n	8010a14 <_printf_float+0x248>
 8010a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	dc39      	bgt.n	8010ac0 <_printf_float+0x2f4>
 8010a4c:	4a1b      	ldr	r2, [pc, #108]	; (8010abc <_printf_float+0x2f0>)
 8010a4e:	2301      	movs	r3, #1
 8010a50:	4631      	mov	r1, r6
 8010a52:	4628      	mov	r0, r5
 8010a54:	47b8      	blx	r7
 8010a56:	3001      	adds	r0, #1
 8010a58:	f43f af19 	beq.w	801088e <_printf_float+0xc2>
 8010a5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a60:	4313      	orrs	r3, r2
 8010a62:	d102      	bne.n	8010a6a <_printf_float+0x29e>
 8010a64:	6823      	ldr	r3, [r4, #0]
 8010a66:	07d9      	lsls	r1, r3, #31
 8010a68:	d5d8      	bpl.n	8010a1c <_printf_float+0x250>
 8010a6a:	ee18 3a10 	vmov	r3, s16
 8010a6e:	4652      	mov	r2, sl
 8010a70:	4631      	mov	r1, r6
 8010a72:	4628      	mov	r0, r5
 8010a74:	47b8      	blx	r7
 8010a76:	3001      	adds	r0, #1
 8010a78:	f43f af09 	beq.w	801088e <_printf_float+0xc2>
 8010a7c:	f04f 0900 	mov.w	r9, #0
 8010a80:	f104 0a1a 	add.w	sl, r4, #26
 8010a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a86:	425b      	negs	r3, r3
 8010a88:	454b      	cmp	r3, r9
 8010a8a:	dc01      	bgt.n	8010a90 <_printf_float+0x2c4>
 8010a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a8e:	e792      	b.n	80109b6 <_printf_float+0x1ea>
 8010a90:	2301      	movs	r3, #1
 8010a92:	4652      	mov	r2, sl
 8010a94:	4631      	mov	r1, r6
 8010a96:	4628      	mov	r0, r5
 8010a98:	47b8      	blx	r7
 8010a9a:	3001      	adds	r0, #1
 8010a9c:	f43f aef7 	beq.w	801088e <_printf_float+0xc2>
 8010aa0:	f109 0901 	add.w	r9, r9, #1
 8010aa4:	e7ee      	b.n	8010a84 <_printf_float+0x2b8>
 8010aa6:	bf00      	nop
 8010aa8:	7fefffff 	.word	0x7fefffff
 8010aac:	080143b8 	.word	0x080143b8
 8010ab0:	080143bc 	.word	0x080143bc
 8010ab4:	080143c4 	.word	0x080143c4
 8010ab8:	080143c0 	.word	0x080143c0
 8010abc:	080143c8 	.word	0x080143c8
 8010ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ac2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	bfa8      	it	ge
 8010ac8:	461a      	movge	r2, r3
 8010aca:	2a00      	cmp	r2, #0
 8010acc:	4691      	mov	r9, r2
 8010ace:	dc37      	bgt.n	8010b40 <_printf_float+0x374>
 8010ad0:	f04f 0b00 	mov.w	fp, #0
 8010ad4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ad8:	f104 021a 	add.w	r2, r4, #26
 8010adc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ade:	9305      	str	r3, [sp, #20]
 8010ae0:	eba3 0309 	sub.w	r3, r3, r9
 8010ae4:	455b      	cmp	r3, fp
 8010ae6:	dc33      	bgt.n	8010b50 <_printf_float+0x384>
 8010ae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010aec:	429a      	cmp	r2, r3
 8010aee:	db3b      	blt.n	8010b68 <_printf_float+0x39c>
 8010af0:	6823      	ldr	r3, [r4, #0]
 8010af2:	07da      	lsls	r2, r3, #31
 8010af4:	d438      	bmi.n	8010b68 <_printf_float+0x39c>
 8010af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010af8:	9a05      	ldr	r2, [sp, #20]
 8010afa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010afc:	1a9a      	subs	r2, r3, r2
 8010afe:	eba3 0901 	sub.w	r9, r3, r1
 8010b02:	4591      	cmp	r9, r2
 8010b04:	bfa8      	it	ge
 8010b06:	4691      	movge	r9, r2
 8010b08:	f1b9 0f00 	cmp.w	r9, #0
 8010b0c:	dc35      	bgt.n	8010b7a <_printf_float+0x3ae>
 8010b0e:	f04f 0800 	mov.w	r8, #0
 8010b12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b16:	f104 0a1a 	add.w	sl, r4, #26
 8010b1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b1e:	1a9b      	subs	r3, r3, r2
 8010b20:	eba3 0309 	sub.w	r3, r3, r9
 8010b24:	4543      	cmp	r3, r8
 8010b26:	f77f af79 	ble.w	8010a1c <_printf_float+0x250>
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	4652      	mov	r2, sl
 8010b2e:	4631      	mov	r1, r6
 8010b30:	4628      	mov	r0, r5
 8010b32:	47b8      	blx	r7
 8010b34:	3001      	adds	r0, #1
 8010b36:	f43f aeaa 	beq.w	801088e <_printf_float+0xc2>
 8010b3a:	f108 0801 	add.w	r8, r8, #1
 8010b3e:	e7ec      	b.n	8010b1a <_printf_float+0x34e>
 8010b40:	4613      	mov	r3, r2
 8010b42:	4631      	mov	r1, r6
 8010b44:	4642      	mov	r2, r8
 8010b46:	4628      	mov	r0, r5
 8010b48:	47b8      	blx	r7
 8010b4a:	3001      	adds	r0, #1
 8010b4c:	d1c0      	bne.n	8010ad0 <_printf_float+0x304>
 8010b4e:	e69e      	b.n	801088e <_printf_float+0xc2>
 8010b50:	2301      	movs	r3, #1
 8010b52:	4631      	mov	r1, r6
 8010b54:	4628      	mov	r0, r5
 8010b56:	9205      	str	r2, [sp, #20]
 8010b58:	47b8      	blx	r7
 8010b5a:	3001      	adds	r0, #1
 8010b5c:	f43f ae97 	beq.w	801088e <_printf_float+0xc2>
 8010b60:	9a05      	ldr	r2, [sp, #20]
 8010b62:	f10b 0b01 	add.w	fp, fp, #1
 8010b66:	e7b9      	b.n	8010adc <_printf_float+0x310>
 8010b68:	ee18 3a10 	vmov	r3, s16
 8010b6c:	4652      	mov	r2, sl
 8010b6e:	4631      	mov	r1, r6
 8010b70:	4628      	mov	r0, r5
 8010b72:	47b8      	blx	r7
 8010b74:	3001      	adds	r0, #1
 8010b76:	d1be      	bne.n	8010af6 <_printf_float+0x32a>
 8010b78:	e689      	b.n	801088e <_printf_float+0xc2>
 8010b7a:	9a05      	ldr	r2, [sp, #20]
 8010b7c:	464b      	mov	r3, r9
 8010b7e:	4442      	add	r2, r8
 8010b80:	4631      	mov	r1, r6
 8010b82:	4628      	mov	r0, r5
 8010b84:	47b8      	blx	r7
 8010b86:	3001      	adds	r0, #1
 8010b88:	d1c1      	bne.n	8010b0e <_printf_float+0x342>
 8010b8a:	e680      	b.n	801088e <_printf_float+0xc2>
 8010b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b8e:	2a01      	cmp	r2, #1
 8010b90:	dc01      	bgt.n	8010b96 <_printf_float+0x3ca>
 8010b92:	07db      	lsls	r3, r3, #31
 8010b94:	d538      	bpl.n	8010c08 <_printf_float+0x43c>
 8010b96:	2301      	movs	r3, #1
 8010b98:	4642      	mov	r2, r8
 8010b9a:	4631      	mov	r1, r6
 8010b9c:	4628      	mov	r0, r5
 8010b9e:	47b8      	blx	r7
 8010ba0:	3001      	adds	r0, #1
 8010ba2:	f43f ae74 	beq.w	801088e <_printf_float+0xc2>
 8010ba6:	ee18 3a10 	vmov	r3, s16
 8010baa:	4652      	mov	r2, sl
 8010bac:	4631      	mov	r1, r6
 8010bae:	4628      	mov	r0, r5
 8010bb0:	47b8      	blx	r7
 8010bb2:	3001      	adds	r0, #1
 8010bb4:	f43f ae6b 	beq.w	801088e <_printf_float+0xc2>
 8010bb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	f7ef ff8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8010bc4:	b9d8      	cbnz	r0, 8010bfe <_printf_float+0x432>
 8010bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bc8:	f108 0201 	add.w	r2, r8, #1
 8010bcc:	3b01      	subs	r3, #1
 8010bce:	4631      	mov	r1, r6
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	47b8      	blx	r7
 8010bd4:	3001      	adds	r0, #1
 8010bd6:	d10e      	bne.n	8010bf6 <_printf_float+0x42a>
 8010bd8:	e659      	b.n	801088e <_printf_float+0xc2>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	4652      	mov	r2, sl
 8010bde:	4631      	mov	r1, r6
 8010be0:	4628      	mov	r0, r5
 8010be2:	47b8      	blx	r7
 8010be4:	3001      	adds	r0, #1
 8010be6:	f43f ae52 	beq.w	801088e <_printf_float+0xc2>
 8010bea:	f108 0801 	add.w	r8, r8, #1
 8010bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bf0:	3b01      	subs	r3, #1
 8010bf2:	4543      	cmp	r3, r8
 8010bf4:	dcf1      	bgt.n	8010bda <_printf_float+0x40e>
 8010bf6:	464b      	mov	r3, r9
 8010bf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010bfc:	e6dc      	b.n	80109b8 <_printf_float+0x1ec>
 8010bfe:	f04f 0800 	mov.w	r8, #0
 8010c02:	f104 0a1a 	add.w	sl, r4, #26
 8010c06:	e7f2      	b.n	8010bee <_printf_float+0x422>
 8010c08:	2301      	movs	r3, #1
 8010c0a:	4642      	mov	r2, r8
 8010c0c:	e7df      	b.n	8010bce <_printf_float+0x402>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	464a      	mov	r2, r9
 8010c12:	4631      	mov	r1, r6
 8010c14:	4628      	mov	r0, r5
 8010c16:	47b8      	blx	r7
 8010c18:	3001      	adds	r0, #1
 8010c1a:	f43f ae38 	beq.w	801088e <_printf_float+0xc2>
 8010c1e:	f108 0801 	add.w	r8, r8, #1
 8010c22:	68e3      	ldr	r3, [r4, #12]
 8010c24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c26:	1a5b      	subs	r3, r3, r1
 8010c28:	4543      	cmp	r3, r8
 8010c2a:	dcf0      	bgt.n	8010c0e <_printf_float+0x442>
 8010c2c:	e6fa      	b.n	8010a24 <_printf_float+0x258>
 8010c2e:	f04f 0800 	mov.w	r8, #0
 8010c32:	f104 0919 	add.w	r9, r4, #25
 8010c36:	e7f4      	b.n	8010c22 <_printf_float+0x456>

08010c38 <_printf_common>:
 8010c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c3c:	4616      	mov	r6, r2
 8010c3e:	4699      	mov	r9, r3
 8010c40:	688a      	ldr	r2, [r1, #8]
 8010c42:	690b      	ldr	r3, [r1, #16]
 8010c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	bfb8      	it	lt
 8010c4c:	4613      	movlt	r3, r2
 8010c4e:	6033      	str	r3, [r6, #0]
 8010c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c54:	4607      	mov	r7, r0
 8010c56:	460c      	mov	r4, r1
 8010c58:	b10a      	cbz	r2, 8010c5e <_printf_common+0x26>
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	6033      	str	r3, [r6, #0]
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	0699      	lsls	r1, r3, #26
 8010c62:	bf42      	ittt	mi
 8010c64:	6833      	ldrmi	r3, [r6, #0]
 8010c66:	3302      	addmi	r3, #2
 8010c68:	6033      	strmi	r3, [r6, #0]
 8010c6a:	6825      	ldr	r5, [r4, #0]
 8010c6c:	f015 0506 	ands.w	r5, r5, #6
 8010c70:	d106      	bne.n	8010c80 <_printf_common+0x48>
 8010c72:	f104 0a19 	add.w	sl, r4, #25
 8010c76:	68e3      	ldr	r3, [r4, #12]
 8010c78:	6832      	ldr	r2, [r6, #0]
 8010c7a:	1a9b      	subs	r3, r3, r2
 8010c7c:	42ab      	cmp	r3, r5
 8010c7e:	dc26      	bgt.n	8010cce <_printf_common+0x96>
 8010c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010c84:	1e13      	subs	r3, r2, #0
 8010c86:	6822      	ldr	r2, [r4, #0]
 8010c88:	bf18      	it	ne
 8010c8a:	2301      	movne	r3, #1
 8010c8c:	0692      	lsls	r2, r2, #26
 8010c8e:	d42b      	bmi.n	8010ce8 <_printf_common+0xb0>
 8010c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c94:	4649      	mov	r1, r9
 8010c96:	4638      	mov	r0, r7
 8010c98:	47c0      	blx	r8
 8010c9a:	3001      	adds	r0, #1
 8010c9c:	d01e      	beq.n	8010cdc <_printf_common+0xa4>
 8010c9e:	6823      	ldr	r3, [r4, #0]
 8010ca0:	68e5      	ldr	r5, [r4, #12]
 8010ca2:	6832      	ldr	r2, [r6, #0]
 8010ca4:	f003 0306 	and.w	r3, r3, #6
 8010ca8:	2b04      	cmp	r3, #4
 8010caa:	bf08      	it	eq
 8010cac:	1aad      	subeq	r5, r5, r2
 8010cae:	68a3      	ldr	r3, [r4, #8]
 8010cb0:	6922      	ldr	r2, [r4, #16]
 8010cb2:	bf0c      	ite	eq
 8010cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cb8:	2500      	movne	r5, #0
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	bfc4      	itt	gt
 8010cbe:	1a9b      	subgt	r3, r3, r2
 8010cc0:	18ed      	addgt	r5, r5, r3
 8010cc2:	2600      	movs	r6, #0
 8010cc4:	341a      	adds	r4, #26
 8010cc6:	42b5      	cmp	r5, r6
 8010cc8:	d11a      	bne.n	8010d00 <_printf_common+0xc8>
 8010cca:	2000      	movs	r0, #0
 8010ccc:	e008      	b.n	8010ce0 <_printf_common+0xa8>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	4652      	mov	r2, sl
 8010cd2:	4649      	mov	r1, r9
 8010cd4:	4638      	mov	r0, r7
 8010cd6:	47c0      	blx	r8
 8010cd8:	3001      	adds	r0, #1
 8010cda:	d103      	bne.n	8010ce4 <_printf_common+0xac>
 8010cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ce4:	3501      	adds	r5, #1
 8010ce6:	e7c6      	b.n	8010c76 <_printf_common+0x3e>
 8010ce8:	18e1      	adds	r1, r4, r3
 8010cea:	1c5a      	adds	r2, r3, #1
 8010cec:	2030      	movs	r0, #48	; 0x30
 8010cee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cf2:	4422      	add	r2, r4
 8010cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010cfc:	3302      	adds	r3, #2
 8010cfe:	e7c7      	b.n	8010c90 <_printf_common+0x58>
 8010d00:	2301      	movs	r3, #1
 8010d02:	4622      	mov	r2, r4
 8010d04:	4649      	mov	r1, r9
 8010d06:	4638      	mov	r0, r7
 8010d08:	47c0      	blx	r8
 8010d0a:	3001      	adds	r0, #1
 8010d0c:	d0e6      	beq.n	8010cdc <_printf_common+0xa4>
 8010d0e:	3601      	adds	r6, #1
 8010d10:	e7d9      	b.n	8010cc6 <_printf_common+0x8e>
	...

08010d14 <_printf_i>:
 8010d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d18:	7e0f      	ldrb	r7, [r1, #24]
 8010d1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010d1c:	2f78      	cmp	r7, #120	; 0x78
 8010d1e:	4691      	mov	r9, r2
 8010d20:	4680      	mov	r8, r0
 8010d22:	460c      	mov	r4, r1
 8010d24:	469a      	mov	sl, r3
 8010d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010d2a:	d807      	bhi.n	8010d3c <_printf_i+0x28>
 8010d2c:	2f62      	cmp	r7, #98	; 0x62
 8010d2e:	d80a      	bhi.n	8010d46 <_printf_i+0x32>
 8010d30:	2f00      	cmp	r7, #0
 8010d32:	f000 80d8 	beq.w	8010ee6 <_printf_i+0x1d2>
 8010d36:	2f58      	cmp	r7, #88	; 0x58
 8010d38:	f000 80a3 	beq.w	8010e82 <_printf_i+0x16e>
 8010d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d44:	e03a      	b.n	8010dbc <_printf_i+0xa8>
 8010d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d4a:	2b15      	cmp	r3, #21
 8010d4c:	d8f6      	bhi.n	8010d3c <_printf_i+0x28>
 8010d4e:	a101      	add	r1, pc, #4	; (adr r1, 8010d54 <_printf_i+0x40>)
 8010d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010d54:	08010dad 	.word	0x08010dad
 8010d58:	08010dc1 	.word	0x08010dc1
 8010d5c:	08010d3d 	.word	0x08010d3d
 8010d60:	08010d3d 	.word	0x08010d3d
 8010d64:	08010d3d 	.word	0x08010d3d
 8010d68:	08010d3d 	.word	0x08010d3d
 8010d6c:	08010dc1 	.word	0x08010dc1
 8010d70:	08010d3d 	.word	0x08010d3d
 8010d74:	08010d3d 	.word	0x08010d3d
 8010d78:	08010d3d 	.word	0x08010d3d
 8010d7c:	08010d3d 	.word	0x08010d3d
 8010d80:	08010ecd 	.word	0x08010ecd
 8010d84:	08010df1 	.word	0x08010df1
 8010d88:	08010eaf 	.word	0x08010eaf
 8010d8c:	08010d3d 	.word	0x08010d3d
 8010d90:	08010d3d 	.word	0x08010d3d
 8010d94:	08010eef 	.word	0x08010eef
 8010d98:	08010d3d 	.word	0x08010d3d
 8010d9c:	08010df1 	.word	0x08010df1
 8010da0:	08010d3d 	.word	0x08010d3d
 8010da4:	08010d3d 	.word	0x08010d3d
 8010da8:	08010eb7 	.word	0x08010eb7
 8010dac:	682b      	ldr	r3, [r5, #0]
 8010dae:	1d1a      	adds	r2, r3, #4
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	602a      	str	r2, [r5, #0]
 8010db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	e0a3      	b.n	8010f08 <_printf_i+0x1f4>
 8010dc0:	6820      	ldr	r0, [r4, #0]
 8010dc2:	6829      	ldr	r1, [r5, #0]
 8010dc4:	0606      	lsls	r6, r0, #24
 8010dc6:	f101 0304 	add.w	r3, r1, #4
 8010dca:	d50a      	bpl.n	8010de2 <_printf_i+0xce>
 8010dcc:	680e      	ldr	r6, [r1, #0]
 8010dce:	602b      	str	r3, [r5, #0]
 8010dd0:	2e00      	cmp	r6, #0
 8010dd2:	da03      	bge.n	8010ddc <_printf_i+0xc8>
 8010dd4:	232d      	movs	r3, #45	; 0x2d
 8010dd6:	4276      	negs	r6, r6
 8010dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ddc:	485e      	ldr	r0, [pc, #376]	; (8010f58 <_printf_i+0x244>)
 8010dde:	230a      	movs	r3, #10
 8010de0:	e019      	b.n	8010e16 <_printf_i+0x102>
 8010de2:	680e      	ldr	r6, [r1, #0]
 8010de4:	602b      	str	r3, [r5, #0]
 8010de6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010dea:	bf18      	it	ne
 8010dec:	b236      	sxthne	r6, r6
 8010dee:	e7ef      	b.n	8010dd0 <_printf_i+0xbc>
 8010df0:	682b      	ldr	r3, [r5, #0]
 8010df2:	6820      	ldr	r0, [r4, #0]
 8010df4:	1d19      	adds	r1, r3, #4
 8010df6:	6029      	str	r1, [r5, #0]
 8010df8:	0601      	lsls	r1, r0, #24
 8010dfa:	d501      	bpl.n	8010e00 <_printf_i+0xec>
 8010dfc:	681e      	ldr	r6, [r3, #0]
 8010dfe:	e002      	b.n	8010e06 <_printf_i+0xf2>
 8010e00:	0646      	lsls	r6, r0, #25
 8010e02:	d5fb      	bpl.n	8010dfc <_printf_i+0xe8>
 8010e04:	881e      	ldrh	r6, [r3, #0]
 8010e06:	4854      	ldr	r0, [pc, #336]	; (8010f58 <_printf_i+0x244>)
 8010e08:	2f6f      	cmp	r7, #111	; 0x6f
 8010e0a:	bf0c      	ite	eq
 8010e0c:	2308      	moveq	r3, #8
 8010e0e:	230a      	movne	r3, #10
 8010e10:	2100      	movs	r1, #0
 8010e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e16:	6865      	ldr	r5, [r4, #4]
 8010e18:	60a5      	str	r5, [r4, #8]
 8010e1a:	2d00      	cmp	r5, #0
 8010e1c:	bfa2      	ittt	ge
 8010e1e:	6821      	ldrge	r1, [r4, #0]
 8010e20:	f021 0104 	bicge.w	r1, r1, #4
 8010e24:	6021      	strge	r1, [r4, #0]
 8010e26:	b90e      	cbnz	r6, 8010e2c <_printf_i+0x118>
 8010e28:	2d00      	cmp	r5, #0
 8010e2a:	d04d      	beq.n	8010ec8 <_printf_i+0x1b4>
 8010e2c:	4615      	mov	r5, r2
 8010e2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010e32:	fb03 6711 	mls	r7, r3, r1, r6
 8010e36:	5dc7      	ldrb	r7, [r0, r7]
 8010e38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010e3c:	4637      	mov	r7, r6
 8010e3e:	42bb      	cmp	r3, r7
 8010e40:	460e      	mov	r6, r1
 8010e42:	d9f4      	bls.n	8010e2e <_printf_i+0x11a>
 8010e44:	2b08      	cmp	r3, #8
 8010e46:	d10b      	bne.n	8010e60 <_printf_i+0x14c>
 8010e48:	6823      	ldr	r3, [r4, #0]
 8010e4a:	07de      	lsls	r6, r3, #31
 8010e4c:	d508      	bpl.n	8010e60 <_printf_i+0x14c>
 8010e4e:	6923      	ldr	r3, [r4, #16]
 8010e50:	6861      	ldr	r1, [r4, #4]
 8010e52:	4299      	cmp	r1, r3
 8010e54:	bfde      	ittt	le
 8010e56:	2330      	movle	r3, #48	; 0x30
 8010e58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010e5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010e60:	1b52      	subs	r2, r2, r5
 8010e62:	6122      	str	r2, [r4, #16]
 8010e64:	f8cd a000 	str.w	sl, [sp]
 8010e68:	464b      	mov	r3, r9
 8010e6a:	aa03      	add	r2, sp, #12
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	4640      	mov	r0, r8
 8010e70:	f7ff fee2 	bl	8010c38 <_printf_common>
 8010e74:	3001      	adds	r0, #1
 8010e76:	d14c      	bne.n	8010f12 <_printf_i+0x1fe>
 8010e78:	f04f 30ff 	mov.w	r0, #4294967295
 8010e7c:	b004      	add	sp, #16
 8010e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e82:	4835      	ldr	r0, [pc, #212]	; (8010f58 <_printf_i+0x244>)
 8010e84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010e88:	6829      	ldr	r1, [r5, #0]
 8010e8a:	6823      	ldr	r3, [r4, #0]
 8010e8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010e90:	6029      	str	r1, [r5, #0]
 8010e92:	061d      	lsls	r5, r3, #24
 8010e94:	d514      	bpl.n	8010ec0 <_printf_i+0x1ac>
 8010e96:	07df      	lsls	r7, r3, #31
 8010e98:	bf44      	itt	mi
 8010e9a:	f043 0320 	orrmi.w	r3, r3, #32
 8010e9e:	6023      	strmi	r3, [r4, #0]
 8010ea0:	b91e      	cbnz	r6, 8010eaa <_printf_i+0x196>
 8010ea2:	6823      	ldr	r3, [r4, #0]
 8010ea4:	f023 0320 	bic.w	r3, r3, #32
 8010ea8:	6023      	str	r3, [r4, #0]
 8010eaa:	2310      	movs	r3, #16
 8010eac:	e7b0      	b.n	8010e10 <_printf_i+0xfc>
 8010eae:	6823      	ldr	r3, [r4, #0]
 8010eb0:	f043 0320 	orr.w	r3, r3, #32
 8010eb4:	6023      	str	r3, [r4, #0]
 8010eb6:	2378      	movs	r3, #120	; 0x78
 8010eb8:	4828      	ldr	r0, [pc, #160]	; (8010f5c <_printf_i+0x248>)
 8010eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ebe:	e7e3      	b.n	8010e88 <_printf_i+0x174>
 8010ec0:	0659      	lsls	r1, r3, #25
 8010ec2:	bf48      	it	mi
 8010ec4:	b2b6      	uxthmi	r6, r6
 8010ec6:	e7e6      	b.n	8010e96 <_printf_i+0x182>
 8010ec8:	4615      	mov	r5, r2
 8010eca:	e7bb      	b.n	8010e44 <_printf_i+0x130>
 8010ecc:	682b      	ldr	r3, [r5, #0]
 8010ece:	6826      	ldr	r6, [r4, #0]
 8010ed0:	6961      	ldr	r1, [r4, #20]
 8010ed2:	1d18      	adds	r0, r3, #4
 8010ed4:	6028      	str	r0, [r5, #0]
 8010ed6:	0635      	lsls	r5, r6, #24
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	d501      	bpl.n	8010ee0 <_printf_i+0x1cc>
 8010edc:	6019      	str	r1, [r3, #0]
 8010ede:	e002      	b.n	8010ee6 <_printf_i+0x1d2>
 8010ee0:	0670      	lsls	r0, r6, #25
 8010ee2:	d5fb      	bpl.n	8010edc <_printf_i+0x1c8>
 8010ee4:	8019      	strh	r1, [r3, #0]
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	6123      	str	r3, [r4, #16]
 8010eea:	4615      	mov	r5, r2
 8010eec:	e7ba      	b.n	8010e64 <_printf_i+0x150>
 8010eee:	682b      	ldr	r3, [r5, #0]
 8010ef0:	1d1a      	adds	r2, r3, #4
 8010ef2:	602a      	str	r2, [r5, #0]
 8010ef4:	681d      	ldr	r5, [r3, #0]
 8010ef6:	6862      	ldr	r2, [r4, #4]
 8010ef8:	2100      	movs	r1, #0
 8010efa:	4628      	mov	r0, r5
 8010efc:	f7ef f978 	bl	80001f0 <memchr>
 8010f00:	b108      	cbz	r0, 8010f06 <_printf_i+0x1f2>
 8010f02:	1b40      	subs	r0, r0, r5
 8010f04:	6060      	str	r0, [r4, #4]
 8010f06:	6863      	ldr	r3, [r4, #4]
 8010f08:	6123      	str	r3, [r4, #16]
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f10:	e7a8      	b.n	8010e64 <_printf_i+0x150>
 8010f12:	6923      	ldr	r3, [r4, #16]
 8010f14:	462a      	mov	r2, r5
 8010f16:	4649      	mov	r1, r9
 8010f18:	4640      	mov	r0, r8
 8010f1a:	47d0      	blx	sl
 8010f1c:	3001      	adds	r0, #1
 8010f1e:	d0ab      	beq.n	8010e78 <_printf_i+0x164>
 8010f20:	6823      	ldr	r3, [r4, #0]
 8010f22:	079b      	lsls	r3, r3, #30
 8010f24:	d413      	bmi.n	8010f4e <_printf_i+0x23a>
 8010f26:	68e0      	ldr	r0, [r4, #12]
 8010f28:	9b03      	ldr	r3, [sp, #12]
 8010f2a:	4298      	cmp	r0, r3
 8010f2c:	bfb8      	it	lt
 8010f2e:	4618      	movlt	r0, r3
 8010f30:	e7a4      	b.n	8010e7c <_printf_i+0x168>
 8010f32:	2301      	movs	r3, #1
 8010f34:	4632      	mov	r2, r6
 8010f36:	4649      	mov	r1, r9
 8010f38:	4640      	mov	r0, r8
 8010f3a:	47d0      	blx	sl
 8010f3c:	3001      	adds	r0, #1
 8010f3e:	d09b      	beq.n	8010e78 <_printf_i+0x164>
 8010f40:	3501      	adds	r5, #1
 8010f42:	68e3      	ldr	r3, [r4, #12]
 8010f44:	9903      	ldr	r1, [sp, #12]
 8010f46:	1a5b      	subs	r3, r3, r1
 8010f48:	42ab      	cmp	r3, r5
 8010f4a:	dcf2      	bgt.n	8010f32 <_printf_i+0x21e>
 8010f4c:	e7eb      	b.n	8010f26 <_printf_i+0x212>
 8010f4e:	2500      	movs	r5, #0
 8010f50:	f104 0619 	add.w	r6, r4, #25
 8010f54:	e7f5      	b.n	8010f42 <_printf_i+0x22e>
 8010f56:	bf00      	nop
 8010f58:	080143ca 	.word	0x080143ca
 8010f5c:	080143db 	.word	0x080143db

08010f60 <siprintf>:
 8010f60:	b40e      	push	{r1, r2, r3}
 8010f62:	b500      	push	{lr}
 8010f64:	b09c      	sub	sp, #112	; 0x70
 8010f66:	ab1d      	add	r3, sp, #116	; 0x74
 8010f68:	9002      	str	r0, [sp, #8]
 8010f6a:	9006      	str	r0, [sp, #24]
 8010f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f70:	4809      	ldr	r0, [pc, #36]	; (8010f98 <siprintf+0x38>)
 8010f72:	9107      	str	r1, [sp, #28]
 8010f74:	9104      	str	r1, [sp, #16]
 8010f76:	4909      	ldr	r1, [pc, #36]	; (8010f9c <siprintf+0x3c>)
 8010f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f7c:	9105      	str	r1, [sp, #20]
 8010f7e:	6800      	ldr	r0, [r0, #0]
 8010f80:	9301      	str	r3, [sp, #4]
 8010f82:	a902      	add	r1, sp, #8
 8010f84:	f001 fb76 	bl	8012674 <_svfiprintf_r>
 8010f88:	9b02      	ldr	r3, [sp, #8]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	701a      	strb	r2, [r3, #0]
 8010f8e:	b01c      	add	sp, #112	; 0x70
 8010f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f94:	b003      	add	sp, #12
 8010f96:	4770      	bx	lr
 8010f98:	2000002c 	.word	0x2000002c
 8010f9c:	ffff0208 	.word	0xffff0208

08010fa0 <quorem>:
 8010fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa4:	6903      	ldr	r3, [r0, #16]
 8010fa6:	690c      	ldr	r4, [r1, #16]
 8010fa8:	42a3      	cmp	r3, r4
 8010faa:	4607      	mov	r7, r0
 8010fac:	f2c0 8081 	blt.w	80110b2 <quorem+0x112>
 8010fb0:	3c01      	subs	r4, #1
 8010fb2:	f101 0814 	add.w	r8, r1, #20
 8010fb6:	f100 0514 	add.w	r5, r0, #20
 8010fba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010fbe:	9301      	str	r3, [sp, #4]
 8010fc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010fc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010fc8:	3301      	adds	r3, #1
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010fd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010fd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8010fd8:	d331      	bcc.n	801103e <quorem+0x9e>
 8010fda:	f04f 0e00 	mov.w	lr, #0
 8010fde:	4640      	mov	r0, r8
 8010fe0:	46ac      	mov	ip, r5
 8010fe2:	46f2      	mov	sl, lr
 8010fe4:	f850 2b04 	ldr.w	r2, [r0], #4
 8010fe8:	b293      	uxth	r3, r2
 8010fea:	fb06 e303 	mla	r3, r6, r3, lr
 8010fee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	ebaa 0303 	sub.w	r3, sl, r3
 8010ff8:	f8dc a000 	ldr.w	sl, [ip]
 8010ffc:	0c12      	lsrs	r2, r2, #16
 8010ffe:	fa13 f38a 	uxtah	r3, r3, sl
 8011002:	fb06 e202 	mla	r2, r6, r2, lr
 8011006:	9300      	str	r3, [sp, #0]
 8011008:	9b00      	ldr	r3, [sp, #0]
 801100a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801100e:	b292      	uxth	r2, r2
 8011010:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011018:	f8bd 3000 	ldrh.w	r3, [sp]
 801101c:	4581      	cmp	r9, r0
 801101e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011022:	f84c 3b04 	str.w	r3, [ip], #4
 8011026:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801102a:	d2db      	bcs.n	8010fe4 <quorem+0x44>
 801102c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011030:	b92b      	cbnz	r3, 801103e <quorem+0x9e>
 8011032:	9b01      	ldr	r3, [sp, #4]
 8011034:	3b04      	subs	r3, #4
 8011036:	429d      	cmp	r5, r3
 8011038:	461a      	mov	r2, r3
 801103a:	d32e      	bcc.n	801109a <quorem+0xfa>
 801103c:	613c      	str	r4, [r7, #16]
 801103e:	4638      	mov	r0, r7
 8011040:	f001 f8c4 	bl	80121cc <__mcmp>
 8011044:	2800      	cmp	r0, #0
 8011046:	db24      	blt.n	8011092 <quorem+0xf2>
 8011048:	3601      	adds	r6, #1
 801104a:	4628      	mov	r0, r5
 801104c:	f04f 0c00 	mov.w	ip, #0
 8011050:	f858 2b04 	ldr.w	r2, [r8], #4
 8011054:	f8d0 e000 	ldr.w	lr, [r0]
 8011058:	b293      	uxth	r3, r2
 801105a:	ebac 0303 	sub.w	r3, ip, r3
 801105e:	0c12      	lsrs	r2, r2, #16
 8011060:	fa13 f38e 	uxtah	r3, r3, lr
 8011064:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011068:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801106c:	b29b      	uxth	r3, r3
 801106e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011072:	45c1      	cmp	r9, r8
 8011074:	f840 3b04 	str.w	r3, [r0], #4
 8011078:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801107c:	d2e8      	bcs.n	8011050 <quorem+0xb0>
 801107e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011082:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011086:	b922      	cbnz	r2, 8011092 <quorem+0xf2>
 8011088:	3b04      	subs	r3, #4
 801108a:	429d      	cmp	r5, r3
 801108c:	461a      	mov	r2, r3
 801108e:	d30a      	bcc.n	80110a6 <quorem+0x106>
 8011090:	613c      	str	r4, [r7, #16]
 8011092:	4630      	mov	r0, r6
 8011094:	b003      	add	sp, #12
 8011096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801109a:	6812      	ldr	r2, [r2, #0]
 801109c:	3b04      	subs	r3, #4
 801109e:	2a00      	cmp	r2, #0
 80110a0:	d1cc      	bne.n	801103c <quorem+0x9c>
 80110a2:	3c01      	subs	r4, #1
 80110a4:	e7c7      	b.n	8011036 <quorem+0x96>
 80110a6:	6812      	ldr	r2, [r2, #0]
 80110a8:	3b04      	subs	r3, #4
 80110aa:	2a00      	cmp	r2, #0
 80110ac:	d1f0      	bne.n	8011090 <quorem+0xf0>
 80110ae:	3c01      	subs	r4, #1
 80110b0:	e7eb      	b.n	801108a <quorem+0xea>
 80110b2:	2000      	movs	r0, #0
 80110b4:	e7ee      	b.n	8011094 <quorem+0xf4>
	...

080110b8 <_dtoa_r>:
 80110b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110bc:	ed2d 8b04 	vpush	{d8-d9}
 80110c0:	ec57 6b10 	vmov	r6, r7, d0
 80110c4:	b093      	sub	sp, #76	; 0x4c
 80110c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80110c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80110cc:	9106      	str	r1, [sp, #24]
 80110ce:	ee10 aa10 	vmov	sl, s0
 80110d2:	4604      	mov	r4, r0
 80110d4:	9209      	str	r2, [sp, #36]	; 0x24
 80110d6:	930c      	str	r3, [sp, #48]	; 0x30
 80110d8:	46bb      	mov	fp, r7
 80110da:	b975      	cbnz	r5, 80110fa <_dtoa_r+0x42>
 80110dc:	2010      	movs	r0, #16
 80110de:	f000 fddd 	bl	8011c9c <malloc>
 80110e2:	4602      	mov	r2, r0
 80110e4:	6260      	str	r0, [r4, #36]	; 0x24
 80110e6:	b920      	cbnz	r0, 80110f2 <_dtoa_r+0x3a>
 80110e8:	4ba7      	ldr	r3, [pc, #668]	; (8011388 <_dtoa_r+0x2d0>)
 80110ea:	21ea      	movs	r1, #234	; 0xea
 80110ec:	48a7      	ldr	r0, [pc, #668]	; (801138c <_dtoa_r+0x2d4>)
 80110ee:	f001 fbd1 	bl	8012894 <__assert_func>
 80110f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80110f6:	6005      	str	r5, [r0, #0]
 80110f8:	60c5      	str	r5, [r0, #12]
 80110fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110fc:	6819      	ldr	r1, [r3, #0]
 80110fe:	b151      	cbz	r1, 8011116 <_dtoa_r+0x5e>
 8011100:	685a      	ldr	r2, [r3, #4]
 8011102:	604a      	str	r2, [r1, #4]
 8011104:	2301      	movs	r3, #1
 8011106:	4093      	lsls	r3, r2
 8011108:	608b      	str	r3, [r1, #8]
 801110a:	4620      	mov	r0, r4
 801110c:	f000 fe1c 	bl	8011d48 <_Bfree>
 8011110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011112:	2200      	movs	r2, #0
 8011114:	601a      	str	r2, [r3, #0]
 8011116:	1e3b      	subs	r3, r7, #0
 8011118:	bfaa      	itet	ge
 801111a:	2300      	movge	r3, #0
 801111c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011120:	f8c8 3000 	strge.w	r3, [r8]
 8011124:	4b9a      	ldr	r3, [pc, #616]	; (8011390 <_dtoa_r+0x2d8>)
 8011126:	bfbc      	itt	lt
 8011128:	2201      	movlt	r2, #1
 801112a:	f8c8 2000 	strlt.w	r2, [r8]
 801112e:	ea33 030b 	bics.w	r3, r3, fp
 8011132:	d11b      	bne.n	801116c <_dtoa_r+0xb4>
 8011134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011136:	f242 730f 	movw	r3, #9999	; 0x270f
 801113a:	6013      	str	r3, [r2, #0]
 801113c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011140:	4333      	orrs	r3, r6
 8011142:	f000 8592 	beq.w	8011c6a <_dtoa_r+0xbb2>
 8011146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011148:	b963      	cbnz	r3, 8011164 <_dtoa_r+0xac>
 801114a:	4b92      	ldr	r3, [pc, #584]	; (8011394 <_dtoa_r+0x2dc>)
 801114c:	e022      	b.n	8011194 <_dtoa_r+0xdc>
 801114e:	4b92      	ldr	r3, [pc, #584]	; (8011398 <_dtoa_r+0x2e0>)
 8011150:	9301      	str	r3, [sp, #4]
 8011152:	3308      	adds	r3, #8
 8011154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011156:	6013      	str	r3, [r2, #0]
 8011158:	9801      	ldr	r0, [sp, #4]
 801115a:	b013      	add	sp, #76	; 0x4c
 801115c:	ecbd 8b04 	vpop	{d8-d9}
 8011160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011164:	4b8b      	ldr	r3, [pc, #556]	; (8011394 <_dtoa_r+0x2dc>)
 8011166:	9301      	str	r3, [sp, #4]
 8011168:	3303      	adds	r3, #3
 801116a:	e7f3      	b.n	8011154 <_dtoa_r+0x9c>
 801116c:	2200      	movs	r2, #0
 801116e:	2300      	movs	r3, #0
 8011170:	4650      	mov	r0, sl
 8011172:	4659      	mov	r1, fp
 8011174:	f7ef fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8011178:	ec4b ab19 	vmov	d9, sl, fp
 801117c:	4680      	mov	r8, r0
 801117e:	b158      	cbz	r0, 8011198 <_dtoa_r+0xe0>
 8011180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011182:	2301      	movs	r3, #1
 8011184:	6013      	str	r3, [r2, #0]
 8011186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011188:	2b00      	cmp	r3, #0
 801118a:	f000 856b 	beq.w	8011c64 <_dtoa_r+0xbac>
 801118e:	4883      	ldr	r0, [pc, #524]	; (801139c <_dtoa_r+0x2e4>)
 8011190:	6018      	str	r0, [r3, #0]
 8011192:	1e43      	subs	r3, r0, #1
 8011194:	9301      	str	r3, [sp, #4]
 8011196:	e7df      	b.n	8011158 <_dtoa_r+0xa0>
 8011198:	ec4b ab10 	vmov	d0, sl, fp
 801119c:	aa10      	add	r2, sp, #64	; 0x40
 801119e:	a911      	add	r1, sp, #68	; 0x44
 80111a0:	4620      	mov	r0, r4
 80111a2:	f001 f8b9 	bl	8012318 <__d2b>
 80111a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80111aa:	ee08 0a10 	vmov	s16, r0
 80111ae:	2d00      	cmp	r5, #0
 80111b0:	f000 8084 	beq.w	80112bc <_dtoa_r+0x204>
 80111b4:	ee19 3a90 	vmov	r3, s19
 80111b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80111bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80111c0:	4656      	mov	r6, sl
 80111c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80111c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80111ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80111ce:	4b74      	ldr	r3, [pc, #464]	; (80113a0 <_dtoa_r+0x2e8>)
 80111d0:	2200      	movs	r2, #0
 80111d2:	4630      	mov	r0, r6
 80111d4:	4639      	mov	r1, r7
 80111d6:	f7ef f85f 	bl	8000298 <__aeabi_dsub>
 80111da:	a365      	add	r3, pc, #404	; (adr r3, 8011370 <_dtoa_r+0x2b8>)
 80111dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e0:	f7ef fa12 	bl	8000608 <__aeabi_dmul>
 80111e4:	a364      	add	r3, pc, #400	; (adr r3, 8011378 <_dtoa_r+0x2c0>)
 80111e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ea:	f7ef f857 	bl	800029c <__adddf3>
 80111ee:	4606      	mov	r6, r0
 80111f0:	4628      	mov	r0, r5
 80111f2:	460f      	mov	r7, r1
 80111f4:	f7ef f99e 	bl	8000534 <__aeabi_i2d>
 80111f8:	a361      	add	r3, pc, #388	; (adr r3, 8011380 <_dtoa_r+0x2c8>)
 80111fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111fe:	f7ef fa03 	bl	8000608 <__aeabi_dmul>
 8011202:	4602      	mov	r2, r0
 8011204:	460b      	mov	r3, r1
 8011206:	4630      	mov	r0, r6
 8011208:	4639      	mov	r1, r7
 801120a:	f7ef f847 	bl	800029c <__adddf3>
 801120e:	4606      	mov	r6, r0
 8011210:	460f      	mov	r7, r1
 8011212:	f7ef fca9 	bl	8000b68 <__aeabi_d2iz>
 8011216:	2200      	movs	r2, #0
 8011218:	9000      	str	r0, [sp, #0]
 801121a:	2300      	movs	r3, #0
 801121c:	4630      	mov	r0, r6
 801121e:	4639      	mov	r1, r7
 8011220:	f7ef fc64 	bl	8000aec <__aeabi_dcmplt>
 8011224:	b150      	cbz	r0, 801123c <_dtoa_r+0x184>
 8011226:	9800      	ldr	r0, [sp, #0]
 8011228:	f7ef f984 	bl	8000534 <__aeabi_i2d>
 801122c:	4632      	mov	r2, r6
 801122e:	463b      	mov	r3, r7
 8011230:	f7ef fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 8011234:	b910      	cbnz	r0, 801123c <_dtoa_r+0x184>
 8011236:	9b00      	ldr	r3, [sp, #0]
 8011238:	3b01      	subs	r3, #1
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	9b00      	ldr	r3, [sp, #0]
 801123e:	2b16      	cmp	r3, #22
 8011240:	d85a      	bhi.n	80112f8 <_dtoa_r+0x240>
 8011242:	9a00      	ldr	r2, [sp, #0]
 8011244:	4b57      	ldr	r3, [pc, #348]	; (80113a4 <_dtoa_r+0x2ec>)
 8011246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124e:	ec51 0b19 	vmov	r0, r1, d9
 8011252:	f7ef fc4b 	bl	8000aec <__aeabi_dcmplt>
 8011256:	2800      	cmp	r0, #0
 8011258:	d050      	beq.n	80112fc <_dtoa_r+0x244>
 801125a:	9b00      	ldr	r3, [sp, #0]
 801125c:	3b01      	subs	r3, #1
 801125e:	9300      	str	r3, [sp, #0]
 8011260:	2300      	movs	r3, #0
 8011262:	930b      	str	r3, [sp, #44]	; 0x2c
 8011264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011266:	1b5d      	subs	r5, r3, r5
 8011268:	1e6b      	subs	r3, r5, #1
 801126a:	9305      	str	r3, [sp, #20]
 801126c:	bf45      	ittet	mi
 801126e:	f1c5 0301 	rsbmi	r3, r5, #1
 8011272:	9304      	strmi	r3, [sp, #16]
 8011274:	2300      	movpl	r3, #0
 8011276:	2300      	movmi	r3, #0
 8011278:	bf4c      	ite	mi
 801127a:	9305      	strmi	r3, [sp, #20]
 801127c:	9304      	strpl	r3, [sp, #16]
 801127e:	9b00      	ldr	r3, [sp, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	db3d      	blt.n	8011300 <_dtoa_r+0x248>
 8011284:	9b05      	ldr	r3, [sp, #20]
 8011286:	9a00      	ldr	r2, [sp, #0]
 8011288:	920a      	str	r2, [sp, #40]	; 0x28
 801128a:	4413      	add	r3, r2
 801128c:	9305      	str	r3, [sp, #20]
 801128e:	2300      	movs	r3, #0
 8011290:	9307      	str	r3, [sp, #28]
 8011292:	9b06      	ldr	r3, [sp, #24]
 8011294:	2b09      	cmp	r3, #9
 8011296:	f200 8089 	bhi.w	80113ac <_dtoa_r+0x2f4>
 801129a:	2b05      	cmp	r3, #5
 801129c:	bfc4      	itt	gt
 801129e:	3b04      	subgt	r3, #4
 80112a0:	9306      	strgt	r3, [sp, #24]
 80112a2:	9b06      	ldr	r3, [sp, #24]
 80112a4:	f1a3 0302 	sub.w	r3, r3, #2
 80112a8:	bfcc      	ite	gt
 80112aa:	2500      	movgt	r5, #0
 80112ac:	2501      	movle	r5, #1
 80112ae:	2b03      	cmp	r3, #3
 80112b0:	f200 8087 	bhi.w	80113c2 <_dtoa_r+0x30a>
 80112b4:	e8df f003 	tbb	[pc, r3]
 80112b8:	59383a2d 	.word	0x59383a2d
 80112bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80112c0:	441d      	add	r5, r3
 80112c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80112c6:	2b20      	cmp	r3, #32
 80112c8:	bfc1      	itttt	gt
 80112ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80112ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80112d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80112d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80112da:	bfda      	itte	le
 80112dc:	f1c3 0320 	rsble	r3, r3, #32
 80112e0:	fa06 f003 	lslle.w	r0, r6, r3
 80112e4:	4318      	orrgt	r0, r3
 80112e6:	f7ef f915 	bl	8000514 <__aeabi_ui2d>
 80112ea:	2301      	movs	r3, #1
 80112ec:	4606      	mov	r6, r0
 80112ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80112f2:	3d01      	subs	r5, #1
 80112f4:	930e      	str	r3, [sp, #56]	; 0x38
 80112f6:	e76a      	b.n	80111ce <_dtoa_r+0x116>
 80112f8:	2301      	movs	r3, #1
 80112fa:	e7b2      	b.n	8011262 <_dtoa_r+0x1aa>
 80112fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80112fe:	e7b1      	b.n	8011264 <_dtoa_r+0x1ac>
 8011300:	9b04      	ldr	r3, [sp, #16]
 8011302:	9a00      	ldr	r2, [sp, #0]
 8011304:	1a9b      	subs	r3, r3, r2
 8011306:	9304      	str	r3, [sp, #16]
 8011308:	4253      	negs	r3, r2
 801130a:	9307      	str	r3, [sp, #28]
 801130c:	2300      	movs	r3, #0
 801130e:	930a      	str	r3, [sp, #40]	; 0x28
 8011310:	e7bf      	b.n	8011292 <_dtoa_r+0x1da>
 8011312:	2300      	movs	r3, #0
 8011314:	9308      	str	r3, [sp, #32]
 8011316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011318:	2b00      	cmp	r3, #0
 801131a:	dc55      	bgt.n	80113c8 <_dtoa_r+0x310>
 801131c:	2301      	movs	r3, #1
 801131e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011322:	461a      	mov	r2, r3
 8011324:	9209      	str	r2, [sp, #36]	; 0x24
 8011326:	e00c      	b.n	8011342 <_dtoa_r+0x28a>
 8011328:	2301      	movs	r3, #1
 801132a:	e7f3      	b.n	8011314 <_dtoa_r+0x25c>
 801132c:	2300      	movs	r3, #0
 801132e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011330:	9308      	str	r3, [sp, #32]
 8011332:	9b00      	ldr	r3, [sp, #0]
 8011334:	4413      	add	r3, r2
 8011336:	9302      	str	r3, [sp, #8]
 8011338:	3301      	adds	r3, #1
 801133a:	2b01      	cmp	r3, #1
 801133c:	9303      	str	r3, [sp, #12]
 801133e:	bfb8      	it	lt
 8011340:	2301      	movlt	r3, #1
 8011342:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011344:	2200      	movs	r2, #0
 8011346:	6042      	str	r2, [r0, #4]
 8011348:	2204      	movs	r2, #4
 801134a:	f102 0614 	add.w	r6, r2, #20
 801134e:	429e      	cmp	r6, r3
 8011350:	6841      	ldr	r1, [r0, #4]
 8011352:	d93d      	bls.n	80113d0 <_dtoa_r+0x318>
 8011354:	4620      	mov	r0, r4
 8011356:	f000 fcb7 	bl	8011cc8 <_Balloc>
 801135a:	9001      	str	r0, [sp, #4]
 801135c:	2800      	cmp	r0, #0
 801135e:	d13b      	bne.n	80113d8 <_dtoa_r+0x320>
 8011360:	4b11      	ldr	r3, [pc, #68]	; (80113a8 <_dtoa_r+0x2f0>)
 8011362:	4602      	mov	r2, r0
 8011364:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011368:	e6c0      	b.n	80110ec <_dtoa_r+0x34>
 801136a:	2301      	movs	r3, #1
 801136c:	e7df      	b.n	801132e <_dtoa_r+0x276>
 801136e:	bf00      	nop
 8011370:	636f4361 	.word	0x636f4361
 8011374:	3fd287a7 	.word	0x3fd287a7
 8011378:	8b60c8b3 	.word	0x8b60c8b3
 801137c:	3fc68a28 	.word	0x3fc68a28
 8011380:	509f79fb 	.word	0x509f79fb
 8011384:	3fd34413 	.word	0x3fd34413
 8011388:	080143f9 	.word	0x080143f9
 801138c:	08014410 	.word	0x08014410
 8011390:	7ff00000 	.word	0x7ff00000
 8011394:	080143f5 	.word	0x080143f5
 8011398:	080143ec 	.word	0x080143ec
 801139c:	080143c9 	.word	0x080143c9
 80113a0:	3ff80000 	.word	0x3ff80000
 80113a4:	08014500 	.word	0x08014500
 80113a8:	0801446b 	.word	0x0801446b
 80113ac:	2501      	movs	r5, #1
 80113ae:	2300      	movs	r3, #0
 80113b0:	9306      	str	r3, [sp, #24]
 80113b2:	9508      	str	r5, [sp, #32]
 80113b4:	f04f 33ff 	mov.w	r3, #4294967295
 80113b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80113bc:	2200      	movs	r2, #0
 80113be:	2312      	movs	r3, #18
 80113c0:	e7b0      	b.n	8011324 <_dtoa_r+0x26c>
 80113c2:	2301      	movs	r3, #1
 80113c4:	9308      	str	r3, [sp, #32]
 80113c6:	e7f5      	b.n	80113b4 <_dtoa_r+0x2fc>
 80113c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80113ce:	e7b8      	b.n	8011342 <_dtoa_r+0x28a>
 80113d0:	3101      	adds	r1, #1
 80113d2:	6041      	str	r1, [r0, #4]
 80113d4:	0052      	lsls	r2, r2, #1
 80113d6:	e7b8      	b.n	801134a <_dtoa_r+0x292>
 80113d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113da:	9a01      	ldr	r2, [sp, #4]
 80113dc:	601a      	str	r2, [r3, #0]
 80113de:	9b03      	ldr	r3, [sp, #12]
 80113e0:	2b0e      	cmp	r3, #14
 80113e2:	f200 809d 	bhi.w	8011520 <_dtoa_r+0x468>
 80113e6:	2d00      	cmp	r5, #0
 80113e8:	f000 809a 	beq.w	8011520 <_dtoa_r+0x468>
 80113ec:	9b00      	ldr	r3, [sp, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	dd32      	ble.n	8011458 <_dtoa_r+0x3a0>
 80113f2:	4ab7      	ldr	r2, [pc, #732]	; (80116d0 <_dtoa_r+0x618>)
 80113f4:	f003 030f 	and.w	r3, r3, #15
 80113f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80113fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011400:	9b00      	ldr	r3, [sp, #0]
 8011402:	05d8      	lsls	r0, r3, #23
 8011404:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011408:	d516      	bpl.n	8011438 <_dtoa_r+0x380>
 801140a:	4bb2      	ldr	r3, [pc, #712]	; (80116d4 <_dtoa_r+0x61c>)
 801140c:	ec51 0b19 	vmov	r0, r1, d9
 8011410:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011414:	f7ef fa22 	bl	800085c <__aeabi_ddiv>
 8011418:	f007 070f 	and.w	r7, r7, #15
 801141c:	4682      	mov	sl, r0
 801141e:	468b      	mov	fp, r1
 8011420:	2503      	movs	r5, #3
 8011422:	4eac      	ldr	r6, [pc, #688]	; (80116d4 <_dtoa_r+0x61c>)
 8011424:	b957      	cbnz	r7, 801143c <_dtoa_r+0x384>
 8011426:	4642      	mov	r2, r8
 8011428:	464b      	mov	r3, r9
 801142a:	4650      	mov	r0, sl
 801142c:	4659      	mov	r1, fp
 801142e:	f7ef fa15 	bl	800085c <__aeabi_ddiv>
 8011432:	4682      	mov	sl, r0
 8011434:	468b      	mov	fp, r1
 8011436:	e028      	b.n	801148a <_dtoa_r+0x3d2>
 8011438:	2502      	movs	r5, #2
 801143a:	e7f2      	b.n	8011422 <_dtoa_r+0x36a>
 801143c:	07f9      	lsls	r1, r7, #31
 801143e:	d508      	bpl.n	8011452 <_dtoa_r+0x39a>
 8011440:	4640      	mov	r0, r8
 8011442:	4649      	mov	r1, r9
 8011444:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011448:	f7ef f8de 	bl	8000608 <__aeabi_dmul>
 801144c:	3501      	adds	r5, #1
 801144e:	4680      	mov	r8, r0
 8011450:	4689      	mov	r9, r1
 8011452:	107f      	asrs	r7, r7, #1
 8011454:	3608      	adds	r6, #8
 8011456:	e7e5      	b.n	8011424 <_dtoa_r+0x36c>
 8011458:	f000 809b 	beq.w	8011592 <_dtoa_r+0x4da>
 801145c:	9b00      	ldr	r3, [sp, #0]
 801145e:	4f9d      	ldr	r7, [pc, #628]	; (80116d4 <_dtoa_r+0x61c>)
 8011460:	425e      	negs	r6, r3
 8011462:	4b9b      	ldr	r3, [pc, #620]	; (80116d0 <_dtoa_r+0x618>)
 8011464:	f006 020f 	and.w	r2, r6, #15
 8011468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011470:	ec51 0b19 	vmov	r0, r1, d9
 8011474:	f7ef f8c8 	bl	8000608 <__aeabi_dmul>
 8011478:	1136      	asrs	r6, r6, #4
 801147a:	4682      	mov	sl, r0
 801147c:	468b      	mov	fp, r1
 801147e:	2300      	movs	r3, #0
 8011480:	2502      	movs	r5, #2
 8011482:	2e00      	cmp	r6, #0
 8011484:	d17a      	bne.n	801157c <_dtoa_r+0x4c4>
 8011486:	2b00      	cmp	r3, #0
 8011488:	d1d3      	bne.n	8011432 <_dtoa_r+0x37a>
 801148a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801148c:	2b00      	cmp	r3, #0
 801148e:	f000 8082 	beq.w	8011596 <_dtoa_r+0x4de>
 8011492:	4b91      	ldr	r3, [pc, #580]	; (80116d8 <_dtoa_r+0x620>)
 8011494:	2200      	movs	r2, #0
 8011496:	4650      	mov	r0, sl
 8011498:	4659      	mov	r1, fp
 801149a:	f7ef fb27 	bl	8000aec <__aeabi_dcmplt>
 801149e:	2800      	cmp	r0, #0
 80114a0:	d079      	beq.n	8011596 <_dtoa_r+0x4de>
 80114a2:	9b03      	ldr	r3, [sp, #12]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d076      	beq.n	8011596 <_dtoa_r+0x4de>
 80114a8:	9b02      	ldr	r3, [sp, #8]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	dd36      	ble.n	801151c <_dtoa_r+0x464>
 80114ae:	9b00      	ldr	r3, [sp, #0]
 80114b0:	4650      	mov	r0, sl
 80114b2:	4659      	mov	r1, fp
 80114b4:	1e5f      	subs	r7, r3, #1
 80114b6:	2200      	movs	r2, #0
 80114b8:	4b88      	ldr	r3, [pc, #544]	; (80116dc <_dtoa_r+0x624>)
 80114ba:	f7ef f8a5 	bl	8000608 <__aeabi_dmul>
 80114be:	9e02      	ldr	r6, [sp, #8]
 80114c0:	4682      	mov	sl, r0
 80114c2:	468b      	mov	fp, r1
 80114c4:	3501      	adds	r5, #1
 80114c6:	4628      	mov	r0, r5
 80114c8:	f7ef f834 	bl	8000534 <__aeabi_i2d>
 80114cc:	4652      	mov	r2, sl
 80114ce:	465b      	mov	r3, fp
 80114d0:	f7ef f89a 	bl	8000608 <__aeabi_dmul>
 80114d4:	4b82      	ldr	r3, [pc, #520]	; (80116e0 <_dtoa_r+0x628>)
 80114d6:	2200      	movs	r2, #0
 80114d8:	f7ee fee0 	bl	800029c <__adddf3>
 80114dc:	46d0      	mov	r8, sl
 80114de:	46d9      	mov	r9, fp
 80114e0:	4682      	mov	sl, r0
 80114e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80114e6:	2e00      	cmp	r6, #0
 80114e8:	d158      	bne.n	801159c <_dtoa_r+0x4e4>
 80114ea:	4b7e      	ldr	r3, [pc, #504]	; (80116e4 <_dtoa_r+0x62c>)
 80114ec:	2200      	movs	r2, #0
 80114ee:	4640      	mov	r0, r8
 80114f0:	4649      	mov	r1, r9
 80114f2:	f7ee fed1 	bl	8000298 <__aeabi_dsub>
 80114f6:	4652      	mov	r2, sl
 80114f8:	465b      	mov	r3, fp
 80114fa:	4680      	mov	r8, r0
 80114fc:	4689      	mov	r9, r1
 80114fe:	f7ef fb13 	bl	8000b28 <__aeabi_dcmpgt>
 8011502:	2800      	cmp	r0, #0
 8011504:	f040 8295 	bne.w	8011a32 <_dtoa_r+0x97a>
 8011508:	4652      	mov	r2, sl
 801150a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801150e:	4640      	mov	r0, r8
 8011510:	4649      	mov	r1, r9
 8011512:	f7ef faeb 	bl	8000aec <__aeabi_dcmplt>
 8011516:	2800      	cmp	r0, #0
 8011518:	f040 8289 	bne.w	8011a2e <_dtoa_r+0x976>
 801151c:	ec5b ab19 	vmov	sl, fp, d9
 8011520:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011522:	2b00      	cmp	r3, #0
 8011524:	f2c0 8148 	blt.w	80117b8 <_dtoa_r+0x700>
 8011528:	9a00      	ldr	r2, [sp, #0]
 801152a:	2a0e      	cmp	r2, #14
 801152c:	f300 8144 	bgt.w	80117b8 <_dtoa_r+0x700>
 8011530:	4b67      	ldr	r3, [pc, #412]	; (80116d0 <_dtoa_r+0x618>)
 8011532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011536:	e9d3 8900 	ldrd	r8, r9, [r3]
 801153a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801153c:	2b00      	cmp	r3, #0
 801153e:	f280 80d5 	bge.w	80116ec <_dtoa_r+0x634>
 8011542:	9b03      	ldr	r3, [sp, #12]
 8011544:	2b00      	cmp	r3, #0
 8011546:	f300 80d1 	bgt.w	80116ec <_dtoa_r+0x634>
 801154a:	f040 826f 	bne.w	8011a2c <_dtoa_r+0x974>
 801154e:	4b65      	ldr	r3, [pc, #404]	; (80116e4 <_dtoa_r+0x62c>)
 8011550:	2200      	movs	r2, #0
 8011552:	4640      	mov	r0, r8
 8011554:	4649      	mov	r1, r9
 8011556:	f7ef f857 	bl	8000608 <__aeabi_dmul>
 801155a:	4652      	mov	r2, sl
 801155c:	465b      	mov	r3, fp
 801155e:	f7ef fad9 	bl	8000b14 <__aeabi_dcmpge>
 8011562:	9e03      	ldr	r6, [sp, #12]
 8011564:	4637      	mov	r7, r6
 8011566:	2800      	cmp	r0, #0
 8011568:	f040 8245 	bne.w	80119f6 <_dtoa_r+0x93e>
 801156c:	9d01      	ldr	r5, [sp, #4]
 801156e:	2331      	movs	r3, #49	; 0x31
 8011570:	f805 3b01 	strb.w	r3, [r5], #1
 8011574:	9b00      	ldr	r3, [sp, #0]
 8011576:	3301      	adds	r3, #1
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	e240      	b.n	80119fe <_dtoa_r+0x946>
 801157c:	07f2      	lsls	r2, r6, #31
 801157e:	d505      	bpl.n	801158c <_dtoa_r+0x4d4>
 8011580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011584:	f7ef f840 	bl	8000608 <__aeabi_dmul>
 8011588:	3501      	adds	r5, #1
 801158a:	2301      	movs	r3, #1
 801158c:	1076      	asrs	r6, r6, #1
 801158e:	3708      	adds	r7, #8
 8011590:	e777      	b.n	8011482 <_dtoa_r+0x3ca>
 8011592:	2502      	movs	r5, #2
 8011594:	e779      	b.n	801148a <_dtoa_r+0x3d2>
 8011596:	9f00      	ldr	r7, [sp, #0]
 8011598:	9e03      	ldr	r6, [sp, #12]
 801159a:	e794      	b.n	80114c6 <_dtoa_r+0x40e>
 801159c:	9901      	ldr	r1, [sp, #4]
 801159e:	4b4c      	ldr	r3, [pc, #304]	; (80116d0 <_dtoa_r+0x618>)
 80115a0:	4431      	add	r1, r6
 80115a2:	910d      	str	r1, [sp, #52]	; 0x34
 80115a4:	9908      	ldr	r1, [sp, #32]
 80115a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80115aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80115ae:	2900      	cmp	r1, #0
 80115b0:	d043      	beq.n	801163a <_dtoa_r+0x582>
 80115b2:	494d      	ldr	r1, [pc, #308]	; (80116e8 <_dtoa_r+0x630>)
 80115b4:	2000      	movs	r0, #0
 80115b6:	f7ef f951 	bl	800085c <__aeabi_ddiv>
 80115ba:	4652      	mov	r2, sl
 80115bc:	465b      	mov	r3, fp
 80115be:	f7ee fe6b 	bl	8000298 <__aeabi_dsub>
 80115c2:	9d01      	ldr	r5, [sp, #4]
 80115c4:	4682      	mov	sl, r0
 80115c6:	468b      	mov	fp, r1
 80115c8:	4649      	mov	r1, r9
 80115ca:	4640      	mov	r0, r8
 80115cc:	f7ef facc 	bl	8000b68 <__aeabi_d2iz>
 80115d0:	4606      	mov	r6, r0
 80115d2:	f7ee ffaf 	bl	8000534 <__aeabi_i2d>
 80115d6:	4602      	mov	r2, r0
 80115d8:	460b      	mov	r3, r1
 80115da:	4640      	mov	r0, r8
 80115dc:	4649      	mov	r1, r9
 80115de:	f7ee fe5b 	bl	8000298 <__aeabi_dsub>
 80115e2:	3630      	adds	r6, #48	; 0x30
 80115e4:	f805 6b01 	strb.w	r6, [r5], #1
 80115e8:	4652      	mov	r2, sl
 80115ea:	465b      	mov	r3, fp
 80115ec:	4680      	mov	r8, r0
 80115ee:	4689      	mov	r9, r1
 80115f0:	f7ef fa7c 	bl	8000aec <__aeabi_dcmplt>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d163      	bne.n	80116c0 <_dtoa_r+0x608>
 80115f8:	4642      	mov	r2, r8
 80115fa:	464b      	mov	r3, r9
 80115fc:	4936      	ldr	r1, [pc, #216]	; (80116d8 <_dtoa_r+0x620>)
 80115fe:	2000      	movs	r0, #0
 8011600:	f7ee fe4a 	bl	8000298 <__aeabi_dsub>
 8011604:	4652      	mov	r2, sl
 8011606:	465b      	mov	r3, fp
 8011608:	f7ef fa70 	bl	8000aec <__aeabi_dcmplt>
 801160c:	2800      	cmp	r0, #0
 801160e:	f040 80b5 	bne.w	801177c <_dtoa_r+0x6c4>
 8011612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011614:	429d      	cmp	r5, r3
 8011616:	d081      	beq.n	801151c <_dtoa_r+0x464>
 8011618:	4b30      	ldr	r3, [pc, #192]	; (80116dc <_dtoa_r+0x624>)
 801161a:	2200      	movs	r2, #0
 801161c:	4650      	mov	r0, sl
 801161e:	4659      	mov	r1, fp
 8011620:	f7ee fff2 	bl	8000608 <__aeabi_dmul>
 8011624:	4b2d      	ldr	r3, [pc, #180]	; (80116dc <_dtoa_r+0x624>)
 8011626:	4682      	mov	sl, r0
 8011628:	468b      	mov	fp, r1
 801162a:	4640      	mov	r0, r8
 801162c:	4649      	mov	r1, r9
 801162e:	2200      	movs	r2, #0
 8011630:	f7ee ffea 	bl	8000608 <__aeabi_dmul>
 8011634:	4680      	mov	r8, r0
 8011636:	4689      	mov	r9, r1
 8011638:	e7c6      	b.n	80115c8 <_dtoa_r+0x510>
 801163a:	4650      	mov	r0, sl
 801163c:	4659      	mov	r1, fp
 801163e:	f7ee ffe3 	bl	8000608 <__aeabi_dmul>
 8011642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011644:	9d01      	ldr	r5, [sp, #4]
 8011646:	930f      	str	r3, [sp, #60]	; 0x3c
 8011648:	4682      	mov	sl, r0
 801164a:	468b      	mov	fp, r1
 801164c:	4649      	mov	r1, r9
 801164e:	4640      	mov	r0, r8
 8011650:	f7ef fa8a 	bl	8000b68 <__aeabi_d2iz>
 8011654:	4606      	mov	r6, r0
 8011656:	f7ee ff6d 	bl	8000534 <__aeabi_i2d>
 801165a:	3630      	adds	r6, #48	; 0x30
 801165c:	4602      	mov	r2, r0
 801165e:	460b      	mov	r3, r1
 8011660:	4640      	mov	r0, r8
 8011662:	4649      	mov	r1, r9
 8011664:	f7ee fe18 	bl	8000298 <__aeabi_dsub>
 8011668:	f805 6b01 	strb.w	r6, [r5], #1
 801166c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801166e:	429d      	cmp	r5, r3
 8011670:	4680      	mov	r8, r0
 8011672:	4689      	mov	r9, r1
 8011674:	f04f 0200 	mov.w	r2, #0
 8011678:	d124      	bne.n	80116c4 <_dtoa_r+0x60c>
 801167a:	4b1b      	ldr	r3, [pc, #108]	; (80116e8 <_dtoa_r+0x630>)
 801167c:	4650      	mov	r0, sl
 801167e:	4659      	mov	r1, fp
 8011680:	f7ee fe0c 	bl	800029c <__adddf3>
 8011684:	4602      	mov	r2, r0
 8011686:	460b      	mov	r3, r1
 8011688:	4640      	mov	r0, r8
 801168a:	4649      	mov	r1, r9
 801168c:	f7ef fa4c 	bl	8000b28 <__aeabi_dcmpgt>
 8011690:	2800      	cmp	r0, #0
 8011692:	d173      	bne.n	801177c <_dtoa_r+0x6c4>
 8011694:	4652      	mov	r2, sl
 8011696:	465b      	mov	r3, fp
 8011698:	4913      	ldr	r1, [pc, #76]	; (80116e8 <_dtoa_r+0x630>)
 801169a:	2000      	movs	r0, #0
 801169c:	f7ee fdfc 	bl	8000298 <__aeabi_dsub>
 80116a0:	4602      	mov	r2, r0
 80116a2:	460b      	mov	r3, r1
 80116a4:	4640      	mov	r0, r8
 80116a6:	4649      	mov	r1, r9
 80116a8:	f7ef fa20 	bl	8000aec <__aeabi_dcmplt>
 80116ac:	2800      	cmp	r0, #0
 80116ae:	f43f af35 	beq.w	801151c <_dtoa_r+0x464>
 80116b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80116b4:	1e6b      	subs	r3, r5, #1
 80116b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80116b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80116bc:	2b30      	cmp	r3, #48	; 0x30
 80116be:	d0f8      	beq.n	80116b2 <_dtoa_r+0x5fa>
 80116c0:	9700      	str	r7, [sp, #0]
 80116c2:	e049      	b.n	8011758 <_dtoa_r+0x6a0>
 80116c4:	4b05      	ldr	r3, [pc, #20]	; (80116dc <_dtoa_r+0x624>)
 80116c6:	f7ee ff9f 	bl	8000608 <__aeabi_dmul>
 80116ca:	4680      	mov	r8, r0
 80116cc:	4689      	mov	r9, r1
 80116ce:	e7bd      	b.n	801164c <_dtoa_r+0x594>
 80116d0:	08014500 	.word	0x08014500
 80116d4:	080144d8 	.word	0x080144d8
 80116d8:	3ff00000 	.word	0x3ff00000
 80116dc:	40240000 	.word	0x40240000
 80116e0:	401c0000 	.word	0x401c0000
 80116e4:	40140000 	.word	0x40140000
 80116e8:	3fe00000 	.word	0x3fe00000
 80116ec:	9d01      	ldr	r5, [sp, #4]
 80116ee:	4656      	mov	r6, sl
 80116f0:	465f      	mov	r7, fp
 80116f2:	4642      	mov	r2, r8
 80116f4:	464b      	mov	r3, r9
 80116f6:	4630      	mov	r0, r6
 80116f8:	4639      	mov	r1, r7
 80116fa:	f7ef f8af 	bl	800085c <__aeabi_ddiv>
 80116fe:	f7ef fa33 	bl	8000b68 <__aeabi_d2iz>
 8011702:	4682      	mov	sl, r0
 8011704:	f7ee ff16 	bl	8000534 <__aeabi_i2d>
 8011708:	4642      	mov	r2, r8
 801170a:	464b      	mov	r3, r9
 801170c:	f7ee ff7c 	bl	8000608 <__aeabi_dmul>
 8011710:	4602      	mov	r2, r0
 8011712:	460b      	mov	r3, r1
 8011714:	4630      	mov	r0, r6
 8011716:	4639      	mov	r1, r7
 8011718:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801171c:	f7ee fdbc 	bl	8000298 <__aeabi_dsub>
 8011720:	f805 6b01 	strb.w	r6, [r5], #1
 8011724:	9e01      	ldr	r6, [sp, #4]
 8011726:	9f03      	ldr	r7, [sp, #12]
 8011728:	1bae      	subs	r6, r5, r6
 801172a:	42b7      	cmp	r7, r6
 801172c:	4602      	mov	r2, r0
 801172e:	460b      	mov	r3, r1
 8011730:	d135      	bne.n	801179e <_dtoa_r+0x6e6>
 8011732:	f7ee fdb3 	bl	800029c <__adddf3>
 8011736:	4642      	mov	r2, r8
 8011738:	464b      	mov	r3, r9
 801173a:	4606      	mov	r6, r0
 801173c:	460f      	mov	r7, r1
 801173e:	f7ef f9f3 	bl	8000b28 <__aeabi_dcmpgt>
 8011742:	b9d0      	cbnz	r0, 801177a <_dtoa_r+0x6c2>
 8011744:	4642      	mov	r2, r8
 8011746:	464b      	mov	r3, r9
 8011748:	4630      	mov	r0, r6
 801174a:	4639      	mov	r1, r7
 801174c:	f7ef f9c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8011750:	b110      	cbz	r0, 8011758 <_dtoa_r+0x6a0>
 8011752:	f01a 0f01 	tst.w	sl, #1
 8011756:	d110      	bne.n	801177a <_dtoa_r+0x6c2>
 8011758:	4620      	mov	r0, r4
 801175a:	ee18 1a10 	vmov	r1, s16
 801175e:	f000 faf3 	bl	8011d48 <_Bfree>
 8011762:	2300      	movs	r3, #0
 8011764:	9800      	ldr	r0, [sp, #0]
 8011766:	702b      	strb	r3, [r5, #0]
 8011768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801176a:	3001      	adds	r0, #1
 801176c:	6018      	str	r0, [r3, #0]
 801176e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011770:	2b00      	cmp	r3, #0
 8011772:	f43f acf1 	beq.w	8011158 <_dtoa_r+0xa0>
 8011776:	601d      	str	r5, [r3, #0]
 8011778:	e4ee      	b.n	8011158 <_dtoa_r+0xa0>
 801177a:	9f00      	ldr	r7, [sp, #0]
 801177c:	462b      	mov	r3, r5
 801177e:	461d      	mov	r5, r3
 8011780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011784:	2a39      	cmp	r2, #57	; 0x39
 8011786:	d106      	bne.n	8011796 <_dtoa_r+0x6de>
 8011788:	9a01      	ldr	r2, [sp, #4]
 801178a:	429a      	cmp	r2, r3
 801178c:	d1f7      	bne.n	801177e <_dtoa_r+0x6c6>
 801178e:	9901      	ldr	r1, [sp, #4]
 8011790:	2230      	movs	r2, #48	; 0x30
 8011792:	3701      	adds	r7, #1
 8011794:	700a      	strb	r2, [r1, #0]
 8011796:	781a      	ldrb	r2, [r3, #0]
 8011798:	3201      	adds	r2, #1
 801179a:	701a      	strb	r2, [r3, #0]
 801179c:	e790      	b.n	80116c0 <_dtoa_r+0x608>
 801179e:	4ba6      	ldr	r3, [pc, #664]	; (8011a38 <_dtoa_r+0x980>)
 80117a0:	2200      	movs	r2, #0
 80117a2:	f7ee ff31 	bl	8000608 <__aeabi_dmul>
 80117a6:	2200      	movs	r2, #0
 80117a8:	2300      	movs	r3, #0
 80117aa:	4606      	mov	r6, r0
 80117ac:	460f      	mov	r7, r1
 80117ae:	f7ef f993 	bl	8000ad8 <__aeabi_dcmpeq>
 80117b2:	2800      	cmp	r0, #0
 80117b4:	d09d      	beq.n	80116f2 <_dtoa_r+0x63a>
 80117b6:	e7cf      	b.n	8011758 <_dtoa_r+0x6a0>
 80117b8:	9a08      	ldr	r2, [sp, #32]
 80117ba:	2a00      	cmp	r2, #0
 80117bc:	f000 80d7 	beq.w	801196e <_dtoa_r+0x8b6>
 80117c0:	9a06      	ldr	r2, [sp, #24]
 80117c2:	2a01      	cmp	r2, #1
 80117c4:	f300 80ba 	bgt.w	801193c <_dtoa_r+0x884>
 80117c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117ca:	2a00      	cmp	r2, #0
 80117cc:	f000 80b2 	beq.w	8011934 <_dtoa_r+0x87c>
 80117d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80117d4:	9e07      	ldr	r6, [sp, #28]
 80117d6:	9d04      	ldr	r5, [sp, #16]
 80117d8:	9a04      	ldr	r2, [sp, #16]
 80117da:	441a      	add	r2, r3
 80117dc:	9204      	str	r2, [sp, #16]
 80117de:	9a05      	ldr	r2, [sp, #20]
 80117e0:	2101      	movs	r1, #1
 80117e2:	441a      	add	r2, r3
 80117e4:	4620      	mov	r0, r4
 80117e6:	9205      	str	r2, [sp, #20]
 80117e8:	f000 fb66 	bl	8011eb8 <__i2b>
 80117ec:	4607      	mov	r7, r0
 80117ee:	2d00      	cmp	r5, #0
 80117f0:	dd0c      	ble.n	801180c <_dtoa_r+0x754>
 80117f2:	9b05      	ldr	r3, [sp, #20]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	dd09      	ble.n	801180c <_dtoa_r+0x754>
 80117f8:	42ab      	cmp	r3, r5
 80117fa:	9a04      	ldr	r2, [sp, #16]
 80117fc:	bfa8      	it	ge
 80117fe:	462b      	movge	r3, r5
 8011800:	1ad2      	subs	r2, r2, r3
 8011802:	9204      	str	r2, [sp, #16]
 8011804:	9a05      	ldr	r2, [sp, #20]
 8011806:	1aed      	subs	r5, r5, r3
 8011808:	1ad3      	subs	r3, r2, r3
 801180a:	9305      	str	r3, [sp, #20]
 801180c:	9b07      	ldr	r3, [sp, #28]
 801180e:	b31b      	cbz	r3, 8011858 <_dtoa_r+0x7a0>
 8011810:	9b08      	ldr	r3, [sp, #32]
 8011812:	2b00      	cmp	r3, #0
 8011814:	f000 80af 	beq.w	8011976 <_dtoa_r+0x8be>
 8011818:	2e00      	cmp	r6, #0
 801181a:	dd13      	ble.n	8011844 <_dtoa_r+0x78c>
 801181c:	4639      	mov	r1, r7
 801181e:	4632      	mov	r2, r6
 8011820:	4620      	mov	r0, r4
 8011822:	f000 fc09 	bl	8012038 <__pow5mult>
 8011826:	ee18 2a10 	vmov	r2, s16
 801182a:	4601      	mov	r1, r0
 801182c:	4607      	mov	r7, r0
 801182e:	4620      	mov	r0, r4
 8011830:	f000 fb58 	bl	8011ee4 <__multiply>
 8011834:	ee18 1a10 	vmov	r1, s16
 8011838:	4680      	mov	r8, r0
 801183a:	4620      	mov	r0, r4
 801183c:	f000 fa84 	bl	8011d48 <_Bfree>
 8011840:	ee08 8a10 	vmov	s16, r8
 8011844:	9b07      	ldr	r3, [sp, #28]
 8011846:	1b9a      	subs	r2, r3, r6
 8011848:	d006      	beq.n	8011858 <_dtoa_r+0x7a0>
 801184a:	ee18 1a10 	vmov	r1, s16
 801184e:	4620      	mov	r0, r4
 8011850:	f000 fbf2 	bl	8012038 <__pow5mult>
 8011854:	ee08 0a10 	vmov	s16, r0
 8011858:	2101      	movs	r1, #1
 801185a:	4620      	mov	r0, r4
 801185c:	f000 fb2c 	bl	8011eb8 <__i2b>
 8011860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011862:	2b00      	cmp	r3, #0
 8011864:	4606      	mov	r6, r0
 8011866:	f340 8088 	ble.w	801197a <_dtoa_r+0x8c2>
 801186a:	461a      	mov	r2, r3
 801186c:	4601      	mov	r1, r0
 801186e:	4620      	mov	r0, r4
 8011870:	f000 fbe2 	bl	8012038 <__pow5mult>
 8011874:	9b06      	ldr	r3, [sp, #24]
 8011876:	2b01      	cmp	r3, #1
 8011878:	4606      	mov	r6, r0
 801187a:	f340 8081 	ble.w	8011980 <_dtoa_r+0x8c8>
 801187e:	f04f 0800 	mov.w	r8, #0
 8011882:	6933      	ldr	r3, [r6, #16]
 8011884:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011888:	6918      	ldr	r0, [r3, #16]
 801188a:	f000 fac5 	bl	8011e18 <__hi0bits>
 801188e:	f1c0 0020 	rsb	r0, r0, #32
 8011892:	9b05      	ldr	r3, [sp, #20]
 8011894:	4418      	add	r0, r3
 8011896:	f010 001f 	ands.w	r0, r0, #31
 801189a:	f000 8092 	beq.w	80119c2 <_dtoa_r+0x90a>
 801189e:	f1c0 0320 	rsb	r3, r0, #32
 80118a2:	2b04      	cmp	r3, #4
 80118a4:	f340 808a 	ble.w	80119bc <_dtoa_r+0x904>
 80118a8:	f1c0 001c 	rsb	r0, r0, #28
 80118ac:	9b04      	ldr	r3, [sp, #16]
 80118ae:	4403      	add	r3, r0
 80118b0:	9304      	str	r3, [sp, #16]
 80118b2:	9b05      	ldr	r3, [sp, #20]
 80118b4:	4403      	add	r3, r0
 80118b6:	4405      	add	r5, r0
 80118b8:	9305      	str	r3, [sp, #20]
 80118ba:	9b04      	ldr	r3, [sp, #16]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	dd07      	ble.n	80118d0 <_dtoa_r+0x818>
 80118c0:	ee18 1a10 	vmov	r1, s16
 80118c4:	461a      	mov	r2, r3
 80118c6:	4620      	mov	r0, r4
 80118c8:	f000 fc10 	bl	80120ec <__lshift>
 80118cc:	ee08 0a10 	vmov	s16, r0
 80118d0:	9b05      	ldr	r3, [sp, #20]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	dd05      	ble.n	80118e2 <_dtoa_r+0x82a>
 80118d6:	4631      	mov	r1, r6
 80118d8:	461a      	mov	r2, r3
 80118da:	4620      	mov	r0, r4
 80118dc:	f000 fc06 	bl	80120ec <__lshift>
 80118e0:	4606      	mov	r6, r0
 80118e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d06e      	beq.n	80119c6 <_dtoa_r+0x90e>
 80118e8:	ee18 0a10 	vmov	r0, s16
 80118ec:	4631      	mov	r1, r6
 80118ee:	f000 fc6d 	bl	80121cc <__mcmp>
 80118f2:	2800      	cmp	r0, #0
 80118f4:	da67      	bge.n	80119c6 <_dtoa_r+0x90e>
 80118f6:	9b00      	ldr	r3, [sp, #0]
 80118f8:	3b01      	subs	r3, #1
 80118fa:	ee18 1a10 	vmov	r1, s16
 80118fe:	9300      	str	r3, [sp, #0]
 8011900:	220a      	movs	r2, #10
 8011902:	2300      	movs	r3, #0
 8011904:	4620      	mov	r0, r4
 8011906:	f000 fa41 	bl	8011d8c <__multadd>
 801190a:	9b08      	ldr	r3, [sp, #32]
 801190c:	ee08 0a10 	vmov	s16, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	f000 81b1 	beq.w	8011c78 <_dtoa_r+0xbc0>
 8011916:	2300      	movs	r3, #0
 8011918:	4639      	mov	r1, r7
 801191a:	220a      	movs	r2, #10
 801191c:	4620      	mov	r0, r4
 801191e:	f000 fa35 	bl	8011d8c <__multadd>
 8011922:	9b02      	ldr	r3, [sp, #8]
 8011924:	2b00      	cmp	r3, #0
 8011926:	4607      	mov	r7, r0
 8011928:	f300 808e 	bgt.w	8011a48 <_dtoa_r+0x990>
 801192c:	9b06      	ldr	r3, [sp, #24]
 801192e:	2b02      	cmp	r3, #2
 8011930:	dc51      	bgt.n	80119d6 <_dtoa_r+0x91e>
 8011932:	e089      	b.n	8011a48 <_dtoa_r+0x990>
 8011934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011936:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801193a:	e74b      	b.n	80117d4 <_dtoa_r+0x71c>
 801193c:	9b03      	ldr	r3, [sp, #12]
 801193e:	1e5e      	subs	r6, r3, #1
 8011940:	9b07      	ldr	r3, [sp, #28]
 8011942:	42b3      	cmp	r3, r6
 8011944:	bfbf      	itttt	lt
 8011946:	9b07      	ldrlt	r3, [sp, #28]
 8011948:	9607      	strlt	r6, [sp, #28]
 801194a:	1af2      	sublt	r2, r6, r3
 801194c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801194e:	bfb6      	itet	lt
 8011950:	189b      	addlt	r3, r3, r2
 8011952:	1b9e      	subge	r6, r3, r6
 8011954:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011956:	9b03      	ldr	r3, [sp, #12]
 8011958:	bfb8      	it	lt
 801195a:	2600      	movlt	r6, #0
 801195c:	2b00      	cmp	r3, #0
 801195e:	bfb7      	itett	lt
 8011960:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011964:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011968:	1a9d      	sublt	r5, r3, r2
 801196a:	2300      	movlt	r3, #0
 801196c:	e734      	b.n	80117d8 <_dtoa_r+0x720>
 801196e:	9e07      	ldr	r6, [sp, #28]
 8011970:	9d04      	ldr	r5, [sp, #16]
 8011972:	9f08      	ldr	r7, [sp, #32]
 8011974:	e73b      	b.n	80117ee <_dtoa_r+0x736>
 8011976:	9a07      	ldr	r2, [sp, #28]
 8011978:	e767      	b.n	801184a <_dtoa_r+0x792>
 801197a:	9b06      	ldr	r3, [sp, #24]
 801197c:	2b01      	cmp	r3, #1
 801197e:	dc18      	bgt.n	80119b2 <_dtoa_r+0x8fa>
 8011980:	f1ba 0f00 	cmp.w	sl, #0
 8011984:	d115      	bne.n	80119b2 <_dtoa_r+0x8fa>
 8011986:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801198a:	b993      	cbnz	r3, 80119b2 <_dtoa_r+0x8fa>
 801198c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011990:	0d1b      	lsrs	r3, r3, #20
 8011992:	051b      	lsls	r3, r3, #20
 8011994:	b183      	cbz	r3, 80119b8 <_dtoa_r+0x900>
 8011996:	9b04      	ldr	r3, [sp, #16]
 8011998:	3301      	adds	r3, #1
 801199a:	9304      	str	r3, [sp, #16]
 801199c:	9b05      	ldr	r3, [sp, #20]
 801199e:	3301      	adds	r3, #1
 80119a0:	9305      	str	r3, [sp, #20]
 80119a2:	f04f 0801 	mov.w	r8, #1
 80119a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f47f af6a 	bne.w	8011882 <_dtoa_r+0x7ca>
 80119ae:	2001      	movs	r0, #1
 80119b0:	e76f      	b.n	8011892 <_dtoa_r+0x7da>
 80119b2:	f04f 0800 	mov.w	r8, #0
 80119b6:	e7f6      	b.n	80119a6 <_dtoa_r+0x8ee>
 80119b8:	4698      	mov	r8, r3
 80119ba:	e7f4      	b.n	80119a6 <_dtoa_r+0x8ee>
 80119bc:	f43f af7d 	beq.w	80118ba <_dtoa_r+0x802>
 80119c0:	4618      	mov	r0, r3
 80119c2:	301c      	adds	r0, #28
 80119c4:	e772      	b.n	80118ac <_dtoa_r+0x7f4>
 80119c6:	9b03      	ldr	r3, [sp, #12]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	dc37      	bgt.n	8011a3c <_dtoa_r+0x984>
 80119cc:	9b06      	ldr	r3, [sp, #24]
 80119ce:	2b02      	cmp	r3, #2
 80119d0:	dd34      	ble.n	8011a3c <_dtoa_r+0x984>
 80119d2:	9b03      	ldr	r3, [sp, #12]
 80119d4:	9302      	str	r3, [sp, #8]
 80119d6:	9b02      	ldr	r3, [sp, #8]
 80119d8:	b96b      	cbnz	r3, 80119f6 <_dtoa_r+0x93e>
 80119da:	4631      	mov	r1, r6
 80119dc:	2205      	movs	r2, #5
 80119de:	4620      	mov	r0, r4
 80119e0:	f000 f9d4 	bl	8011d8c <__multadd>
 80119e4:	4601      	mov	r1, r0
 80119e6:	4606      	mov	r6, r0
 80119e8:	ee18 0a10 	vmov	r0, s16
 80119ec:	f000 fbee 	bl	80121cc <__mcmp>
 80119f0:	2800      	cmp	r0, #0
 80119f2:	f73f adbb 	bgt.w	801156c <_dtoa_r+0x4b4>
 80119f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119f8:	9d01      	ldr	r5, [sp, #4]
 80119fa:	43db      	mvns	r3, r3
 80119fc:	9300      	str	r3, [sp, #0]
 80119fe:	f04f 0800 	mov.w	r8, #0
 8011a02:	4631      	mov	r1, r6
 8011a04:	4620      	mov	r0, r4
 8011a06:	f000 f99f 	bl	8011d48 <_Bfree>
 8011a0a:	2f00      	cmp	r7, #0
 8011a0c:	f43f aea4 	beq.w	8011758 <_dtoa_r+0x6a0>
 8011a10:	f1b8 0f00 	cmp.w	r8, #0
 8011a14:	d005      	beq.n	8011a22 <_dtoa_r+0x96a>
 8011a16:	45b8      	cmp	r8, r7
 8011a18:	d003      	beq.n	8011a22 <_dtoa_r+0x96a>
 8011a1a:	4641      	mov	r1, r8
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	f000 f993 	bl	8011d48 <_Bfree>
 8011a22:	4639      	mov	r1, r7
 8011a24:	4620      	mov	r0, r4
 8011a26:	f000 f98f 	bl	8011d48 <_Bfree>
 8011a2a:	e695      	b.n	8011758 <_dtoa_r+0x6a0>
 8011a2c:	2600      	movs	r6, #0
 8011a2e:	4637      	mov	r7, r6
 8011a30:	e7e1      	b.n	80119f6 <_dtoa_r+0x93e>
 8011a32:	9700      	str	r7, [sp, #0]
 8011a34:	4637      	mov	r7, r6
 8011a36:	e599      	b.n	801156c <_dtoa_r+0x4b4>
 8011a38:	40240000 	.word	0x40240000
 8011a3c:	9b08      	ldr	r3, [sp, #32]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f000 80ca 	beq.w	8011bd8 <_dtoa_r+0xb20>
 8011a44:	9b03      	ldr	r3, [sp, #12]
 8011a46:	9302      	str	r3, [sp, #8]
 8011a48:	2d00      	cmp	r5, #0
 8011a4a:	dd05      	ble.n	8011a58 <_dtoa_r+0x9a0>
 8011a4c:	4639      	mov	r1, r7
 8011a4e:	462a      	mov	r2, r5
 8011a50:	4620      	mov	r0, r4
 8011a52:	f000 fb4b 	bl	80120ec <__lshift>
 8011a56:	4607      	mov	r7, r0
 8011a58:	f1b8 0f00 	cmp.w	r8, #0
 8011a5c:	d05b      	beq.n	8011b16 <_dtoa_r+0xa5e>
 8011a5e:	6879      	ldr	r1, [r7, #4]
 8011a60:	4620      	mov	r0, r4
 8011a62:	f000 f931 	bl	8011cc8 <_Balloc>
 8011a66:	4605      	mov	r5, r0
 8011a68:	b928      	cbnz	r0, 8011a76 <_dtoa_r+0x9be>
 8011a6a:	4b87      	ldr	r3, [pc, #540]	; (8011c88 <_dtoa_r+0xbd0>)
 8011a6c:	4602      	mov	r2, r0
 8011a6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011a72:	f7ff bb3b 	b.w	80110ec <_dtoa_r+0x34>
 8011a76:	693a      	ldr	r2, [r7, #16]
 8011a78:	3202      	adds	r2, #2
 8011a7a:	0092      	lsls	r2, r2, #2
 8011a7c:	f107 010c 	add.w	r1, r7, #12
 8011a80:	300c      	adds	r0, #12
 8011a82:	f000 f913 	bl	8011cac <memcpy>
 8011a86:	2201      	movs	r2, #1
 8011a88:	4629      	mov	r1, r5
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	f000 fb2e 	bl	80120ec <__lshift>
 8011a90:	9b01      	ldr	r3, [sp, #4]
 8011a92:	f103 0901 	add.w	r9, r3, #1
 8011a96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	9305      	str	r3, [sp, #20]
 8011a9e:	f00a 0301 	and.w	r3, sl, #1
 8011aa2:	46b8      	mov	r8, r7
 8011aa4:	9304      	str	r3, [sp, #16]
 8011aa6:	4607      	mov	r7, r0
 8011aa8:	4631      	mov	r1, r6
 8011aaa:	ee18 0a10 	vmov	r0, s16
 8011aae:	f7ff fa77 	bl	8010fa0 <quorem>
 8011ab2:	4641      	mov	r1, r8
 8011ab4:	9002      	str	r0, [sp, #8]
 8011ab6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011aba:	ee18 0a10 	vmov	r0, s16
 8011abe:	f000 fb85 	bl	80121cc <__mcmp>
 8011ac2:	463a      	mov	r2, r7
 8011ac4:	9003      	str	r0, [sp, #12]
 8011ac6:	4631      	mov	r1, r6
 8011ac8:	4620      	mov	r0, r4
 8011aca:	f000 fb9b 	bl	8012204 <__mdiff>
 8011ace:	68c2      	ldr	r2, [r0, #12]
 8011ad0:	f109 3bff 	add.w	fp, r9, #4294967295
 8011ad4:	4605      	mov	r5, r0
 8011ad6:	bb02      	cbnz	r2, 8011b1a <_dtoa_r+0xa62>
 8011ad8:	4601      	mov	r1, r0
 8011ada:	ee18 0a10 	vmov	r0, s16
 8011ade:	f000 fb75 	bl	80121cc <__mcmp>
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	4629      	mov	r1, r5
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	9207      	str	r2, [sp, #28]
 8011aea:	f000 f92d 	bl	8011d48 <_Bfree>
 8011aee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011af2:	ea43 0102 	orr.w	r1, r3, r2
 8011af6:	9b04      	ldr	r3, [sp, #16]
 8011af8:	430b      	orrs	r3, r1
 8011afa:	464d      	mov	r5, r9
 8011afc:	d10f      	bne.n	8011b1e <_dtoa_r+0xa66>
 8011afe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011b02:	d02a      	beq.n	8011b5a <_dtoa_r+0xaa2>
 8011b04:	9b03      	ldr	r3, [sp, #12]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	dd02      	ble.n	8011b10 <_dtoa_r+0xa58>
 8011b0a:	9b02      	ldr	r3, [sp, #8]
 8011b0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011b10:	f88b a000 	strb.w	sl, [fp]
 8011b14:	e775      	b.n	8011a02 <_dtoa_r+0x94a>
 8011b16:	4638      	mov	r0, r7
 8011b18:	e7ba      	b.n	8011a90 <_dtoa_r+0x9d8>
 8011b1a:	2201      	movs	r2, #1
 8011b1c:	e7e2      	b.n	8011ae4 <_dtoa_r+0xa2c>
 8011b1e:	9b03      	ldr	r3, [sp, #12]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	db04      	blt.n	8011b2e <_dtoa_r+0xa76>
 8011b24:	9906      	ldr	r1, [sp, #24]
 8011b26:	430b      	orrs	r3, r1
 8011b28:	9904      	ldr	r1, [sp, #16]
 8011b2a:	430b      	orrs	r3, r1
 8011b2c:	d122      	bne.n	8011b74 <_dtoa_r+0xabc>
 8011b2e:	2a00      	cmp	r2, #0
 8011b30:	ddee      	ble.n	8011b10 <_dtoa_r+0xa58>
 8011b32:	ee18 1a10 	vmov	r1, s16
 8011b36:	2201      	movs	r2, #1
 8011b38:	4620      	mov	r0, r4
 8011b3a:	f000 fad7 	bl	80120ec <__lshift>
 8011b3e:	4631      	mov	r1, r6
 8011b40:	ee08 0a10 	vmov	s16, r0
 8011b44:	f000 fb42 	bl	80121cc <__mcmp>
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	dc03      	bgt.n	8011b54 <_dtoa_r+0xa9c>
 8011b4c:	d1e0      	bne.n	8011b10 <_dtoa_r+0xa58>
 8011b4e:	f01a 0f01 	tst.w	sl, #1
 8011b52:	d0dd      	beq.n	8011b10 <_dtoa_r+0xa58>
 8011b54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011b58:	d1d7      	bne.n	8011b0a <_dtoa_r+0xa52>
 8011b5a:	2339      	movs	r3, #57	; 0x39
 8011b5c:	f88b 3000 	strb.w	r3, [fp]
 8011b60:	462b      	mov	r3, r5
 8011b62:	461d      	mov	r5, r3
 8011b64:	3b01      	subs	r3, #1
 8011b66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011b6a:	2a39      	cmp	r2, #57	; 0x39
 8011b6c:	d071      	beq.n	8011c52 <_dtoa_r+0xb9a>
 8011b6e:	3201      	adds	r2, #1
 8011b70:	701a      	strb	r2, [r3, #0]
 8011b72:	e746      	b.n	8011a02 <_dtoa_r+0x94a>
 8011b74:	2a00      	cmp	r2, #0
 8011b76:	dd07      	ble.n	8011b88 <_dtoa_r+0xad0>
 8011b78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011b7c:	d0ed      	beq.n	8011b5a <_dtoa_r+0xaa2>
 8011b7e:	f10a 0301 	add.w	r3, sl, #1
 8011b82:	f88b 3000 	strb.w	r3, [fp]
 8011b86:	e73c      	b.n	8011a02 <_dtoa_r+0x94a>
 8011b88:	9b05      	ldr	r3, [sp, #20]
 8011b8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011b8e:	4599      	cmp	r9, r3
 8011b90:	d047      	beq.n	8011c22 <_dtoa_r+0xb6a>
 8011b92:	ee18 1a10 	vmov	r1, s16
 8011b96:	2300      	movs	r3, #0
 8011b98:	220a      	movs	r2, #10
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f000 f8f6 	bl	8011d8c <__multadd>
 8011ba0:	45b8      	cmp	r8, r7
 8011ba2:	ee08 0a10 	vmov	s16, r0
 8011ba6:	f04f 0300 	mov.w	r3, #0
 8011baa:	f04f 020a 	mov.w	r2, #10
 8011bae:	4641      	mov	r1, r8
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	d106      	bne.n	8011bc2 <_dtoa_r+0xb0a>
 8011bb4:	f000 f8ea 	bl	8011d8c <__multadd>
 8011bb8:	4680      	mov	r8, r0
 8011bba:	4607      	mov	r7, r0
 8011bbc:	f109 0901 	add.w	r9, r9, #1
 8011bc0:	e772      	b.n	8011aa8 <_dtoa_r+0x9f0>
 8011bc2:	f000 f8e3 	bl	8011d8c <__multadd>
 8011bc6:	4639      	mov	r1, r7
 8011bc8:	4680      	mov	r8, r0
 8011bca:	2300      	movs	r3, #0
 8011bcc:	220a      	movs	r2, #10
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f000 f8dc 	bl	8011d8c <__multadd>
 8011bd4:	4607      	mov	r7, r0
 8011bd6:	e7f1      	b.n	8011bbc <_dtoa_r+0xb04>
 8011bd8:	9b03      	ldr	r3, [sp, #12]
 8011bda:	9302      	str	r3, [sp, #8]
 8011bdc:	9d01      	ldr	r5, [sp, #4]
 8011bde:	ee18 0a10 	vmov	r0, s16
 8011be2:	4631      	mov	r1, r6
 8011be4:	f7ff f9dc 	bl	8010fa0 <quorem>
 8011be8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011bec:	9b01      	ldr	r3, [sp, #4]
 8011bee:	f805 ab01 	strb.w	sl, [r5], #1
 8011bf2:	1aea      	subs	r2, r5, r3
 8011bf4:	9b02      	ldr	r3, [sp, #8]
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	dd09      	ble.n	8011c0e <_dtoa_r+0xb56>
 8011bfa:	ee18 1a10 	vmov	r1, s16
 8011bfe:	2300      	movs	r3, #0
 8011c00:	220a      	movs	r2, #10
 8011c02:	4620      	mov	r0, r4
 8011c04:	f000 f8c2 	bl	8011d8c <__multadd>
 8011c08:	ee08 0a10 	vmov	s16, r0
 8011c0c:	e7e7      	b.n	8011bde <_dtoa_r+0xb26>
 8011c0e:	9b02      	ldr	r3, [sp, #8]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	bfc8      	it	gt
 8011c14:	461d      	movgt	r5, r3
 8011c16:	9b01      	ldr	r3, [sp, #4]
 8011c18:	bfd8      	it	le
 8011c1a:	2501      	movle	r5, #1
 8011c1c:	441d      	add	r5, r3
 8011c1e:	f04f 0800 	mov.w	r8, #0
 8011c22:	ee18 1a10 	vmov	r1, s16
 8011c26:	2201      	movs	r2, #1
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f000 fa5f 	bl	80120ec <__lshift>
 8011c2e:	4631      	mov	r1, r6
 8011c30:	ee08 0a10 	vmov	s16, r0
 8011c34:	f000 faca 	bl	80121cc <__mcmp>
 8011c38:	2800      	cmp	r0, #0
 8011c3a:	dc91      	bgt.n	8011b60 <_dtoa_r+0xaa8>
 8011c3c:	d102      	bne.n	8011c44 <_dtoa_r+0xb8c>
 8011c3e:	f01a 0f01 	tst.w	sl, #1
 8011c42:	d18d      	bne.n	8011b60 <_dtoa_r+0xaa8>
 8011c44:	462b      	mov	r3, r5
 8011c46:	461d      	mov	r5, r3
 8011c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011c4c:	2a30      	cmp	r2, #48	; 0x30
 8011c4e:	d0fa      	beq.n	8011c46 <_dtoa_r+0xb8e>
 8011c50:	e6d7      	b.n	8011a02 <_dtoa_r+0x94a>
 8011c52:	9a01      	ldr	r2, [sp, #4]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d184      	bne.n	8011b62 <_dtoa_r+0xaaa>
 8011c58:	9b00      	ldr	r3, [sp, #0]
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	2331      	movs	r3, #49	; 0x31
 8011c60:	7013      	strb	r3, [r2, #0]
 8011c62:	e6ce      	b.n	8011a02 <_dtoa_r+0x94a>
 8011c64:	4b09      	ldr	r3, [pc, #36]	; (8011c8c <_dtoa_r+0xbd4>)
 8011c66:	f7ff ba95 	b.w	8011194 <_dtoa_r+0xdc>
 8011c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	f47f aa6e 	bne.w	801114e <_dtoa_r+0x96>
 8011c72:	4b07      	ldr	r3, [pc, #28]	; (8011c90 <_dtoa_r+0xbd8>)
 8011c74:	f7ff ba8e 	b.w	8011194 <_dtoa_r+0xdc>
 8011c78:	9b02      	ldr	r3, [sp, #8]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	dcae      	bgt.n	8011bdc <_dtoa_r+0xb24>
 8011c7e:	9b06      	ldr	r3, [sp, #24]
 8011c80:	2b02      	cmp	r3, #2
 8011c82:	f73f aea8 	bgt.w	80119d6 <_dtoa_r+0x91e>
 8011c86:	e7a9      	b.n	8011bdc <_dtoa_r+0xb24>
 8011c88:	0801446b 	.word	0x0801446b
 8011c8c:	080143c8 	.word	0x080143c8
 8011c90:	080143ec 	.word	0x080143ec

08011c94 <_localeconv_r>:
 8011c94:	4800      	ldr	r0, [pc, #0]	; (8011c98 <_localeconv_r+0x4>)
 8011c96:	4770      	bx	lr
 8011c98:	20000180 	.word	0x20000180

08011c9c <malloc>:
 8011c9c:	4b02      	ldr	r3, [pc, #8]	; (8011ca8 <malloc+0xc>)
 8011c9e:	4601      	mov	r1, r0
 8011ca0:	6818      	ldr	r0, [r3, #0]
 8011ca2:	f000 bc17 	b.w	80124d4 <_malloc_r>
 8011ca6:	bf00      	nop
 8011ca8:	2000002c 	.word	0x2000002c

08011cac <memcpy>:
 8011cac:	440a      	add	r2, r1
 8011cae:	4291      	cmp	r1, r2
 8011cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011cb4:	d100      	bne.n	8011cb8 <memcpy+0xc>
 8011cb6:	4770      	bx	lr
 8011cb8:	b510      	push	{r4, lr}
 8011cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cc2:	4291      	cmp	r1, r2
 8011cc4:	d1f9      	bne.n	8011cba <memcpy+0xe>
 8011cc6:	bd10      	pop	{r4, pc}

08011cc8 <_Balloc>:
 8011cc8:	b570      	push	{r4, r5, r6, lr}
 8011cca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011ccc:	4604      	mov	r4, r0
 8011cce:	460d      	mov	r5, r1
 8011cd0:	b976      	cbnz	r6, 8011cf0 <_Balloc+0x28>
 8011cd2:	2010      	movs	r0, #16
 8011cd4:	f7ff ffe2 	bl	8011c9c <malloc>
 8011cd8:	4602      	mov	r2, r0
 8011cda:	6260      	str	r0, [r4, #36]	; 0x24
 8011cdc:	b920      	cbnz	r0, 8011ce8 <_Balloc+0x20>
 8011cde:	4b18      	ldr	r3, [pc, #96]	; (8011d40 <_Balloc+0x78>)
 8011ce0:	4818      	ldr	r0, [pc, #96]	; (8011d44 <_Balloc+0x7c>)
 8011ce2:	2166      	movs	r1, #102	; 0x66
 8011ce4:	f000 fdd6 	bl	8012894 <__assert_func>
 8011ce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011cec:	6006      	str	r6, [r0, #0]
 8011cee:	60c6      	str	r6, [r0, #12]
 8011cf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011cf2:	68f3      	ldr	r3, [r6, #12]
 8011cf4:	b183      	cbz	r3, 8011d18 <_Balloc+0x50>
 8011cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cf8:	68db      	ldr	r3, [r3, #12]
 8011cfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011cfe:	b9b8      	cbnz	r0, 8011d30 <_Balloc+0x68>
 8011d00:	2101      	movs	r1, #1
 8011d02:	fa01 f605 	lsl.w	r6, r1, r5
 8011d06:	1d72      	adds	r2, r6, #5
 8011d08:	0092      	lsls	r2, r2, #2
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f000 fb60 	bl	80123d0 <_calloc_r>
 8011d10:	b160      	cbz	r0, 8011d2c <_Balloc+0x64>
 8011d12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011d16:	e00e      	b.n	8011d36 <_Balloc+0x6e>
 8011d18:	2221      	movs	r2, #33	; 0x21
 8011d1a:	2104      	movs	r1, #4
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f000 fb57 	bl	80123d0 <_calloc_r>
 8011d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d24:	60f0      	str	r0, [r6, #12]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1e4      	bne.n	8011cf6 <_Balloc+0x2e>
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	bd70      	pop	{r4, r5, r6, pc}
 8011d30:	6802      	ldr	r2, [r0, #0]
 8011d32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d36:	2300      	movs	r3, #0
 8011d38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d3c:	e7f7      	b.n	8011d2e <_Balloc+0x66>
 8011d3e:	bf00      	nop
 8011d40:	080143f9 	.word	0x080143f9
 8011d44:	0801447c 	.word	0x0801447c

08011d48 <_Bfree>:
 8011d48:	b570      	push	{r4, r5, r6, lr}
 8011d4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d4c:	4605      	mov	r5, r0
 8011d4e:	460c      	mov	r4, r1
 8011d50:	b976      	cbnz	r6, 8011d70 <_Bfree+0x28>
 8011d52:	2010      	movs	r0, #16
 8011d54:	f7ff ffa2 	bl	8011c9c <malloc>
 8011d58:	4602      	mov	r2, r0
 8011d5a:	6268      	str	r0, [r5, #36]	; 0x24
 8011d5c:	b920      	cbnz	r0, 8011d68 <_Bfree+0x20>
 8011d5e:	4b09      	ldr	r3, [pc, #36]	; (8011d84 <_Bfree+0x3c>)
 8011d60:	4809      	ldr	r0, [pc, #36]	; (8011d88 <_Bfree+0x40>)
 8011d62:	218a      	movs	r1, #138	; 0x8a
 8011d64:	f000 fd96 	bl	8012894 <__assert_func>
 8011d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d6c:	6006      	str	r6, [r0, #0]
 8011d6e:	60c6      	str	r6, [r0, #12]
 8011d70:	b13c      	cbz	r4, 8011d82 <_Bfree+0x3a>
 8011d72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011d74:	6862      	ldr	r2, [r4, #4]
 8011d76:	68db      	ldr	r3, [r3, #12]
 8011d78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d7c:	6021      	str	r1, [r4, #0]
 8011d7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d82:	bd70      	pop	{r4, r5, r6, pc}
 8011d84:	080143f9 	.word	0x080143f9
 8011d88:	0801447c 	.word	0x0801447c

08011d8c <__multadd>:
 8011d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d90:	690d      	ldr	r5, [r1, #16]
 8011d92:	4607      	mov	r7, r0
 8011d94:	460c      	mov	r4, r1
 8011d96:	461e      	mov	r6, r3
 8011d98:	f101 0c14 	add.w	ip, r1, #20
 8011d9c:	2000      	movs	r0, #0
 8011d9e:	f8dc 3000 	ldr.w	r3, [ip]
 8011da2:	b299      	uxth	r1, r3
 8011da4:	fb02 6101 	mla	r1, r2, r1, r6
 8011da8:	0c1e      	lsrs	r6, r3, #16
 8011daa:	0c0b      	lsrs	r3, r1, #16
 8011dac:	fb02 3306 	mla	r3, r2, r6, r3
 8011db0:	b289      	uxth	r1, r1
 8011db2:	3001      	adds	r0, #1
 8011db4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011db8:	4285      	cmp	r5, r0
 8011dba:	f84c 1b04 	str.w	r1, [ip], #4
 8011dbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011dc2:	dcec      	bgt.n	8011d9e <__multadd+0x12>
 8011dc4:	b30e      	cbz	r6, 8011e0a <__multadd+0x7e>
 8011dc6:	68a3      	ldr	r3, [r4, #8]
 8011dc8:	42ab      	cmp	r3, r5
 8011dca:	dc19      	bgt.n	8011e00 <__multadd+0x74>
 8011dcc:	6861      	ldr	r1, [r4, #4]
 8011dce:	4638      	mov	r0, r7
 8011dd0:	3101      	adds	r1, #1
 8011dd2:	f7ff ff79 	bl	8011cc8 <_Balloc>
 8011dd6:	4680      	mov	r8, r0
 8011dd8:	b928      	cbnz	r0, 8011de6 <__multadd+0x5a>
 8011dda:	4602      	mov	r2, r0
 8011ddc:	4b0c      	ldr	r3, [pc, #48]	; (8011e10 <__multadd+0x84>)
 8011dde:	480d      	ldr	r0, [pc, #52]	; (8011e14 <__multadd+0x88>)
 8011de0:	21b5      	movs	r1, #181	; 0xb5
 8011de2:	f000 fd57 	bl	8012894 <__assert_func>
 8011de6:	6922      	ldr	r2, [r4, #16]
 8011de8:	3202      	adds	r2, #2
 8011dea:	f104 010c 	add.w	r1, r4, #12
 8011dee:	0092      	lsls	r2, r2, #2
 8011df0:	300c      	adds	r0, #12
 8011df2:	f7ff ff5b 	bl	8011cac <memcpy>
 8011df6:	4621      	mov	r1, r4
 8011df8:	4638      	mov	r0, r7
 8011dfa:	f7ff ffa5 	bl	8011d48 <_Bfree>
 8011dfe:	4644      	mov	r4, r8
 8011e00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011e04:	3501      	adds	r5, #1
 8011e06:	615e      	str	r6, [r3, #20]
 8011e08:	6125      	str	r5, [r4, #16]
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e10:	0801446b 	.word	0x0801446b
 8011e14:	0801447c 	.word	0x0801447c

08011e18 <__hi0bits>:
 8011e18:	0c03      	lsrs	r3, r0, #16
 8011e1a:	041b      	lsls	r3, r3, #16
 8011e1c:	b9d3      	cbnz	r3, 8011e54 <__hi0bits+0x3c>
 8011e1e:	0400      	lsls	r0, r0, #16
 8011e20:	2310      	movs	r3, #16
 8011e22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011e26:	bf04      	itt	eq
 8011e28:	0200      	lsleq	r0, r0, #8
 8011e2a:	3308      	addeq	r3, #8
 8011e2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011e30:	bf04      	itt	eq
 8011e32:	0100      	lsleq	r0, r0, #4
 8011e34:	3304      	addeq	r3, #4
 8011e36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011e3a:	bf04      	itt	eq
 8011e3c:	0080      	lsleq	r0, r0, #2
 8011e3e:	3302      	addeq	r3, #2
 8011e40:	2800      	cmp	r0, #0
 8011e42:	db05      	blt.n	8011e50 <__hi0bits+0x38>
 8011e44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011e48:	f103 0301 	add.w	r3, r3, #1
 8011e4c:	bf08      	it	eq
 8011e4e:	2320      	moveq	r3, #32
 8011e50:	4618      	mov	r0, r3
 8011e52:	4770      	bx	lr
 8011e54:	2300      	movs	r3, #0
 8011e56:	e7e4      	b.n	8011e22 <__hi0bits+0xa>

08011e58 <__lo0bits>:
 8011e58:	6803      	ldr	r3, [r0, #0]
 8011e5a:	f013 0207 	ands.w	r2, r3, #7
 8011e5e:	4601      	mov	r1, r0
 8011e60:	d00b      	beq.n	8011e7a <__lo0bits+0x22>
 8011e62:	07da      	lsls	r2, r3, #31
 8011e64:	d423      	bmi.n	8011eae <__lo0bits+0x56>
 8011e66:	0798      	lsls	r0, r3, #30
 8011e68:	bf49      	itett	mi
 8011e6a:	085b      	lsrmi	r3, r3, #1
 8011e6c:	089b      	lsrpl	r3, r3, #2
 8011e6e:	2001      	movmi	r0, #1
 8011e70:	600b      	strmi	r3, [r1, #0]
 8011e72:	bf5c      	itt	pl
 8011e74:	600b      	strpl	r3, [r1, #0]
 8011e76:	2002      	movpl	r0, #2
 8011e78:	4770      	bx	lr
 8011e7a:	b298      	uxth	r0, r3
 8011e7c:	b9a8      	cbnz	r0, 8011eaa <__lo0bits+0x52>
 8011e7e:	0c1b      	lsrs	r3, r3, #16
 8011e80:	2010      	movs	r0, #16
 8011e82:	b2da      	uxtb	r2, r3
 8011e84:	b90a      	cbnz	r2, 8011e8a <__lo0bits+0x32>
 8011e86:	3008      	adds	r0, #8
 8011e88:	0a1b      	lsrs	r3, r3, #8
 8011e8a:	071a      	lsls	r2, r3, #28
 8011e8c:	bf04      	itt	eq
 8011e8e:	091b      	lsreq	r3, r3, #4
 8011e90:	3004      	addeq	r0, #4
 8011e92:	079a      	lsls	r2, r3, #30
 8011e94:	bf04      	itt	eq
 8011e96:	089b      	lsreq	r3, r3, #2
 8011e98:	3002      	addeq	r0, #2
 8011e9a:	07da      	lsls	r2, r3, #31
 8011e9c:	d403      	bmi.n	8011ea6 <__lo0bits+0x4e>
 8011e9e:	085b      	lsrs	r3, r3, #1
 8011ea0:	f100 0001 	add.w	r0, r0, #1
 8011ea4:	d005      	beq.n	8011eb2 <__lo0bits+0x5a>
 8011ea6:	600b      	str	r3, [r1, #0]
 8011ea8:	4770      	bx	lr
 8011eaa:	4610      	mov	r0, r2
 8011eac:	e7e9      	b.n	8011e82 <__lo0bits+0x2a>
 8011eae:	2000      	movs	r0, #0
 8011eb0:	4770      	bx	lr
 8011eb2:	2020      	movs	r0, #32
 8011eb4:	4770      	bx	lr
	...

08011eb8 <__i2b>:
 8011eb8:	b510      	push	{r4, lr}
 8011eba:	460c      	mov	r4, r1
 8011ebc:	2101      	movs	r1, #1
 8011ebe:	f7ff ff03 	bl	8011cc8 <_Balloc>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	b928      	cbnz	r0, 8011ed2 <__i2b+0x1a>
 8011ec6:	4b05      	ldr	r3, [pc, #20]	; (8011edc <__i2b+0x24>)
 8011ec8:	4805      	ldr	r0, [pc, #20]	; (8011ee0 <__i2b+0x28>)
 8011eca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011ece:	f000 fce1 	bl	8012894 <__assert_func>
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	6144      	str	r4, [r0, #20]
 8011ed6:	6103      	str	r3, [r0, #16]
 8011ed8:	bd10      	pop	{r4, pc}
 8011eda:	bf00      	nop
 8011edc:	0801446b 	.word	0x0801446b
 8011ee0:	0801447c 	.word	0x0801447c

08011ee4 <__multiply>:
 8011ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee8:	4691      	mov	r9, r2
 8011eea:	690a      	ldr	r2, [r1, #16]
 8011eec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	bfb8      	it	lt
 8011ef4:	460b      	movlt	r3, r1
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	bfbc      	itt	lt
 8011efa:	464c      	movlt	r4, r9
 8011efc:	4699      	movlt	r9, r3
 8011efe:	6927      	ldr	r7, [r4, #16]
 8011f00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011f04:	68a3      	ldr	r3, [r4, #8]
 8011f06:	6861      	ldr	r1, [r4, #4]
 8011f08:	eb07 060a 	add.w	r6, r7, sl
 8011f0c:	42b3      	cmp	r3, r6
 8011f0e:	b085      	sub	sp, #20
 8011f10:	bfb8      	it	lt
 8011f12:	3101      	addlt	r1, #1
 8011f14:	f7ff fed8 	bl	8011cc8 <_Balloc>
 8011f18:	b930      	cbnz	r0, 8011f28 <__multiply+0x44>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	4b44      	ldr	r3, [pc, #272]	; (8012030 <__multiply+0x14c>)
 8011f1e:	4845      	ldr	r0, [pc, #276]	; (8012034 <__multiply+0x150>)
 8011f20:	f240 115d 	movw	r1, #349	; 0x15d
 8011f24:	f000 fcb6 	bl	8012894 <__assert_func>
 8011f28:	f100 0514 	add.w	r5, r0, #20
 8011f2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011f30:	462b      	mov	r3, r5
 8011f32:	2200      	movs	r2, #0
 8011f34:	4543      	cmp	r3, r8
 8011f36:	d321      	bcc.n	8011f7c <__multiply+0x98>
 8011f38:	f104 0314 	add.w	r3, r4, #20
 8011f3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011f40:	f109 0314 	add.w	r3, r9, #20
 8011f44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011f48:	9202      	str	r2, [sp, #8]
 8011f4a:	1b3a      	subs	r2, r7, r4
 8011f4c:	3a15      	subs	r2, #21
 8011f4e:	f022 0203 	bic.w	r2, r2, #3
 8011f52:	3204      	adds	r2, #4
 8011f54:	f104 0115 	add.w	r1, r4, #21
 8011f58:	428f      	cmp	r7, r1
 8011f5a:	bf38      	it	cc
 8011f5c:	2204      	movcc	r2, #4
 8011f5e:	9201      	str	r2, [sp, #4]
 8011f60:	9a02      	ldr	r2, [sp, #8]
 8011f62:	9303      	str	r3, [sp, #12]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d80c      	bhi.n	8011f82 <__multiply+0x9e>
 8011f68:	2e00      	cmp	r6, #0
 8011f6a:	dd03      	ble.n	8011f74 <__multiply+0x90>
 8011f6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d05a      	beq.n	801202a <__multiply+0x146>
 8011f74:	6106      	str	r6, [r0, #16]
 8011f76:	b005      	add	sp, #20
 8011f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f7c:	f843 2b04 	str.w	r2, [r3], #4
 8011f80:	e7d8      	b.n	8011f34 <__multiply+0x50>
 8011f82:	f8b3 a000 	ldrh.w	sl, [r3]
 8011f86:	f1ba 0f00 	cmp.w	sl, #0
 8011f8a:	d024      	beq.n	8011fd6 <__multiply+0xf2>
 8011f8c:	f104 0e14 	add.w	lr, r4, #20
 8011f90:	46a9      	mov	r9, r5
 8011f92:	f04f 0c00 	mov.w	ip, #0
 8011f96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011f9a:	f8d9 1000 	ldr.w	r1, [r9]
 8011f9e:	fa1f fb82 	uxth.w	fp, r2
 8011fa2:	b289      	uxth	r1, r1
 8011fa4:	fb0a 110b 	mla	r1, sl, fp, r1
 8011fa8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011fac:	f8d9 2000 	ldr.w	r2, [r9]
 8011fb0:	4461      	add	r1, ip
 8011fb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011fb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8011fba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011fbe:	b289      	uxth	r1, r1
 8011fc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011fc4:	4577      	cmp	r7, lr
 8011fc6:	f849 1b04 	str.w	r1, [r9], #4
 8011fca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011fce:	d8e2      	bhi.n	8011f96 <__multiply+0xb2>
 8011fd0:	9a01      	ldr	r2, [sp, #4]
 8011fd2:	f845 c002 	str.w	ip, [r5, r2]
 8011fd6:	9a03      	ldr	r2, [sp, #12]
 8011fd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011fdc:	3304      	adds	r3, #4
 8011fde:	f1b9 0f00 	cmp.w	r9, #0
 8011fe2:	d020      	beq.n	8012026 <__multiply+0x142>
 8011fe4:	6829      	ldr	r1, [r5, #0]
 8011fe6:	f104 0c14 	add.w	ip, r4, #20
 8011fea:	46ae      	mov	lr, r5
 8011fec:	f04f 0a00 	mov.w	sl, #0
 8011ff0:	f8bc b000 	ldrh.w	fp, [ip]
 8011ff4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011ff8:	fb09 220b 	mla	r2, r9, fp, r2
 8011ffc:	4492      	add	sl, r2
 8011ffe:	b289      	uxth	r1, r1
 8012000:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012004:	f84e 1b04 	str.w	r1, [lr], #4
 8012008:	f85c 2b04 	ldr.w	r2, [ip], #4
 801200c:	f8be 1000 	ldrh.w	r1, [lr]
 8012010:	0c12      	lsrs	r2, r2, #16
 8012012:	fb09 1102 	mla	r1, r9, r2, r1
 8012016:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801201a:	4567      	cmp	r7, ip
 801201c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012020:	d8e6      	bhi.n	8011ff0 <__multiply+0x10c>
 8012022:	9a01      	ldr	r2, [sp, #4]
 8012024:	50a9      	str	r1, [r5, r2]
 8012026:	3504      	adds	r5, #4
 8012028:	e79a      	b.n	8011f60 <__multiply+0x7c>
 801202a:	3e01      	subs	r6, #1
 801202c:	e79c      	b.n	8011f68 <__multiply+0x84>
 801202e:	bf00      	nop
 8012030:	0801446b 	.word	0x0801446b
 8012034:	0801447c 	.word	0x0801447c

08012038 <__pow5mult>:
 8012038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801203c:	4615      	mov	r5, r2
 801203e:	f012 0203 	ands.w	r2, r2, #3
 8012042:	4606      	mov	r6, r0
 8012044:	460f      	mov	r7, r1
 8012046:	d007      	beq.n	8012058 <__pow5mult+0x20>
 8012048:	4c25      	ldr	r4, [pc, #148]	; (80120e0 <__pow5mult+0xa8>)
 801204a:	3a01      	subs	r2, #1
 801204c:	2300      	movs	r3, #0
 801204e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012052:	f7ff fe9b 	bl	8011d8c <__multadd>
 8012056:	4607      	mov	r7, r0
 8012058:	10ad      	asrs	r5, r5, #2
 801205a:	d03d      	beq.n	80120d8 <__pow5mult+0xa0>
 801205c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801205e:	b97c      	cbnz	r4, 8012080 <__pow5mult+0x48>
 8012060:	2010      	movs	r0, #16
 8012062:	f7ff fe1b 	bl	8011c9c <malloc>
 8012066:	4602      	mov	r2, r0
 8012068:	6270      	str	r0, [r6, #36]	; 0x24
 801206a:	b928      	cbnz	r0, 8012078 <__pow5mult+0x40>
 801206c:	4b1d      	ldr	r3, [pc, #116]	; (80120e4 <__pow5mult+0xac>)
 801206e:	481e      	ldr	r0, [pc, #120]	; (80120e8 <__pow5mult+0xb0>)
 8012070:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012074:	f000 fc0e 	bl	8012894 <__assert_func>
 8012078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801207c:	6004      	str	r4, [r0, #0]
 801207e:	60c4      	str	r4, [r0, #12]
 8012080:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012088:	b94c      	cbnz	r4, 801209e <__pow5mult+0x66>
 801208a:	f240 2171 	movw	r1, #625	; 0x271
 801208e:	4630      	mov	r0, r6
 8012090:	f7ff ff12 	bl	8011eb8 <__i2b>
 8012094:	2300      	movs	r3, #0
 8012096:	f8c8 0008 	str.w	r0, [r8, #8]
 801209a:	4604      	mov	r4, r0
 801209c:	6003      	str	r3, [r0, #0]
 801209e:	f04f 0900 	mov.w	r9, #0
 80120a2:	07eb      	lsls	r3, r5, #31
 80120a4:	d50a      	bpl.n	80120bc <__pow5mult+0x84>
 80120a6:	4639      	mov	r1, r7
 80120a8:	4622      	mov	r2, r4
 80120aa:	4630      	mov	r0, r6
 80120ac:	f7ff ff1a 	bl	8011ee4 <__multiply>
 80120b0:	4639      	mov	r1, r7
 80120b2:	4680      	mov	r8, r0
 80120b4:	4630      	mov	r0, r6
 80120b6:	f7ff fe47 	bl	8011d48 <_Bfree>
 80120ba:	4647      	mov	r7, r8
 80120bc:	106d      	asrs	r5, r5, #1
 80120be:	d00b      	beq.n	80120d8 <__pow5mult+0xa0>
 80120c0:	6820      	ldr	r0, [r4, #0]
 80120c2:	b938      	cbnz	r0, 80120d4 <__pow5mult+0x9c>
 80120c4:	4622      	mov	r2, r4
 80120c6:	4621      	mov	r1, r4
 80120c8:	4630      	mov	r0, r6
 80120ca:	f7ff ff0b 	bl	8011ee4 <__multiply>
 80120ce:	6020      	str	r0, [r4, #0]
 80120d0:	f8c0 9000 	str.w	r9, [r0]
 80120d4:	4604      	mov	r4, r0
 80120d6:	e7e4      	b.n	80120a2 <__pow5mult+0x6a>
 80120d8:	4638      	mov	r0, r7
 80120da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120de:	bf00      	nop
 80120e0:	080145c8 	.word	0x080145c8
 80120e4:	080143f9 	.word	0x080143f9
 80120e8:	0801447c 	.word	0x0801447c

080120ec <__lshift>:
 80120ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120f0:	460c      	mov	r4, r1
 80120f2:	6849      	ldr	r1, [r1, #4]
 80120f4:	6923      	ldr	r3, [r4, #16]
 80120f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80120fa:	68a3      	ldr	r3, [r4, #8]
 80120fc:	4607      	mov	r7, r0
 80120fe:	4691      	mov	r9, r2
 8012100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012104:	f108 0601 	add.w	r6, r8, #1
 8012108:	42b3      	cmp	r3, r6
 801210a:	db0b      	blt.n	8012124 <__lshift+0x38>
 801210c:	4638      	mov	r0, r7
 801210e:	f7ff fddb 	bl	8011cc8 <_Balloc>
 8012112:	4605      	mov	r5, r0
 8012114:	b948      	cbnz	r0, 801212a <__lshift+0x3e>
 8012116:	4602      	mov	r2, r0
 8012118:	4b2a      	ldr	r3, [pc, #168]	; (80121c4 <__lshift+0xd8>)
 801211a:	482b      	ldr	r0, [pc, #172]	; (80121c8 <__lshift+0xdc>)
 801211c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012120:	f000 fbb8 	bl	8012894 <__assert_func>
 8012124:	3101      	adds	r1, #1
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	e7ee      	b.n	8012108 <__lshift+0x1c>
 801212a:	2300      	movs	r3, #0
 801212c:	f100 0114 	add.w	r1, r0, #20
 8012130:	f100 0210 	add.w	r2, r0, #16
 8012134:	4618      	mov	r0, r3
 8012136:	4553      	cmp	r3, sl
 8012138:	db37      	blt.n	80121aa <__lshift+0xbe>
 801213a:	6920      	ldr	r0, [r4, #16]
 801213c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012140:	f104 0314 	add.w	r3, r4, #20
 8012144:	f019 091f 	ands.w	r9, r9, #31
 8012148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801214c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012150:	d02f      	beq.n	80121b2 <__lshift+0xc6>
 8012152:	f1c9 0e20 	rsb	lr, r9, #32
 8012156:	468a      	mov	sl, r1
 8012158:	f04f 0c00 	mov.w	ip, #0
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	fa02 f209 	lsl.w	r2, r2, r9
 8012162:	ea42 020c 	orr.w	r2, r2, ip
 8012166:	f84a 2b04 	str.w	r2, [sl], #4
 801216a:	f853 2b04 	ldr.w	r2, [r3], #4
 801216e:	4298      	cmp	r0, r3
 8012170:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012174:	d8f2      	bhi.n	801215c <__lshift+0x70>
 8012176:	1b03      	subs	r3, r0, r4
 8012178:	3b15      	subs	r3, #21
 801217a:	f023 0303 	bic.w	r3, r3, #3
 801217e:	3304      	adds	r3, #4
 8012180:	f104 0215 	add.w	r2, r4, #21
 8012184:	4290      	cmp	r0, r2
 8012186:	bf38      	it	cc
 8012188:	2304      	movcc	r3, #4
 801218a:	f841 c003 	str.w	ip, [r1, r3]
 801218e:	f1bc 0f00 	cmp.w	ip, #0
 8012192:	d001      	beq.n	8012198 <__lshift+0xac>
 8012194:	f108 0602 	add.w	r6, r8, #2
 8012198:	3e01      	subs	r6, #1
 801219a:	4638      	mov	r0, r7
 801219c:	612e      	str	r6, [r5, #16]
 801219e:	4621      	mov	r1, r4
 80121a0:	f7ff fdd2 	bl	8011d48 <_Bfree>
 80121a4:	4628      	mov	r0, r5
 80121a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80121ae:	3301      	adds	r3, #1
 80121b0:	e7c1      	b.n	8012136 <__lshift+0x4a>
 80121b2:	3904      	subs	r1, #4
 80121b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80121b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80121bc:	4298      	cmp	r0, r3
 80121be:	d8f9      	bhi.n	80121b4 <__lshift+0xc8>
 80121c0:	e7ea      	b.n	8012198 <__lshift+0xac>
 80121c2:	bf00      	nop
 80121c4:	0801446b 	.word	0x0801446b
 80121c8:	0801447c 	.word	0x0801447c

080121cc <__mcmp>:
 80121cc:	b530      	push	{r4, r5, lr}
 80121ce:	6902      	ldr	r2, [r0, #16]
 80121d0:	690c      	ldr	r4, [r1, #16]
 80121d2:	1b12      	subs	r2, r2, r4
 80121d4:	d10e      	bne.n	80121f4 <__mcmp+0x28>
 80121d6:	f100 0314 	add.w	r3, r0, #20
 80121da:	3114      	adds	r1, #20
 80121dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80121e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80121e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80121e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80121ec:	42a5      	cmp	r5, r4
 80121ee:	d003      	beq.n	80121f8 <__mcmp+0x2c>
 80121f0:	d305      	bcc.n	80121fe <__mcmp+0x32>
 80121f2:	2201      	movs	r2, #1
 80121f4:	4610      	mov	r0, r2
 80121f6:	bd30      	pop	{r4, r5, pc}
 80121f8:	4283      	cmp	r3, r0
 80121fa:	d3f3      	bcc.n	80121e4 <__mcmp+0x18>
 80121fc:	e7fa      	b.n	80121f4 <__mcmp+0x28>
 80121fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012202:	e7f7      	b.n	80121f4 <__mcmp+0x28>

08012204 <__mdiff>:
 8012204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012208:	460c      	mov	r4, r1
 801220a:	4606      	mov	r6, r0
 801220c:	4611      	mov	r1, r2
 801220e:	4620      	mov	r0, r4
 8012210:	4690      	mov	r8, r2
 8012212:	f7ff ffdb 	bl	80121cc <__mcmp>
 8012216:	1e05      	subs	r5, r0, #0
 8012218:	d110      	bne.n	801223c <__mdiff+0x38>
 801221a:	4629      	mov	r1, r5
 801221c:	4630      	mov	r0, r6
 801221e:	f7ff fd53 	bl	8011cc8 <_Balloc>
 8012222:	b930      	cbnz	r0, 8012232 <__mdiff+0x2e>
 8012224:	4b3a      	ldr	r3, [pc, #232]	; (8012310 <__mdiff+0x10c>)
 8012226:	4602      	mov	r2, r0
 8012228:	f240 2132 	movw	r1, #562	; 0x232
 801222c:	4839      	ldr	r0, [pc, #228]	; (8012314 <__mdiff+0x110>)
 801222e:	f000 fb31 	bl	8012894 <__assert_func>
 8012232:	2301      	movs	r3, #1
 8012234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801223c:	bfa4      	itt	ge
 801223e:	4643      	movge	r3, r8
 8012240:	46a0      	movge	r8, r4
 8012242:	4630      	mov	r0, r6
 8012244:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012248:	bfa6      	itte	ge
 801224a:	461c      	movge	r4, r3
 801224c:	2500      	movge	r5, #0
 801224e:	2501      	movlt	r5, #1
 8012250:	f7ff fd3a 	bl	8011cc8 <_Balloc>
 8012254:	b920      	cbnz	r0, 8012260 <__mdiff+0x5c>
 8012256:	4b2e      	ldr	r3, [pc, #184]	; (8012310 <__mdiff+0x10c>)
 8012258:	4602      	mov	r2, r0
 801225a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801225e:	e7e5      	b.n	801222c <__mdiff+0x28>
 8012260:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012264:	6926      	ldr	r6, [r4, #16]
 8012266:	60c5      	str	r5, [r0, #12]
 8012268:	f104 0914 	add.w	r9, r4, #20
 801226c:	f108 0514 	add.w	r5, r8, #20
 8012270:	f100 0e14 	add.w	lr, r0, #20
 8012274:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012278:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801227c:	f108 0210 	add.w	r2, r8, #16
 8012280:	46f2      	mov	sl, lr
 8012282:	2100      	movs	r1, #0
 8012284:	f859 3b04 	ldr.w	r3, [r9], #4
 8012288:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801228c:	fa1f f883 	uxth.w	r8, r3
 8012290:	fa11 f18b 	uxtah	r1, r1, fp
 8012294:	0c1b      	lsrs	r3, r3, #16
 8012296:	eba1 0808 	sub.w	r8, r1, r8
 801229a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801229e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80122a2:	fa1f f888 	uxth.w	r8, r8
 80122a6:	1419      	asrs	r1, r3, #16
 80122a8:	454e      	cmp	r6, r9
 80122aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80122ae:	f84a 3b04 	str.w	r3, [sl], #4
 80122b2:	d8e7      	bhi.n	8012284 <__mdiff+0x80>
 80122b4:	1b33      	subs	r3, r6, r4
 80122b6:	3b15      	subs	r3, #21
 80122b8:	f023 0303 	bic.w	r3, r3, #3
 80122bc:	3304      	adds	r3, #4
 80122be:	3415      	adds	r4, #21
 80122c0:	42a6      	cmp	r6, r4
 80122c2:	bf38      	it	cc
 80122c4:	2304      	movcc	r3, #4
 80122c6:	441d      	add	r5, r3
 80122c8:	4473      	add	r3, lr
 80122ca:	469e      	mov	lr, r3
 80122cc:	462e      	mov	r6, r5
 80122ce:	4566      	cmp	r6, ip
 80122d0:	d30e      	bcc.n	80122f0 <__mdiff+0xec>
 80122d2:	f10c 0203 	add.w	r2, ip, #3
 80122d6:	1b52      	subs	r2, r2, r5
 80122d8:	f022 0203 	bic.w	r2, r2, #3
 80122dc:	3d03      	subs	r5, #3
 80122de:	45ac      	cmp	ip, r5
 80122e0:	bf38      	it	cc
 80122e2:	2200      	movcc	r2, #0
 80122e4:	441a      	add	r2, r3
 80122e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80122ea:	b17b      	cbz	r3, 801230c <__mdiff+0x108>
 80122ec:	6107      	str	r7, [r0, #16]
 80122ee:	e7a3      	b.n	8012238 <__mdiff+0x34>
 80122f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80122f4:	fa11 f288 	uxtah	r2, r1, r8
 80122f8:	1414      	asrs	r4, r2, #16
 80122fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80122fe:	b292      	uxth	r2, r2
 8012300:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012304:	f84e 2b04 	str.w	r2, [lr], #4
 8012308:	1421      	asrs	r1, r4, #16
 801230a:	e7e0      	b.n	80122ce <__mdiff+0xca>
 801230c:	3f01      	subs	r7, #1
 801230e:	e7ea      	b.n	80122e6 <__mdiff+0xe2>
 8012310:	0801446b 	.word	0x0801446b
 8012314:	0801447c 	.word	0x0801447c

08012318 <__d2b>:
 8012318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801231c:	4689      	mov	r9, r1
 801231e:	2101      	movs	r1, #1
 8012320:	ec57 6b10 	vmov	r6, r7, d0
 8012324:	4690      	mov	r8, r2
 8012326:	f7ff fccf 	bl	8011cc8 <_Balloc>
 801232a:	4604      	mov	r4, r0
 801232c:	b930      	cbnz	r0, 801233c <__d2b+0x24>
 801232e:	4602      	mov	r2, r0
 8012330:	4b25      	ldr	r3, [pc, #148]	; (80123c8 <__d2b+0xb0>)
 8012332:	4826      	ldr	r0, [pc, #152]	; (80123cc <__d2b+0xb4>)
 8012334:	f240 310a 	movw	r1, #778	; 0x30a
 8012338:	f000 faac 	bl	8012894 <__assert_func>
 801233c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012340:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012344:	bb35      	cbnz	r5, 8012394 <__d2b+0x7c>
 8012346:	2e00      	cmp	r6, #0
 8012348:	9301      	str	r3, [sp, #4]
 801234a:	d028      	beq.n	801239e <__d2b+0x86>
 801234c:	4668      	mov	r0, sp
 801234e:	9600      	str	r6, [sp, #0]
 8012350:	f7ff fd82 	bl	8011e58 <__lo0bits>
 8012354:	9900      	ldr	r1, [sp, #0]
 8012356:	b300      	cbz	r0, 801239a <__d2b+0x82>
 8012358:	9a01      	ldr	r2, [sp, #4]
 801235a:	f1c0 0320 	rsb	r3, r0, #32
 801235e:	fa02 f303 	lsl.w	r3, r2, r3
 8012362:	430b      	orrs	r3, r1
 8012364:	40c2      	lsrs	r2, r0
 8012366:	6163      	str	r3, [r4, #20]
 8012368:	9201      	str	r2, [sp, #4]
 801236a:	9b01      	ldr	r3, [sp, #4]
 801236c:	61a3      	str	r3, [r4, #24]
 801236e:	2b00      	cmp	r3, #0
 8012370:	bf14      	ite	ne
 8012372:	2202      	movne	r2, #2
 8012374:	2201      	moveq	r2, #1
 8012376:	6122      	str	r2, [r4, #16]
 8012378:	b1d5      	cbz	r5, 80123b0 <__d2b+0x98>
 801237a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801237e:	4405      	add	r5, r0
 8012380:	f8c9 5000 	str.w	r5, [r9]
 8012384:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012388:	f8c8 0000 	str.w	r0, [r8]
 801238c:	4620      	mov	r0, r4
 801238e:	b003      	add	sp, #12
 8012390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012398:	e7d5      	b.n	8012346 <__d2b+0x2e>
 801239a:	6161      	str	r1, [r4, #20]
 801239c:	e7e5      	b.n	801236a <__d2b+0x52>
 801239e:	a801      	add	r0, sp, #4
 80123a0:	f7ff fd5a 	bl	8011e58 <__lo0bits>
 80123a4:	9b01      	ldr	r3, [sp, #4]
 80123a6:	6163      	str	r3, [r4, #20]
 80123a8:	2201      	movs	r2, #1
 80123aa:	6122      	str	r2, [r4, #16]
 80123ac:	3020      	adds	r0, #32
 80123ae:	e7e3      	b.n	8012378 <__d2b+0x60>
 80123b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80123b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80123b8:	f8c9 0000 	str.w	r0, [r9]
 80123bc:	6918      	ldr	r0, [r3, #16]
 80123be:	f7ff fd2b 	bl	8011e18 <__hi0bits>
 80123c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80123c6:	e7df      	b.n	8012388 <__d2b+0x70>
 80123c8:	0801446b 	.word	0x0801446b
 80123cc:	0801447c 	.word	0x0801447c

080123d0 <_calloc_r>:
 80123d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123d2:	fba1 2402 	umull	r2, r4, r1, r2
 80123d6:	b94c      	cbnz	r4, 80123ec <_calloc_r+0x1c>
 80123d8:	4611      	mov	r1, r2
 80123da:	9201      	str	r2, [sp, #4]
 80123dc:	f000 f87a 	bl	80124d4 <_malloc_r>
 80123e0:	9a01      	ldr	r2, [sp, #4]
 80123e2:	4605      	mov	r5, r0
 80123e4:	b930      	cbnz	r0, 80123f4 <_calloc_r+0x24>
 80123e6:	4628      	mov	r0, r5
 80123e8:	b003      	add	sp, #12
 80123ea:	bd30      	pop	{r4, r5, pc}
 80123ec:	220c      	movs	r2, #12
 80123ee:	6002      	str	r2, [r0, #0]
 80123f0:	2500      	movs	r5, #0
 80123f2:	e7f8      	b.n	80123e6 <_calloc_r+0x16>
 80123f4:	4621      	mov	r1, r4
 80123f6:	f7fe f941 	bl	801067c <memset>
 80123fa:	e7f4      	b.n	80123e6 <_calloc_r+0x16>

080123fc <_free_r>:
 80123fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123fe:	2900      	cmp	r1, #0
 8012400:	d044      	beq.n	801248c <_free_r+0x90>
 8012402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012406:	9001      	str	r0, [sp, #4]
 8012408:	2b00      	cmp	r3, #0
 801240a:	f1a1 0404 	sub.w	r4, r1, #4
 801240e:	bfb8      	it	lt
 8012410:	18e4      	addlt	r4, r4, r3
 8012412:	f000 fa9b 	bl	801294c <__malloc_lock>
 8012416:	4a1e      	ldr	r2, [pc, #120]	; (8012490 <_free_r+0x94>)
 8012418:	9801      	ldr	r0, [sp, #4]
 801241a:	6813      	ldr	r3, [r2, #0]
 801241c:	b933      	cbnz	r3, 801242c <_free_r+0x30>
 801241e:	6063      	str	r3, [r4, #4]
 8012420:	6014      	str	r4, [r2, #0]
 8012422:	b003      	add	sp, #12
 8012424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012428:	f000 ba96 	b.w	8012958 <__malloc_unlock>
 801242c:	42a3      	cmp	r3, r4
 801242e:	d908      	bls.n	8012442 <_free_r+0x46>
 8012430:	6825      	ldr	r5, [r4, #0]
 8012432:	1961      	adds	r1, r4, r5
 8012434:	428b      	cmp	r3, r1
 8012436:	bf01      	itttt	eq
 8012438:	6819      	ldreq	r1, [r3, #0]
 801243a:	685b      	ldreq	r3, [r3, #4]
 801243c:	1949      	addeq	r1, r1, r5
 801243e:	6021      	streq	r1, [r4, #0]
 8012440:	e7ed      	b.n	801241e <_free_r+0x22>
 8012442:	461a      	mov	r2, r3
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	b10b      	cbz	r3, 801244c <_free_r+0x50>
 8012448:	42a3      	cmp	r3, r4
 801244a:	d9fa      	bls.n	8012442 <_free_r+0x46>
 801244c:	6811      	ldr	r1, [r2, #0]
 801244e:	1855      	adds	r5, r2, r1
 8012450:	42a5      	cmp	r5, r4
 8012452:	d10b      	bne.n	801246c <_free_r+0x70>
 8012454:	6824      	ldr	r4, [r4, #0]
 8012456:	4421      	add	r1, r4
 8012458:	1854      	adds	r4, r2, r1
 801245a:	42a3      	cmp	r3, r4
 801245c:	6011      	str	r1, [r2, #0]
 801245e:	d1e0      	bne.n	8012422 <_free_r+0x26>
 8012460:	681c      	ldr	r4, [r3, #0]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	6053      	str	r3, [r2, #4]
 8012466:	4421      	add	r1, r4
 8012468:	6011      	str	r1, [r2, #0]
 801246a:	e7da      	b.n	8012422 <_free_r+0x26>
 801246c:	d902      	bls.n	8012474 <_free_r+0x78>
 801246e:	230c      	movs	r3, #12
 8012470:	6003      	str	r3, [r0, #0]
 8012472:	e7d6      	b.n	8012422 <_free_r+0x26>
 8012474:	6825      	ldr	r5, [r4, #0]
 8012476:	1961      	adds	r1, r4, r5
 8012478:	428b      	cmp	r3, r1
 801247a:	bf04      	itt	eq
 801247c:	6819      	ldreq	r1, [r3, #0]
 801247e:	685b      	ldreq	r3, [r3, #4]
 8012480:	6063      	str	r3, [r4, #4]
 8012482:	bf04      	itt	eq
 8012484:	1949      	addeq	r1, r1, r5
 8012486:	6021      	streq	r1, [r4, #0]
 8012488:	6054      	str	r4, [r2, #4]
 801248a:	e7ca      	b.n	8012422 <_free_r+0x26>
 801248c:	b003      	add	sp, #12
 801248e:	bd30      	pop	{r4, r5, pc}
 8012490:	2000322c 	.word	0x2000322c

08012494 <sbrk_aligned>:
 8012494:	b570      	push	{r4, r5, r6, lr}
 8012496:	4e0e      	ldr	r6, [pc, #56]	; (80124d0 <sbrk_aligned+0x3c>)
 8012498:	460c      	mov	r4, r1
 801249a:	6831      	ldr	r1, [r6, #0]
 801249c:	4605      	mov	r5, r0
 801249e:	b911      	cbnz	r1, 80124a6 <sbrk_aligned+0x12>
 80124a0:	f000 f9e8 	bl	8012874 <_sbrk_r>
 80124a4:	6030      	str	r0, [r6, #0]
 80124a6:	4621      	mov	r1, r4
 80124a8:	4628      	mov	r0, r5
 80124aa:	f000 f9e3 	bl	8012874 <_sbrk_r>
 80124ae:	1c43      	adds	r3, r0, #1
 80124b0:	d00a      	beq.n	80124c8 <sbrk_aligned+0x34>
 80124b2:	1cc4      	adds	r4, r0, #3
 80124b4:	f024 0403 	bic.w	r4, r4, #3
 80124b8:	42a0      	cmp	r0, r4
 80124ba:	d007      	beq.n	80124cc <sbrk_aligned+0x38>
 80124bc:	1a21      	subs	r1, r4, r0
 80124be:	4628      	mov	r0, r5
 80124c0:	f000 f9d8 	bl	8012874 <_sbrk_r>
 80124c4:	3001      	adds	r0, #1
 80124c6:	d101      	bne.n	80124cc <sbrk_aligned+0x38>
 80124c8:	f04f 34ff 	mov.w	r4, #4294967295
 80124cc:	4620      	mov	r0, r4
 80124ce:	bd70      	pop	{r4, r5, r6, pc}
 80124d0:	20003230 	.word	0x20003230

080124d4 <_malloc_r>:
 80124d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d8:	1ccd      	adds	r5, r1, #3
 80124da:	f025 0503 	bic.w	r5, r5, #3
 80124de:	3508      	adds	r5, #8
 80124e0:	2d0c      	cmp	r5, #12
 80124e2:	bf38      	it	cc
 80124e4:	250c      	movcc	r5, #12
 80124e6:	2d00      	cmp	r5, #0
 80124e8:	4607      	mov	r7, r0
 80124ea:	db01      	blt.n	80124f0 <_malloc_r+0x1c>
 80124ec:	42a9      	cmp	r1, r5
 80124ee:	d905      	bls.n	80124fc <_malloc_r+0x28>
 80124f0:	230c      	movs	r3, #12
 80124f2:	603b      	str	r3, [r7, #0]
 80124f4:	2600      	movs	r6, #0
 80124f6:	4630      	mov	r0, r6
 80124f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124fc:	4e2e      	ldr	r6, [pc, #184]	; (80125b8 <_malloc_r+0xe4>)
 80124fe:	f000 fa25 	bl	801294c <__malloc_lock>
 8012502:	6833      	ldr	r3, [r6, #0]
 8012504:	461c      	mov	r4, r3
 8012506:	bb34      	cbnz	r4, 8012556 <_malloc_r+0x82>
 8012508:	4629      	mov	r1, r5
 801250a:	4638      	mov	r0, r7
 801250c:	f7ff ffc2 	bl	8012494 <sbrk_aligned>
 8012510:	1c43      	adds	r3, r0, #1
 8012512:	4604      	mov	r4, r0
 8012514:	d14d      	bne.n	80125b2 <_malloc_r+0xde>
 8012516:	6834      	ldr	r4, [r6, #0]
 8012518:	4626      	mov	r6, r4
 801251a:	2e00      	cmp	r6, #0
 801251c:	d140      	bne.n	80125a0 <_malloc_r+0xcc>
 801251e:	6823      	ldr	r3, [r4, #0]
 8012520:	4631      	mov	r1, r6
 8012522:	4638      	mov	r0, r7
 8012524:	eb04 0803 	add.w	r8, r4, r3
 8012528:	f000 f9a4 	bl	8012874 <_sbrk_r>
 801252c:	4580      	cmp	r8, r0
 801252e:	d13a      	bne.n	80125a6 <_malloc_r+0xd2>
 8012530:	6821      	ldr	r1, [r4, #0]
 8012532:	3503      	adds	r5, #3
 8012534:	1a6d      	subs	r5, r5, r1
 8012536:	f025 0503 	bic.w	r5, r5, #3
 801253a:	3508      	adds	r5, #8
 801253c:	2d0c      	cmp	r5, #12
 801253e:	bf38      	it	cc
 8012540:	250c      	movcc	r5, #12
 8012542:	4629      	mov	r1, r5
 8012544:	4638      	mov	r0, r7
 8012546:	f7ff ffa5 	bl	8012494 <sbrk_aligned>
 801254a:	3001      	adds	r0, #1
 801254c:	d02b      	beq.n	80125a6 <_malloc_r+0xd2>
 801254e:	6823      	ldr	r3, [r4, #0]
 8012550:	442b      	add	r3, r5
 8012552:	6023      	str	r3, [r4, #0]
 8012554:	e00e      	b.n	8012574 <_malloc_r+0xa0>
 8012556:	6822      	ldr	r2, [r4, #0]
 8012558:	1b52      	subs	r2, r2, r5
 801255a:	d41e      	bmi.n	801259a <_malloc_r+0xc6>
 801255c:	2a0b      	cmp	r2, #11
 801255e:	d916      	bls.n	801258e <_malloc_r+0xba>
 8012560:	1961      	adds	r1, r4, r5
 8012562:	42a3      	cmp	r3, r4
 8012564:	6025      	str	r5, [r4, #0]
 8012566:	bf18      	it	ne
 8012568:	6059      	strne	r1, [r3, #4]
 801256a:	6863      	ldr	r3, [r4, #4]
 801256c:	bf08      	it	eq
 801256e:	6031      	streq	r1, [r6, #0]
 8012570:	5162      	str	r2, [r4, r5]
 8012572:	604b      	str	r3, [r1, #4]
 8012574:	4638      	mov	r0, r7
 8012576:	f104 060b 	add.w	r6, r4, #11
 801257a:	f000 f9ed 	bl	8012958 <__malloc_unlock>
 801257e:	f026 0607 	bic.w	r6, r6, #7
 8012582:	1d23      	adds	r3, r4, #4
 8012584:	1af2      	subs	r2, r6, r3
 8012586:	d0b6      	beq.n	80124f6 <_malloc_r+0x22>
 8012588:	1b9b      	subs	r3, r3, r6
 801258a:	50a3      	str	r3, [r4, r2]
 801258c:	e7b3      	b.n	80124f6 <_malloc_r+0x22>
 801258e:	6862      	ldr	r2, [r4, #4]
 8012590:	42a3      	cmp	r3, r4
 8012592:	bf0c      	ite	eq
 8012594:	6032      	streq	r2, [r6, #0]
 8012596:	605a      	strne	r2, [r3, #4]
 8012598:	e7ec      	b.n	8012574 <_malloc_r+0xa0>
 801259a:	4623      	mov	r3, r4
 801259c:	6864      	ldr	r4, [r4, #4]
 801259e:	e7b2      	b.n	8012506 <_malloc_r+0x32>
 80125a0:	4634      	mov	r4, r6
 80125a2:	6876      	ldr	r6, [r6, #4]
 80125a4:	e7b9      	b.n	801251a <_malloc_r+0x46>
 80125a6:	230c      	movs	r3, #12
 80125a8:	603b      	str	r3, [r7, #0]
 80125aa:	4638      	mov	r0, r7
 80125ac:	f000 f9d4 	bl	8012958 <__malloc_unlock>
 80125b0:	e7a1      	b.n	80124f6 <_malloc_r+0x22>
 80125b2:	6025      	str	r5, [r4, #0]
 80125b4:	e7de      	b.n	8012574 <_malloc_r+0xa0>
 80125b6:	bf00      	nop
 80125b8:	2000322c 	.word	0x2000322c

080125bc <__ssputs_r>:
 80125bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125c0:	688e      	ldr	r6, [r1, #8]
 80125c2:	429e      	cmp	r6, r3
 80125c4:	4682      	mov	sl, r0
 80125c6:	460c      	mov	r4, r1
 80125c8:	4690      	mov	r8, r2
 80125ca:	461f      	mov	r7, r3
 80125cc:	d838      	bhi.n	8012640 <__ssputs_r+0x84>
 80125ce:	898a      	ldrh	r2, [r1, #12]
 80125d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80125d4:	d032      	beq.n	801263c <__ssputs_r+0x80>
 80125d6:	6825      	ldr	r5, [r4, #0]
 80125d8:	6909      	ldr	r1, [r1, #16]
 80125da:	eba5 0901 	sub.w	r9, r5, r1
 80125de:	6965      	ldr	r5, [r4, #20]
 80125e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80125e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80125e8:	3301      	adds	r3, #1
 80125ea:	444b      	add	r3, r9
 80125ec:	106d      	asrs	r5, r5, #1
 80125ee:	429d      	cmp	r5, r3
 80125f0:	bf38      	it	cc
 80125f2:	461d      	movcc	r5, r3
 80125f4:	0553      	lsls	r3, r2, #21
 80125f6:	d531      	bpl.n	801265c <__ssputs_r+0xa0>
 80125f8:	4629      	mov	r1, r5
 80125fa:	f7ff ff6b 	bl	80124d4 <_malloc_r>
 80125fe:	4606      	mov	r6, r0
 8012600:	b950      	cbnz	r0, 8012618 <__ssputs_r+0x5c>
 8012602:	230c      	movs	r3, #12
 8012604:	f8ca 3000 	str.w	r3, [sl]
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801260e:	81a3      	strh	r3, [r4, #12]
 8012610:	f04f 30ff 	mov.w	r0, #4294967295
 8012614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012618:	6921      	ldr	r1, [r4, #16]
 801261a:	464a      	mov	r2, r9
 801261c:	f7ff fb46 	bl	8011cac <memcpy>
 8012620:	89a3      	ldrh	r3, [r4, #12]
 8012622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801262a:	81a3      	strh	r3, [r4, #12]
 801262c:	6126      	str	r6, [r4, #16]
 801262e:	6165      	str	r5, [r4, #20]
 8012630:	444e      	add	r6, r9
 8012632:	eba5 0509 	sub.w	r5, r5, r9
 8012636:	6026      	str	r6, [r4, #0]
 8012638:	60a5      	str	r5, [r4, #8]
 801263a:	463e      	mov	r6, r7
 801263c:	42be      	cmp	r6, r7
 801263e:	d900      	bls.n	8012642 <__ssputs_r+0x86>
 8012640:	463e      	mov	r6, r7
 8012642:	6820      	ldr	r0, [r4, #0]
 8012644:	4632      	mov	r2, r6
 8012646:	4641      	mov	r1, r8
 8012648:	f000 f966 	bl	8012918 <memmove>
 801264c:	68a3      	ldr	r3, [r4, #8]
 801264e:	1b9b      	subs	r3, r3, r6
 8012650:	60a3      	str	r3, [r4, #8]
 8012652:	6823      	ldr	r3, [r4, #0]
 8012654:	4433      	add	r3, r6
 8012656:	6023      	str	r3, [r4, #0]
 8012658:	2000      	movs	r0, #0
 801265a:	e7db      	b.n	8012614 <__ssputs_r+0x58>
 801265c:	462a      	mov	r2, r5
 801265e:	f000 f981 	bl	8012964 <_realloc_r>
 8012662:	4606      	mov	r6, r0
 8012664:	2800      	cmp	r0, #0
 8012666:	d1e1      	bne.n	801262c <__ssputs_r+0x70>
 8012668:	6921      	ldr	r1, [r4, #16]
 801266a:	4650      	mov	r0, sl
 801266c:	f7ff fec6 	bl	80123fc <_free_r>
 8012670:	e7c7      	b.n	8012602 <__ssputs_r+0x46>
	...

08012674 <_svfiprintf_r>:
 8012674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012678:	4698      	mov	r8, r3
 801267a:	898b      	ldrh	r3, [r1, #12]
 801267c:	061b      	lsls	r3, r3, #24
 801267e:	b09d      	sub	sp, #116	; 0x74
 8012680:	4607      	mov	r7, r0
 8012682:	460d      	mov	r5, r1
 8012684:	4614      	mov	r4, r2
 8012686:	d50e      	bpl.n	80126a6 <_svfiprintf_r+0x32>
 8012688:	690b      	ldr	r3, [r1, #16]
 801268a:	b963      	cbnz	r3, 80126a6 <_svfiprintf_r+0x32>
 801268c:	2140      	movs	r1, #64	; 0x40
 801268e:	f7ff ff21 	bl	80124d4 <_malloc_r>
 8012692:	6028      	str	r0, [r5, #0]
 8012694:	6128      	str	r0, [r5, #16]
 8012696:	b920      	cbnz	r0, 80126a2 <_svfiprintf_r+0x2e>
 8012698:	230c      	movs	r3, #12
 801269a:	603b      	str	r3, [r7, #0]
 801269c:	f04f 30ff 	mov.w	r0, #4294967295
 80126a0:	e0d1      	b.n	8012846 <_svfiprintf_r+0x1d2>
 80126a2:	2340      	movs	r3, #64	; 0x40
 80126a4:	616b      	str	r3, [r5, #20]
 80126a6:	2300      	movs	r3, #0
 80126a8:	9309      	str	r3, [sp, #36]	; 0x24
 80126aa:	2320      	movs	r3, #32
 80126ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80126b4:	2330      	movs	r3, #48	; 0x30
 80126b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012860 <_svfiprintf_r+0x1ec>
 80126ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126be:	f04f 0901 	mov.w	r9, #1
 80126c2:	4623      	mov	r3, r4
 80126c4:	469a      	mov	sl, r3
 80126c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126ca:	b10a      	cbz	r2, 80126d0 <_svfiprintf_r+0x5c>
 80126cc:	2a25      	cmp	r2, #37	; 0x25
 80126ce:	d1f9      	bne.n	80126c4 <_svfiprintf_r+0x50>
 80126d0:	ebba 0b04 	subs.w	fp, sl, r4
 80126d4:	d00b      	beq.n	80126ee <_svfiprintf_r+0x7a>
 80126d6:	465b      	mov	r3, fp
 80126d8:	4622      	mov	r2, r4
 80126da:	4629      	mov	r1, r5
 80126dc:	4638      	mov	r0, r7
 80126de:	f7ff ff6d 	bl	80125bc <__ssputs_r>
 80126e2:	3001      	adds	r0, #1
 80126e4:	f000 80aa 	beq.w	801283c <_svfiprintf_r+0x1c8>
 80126e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126ea:	445a      	add	r2, fp
 80126ec:	9209      	str	r2, [sp, #36]	; 0x24
 80126ee:	f89a 3000 	ldrb.w	r3, [sl]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	f000 80a2 	beq.w	801283c <_svfiprintf_r+0x1c8>
 80126f8:	2300      	movs	r3, #0
 80126fa:	f04f 32ff 	mov.w	r2, #4294967295
 80126fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012702:	f10a 0a01 	add.w	sl, sl, #1
 8012706:	9304      	str	r3, [sp, #16]
 8012708:	9307      	str	r3, [sp, #28]
 801270a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801270e:	931a      	str	r3, [sp, #104]	; 0x68
 8012710:	4654      	mov	r4, sl
 8012712:	2205      	movs	r2, #5
 8012714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012718:	4851      	ldr	r0, [pc, #324]	; (8012860 <_svfiprintf_r+0x1ec>)
 801271a:	f7ed fd69 	bl	80001f0 <memchr>
 801271e:	9a04      	ldr	r2, [sp, #16]
 8012720:	b9d8      	cbnz	r0, 801275a <_svfiprintf_r+0xe6>
 8012722:	06d0      	lsls	r0, r2, #27
 8012724:	bf44      	itt	mi
 8012726:	2320      	movmi	r3, #32
 8012728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801272c:	0711      	lsls	r1, r2, #28
 801272e:	bf44      	itt	mi
 8012730:	232b      	movmi	r3, #43	; 0x2b
 8012732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012736:	f89a 3000 	ldrb.w	r3, [sl]
 801273a:	2b2a      	cmp	r3, #42	; 0x2a
 801273c:	d015      	beq.n	801276a <_svfiprintf_r+0xf6>
 801273e:	9a07      	ldr	r2, [sp, #28]
 8012740:	4654      	mov	r4, sl
 8012742:	2000      	movs	r0, #0
 8012744:	f04f 0c0a 	mov.w	ip, #10
 8012748:	4621      	mov	r1, r4
 801274a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801274e:	3b30      	subs	r3, #48	; 0x30
 8012750:	2b09      	cmp	r3, #9
 8012752:	d94e      	bls.n	80127f2 <_svfiprintf_r+0x17e>
 8012754:	b1b0      	cbz	r0, 8012784 <_svfiprintf_r+0x110>
 8012756:	9207      	str	r2, [sp, #28]
 8012758:	e014      	b.n	8012784 <_svfiprintf_r+0x110>
 801275a:	eba0 0308 	sub.w	r3, r0, r8
 801275e:	fa09 f303 	lsl.w	r3, r9, r3
 8012762:	4313      	orrs	r3, r2
 8012764:	9304      	str	r3, [sp, #16]
 8012766:	46a2      	mov	sl, r4
 8012768:	e7d2      	b.n	8012710 <_svfiprintf_r+0x9c>
 801276a:	9b03      	ldr	r3, [sp, #12]
 801276c:	1d19      	adds	r1, r3, #4
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	9103      	str	r1, [sp, #12]
 8012772:	2b00      	cmp	r3, #0
 8012774:	bfbb      	ittet	lt
 8012776:	425b      	neglt	r3, r3
 8012778:	f042 0202 	orrlt.w	r2, r2, #2
 801277c:	9307      	strge	r3, [sp, #28]
 801277e:	9307      	strlt	r3, [sp, #28]
 8012780:	bfb8      	it	lt
 8012782:	9204      	strlt	r2, [sp, #16]
 8012784:	7823      	ldrb	r3, [r4, #0]
 8012786:	2b2e      	cmp	r3, #46	; 0x2e
 8012788:	d10c      	bne.n	80127a4 <_svfiprintf_r+0x130>
 801278a:	7863      	ldrb	r3, [r4, #1]
 801278c:	2b2a      	cmp	r3, #42	; 0x2a
 801278e:	d135      	bne.n	80127fc <_svfiprintf_r+0x188>
 8012790:	9b03      	ldr	r3, [sp, #12]
 8012792:	1d1a      	adds	r2, r3, #4
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	9203      	str	r2, [sp, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	bfb8      	it	lt
 801279c:	f04f 33ff 	movlt.w	r3, #4294967295
 80127a0:	3402      	adds	r4, #2
 80127a2:	9305      	str	r3, [sp, #20]
 80127a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012870 <_svfiprintf_r+0x1fc>
 80127a8:	7821      	ldrb	r1, [r4, #0]
 80127aa:	2203      	movs	r2, #3
 80127ac:	4650      	mov	r0, sl
 80127ae:	f7ed fd1f 	bl	80001f0 <memchr>
 80127b2:	b140      	cbz	r0, 80127c6 <_svfiprintf_r+0x152>
 80127b4:	2340      	movs	r3, #64	; 0x40
 80127b6:	eba0 000a 	sub.w	r0, r0, sl
 80127ba:	fa03 f000 	lsl.w	r0, r3, r0
 80127be:	9b04      	ldr	r3, [sp, #16]
 80127c0:	4303      	orrs	r3, r0
 80127c2:	3401      	adds	r4, #1
 80127c4:	9304      	str	r3, [sp, #16]
 80127c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ca:	4826      	ldr	r0, [pc, #152]	; (8012864 <_svfiprintf_r+0x1f0>)
 80127cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127d0:	2206      	movs	r2, #6
 80127d2:	f7ed fd0d 	bl	80001f0 <memchr>
 80127d6:	2800      	cmp	r0, #0
 80127d8:	d038      	beq.n	801284c <_svfiprintf_r+0x1d8>
 80127da:	4b23      	ldr	r3, [pc, #140]	; (8012868 <_svfiprintf_r+0x1f4>)
 80127dc:	bb1b      	cbnz	r3, 8012826 <_svfiprintf_r+0x1b2>
 80127de:	9b03      	ldr	r3, [sp, #12]
 80127e0:	3307      	adds	r3, #7
 80127e2:	f023 0307 	bic.w	r3, r3, #7
 80127e6:	3308      	adds	r3, #8
 80127e8:	9303      	str	r3, [sp, #12]
 80127ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ec:	4433      	add	r3, r6
 80127ee:	9309      	str	r3, [sp, #36]	; 0x24
 80127f0:	e767      	b.n	80126c2 <_svfiprintf_r+0x4e>
 80127f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80127f6:	460c      	mov	r4, r1
 80127f8:	2001      	movs	r0, #1
 80127fa:	e7a5      	b.n	8012748 <_svfiprintf_r+0xd4>
 80127fc:	2300      	movs	r3, #0
 80127fe:	3401      	adds	r4, #1
 8012800:	9305      	str	r3, [sp, #20]
 8012802:	4619      	mov	r1, r3
 8012804:	f04f 0c0a 	mov.w	ip, #10
 8012808:	4620      	mov	r0, r4
 801280a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801280e:	3a30      	subs	r2, #48	; 0x30
 8012810:	2a09      	cmp	r2, #9
 8012812:	d903      	bls.n	801281c <_svfiprintf_r+0x1a8>
 8012814:	2b00      	cmp	r3, #0
 8012816:	d0c5      	beq.n	80127a4 <_svfiprintf_r+0x130>
 8012818:	9105      	str	r1, [sp, #20]
 801281a:	e7c3      	b.n	80127a4 <_svfiprintf_r+0x130>
 801281c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012820:	4604      	mov	r4, r0
 8012822:	2301      	movs	r3, #1
 8012824:	e7f0      	b.n	8012808 <_svfiprintf_r+0x194>
 8012826:	ab03      	add	r3, sp, #12
 8012828:	9300      	str	r3, [sp, #0]
 801282a:	462a      	mov	r2, r5
 801282c:	4b0f      	ldr	r3, [pc, #60]	; (801286c <_svfiprintf_r+0x1f8>)
 801282e:	a904      	add	r1, sp, #16
 8012830:	4638      	mov	r0, r7
 8012832:	f7fd ffcb 	bl	80107cc <_printf_float>
 8012836:	1c42      	adds	r2, r0, #1
 8012838:	4606      	mov	r6, r0
 801283a:	d1d6      	bne.n	80127ea <_svfiprintf_r+0x176>
 801283c:	89ab      	ldrh	r3, [r5, #12]
 801283e:	065b      	lsls	r3, r3, #25
 8012840:	f53f af2c 	bmi.w	801269c <_svfiprintf_r+0x28>
 8012844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012846:	b01d      	add	sp, #116	; 0x74
 8012848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801284c:	ab03      	add	r3, sp, #12
 801284e:	9300      	str	r3, [sp, #0]
 8012850:	462a      	mov	r2, r5
 8012852:	4b06      	ldr	r3, [pc, #24]	; (801286c <_svfiprintf_r+0x1f8>)
 8012854:	a904      	add	r1, sp, #16
 8012856:	4638      	mov	r0, r7
 8012858:	f7fe fa5c 	bl	8010d14 <_printf_i>
 801285c:	e7eb      	b.n	8012836 <_svfiprintf_r+0x1c2>
 801285e:	bf00      	nop
 8012860:	080145d4 	.word	0x080145d4
 8012864:	080145de 	.word	0x080145de
 8012868:	080107cd 	.word	0x080107cd
 801286c:	080125bd 	.word	0x080125bd
 8012870:	080145da 	.word	0x080145da

08012874 <_sbrk_r>:
 8012874:	b538      	push	{r3, r4, r5, lr}
 8012876:	4d06      	ldr	r5, [pc, #24]	; (8012890 <_sbrk_r+0x1c>)
 8012878:	2300      	movs	r3, #0
 801287a:	4604      	mov	r4, r0
 801287c:	4608      	mov	r0, r1
 801287e:	602b      	str	r3, [r5, #0]
 8012880:	f7f2 f8f4 	bl	8004a6c <_sbrk>
 8012884:	1c43      	adds	r3, r0, #1
 8012886:	d102      	bne.n	801288e <_sbrk_r+0x1a>
 8012888:	682b      	ldr	r3, [r5, #0]
 801288a:	b103      	cbz	r3, 801288e <_sbrk_r+0x1a>
 801288c:	6023      	str	r3, [r4, #0]
 801288e:	bd38      	pop	{r3, r4, r5, pc}
 8012890:	20003234 	.word	0x20003234

08012894 <__assert_func>:
 8012894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012896:	4614      	mov	r4, r2
 8012898:	461a      	mov	r2, r3
 801289a:	4b09      	ldr	r3, [pc, #36]	; (80128c0 <__assert_func+0x2c>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	4605      	mov	r5, r0
 80128a0:	68d8      	ldr	r0, [r3, #12]
 80128a2:	b14c      	cbz	r4, 80128b8 <__assert_func+0x24>
 80128a4:	4b07      	ldr	r3, [pc, #28]	; (80128c4 <__assert_func+0x30>)
 80128a6:	9100      	str	r1, [sp, #0]
 80128a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80128ac:	4906      	ldr	r1, [pc, #24]	; (80128c8 <__assert_func+0x34>)
 80128ae:	462b      	mov	r3, r5
 80128b0:	f000 f80e 	bl	80128d0 <fiprintf>
 80128b4:	f000 faac 	bl	8012e10 <abort>
 80128b8:	4b04      	ldr	r3, [pc, #16]	; (80128cc <__assert_func+0x38>)
 80128ba:	461c      	mov	r4, r3
 80128bc:	e7f3      	b.n	80128a6 <__assert_func+0x12>
 80128be:	bf00      	nop
 80128c0:	2000002c 	.word	0x2000002c
 80128c4:	080145e5 	.word	0x080145e5
 80128c8:	080145f2 	.word	0x080145f2
 80128cc:	08014620 	.word	0x08014620

080128d0 <fiprintf>:
 80128d0:	b40e      	push	{r1, r2, r3}
 80128d2:	b503      	push	{r0, r1, lr}
 80128d4:	4601      	mov	r1, r0
 80128d6:	ab03      	add	r3, sp, #12
 80128d8:	4805      	ldr	r0, [pc, #20]	; (80128f0 <fiprintf+0x20>)
 80128da:	f853 2b04 	ldr.w	r2, [r3], #4
 80128de:	6800      	ldr	r0, [r0, #0]
 80128e0:	9301      	str	r3, [sp, #4]
 80128e2:	f000 f897 	bl	8012a14 <_vfiprintf_r>
 80128e6:	b002      	add	sp, #8
 80128e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80128ec:	b003      	add	sp, #12
 80128ee:	4770      	bx	lr
 80128f0:	2000002c 	.word	0x2000002c

080128f4 <__ascii_mbtowc>:
 80128f4:	b082      	sub	sp, #8
 80128f6:	b901      	cbnz	r1, 80128fa <__ascii_mbtowc+0x6>
 80128f8:	a901      	add	r1, sp, #4
 80128fa:	b142      	cbz	r2, 801290e <__ascii_mbtowc+0x1a>
 80128fc:	b14b      	cbz	r3, 8012912 <__ascii_mbtowc+0x1e>
 80128fe:	7813      	ldrb	r3, [r2, #0]
 8012900:	600b      	str	r3, [r1, #0]
 8012902:	7812      	ldrb	r2, [r2, #0]
 8012904:	1e10      	subs	r0, r2, #0
 8012906:	bf18      	it	ne
 8012908:	2001      	movne	r0, #1
 801290a:	b002      	add	sp, #8
 801290c:	4770      	bx	lr
 801290e:	4610      	mov	r0, r2
 8012910:	e7fb      	b.n	801290a <__ascii_mbtowc+0x16>
 8012912:	f06f 0001 	mvn.w	r0, #1
 8012916:	e7f8      	b.n	801290a <__ascii_mbtowc+0x16>

08012918 <memmove>:
 8012918:	4288      	cmp	r0, r1
 801291a:	b510      	push	{r4, lr}
 801291c:	eb01 0402 	add.w	r4, r1, r2
 8012920:	d902      	bls.n	8012928 <memmove+0x10>
 8012922:	4284      	cmp	r4, r0
 8012924:	4623      	mov	r3, r4
 8012926:	d807      	bhi.n	8012938 <memmove+0x20>
 8012928:	1e43      	subs	r3, r0, #1
 801292a:	42a1      	cmp	r1, r4
 801292c:	d008      	beq.n	8012940 <memmove+0x28>
 801292e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012932:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012936:	e7f8      	b.n	801292a <memmove+0x12>
 8012938:	4402      	add	r2, r0
 801293a:	4601      	mov	r1, r0
 801293c:	428a      	cmp	r2, r1
 801293e:	d100      	bne.n	8012942 <memmove+0x2a>
 8012940:	bd10      	pop	{r4, pc}
 8012942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801294a:	e7f7      	b.n	801293c <memmove+0x24>

0801294c <__malloc_lock>:
 801294c:	4801      	ldr	r0, [pc, #4]	; (8012954 <__malloc_lock+0x8>)
 801294e:	f000 bc1f 	b.w	8013190 <__retarget_lock_acquire_recursive>
 8012952:	bf00      	nop
 8012954:	20003238 	.word	0x20003238

08012958 <__malloc_unlock>:
 8012958:	4801      	ldr	r0, [pc, #4]	; (8012960 <__malloc_unlock+0x8>)
 801295a:	f000 bc1a 	b.w	8013192 <__retarget_lock_release_recursive>
 801295e:	bf00      	nop
 8012960:	20003238 	.word	0x20003238

08012964 <_realloc_r>:
 8012964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012968:	4680      	mov	r8, r0
 801296a:	4614      	mov	r4, r2
 801296c:	460e      	mov	r6, r1
 801296e:	b921      	cbnz	r1, 801297a <_realloc_r+0x16>
 8012970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012974:	4611      	mov	r1, r2
 8012976:	f7ff bdad 	b.w	80124d4 <_malloc_r>
 801297a:	b92a      	cbnz	r2, 8012988 <_realloc_r+0x24>
 801297c:	f7ff fd3e 	bl	80123fc <_free_r>
 8012980:	4625      	mov	r5, r4
 8012982:	4628      	mov	r0, r5
 8012984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012988:	f000 fc6a 	bl	8013260 <_malloc_usable_size_r>
 801298c:	4284      	cmp	r4, r0
 801298e:	4607      	mov	r7, r0
 8012990:	d802      	bhi.n	8012998 <_realloc_r+0x34>
 8012992:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012996:	d812      	bhi.n	80129be <_realloc_r+0x5a>
 8012998:	4621      	mov	r1, r4
 801299a:	4640      	mov	r0, r8
 801299c:	f7ff fd9a 	bl	80124d4 <_malloc_r>
 80129a0:	4605      	mov	r5, r0
 80129a2:	2800      	cmp	r0, #0
 80129a4:	d0ed      	beq.n	8012982 <_realloc_r+0x1e>
 80129a6:	42bc      	cmp	r4, r7
 80129a8:	4622      	mov	r2, r4
 80129aa:	4631      	mov	r1, r6
 80129ac:	bf28      	it	cs
 80129ae:	463a      	movcs	r2, r7
 80129b0:	f7ff f97c 	bl	8011cac <memcpy>
 80129b4:	4631      	mov	r1, r6
 80129b6:	4640      	mov	r0, r8
 80129b8:	f7ff fd20 	bl	80123fc <_free_r>
 80129bc:	e7e1      	b.n	8012982 <_realloc_r+0x1e>
 80129be:	4635      	mov	r5, r6
 80129c0:	e7df      	b.n	8012982 <_realloc_r+0x1e>

080129c2 <__sfputc_r>:
 80129c2:	6893      	ldr	r3, [r2, #8]
 80129c4:	3b01      	subs	r3, #1
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	b410      	push	{r4}
 80129ca:	6093      	str	r3, [r2, #8]
 80129cc:	da08      	bge.n	80129e0 <__sfputc_r+0x1e>
 80129ce:	6994      	ldr	r4, [r2, #24]
 80129d0:	42a3      	cmp	r3, r4
 80129d2:	db01      	blt.n	80129d8 <__sfputc_r+0x16>
 80129d4:	290a      	cmp	r1, #10
 80129d6:	d103      	bne.n	80129e0 <__sfputc_r+0x1e>
 80129d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129dc:	f000 b94a 	b.w	8012c74 <__swbuf_r>
 80129e0:	6813      	ldr	r3, [r2, #0]
 80129e2:	1c58      	adds	r0, r3, #1
 80129e4:	6010      	str	r0, [r2, #0]
 80129e6:	7019      	strb	r1, [r3, #0]
 80129e8:	4608      	mov	r0, r1
 80129ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129ee:	4770      	bx	lr

080129f0 <__sfputs_r>:
 80129f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129f2:	4606      	mov	r6, r0
 80129f4:	460f      	mov	r7, r1
 80129f6:	4614      	mov	r4, r2
 80129f8:	18d5      	adds	r5, r2, r3
 80129fa:	42ac      	cmp	r4, r5
 80129fc:	d101      	bne.n	8012a02 <__sfputs_r+0x12>
 80129fe:	2000      	movs	r0, #0
 8012a00:	e007      	b.n	8012a12 <__sfputs_r+0x22>
 8012a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a06:	463a      	mov	r2, r7
 8012a08:	4630      	mov	r0, r6
 8012a0a:	f7ff ffda 	bl	80129c2 <__sfputc_r>
 8012a0e:	1c43      	adds	r3, r0, #1
 8012a10:	d1f3      	bne.n	80129fa <__sfputs_r+0xa>
 8012a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a14 <_vfiprintf_r>:
 8012a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a18:	460d      	mov	r5, r1
 8012a1a:	b09d      	sub	sp, #116	; 0x74
 8012a1c:	4614      	mov	r4, r2
 8012a1e:	4698      	mov	r8, r3
 8012a20:	4606      	mov	r6, r0
 8012a22:	b118      	cbz	r0, 8012a2c <_vfiprintf_r+0x18>
 8012a24:	6983      	ldr	r3, [r0, #24]
 8012a26:	b90b      	cbnz	r3, 8012a2c <_vfiprintf_r+0x18>
 8012a28:	f000 fb14 	bl	8013054 <__sinit>
 8012a2c:	4b89      	ldr	r3, [pc, #548]	; (8012c54 <_vfiprintf_r+0x240>)
 8012a2e:	429d      	cmp	r5, r3
 8012a30:	d11b      	bne.n	8012a6a <_vfiprintf_r+0x56>
 8012a32:	6875      	ldr	r5, [r6, #4]
 8012a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a36:	07d9      	lsls	r1, r3, #31
 8012a38:	d405      	bmi.n	8012a46 <_vfiprintf_r+0x32>
 8012a3a:	89ab      	ldrh	r3, [r5, #12]
 8012a3c:	059a      	lsls	r2, r3, #22
 8012a3e:	d402      	bmi.n	8012a46 <_vfiprintf_r+0x32>
 8012a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a42:	f000 fba5 	bl	8013190 <__retarget_lock_acquire_recursive>
 8012a46:	89ab      	ldrh	r3, [r5, #12]
 8012a48:	071b      	lsls	r3, r3, #28
 8012a4a:	d501      	bpl.n	8012a50 <_vfiprintf_r+0x3c>
 8012a4c:	692b      	ldr	r3, [r5, #16]
 8012a4e:	b9eb      	cbnz	r3, 8012a8c <_vfiprintf_r+0x78>
 8012a50:	4629      	mov	r1, r5
 8012a52:	4630      	mov	r0, r6
 8012a54:	f000 f96e 	bl	8012d34 <__swsetup_r>
 8012a58:	b1c0      	cbz	r0, 8012a8c <_vfiprintf_r+0x78>
 8012a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a5c:	07dc      	lsls	r4, r3, #31
 8012a5e:	d50e      	bpl.n	8012a7e <_vfiprintf_r+0x6a>
 8012a60:	f04f 30ff 	mov.w	r0, #4294967295
 8012a64:	b01d      	add	sp, #116	; 0x74
 8012a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a6a:	4b7b      	ldr	r3, [pc, #492]	; (8012c58 <_vfiprintf_r+0x244>)
 8012a6c:	429d      	cmp	r5, r3
 8012a6e:	d101      	bne.n	8012a74 <_vfiprintf_r+0x60>
 8012a70:	68b5      	ldr	r5, [r6, #8]
 8012a72:	e7df      	b.n	8012a34 <_vfiprintf_r+0x20>
 8012a74:	4b79      	ldr	r3, [pc, #484]	; (8012c5c <_vfiprintf_r+0x248>)
 8012a76:	429d      	cmp	r5, r3
 8012a78:	bf08      	it	eq
 8012a7a:	68f5      	ldreq	r5, [r6, #12]
 8012a7c:	e7da      	b.n	8012a34 <_vfiprintf_r+0x20>
 8012a7e:	89ab      	ldrh	r3, [r5, #12]
 8012a80:	0598      	lsls	r0, r3, #22
 8012a82:	d4ed      	bmi.n	8012a60 <_vfiprintf_r+0x4c>
 8012a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a86:	f000 fb84 	bl	8013192 <__retarget_lock_release_recursive>
 8012a8a:	e7e9      	b.n	8012a60 <_vfiprintf_r+0x4c>
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8012a90:	2320      	movs	r3, #32
 8012a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a9a:	2330      	movs	r3, #48	; 0x30
 8012a9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012c60 <_vfiprintf_r+0x24c>
 8012aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012aa4:	f04f 0901 	mov.w	r9, #1
 8012aa8:	4623      	mov	r3, r4
 8012aaa:	469a      	mov	sl, r3
 8012aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ab0:	b10a      	cbz	r2, 8012ab6 <_vfiprintf_r+0xa2>
 8012ab2:	2a25      	cmp	r2, #37	; 0x25
 8012ab4:	d1f9      	bne.n	8012aaa <_vfiprintf_r+0x96>
 8012ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8012aba:	d00b      	beq.n	8012ad4 <_vfiprintf_r+0xc0>
 8012abc:	465b      	mov	r3, fp
 8012abe:	4622      	mov	r2, r4
 8012ac0:	4629      	mov	r1, r5
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f7ff ff94 	bl	80129f0 <__sfputs_r>
 8012ac8:	3001      	adds	r0, #1
 8012aca:	f000 80aa 	beq.w	8012c22 <_vfiprintf_r+0x20e>
 8012ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ad0:	445a      	add	r2, fp
 8012ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8012ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f000 80a2 	beq.w	8012c22 <_vfiprintf_r+0x20e>
 8012ade:	2300      	movs	r3, #0
 8012ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ae8:	f10a 0a01 	add.w	sl, sl, #1
 8012aec:	9304      	str	r3, [sp, #16]
 8012aee:	9307      	str	r3, [sp, #28]
 8012af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012af4:	931a      	str	r3, [sp, #104]	; 0x68
 8012af6:	4654      	mov	r4, sl
 8012af8:	2205      	movs	r2, #5
 8012afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012afe:	4858      	ldr	r0, [pc, #352]	; (8012c60 <_vfiprintf_r+0x24c>)
 8012b00:	f7ed fb76 	bl	80001f0 <memchr>
 8012b04:	9a04      	ldr	r2, [sp, #16]
 8012b06:	b9d8      	cbnz	r0, 8012b40 <_vfiprintf_r+0x12c>
 8012b08:	06d1      	lsls	r1, r2, #27
 8012b0a:	bf44      	itt	mi
 8012b0c:	2320      	movmi	r3, #32
 8012b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b12:	0713      	lsls	r3, r2, #28
 8012b14:	bf44      	itt	mi
 8012b16:	232b      	movmi	r3, #43	; 0x2b
 8012b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8012b20:	2b2a      	cmp	r3, #42	; 0x2a
 8012b22:	d015      	beq.n	8012b50 <_vfiprintf_r+0x13c>
 8012b24:	9a07      	ldr	r2, [sp, #28]
 8012b26:	4654      	mov	r4, sl
 8012b28:	2000      	movs	r0, #0
 8012b2a:	f04f 0c0a 	mov.w	ip, #10
 8012b2e:	4621      	mov	r1, r4
 8012b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b34:	3b30      	subs	r3, #48	; 0x30
 8012b36:	2b09      	cmp	r3, #9
 8012b38:	d94e      	bls.n	8012bd8 <_vfiprintf_r+0x1c4>
 8012b3a:	b1b0      	cbz	r0, 8012b6a <_vfiprintf_r+0x156>
 8012b3c:	9207      	str	r2, [sp, #28]
 8012b3e:	e014      	b.n	8012b6a <_vfiprintf_r+0x156>
 8012b40:	eba0 0308 	sub.w	r3, r0, r8
 8012b44:	fa09 f303 	lsl.w	r3, r9, r3
 8012b48:	4313      	orrs	r3, r2
 8012b4a:	9304      	str	r3, [sp, #16]
 8012b4c:	46a2      	mov	sl, r4
 8012b4e:	e7d2      	b.n	8012af6 <_vfiprintf_r+0xe2>
 8012b50:	9b03      	ldr	r3, [sp, #12]
 8012b52:	1d19      	adds	r1, r3, #4
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	9103      	str	r1, [sp, #12]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	bfbb      	ittet	lt
 8012b5c:	425b      	neglt	r3, r3
 8012b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8012b62:	9307      	strge	r3, [sp, #28]
 8012b64:	9307      	strlt	r3, [sp, #28]
 8012b66:	bfb8      	it	lt
 8012b68:	9204      	strlt	r2, [sp, #16]
 8012b6a:	7823      	ldrb	r3, [r4, #0]
 8012b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8012b6e:	d10c      	bne.n	8012b8a <_vfiprintf_r+0x176>
 8012b70:	7863      	ldrb	r3, [r4, #1]
 8012b72:	2b2a      	cmp	r3, #42	; 0x2a
 8012b74:	d135      	bne.n	8012be2 <_vfiprintf_r+0x1ce>
 8012b76:	9b03      	ldr	r3, [sp, #12]
 8012b78:	1d1a      	adds	r2, r3, #4
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	9203      	str	r2, [sp, #12]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	bfb8      	it	lt
 8012b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b86:	3402      	adds	r4, #2
 8012b88:	9305      	str	r3, [sp, #20]
 8012b8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012c70 <_vfiprintf_r+0x25c>
 8012b8e:	7821      	ldrb	r1, [r4, #0]
 8012b90:	2203      	movs	r2, #3
 8012b92:	4650      	mov	r0, sl
 8012b94:	f7ed fb2c 	bl	80001f0 <memchr>
 8012b98:	b140      	cbz	r0, 8012bac <_vfiprintf_r+0x198>
 8012b9a:	2340      	movs	r3, #64	; 0x40
 8012b9c:	eba0 000a 	sub.w	r0, r0, sl
 8012ba0:	fa03 f000 	lsl.w	r0, r3, r0
 8012ba4:	9b04      	ldr	r3, [sp, #16]
 8012ba6:	4303      	orrs	r3, r0
 8012ba8:	3401      	adds	r4, #1
 8012baa:	9304      	str	r3, [sp, #16]
 8012bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bb0:	482c      	ldr	r0, [pc, #176]	; (8012c64 <_vfiprintf_r+0x250>)
 8012bb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012bb6:	2206      	movs	r2, #6
 8012bb8:	f7ed fb1a 	bl	80001f0 <memchr>
 8012bbc:	2800      	cmp	r0, #0
 8012bbe:	d03f      	beq.n	8012c40 <_vfiprintf_r+0x22c>
 8012bc0:	4b29      	ldr	r3, [pc, #164]	; (8012c68 <_vfiprintf_r+0x254>)
 8012bc2:	bb1b      	cbnz	r3, 8012c0c <_vfiprintf_r+0x1f8>
 8012bc4:	9b03      	ldr	r3, [sp, #12]
 8012bc6:	3307      	adds	r3, #7
 8012bc8:	f023 0307 	bic.w	r3, r3, #7
 8012bcc:	3308      	adds	r3, #8
 8012bce:	9303      	str	r3, [sp, #12]
 8012bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bd2:	443b      	add	r3, r7
 8012bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8012bd6:	e767      	b.n	8012aa8 <_vfiprintf_r+0x94>
 8012bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012bdc:	460c      	mov	r4, r1
 8012bde:	2001      	movs	r0, #1
 8012be0:	e7a5      	b.n	8012b2e <_vfiprintf_r+0x11a>
 8012be2:	2300      	movs	r3, #0
 8012be4:	3401      	adds	r4, #1
 8012be6:	9305      	str	r3, [sp, #20]
 8012be8:	4619      	mov	r1, r3
 8012bea:	f04f 0c0a 	mov.w	ip, #10
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bf4:	3a30      	subs	r2, #48	; 0x30
 8012bf6:	2a09      	cmp	r2, #9
 8012bf8:	d903      	bls.n	8012c02 <_vfiprintf_r+0x1ee>
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d0c5      	beq.n	8012b8a <_vfiprintf_r+0x176>
 8012bfe:	9105      	str	r1, [sp, #20]
 8012c00:	e7c3      	b.n	8012b8a <_vfiprintf_r+0x176>
 8012c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c06:	4604      	mov	r4, r0
 8012c08:	2301      	movs	r3, #1
 8012c0a:	e7f0      	b.n	8012bee <_vfiprintf_r+0x1da>
 8012c0c:	ab03      	add	r3, sp, #12
 8012c0e:	9300      	str	r3, [sp, #0]
 8012c10:	462a      	mov	r2, r5
 8012c12:	4b16      	ldr	r3, [pc, #88]	; (8012c6c <_vfiprintf_r+0x258>)
 8012c14:	a904      	add	r1, sp, #16
 8012c16:	4630      	mov	r0, r6
 8012c18:	f7fd fdd8 	bl	80107cc <_printf_float>
 8012c1c:	4607      	mov	r7, r0
 8012c1e:	1c78      	adds	r0, r7, #1
 8012c20:	d1d6      	bne.n	8012bd0 <_vfiprintf_r+0x1bc>
 8012c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c24:	07d9      	lsls	r1, r3, #31
 8012c26:	d405      	bmi.n	8012c34 <_vfiprintf_r+0x220>
 8012c28:	89ab      	ldrh	r3, [r5, #12]
 8012c2a:	059a      	lsls	r2, r3, #22
 8012c2c:	d402      	bmi.n	8012c34 <_vfiprintf_r+0x220>
 8012c2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c30:	f000 faaf 	bl	8013192 <__retarget_lock_release_recursive>
 8012c34:	89ab      	ldrh	r3, [r5, #12]
 8012c36:	065b      	lsls	r3, r3, #25
 8012c38:	f53f af12 	bmi.w	8012a60 <_vfiprintf_r+0x4c>
 8012c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c3e:	e711      	b.n	8012a64 <_vfiprintf_r+0x50>
 8012c40:	ab03      	add	r3, sp, #12
 8012c42:	9300      	str	r3, [sp, #0]
 8012c44:	462a      	mov	r2, r5
 8012c46:	4b09      	ldr	r3, [pc, #36]	; (8012c6c <_vfiprintf_r+0x258>)
 8012c48:	a904      	add	r1, sp, #16
 8012c4a:	4630      	mov	r0, r6
 8012c4c:	f7fe f862 	bl	8010d14 <_printf_i>
 8012c50:	e7e4      	b.n	8012c1c <_vfiprintf_r+0x208>
 8012c52:	bf00      	nop
 8012c54:	0801474c 	.word	0x0801474c
 8012c58:	0801476c 	.word	0x0801476c
 8012c5c:	0801472c 	.word	0x0801472c
 8012c60:	080145d4 	.word	0x080145d4
 8012c64:	080145de 	.word	0x080145de
 8012c68:	080107cd 	.word	0x080107cd
 8012c6c:	080129f1 	.word	0x080129f1
 8012c70:	080145da 	.word	0x080145da

08012c74 <__swbuf_r>:
 8012c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c76:	460e      	mov	r6, r1
 8012c78:	4614      	mov	r4, r2
 8012c7a:	4605      	mov	r5, r0
 8012c7c:	b118      	cbz	r0, 8012c86 <__swbuf_r+0x12>
 8012c7e:	6983      	ldr	r3, [r0, #24]
 8012c80:	b90b      	cbnz	r3, 8012c86 <__swbuf_r+0x12>
 8012c82:	f000 f9e7 	bl	8013054 <__sinit>
 8012c86:	4b21      	ldr	r3, [pc, #132]	; (8012d0c <__swbuf_r+0x98>)
 8012c88:	429c      	cmp	r4, r3
 8012c8a:	d12b      	bne.n	8012ce4 <__swbuf_r+0x70>
 8012c8c:	686c      	ldr	r4, [r5, #4]
 8012c8e:	69a3      	ldr	r3, [r4, #24]
 8012c90:	60a3      	str	r3, [r4, #8]
 8012c92:	89a3      	ldrh	r3, [r4, #12]
 8012c94:	071a      	lsls	r2, r3, #28
 8012c96:	d52f      	bpl.n	8012cf8 <__swbuf_r+0x84>
 8012c98:	6923      	ldr	r3, [r4, #16]
 8012c9a:	b36b      	cbz	r3, 8012cf8 <__swbuf_r+0x84>
 8012c9c:	6923      	ldr	r3, [r4, #16]
 8012c9e:	6820      	ldr	r0, [r4, #0]
 8012ca0:	1ac0      	subs	r0, r0, r3
 8012ca2:	6963      	ldr	r3, [r4, #20]
 8012ca4:	b2f6      	uxtb	r6, r6
 8012ca6:	4283      	cmp	r3, r0
 8012ca8:	4637      	mov	r7, r6
 8012caa:	dc04      	bgt.n	8012cb6 <__swbuf_r+0x42>
 8012cac:	4621      	mov	r1, r4
 8012cae:	4628      	mov	r0, r5
 8012cb0:	f000 f93c 	bl	8012f2c <_fflush_r>
 8012cb4:	bb30      	cbnz	r0, 8012d04 <__swbuf_r+0x90>
 8012cb6:	68a3      	ldr	r3, [r4, #8]
 8012cb8:	3b01      	subs	r3, #1
 8012cba:	60a3      	str	r3, [r4, #8]
 8012cbc:	6823      	ldr	r3, [r4, #0]
 8012cbe:	1c5a      	adds	r2, r3, #1
 8012cc0:	6022      	str	r2, [r4, #0]
 8012cc2:	701e      	strb	r6, [r3, #0]
 8012cc4:	6963      	ldr	r3, [r4, #20]
 8012cc6:	3001      	adds	r0, #1
 8012cc8:	4283      	cmp	r3, r0
 8012cca:	d004      	beq.n	8012cd6 <__swbuf_r+0x62>
 8012ccc:	89a3      	ldrh	r3, [r4, #12]
 8012cce:	07db      	lsls	r3, r3, #31
 8012cd0:	d506      	bpl.n	8012ce0 <__swbuf_r+0x6c>
 8012cd2:	2e0a      	cmp	r6, #10
 8012cd4:	d104      	bne.n	8012ce0 <__swbuf_r+0x6c>
 8012cd6:	4621      	mov	r1, r4
 8012cd8:	4628      	mov	r0, r5
 8012cda:	f000 f927 	bl	8012f2c <_fflush_r>
 8012cde:	b988      	cbnz	r0, 8012d04 <__swbuf_r+0x90>
 8012ce0:	4638      	mov	r0, r7
 8012ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ce4:	4b0a      	ldr	r3, [pc, #40]	; (8012d10 <__swbuf_r+0x9c>)
 8012ce6:	429c      	cmp	r4, r3
 8012ce8:	d101      	bne.n	8012cee <__swbuf_r+0x7a>
 8012cea:	68ac      	ldr	r4, [r5, #8]
 8012cec:	e7cf      	b.n	8012c8e <__swbuf_r+0x1a>
 8012cee:	4b09      	ldr	r3, [pc, #36]	; (8012d14 <__swbuf_r+0xa0>)
 8012cf0:	429c      	cmp	r4, r3
 8012cf2:	bf08      	it	eq
 8012cf4:	68ec      	ldreq	r4, [r5, #12]
 8012cf6:	e7ca      	b.n	8012c8e <__swbuf_r+0x1a>
 8012cf8:	4621      	mov	r1, r4
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	f000 f81a 	bl	8012d34 <__swsetup_r>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d0cb      	beq.n	8012c9c <__swbuf_r+0x28>
 8012d04:	f04f 37ff 	mov.w	r7, #4294967295
 8012d08:	e7ea      	b.n	8012ce0 <__swbuf_r+0x6c>
 8012d0a:	bf00      	nop
 8012d0c:	0801474c 	.word	0x0801474c
 8012d10:	0801476c 	.word	0x0801476c
 8012d14:	0801472c 	.word	0x0801472c

08012d18 <__ascii_wctomb>:
 8012d18:	b149      	cbz	r1, 8012d2e <__ascii_wctomb+0x16>
 8012d1a:	2aff      	cmp	r2, #255	; 0xff
 8012d1c:	bf85      	ittet	hi
 8012d1e:	238a      	movhi	r3, #138	; 0x8a
 8012d20:	6003      	strhi	r3, [r0, #0]
 8012d22:	700a      	strbls	r2, [r1, #0]
 8012d24:	f04f 30ff 	movhi.w	r0, #4294967295
 8012d28:	bf98      	it	ls
 8012d2a:	2001      	movls	r0, #1
 8012d2c:	4770      	bx	lr
 8012d2e:	4608      	mov	r0, r1
 8012d30:	4770      	bx	lr
	...

08012d34 <__swsetup_r>:
 8012d34:	4b32      	ldr	r3, [pc, #200]	; (8012e00 <__swsetup_r+0xcc>)
 8012d36:	b570      	push	{r4, r5, r6, lr}
 8012d38:	681d      	ldr	r5, [r3, #0]
 8012d3a:	4606      	mov	r6, r0
 8012d3c:	460c      	mov	r4, r1
 8012d3e:	b125      	cbz	r5, 8012d4a <__swsetup_r+0x16>
 8012d40:	69ab      	ldr	r3, [r5, #24]
 8012d42:	b913      	cbnz	r3, 8012d4a <__swsetup_r+0x16>
 8012d44:	4628      	mov	r0, r5
 8012d46:	f000 f985 	bl	8013054 <__sinit>
 8012d4a:	4b2e      	ldr	r3, [pc, #184]	; (8012e04 <__swsetup_r+0xd0>)
 8012d4c:	429c      	cmp	r4, r3
 8012d4e:	d10f      	bne.n	8012d70 <__swsetup_r+0x3c>
 8012d50:	686c      	ldr	r4, [r5, #4]
 8012d52:	89a3      	ldrh	r3, [r4, #12]
 8012d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d58:	0719      	lsls	r1, r3, #28
 8012d5a:	d42c      	bmi.n	8012db6 <__swsetup_r+0x82>
 8012d5c:	06dd      	lsls	r5, r3, #27
 8012d5e:	d411      	bmi.n	8012d84 <__swsetup_r+0x50>
 8012d60:	2309      	movs	r3, #9
 8012d62:	6033      	str	r3, [r6, #0]
 8012d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d68:	81a3      	strh	r3, [r4, #12]
 8012d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d6e:	e03e      	b.n	8012dee <__swsetup_r+0xba>
 8012d70:	4b25      	ldr	r3, [pc, #148]	; (8012e08 <__swsetup_r+0xd4>)
 8012d72:	429c      	cmp	r4, r3
 8012d74:	d101      	bne.n	8012d7a <__swsetup_r+0x46>
 8012d76:	68ac      	ldr	r4, [r5, #8]
 8012d78:	e7eb      	b.n	8012d52 <__swsetup_r+0x1e>
 8012d7a:	4b24      	ldr	r3, [pc, #144]	; (8012e0c <__swsetup_r+0xd8>)
 8012d7c:	429c      	cmp	r4, r3
 8012d7e:	bf08      	it	eq
 8012d80:	68ec      	ldreq	r4, [r5, #12]
 8012d82:	e7e6      	b.n	8012d52 <__swsetup_r+0x1e>
 8012d84:	0758      	lsls	r0, r3, #29
 8012d86:	d512      	bpl.n	8012dae <__swsetup_r+0x7a>
 8012d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d8a:	b141      	cbz	r1, 8012d9e <__swsetup_r+0x6a>
 8012d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d90:	4299      	cmp	r1, r3
 8012d92:	d002      	beq.n	8012d9a <__swsetup_r+0x66>
 8012d94:	4630      	mov	r0, r6
 8012d96:	f7ff fb31 	bl	80123fc <_free_r>
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8012d9e:	89a3      	ldrh	r3, [r4, #12]
 8012da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012da4:	81a3      	strh	r3, [r4, #12]
 8012da6:	2300      	movs	r3, #0
 8012da8:	6063      	str	r3, [r4, #4]
 8012daa:	6923      	ldr	r3, [r4, #16]
 8012dac:	6023      	str	r3, [r4, #0]
 8012dae:	89a3      	ldrh	r3, [r4, #12]
 8012db0:	f043 0308 	orr.w	r3, r3, #8
 8012db4:	81a3      	strh	r3, [r4, #12]
 8012db6:	6923      	ldr	r3, [r4, #16]
 8012db8:	b94b      	cbnz	r3, 8012dce <__swsetup_r+0x9a>
 8012dba:	89a3      	ldrh	r3, [r4, #12]
 8012dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012dc4:	d003      	beq.n	8012dce <__swsetup_r+0x9a>
 8012dc6:	4621      	mov	r1, r4
 8012dc8:	4630      	mov	r0, r6
 8012dca:	f000 fa09 	bl	80131e0 <__smakebuf_r>
 8012dce:	89a0      	ldrh	r0, [r4, #12]
 8012dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012dd4:	f010 0301 	ands.w	r3, r0, #1
 8012dd8:	d00a      	beq.n	8012df0 <__swsetup_r+0xbc>
 8012dda:	2300      	movs	r3, #0
 8012ddc:	60a3      	str	r3, [r4, #8]
 8012dde:	6963      	ldr	r3, [r4, #20]
 8012de0:	425b      	negs	r3, r3
 8012de2:	61a3      	str	r3, [r4, #24]
 8012de4:	6923      	ldr	r3, [r4, #16]
 8012de6:	b943      	cbnz	r3, 8012dfa <__swsetup_r+0xc6>
 8012de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012dec:	d1ba      	bne.n	8012d64 <__swsetup_r+0x30>
 8012dee:	bd70      	pop	{r4, r5, r6, pc}
 8012df0:	0781      	lsls	r1, r0, #30
 8012df2:	bf58      	it	pl
 8012df4:	6963      	ldrpl	r3, [r4, #20]
 8012df6:	60a3      	str	r3, [r4, #8]
 8012df8:	e7f4      	b.n	8012de4 <__swsetup_r+0xb0>
 8012dfa:	2000      	movs	r0, #0
 8012dfc:	e7f7      	b.n	8012dee <__swsetup_r+0xba>
 8012dfe:	bf00      	nop
 8012e00:	2000002c 	.word	0x2000002c
 8012e04:	0801474c 	.word	0x0801474c
 8012e08:	0801476c 	.word	0x0801476c
 8012e0c:	0801472c 	.word	0x0801472c

08012e10 <abort>:
 8012e10:	b508      	push	{r3, lr}
 8012e12:	2006      	movs	r0, #6
 8012e14:	f000 fa54 	bl	80132c0 <raise>
 8012e18:	2001      	movs	r0, #1
 8012e1a:	f7f1 fdaf 	bl	800497c <_exit>
	...

08012e20 <__sflush_r>:
 8012e20:	898a      	ldrh	r2, [r1, #12]
 8012e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e26:	4605      	mov	r5, r0
 8012e28:	0710      	lsls	r0, r2, #28
 8012e2a:	460c      	mov	r4, r1
 8012e2c:	d458      	bmi.n	8012ee0 <__sflush_r+0xc0>
 8012e2e:	684b      	ldr	r3, [r1, #4]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	dc05      	bgt.n	8012e40 <__sflush_r+0x20>
 8012e34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	dc02      	bgt.n	8012e40 <__sflush_r+0x20>
 8012e3a:	2000      	movs	r0, #0
 8012e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e42:	2e00      	cmp	r6, #0
 8012e44:	d0f9      	beq.n	8012e3a <__sflush_r+0x1a>
 8012e46:	2300      	movs	r3, #0
 8012e48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e4c:	682f      	ldr	r7, [r5, #0]
 8012e4e:	602b      	str	r3, [r5, #0]
 8012e50:	d032      	beq.n	8012eb8 <__sflush_r+0x98>
 8012e52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e54:	89a3      	ldrh	r3, [r4, #12]
 8012e56:	075a      	lsls	r2, r3, #29
 8012e58:	d505      	bpl.n	8012e66 <__sflush_r+0x46>
 8012e5a:	6863      	ldr	r3, [r4, #4]
 8012e5c:	1ac0      	subs	r0, r0, r3
 8012e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e60:	b10b      	cbz	r3, 8012e66 <__sflush_r+0x46>
 8012e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e64:	1ac0      	subs	r0, r0, r3
 8012e66:	2300      	movs	r3, #0
 8012e68:	4602      	mov	r2, r0
 8012e6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e6c:	6a21      	ldr	r1, [r4, #32]
 8012e6e:	4628      	mov	r0, r5
 8012e70:	47b0      	blx	r6
 8012e72:	1c43      	adds	r3, r0, #1
 8012e74:	89a3      	ldrh	r3, [r4, #12]
 8012e76:	d106      	bne.n	8012e86 <__sflush_r+0x66>
 8012e78:	6829      	ldr	r1, [r5, #0]
 8012e7a:	291d      	cmp	r1, #29
 8012e7c:	d82c      	bhi.n	8012ed8 <__sflush_r+0xb8>
 8012e7e:	4a2a      	ldr	r2, [pc, #168]	; (8012f28 <__sflush_r+0x108>)
 8012e80:	40ca      	lsrs	r2, r1
 8012e82:	07d6      	lsls	r6, r2, #31
 8012e84:	d528      	bpl.n	8012ed8 <__sflush_r+0xb8>
 8012e86:	2200      	movs	r2, #0
 8012e88:	6062      	str	r2, [r4, #4]
 8012e8a:	04d9      	lsls	r1, r3, #19
 8012e8c:	6922      	ldr	r2, [r4, #16]
 8012e8e:	6022      	str	r2, [r4, #0]
 8012e90:	d504      	bpl.n	8012e9c <__sflush_r+0x7c>
 8012e92:	1c42      	adds	r2, r0, #1
 8012e94:	d101      	bne.n	8012e9a <__sflush_r+0x7a>
 8012e96:	682b      	ldr	r3, [r5, #0]
 8012e98:	b903      	cbnz	r3, 8012e9c <__sflush_r+0x7c>
 8012e9a:	6560      	str	r0, [r4, #84]	; 0x54
 8012e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e9e:	602f      	str	r7, [r5, #0]
 8012ea0:	2900      	cmp	r1, #0
 8012ea2:	d0ca      	beq.n	8012e3a <__sflush_r+0x1a>
 8012ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ea8:	4299      	cmp	r1, r3
 8012eaa:	d002      	beq.n	8012eb2 <__sflush_r+0x92>
 8012eac:	4628      	mov	r0, r5
 8012eae:	f7ff faa5 	bl	80123fc <_free_r>
 8012eb2:	2000      	movs	r0, #0
 8012eb4:	6360      	str	r0, [r4, #52]	; 0x34
 8012eb6:	e7c1      	b.n	8012e3c <__sflush_r+0x1c>
 8012eb8:	6a21      	ldr	r1, [r4, #32]
 8012eba:	2301      	movs	r3, #1
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	47b0      	blx	r6
 8012ec0:	1c41      	adds	r1, r0, #1
 8012ec2:	d1c7      	bne.n	8012e54 <__sflush_r+0x34>
 8012ec4:	682b      	ldr	r3, [r5, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d0c4      	beq.n	8012e54 <__sflush_r+0x34>
 8012eca:	2b1d      	cmp	r3, #29
 8012ecc:	d001      	beq.n	8012ed2 <__sflush_r+0xb2>
 8012ece:	2b16      	cmp	r3, #22
 8012ed0:	d101      	bne.n	8012ed6 <__sflush_r+0xb6>
 8012ed2:	602f      	str	r7, [r5, #0]
 8012ed4:	e7b1      	b.n	8012e3a <__sflush_r+0x1a>
 8012ed6:	89a3      	ldrh	r3, [r4, #12]
 8012ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012edc:	81a3      	strh	r3, [r4, #12]
 8012ede:	e7ad      	b.n	8012e3c <__sflush_r+0x1c>
 8012ee0:	690f      	ldr	r7, [r1, #16]
 8012ee2:	2f00      	cmp	r7, #0
 8012ee4:	d0a9      	beq.n	8012e3a <__sflush_r+0x1a>
 8012ee6:	0793      	lsls	r3, r2, #30
 8012ee8:	680e      	ldr	r6, [r1, #0]
 8012eea:	bf08      	it	eq
 8012eec:	694b      	ldreq	r3, [r1, #20]
 8012eee:	600f      	str	r7, [r1, #0]
 8012ef0:	bf18      	it	ne
 8012ef2:	2300      	movne	r3, #0
 8012ef4:	eba6 0807 	sub.w	r8, r6, r7
 8012ef8:	608b      	str	r3, [r1, #8]
 8012efa:	f1b8 0f00 	cmp.w	r8, #0
 8012efe:	dd9c      	ble.n	8012e3a <__sflush_r+0x1a>
 8012f00:	6a21      	ldr	r1, [r4, #32]
 8012f02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f04:	4643      	mov	r3, r8
 8012f06:	463a      	mov	r2, r7
 8012f08:	4628      	mov	r0, r5
 8012f0a:	47b0      	blx	r6
 8012f0c:	2800      	cmp	r0, #0
 8012f0e:	dc06      	bgt.n	8012f1e <__sflush_r+0xfe>
 8012f10:	89a3      	ldrh	r3, [r4, #12]
 8012f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f16:	81a3      	strh	r3, [r4, #12]
 8012f18:	f04f 30ff 	mov.w	r0, #4294967295
 8012f1c:	e78e      	b.n	8012e3c <__sflush_r+0x1c>
 8012f1e:	4407      	add	r7, r0
 8012f20:	eba8 0800 	sub.w	r8, r8, r0
 8012f24:	e7e9      	b.n	8012efa <__sflush_r+0xda>
 8012f26:	bf00      	nop
 8012f28:	20400001 	.word	0x20400001

08012f2c <_fflush_r>:
 8012f2c:	b538      	push	{r3, r4, r5, lr}
 8012f2e:	690b      	ldr	r3, [r1, #16]
 8012f30:	4605      	mov	r5, r0
 8012f32:	460c      	mov	r4, r1
 8012f34:	b913      	cbnz	r3, 8012f3c <_fflush_r+0x10>
 8012f36:	2500      	movs	r5, #0
 8012f38:	4628      	mov	r0, r5
 8012f3a:	bd38      	pop	{r3, r4, r5, pc}
 8012f3c:	b118      	cbz	r0, 8012f46 <_fflush_r+0x1a>
 8012f3e:	6983      	ldr	r3, [r0, #24]
 8012f40:	b90b      	cbnz	r3, 8012f46 <_fflush_r+0x1a>
 8012f42:	f000 f887 	bl	8013054 <__sinit>
 8012f46:	4b14      	ldr	r3, [pc, #80]	; (8012f98 <_fflush_r+0x6c>)
 8012f48:	429c      	cmp	r4, r3
 8012f4a:	d11b      	bne.n	8012f84 <_fflush_r+0x58>
 8012f4c:	686c      	ldr	r4, [r5, #4]
 8012f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d0ef      	beq.n	8012f36 <_fflush_r+0xa>
 8012f56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f58:	07d0      	lsls	r0, r2, #31
 8012f5a:	d404      	bmi.n	8012f66 <_fflush_r+0x3a>
 8012f5c:	0599      	lsls	r1, r3, #22
 8012f5e:	d402      	bmi.n	8012f66 <_fflush_r+0x3a>
 8012f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f62:	f000 f915 	bl	8013190 <__retarget_lock_acquire_recursive>
 8012f66:	4628      	mov	r0, r5
 8012f68:	4621      	mov	r1, r4
 8012f6a:	f7ff ff59 	bl	8012e20 <__sflush_r>
 8012f6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f70:	07da      	lsls	r2, r3, #31
 8012f72:	4605      	mov	r5, r0
 8012f74:	d4e0      	bmi.n	8012f38 <_fflush_r+0xc>
 8012f76:	89a3      	ldrh	r3, [r4, #12]
 8012f78:	059b      	lsls	r3, r3, #22
 8012f7a:	d4dd      	bmi.n	8012f38 <_fflush_r+0xc>
 8012f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f7e:	f000 f908 	bl	8013192 <__retarget_lock_release_recursive>
 8012f82:	e7d9      	b.n	8012f38 <_fflush_r+0xc>
 8012f84:	4b05      	ldr	r3, [pc, #20]	; (8012f9c <_fflush_r+0x70>)
 8012f86:	429c      	cmp	r4, r3
 8012f88:	d101      	bne.n	8012f8e <_fflush_r+0x62>
 8012f8a:	68ac      	ldr	r4, [r5, #8]
 8012f8c:	e7df      	b.n	8012f4e <_fflush_r+0x22>
 8012f8e:	4b04      	ldr	r3, [pc, #16]	; (8012fa0 <_fflush_r+0x74>)
 8012f90:	429c      	cmp	r4, r3
 8012f92:	bf08      	it	eq
 8012f94:	68ec      	ldreq	r4, [r5, #12]
 8012f96:	e7da      	b.n	8012f4e <_fflush_r+0x22>
 8012f98:	0801474c 	.word	0x0801474c
 8012f9c:	0801476c 	.word	0x0801476c
 8012fa0:	0801472c 	.word	0x0801472c

08012fa4 <std>:
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	b510      	push	{r4, lr}
 8012fa8:	4604      	mov	r4, r0
 8012faa:	e9c0 3300 	strd	r3, r3, [r0]
 8012fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012fb2:	6083      	str	r3, [r0, #8]
 8012fb4:	8181      	strh	r1, [r0, #12]
 8012fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8012fb8:	81c2      	strh	r2, [r0, #14]
 8012fba:	6183      	str	r3, [r0, #24]
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	2208      	movs	r2, #8
 8012fc0:	305c      	adds	r0, #92	; 0x5c
 8012fc2:	f7fd fb5b 	bl	801067c <memset>
 8012fc6:	4b05      	ldr	r3, [pc, #20]	; (8012fdc <std+0x38>)
 8012fc8:	6263      	str	r3, [r4, #36]	; 0x24
 8012fca:	4b05      	ldr	r3, [pc, #20]	; (8012fe0 <std+0x3c>)
 8012fcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8012fce:	4b05      	ldr	r3, [pc, #20]	; (8012fe4 <std+0x40>)
 8012fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012fd2:	4b05      	ldr	r3, [pc, #20]	; (8012fe8 <std+0x44>)
 8012fd4:	6224      	str	r4, [r4, #32]
 8012fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8012fd8:	bd10      	pop	{r4, pc}
 8012fda:	bf00      	nop
 8012fdc:	080132f9 	.word	0x080132f9
 8012fe0:	0801331b 	.word	0x0801331b
 8012fe4:	08013353 	.word	0x08013353
 8012fe8:	08013377 	.word	0x08013377

08012fec <_cleanup_r>:
 8012fec:	4901      	ldr	r1, [pc, #4]	; (8012ff4 <_cleanup_r+0x8>)
 8012fee:	f000 b8af 	b.w	8013150 <_fwalk_reent>
 8012ff2:	bf00      	nop
 8012ff4:	08012f2d 	.word	0x08012f2d

08012ff8 <__sfmoreglue>:
 8012ff8:	b570      	push	{r4, r5, r6, lr}
 8012ffa:	2268      	movs	r2, #104	; 0x68
 8012ffc:	1e4d      	subs	r5, r1, #1
 8012ffe:	4355      	muls	r5, r2
 8013000:	460e      	mov	r6, r1
 8013002:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013006:	f7ff fa65 	bl	80124d4 <_malloc_r>
 801300a:	4604      	mov	r4, r0
 801300c:	b140      	cbz	r0, 8013020 <__sfmoreglue+0x28>
 801300e:	2100      	movs	r1, #0
 8013010:	e9c0 1600 	strd	r1, r6, [r0]
 8013014:	300c      	adds	r0, #12
 8013016:	60a0      	str	r0, [r4, #8]
 8013018:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801301c:	f7fd fb2e 	bl	801067c <memset>
 8013020:	4620      	mov	r0, r4
 8013022:	bd70      	pop	{r4, r5, r6, pc}

08013024 <__sfp_lock_acquire>:
 8013024:	4801      	ldr	r0, [pc, #4]	; (801302c <__sfp_lock_acquire+0x8>)
 8013026:	f000 b8b3 	b.w	8013190 <__retarget_lock_acquire_recursive>
 801302a:	bf00      	nop
 801302c:	20003239 	.word	0x20003239

08013030 <__sfp_lock_release>:
 8013030:	4801      	ldr	r0, [pc, #4]	; (8013038 <__sfp_lock_release+0x8>)
 8013032:	f000 b8ae 	b.w	8013192 <__retarget_lock_release_recursive>
 8013036:	bf00      	nop
 8013038:	20003239 	.word	0x20003239

0801303c <__sinit_lock_acquire>:
 801303c:	4801      	ldr	r0, [pc, #4]	; (8013044 <__sinit_lock_acquire+0x8>)
 801303e:	f000 b8a7 	b.w	8013190 <__retarget_lock_acquire_recursive>
 8013042:	bf00      	nop
 8013044:	2000323a 	.word	0x2000323a

08013048 <__sinit_lock_release>:
 8013048:	4801      	ldr	r0, [pc, #4]	; (8013050 <__sinit_lock_release+0x8>)
 801304a:	f000 b8a2 	b.w	8013192 <__retarget_lock_release_recursive>
 801304e:	bf00      	nop
 8013050:	2000323a 	.word	0x2000323a

08013054 <__sinit>:
 8013054:	b510      	push	{r4, lr}
 8013056:	4604      	mov	r4, r0
 8013058:	f7ff fff0 	bl	801303c <__sinit_lock_acquire>
 801305c:	69a3      	ldr	r3, [r4, #24]
 801305e:	b11b      	cbz	r3, 8013068 <__sinit+0x14>
 8013060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013064:	f7ff bff0 	b.w	8013048 <__sinit_lock_release>
 8013068:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801306c:	6523      	str	r3, [r4, #80]	; 0x50
 801306e:	4b13      	ldr	r3, [pc, #76]	; (80130bc <__sinit+0x68>)
 8013070:	4a13      	ldr	r2, [pc, #76]	; (80130c0 <__sinit+0x6c>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	62a2      	str	r2, [r4, #40]	; 0x28
 8013076:	42a3      	cmp	r3, r4
 8013078:	bf04      	itt	eq
 801307a:	2301      	moveq	r3, #1
 801307c:	61a3      	streq	r3, [r4, #24]
 801307e:	4620      	mov	r0, r4
 8013080:	f000 f820 	bl	80130c4 <__sfp>
 8013084:	6060      	str	r0, [r4, #4]
 8013086:	4620      	mov	r0, r4
 8013088:	f000 f81c 	bl	80130c4 <__sfp>
 801308c:	60a0      	str	r0, [r4, #8]
 801308e:	4620      	mov	r0, r4
 8013090:	f000 f818 	bl	80130c4 <__sfp>
 8013094:	2200      	movs	r2, #0
 8013096:	60e0      	str	r0, [r4, #12]
 8013098:	2104      	movs	r1, #4
 801309a:	6860      	ldr	r0, [r4, #4]
 801309c:	f7ff ff82 	bl	8012fa4 <std>
 80130a0:	68a0      	ldr	r0, [r4, #8]
 80130a2:	2201      	movs	r2, #1
 80130a4:	2109      	movs	r1, #9
 80130a6:	f7ff ff7d 	bl	8012fa4 <std>
 80130aa:	68e0      	ldr	r0, [r4, #12]
 80130ac:	2202      	movs	r2, #2
 80130ae:	2112      	movs	r1, #18
 80130b0:	f7ff ff78 	bl	8012fa4 <std>
 80130b4:	2301      	movs	r3, #1
 80130b6:	61a3      	str	r3, [r4, #24]
 80130b8:	e7d2      	b.n	8013060 <__sinit+0xc>
 80130ba:	bf00      	nop
 80130bc:	080143b4 	.word	0x080143b4
 80130c0:	08012fed 	.word	0x08012fed

080130c4 <__sfp>:
 80130c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c6:	4607      	mov	r7, r0
 80130c8:	f7ff ffac 	bl	8013024 <__sfp_lock_acquire>
 80130cc:	4b1e      	ldr	r3, [pc, #120]	; (8013148 <__sfp+0x84>)
 80130ce:	681e      	ldr	r6, [r3, #0]
 80130d0:	69b3      	ldr	r3, [r6, #24]
 80130d2:	b913      	cbnz	r3, 80130da <__sfp+0x16>
 80130d4:	4630      	mov	r0, r6
 80130d6:	f7ff ffbd 	bl	8013054 <__sinit>
 80130da:	3648      	adds	r6, #72	; 0x48
 80130dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80130e0:	3b01      	subs	r3, #1
 80130e2:	d503      	bpl.n	80130ec <__sfp+0x28>
 80130e4:	6833      	ldr	r3, [r6, #0]
 80130e6:	b30b      	cbz	r3, 801312c <__sfp+0x68>
 80130e8:	6836      	ldr	r6, [r6, #0]
 80130ea:	e7f7      	b.n	80130dc <__sfp+0x18>
 80130ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80130f0:	b9d5      	cbnz	r5, 8013128 <__sfp+0x64>
 80130f2:	4b16      	ldr	r3, [pc, #88]	; (801314c <__sfp+0x88>)
 80130f4:	60e3      	str	r3, [r4, #12]
 80130f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80130fa:	6665      	str	r5, [r4, #100]	; 0x64
 80130fc:	f000 f847 	bl	801318e <__retarget_lock_init_recursive>
 8013100:	f7ff ff96 	bl	8013030 <__sfp_lock_release>
 8013104:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013108:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801310c:	6025      	str	r5, [r4, #0]
 801310e:	61a5      	str	r5, [r4, #24]
 8013110:	2208      	movs	r2, #8
 8013112:	4629      	mov	r1, r5
 8013114:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013118:	f7fd fab0 	bl	801067c <memset>
 801311c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013120:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013124:	4620      	mov	r0, r4
 8013126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013128:	3468      	adds	r4, #104	; 0x68
 801312a:	e7d9      	b.n	80130e0 <__sfp+0x1c>
 801312c:	2104      	movs	r1, #4
 801312e:	4638      	mov	r0, r7
 8013130:	f7ff ff62 	bl	8012ff8 <__sfmoreglue>
 8013134:	4604      	mov	r4, r0
 8013136:	6030      	str	r0, [r6, #0]
 8013138:	2800      	cmp	r0, #0
 801313a:	d1d5      	bne.n	80130e8 <__sfp+0x24>
 801313c:	f7ff ff78 	bl	8013030 <__sfp_lock_release>
 8013140:	230c      	movs	r3, #12
 8013142:	603b      	str	r3, [r7, #0]
 8013144:	e7ee      	b.n	8013124 <__sfp+0x60>
 8013146:	bf00      	nop
 8013148:	080143b4 	.word	0x080143b4
 801314c:	ffff0001 	.word	0xffff0001

08013150 <_fwalk_reent>:
 8013150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013154:	4606      	mov	r6, r0
 8013156:	4688      	mov	r8, r1
 8013158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801315c:	2700      	movs	r7, #0
 801315e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013162:	f1b9 0901 	subs.w	r9, r9, #1
 8013166:	d505      	bpl.n	8013174 <_fwalk_reent+0x24>
 8013168:	6824      	ldr	r4, [r4, #0]
 801316a:	2c00      	cmp	r4, #0
 801316c:	d1f7      	bne.n	801315e <_fwalk_reent+0xe>
 801316e:	4638      	mov	r0, r7
 8013170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013174:	89ab      	ldrh	r3, [r5, #12]
 8013176:	2b01      	cmp	r3, #1
 8013178:	d907      	bls.n	801318a <_fwalk_reent+0x3a>
 801317a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801317e:	3301      	adds	r3, #1
 8013180:	d003      	beq.n	801318a <_fwalk_reent+0x3a>
 8013182:	4629      	mov	r1, r5
 8013184:	4630      	mov	r0, r6
 8013186:	47c0      	blx	r8
 8013188:	4307      	orrs	r7, r0
 801318a:	3568      	adds	r5, #104	; 0x68
 801318c:	e7e9      	b.n	8013162 <_fwalk_reent+0x12>

0801318e <__retarget_lock_init_recursive>:
 801318e:	4770      	bx	lr

08013190 <__retarget_lock_acquire_recursive>:
 8013190:	4770      	bx	lr

08013192 <__retarget_lock_release_recursive>:
 8013192:	4770      	bx	lr

08013194 <__swhatbuf_r>:
 8013194:	b570      	push	{r4, r5, r6, lr}
 8013196:	460e      	mov	r6, r1
 8013198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801319c:	2900      	cmp	r1, #0
 801319e:	b096      	sub	sp, #88	; 0x58
 80131a0:	4614      	mov	r4, r2
 80131a2:	461d      	mov	r5, r3
 80131a4:	da08      	bge.n	80131b8 <__swhatbuf_r+0x24>
 80131a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80131aa:	2200      	movs	r2, #0
 80131ac:	602a      	str	r2, [r5, #0]
 80131ae:	061a      	lsls	r2, r3, #24
 80131b0:	d410      	bmi.n	80131d4 <__swhatbuf_r+0x40>
 80131b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131b6:	e00e      	b.n	80131d6 <__swhatbuf_r+0x42>
 80131b8:	466a      	mov	r2, sp
 80131ba:	f000 f903 	bl	80133c4 <_fstat_r>
 80131be:	2800      	cmp	r0, #0
 80131c0:	dbf1      	blt.n	80131a6 <__swhatbuf_r+0x12>
 80131c2:	9a01      	ldr	r2, [sp, #4]
 80131c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80131c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80131cc:	425a      	negs	r2, r3
 80131ce:	415a      	adcs	r2, r3
 80131d0:	602a      	str	r2, [r5, #0]
 80131d2:	e7ee      	b.n	80131b2 <__swhatbuf_r+0x1e>
 80131d4:	2340      	movs	r3, #64	; 0x40
 80131d6:	2000      	movs	r0, #0
 80131d8:	6023      	str	r3, [r4, #0]
 80131da:	b016      	add	sp, #88	; 0x58
 80131dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080131e0 <__smakebuf_r>:
 80131e0:	898b      	ldrh	r3, [r1, #12]
 80131e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80131e4:	079d      	lsls	r5, r3, #30
 80131e6:	4606      	mov	r6, r0
 80131e8:	460c      	mov	r4, r1
 80131ea:	d507      	bpl.n	80131fc <__smakebuf_r+0x1c>
 80131ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80131f0:	6023      	str	r3, [r4, #0]
 80131f2:	6123      	str	r3, [r4, #16]
 80131f4:	2301      	movs	r3, #1
 80131f6:	6163      	str	r3, [r4, #20]
 80131f8:	b002      	add	sp, #8
 80131fa:	bd70      	pop	{r4, r5, r6, pc}
 80131fc:	ab01      	add	r3, sp, #4
 80131fe:	466a      	mov	r2, sp
 8013200:	f7ff ffc8 	bl	8013194 <__swhatbuf_r>
 8013204:	9900      	ldr	r1, [sp, #0]
 8013206:	4605      	mov	r5, r0
 8013208:	4630      	mov	r0, r6
 801320a:	f7ff f963 	bl	80124d4 <_malloc_r>
 801320e:	b948      	cbnz	r0, 8013224 <__smakebuf_r+0x44>
 8013210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013214:	059a      	lsls	r2, r3, #22
 8013216:	d4ef      	bmi.n	80131f8 <__smakebuf_r+0x18>
 8013218:	f023 0303 	bic.w	r3, r3, #3
 801321c:	f043 0302 	orr.w	r3, r3, #2
 8013220:	81a3      	strh	r3, [r4, #12]
 8013222:	e7e3      	b.n	80131ec <__smakebuf_r+0xc>
 8013224:	4b0d      	ldr	r3, [pc, #52]	; (801325c <__smakebuf_r+0x7c>)
 8013226:	62b3      	str	r3, [r6, #40]	; 0x28
 8013228:	89a3      	ldrh	r3, [r4, #12]
 801322a:	6020      	str	r0, [r4, #0]
 801322c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013230:	81a3      	strh	r3, [r4, #12]
 8013232:	9b00      	ldr	r3, [sp, #0]
 8013234:	6163      	str	r3, [r4, #20]
 8013236:	9b01      	ldr	r3, [sp, #4]
 8013238:	6120      	str	r0, [r4, #16]
 801323a:	b15b      	cbz	r3, 8013254 <__smakebuf_r+0x74>
 801323c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013240:	4630      	mov	r0, r6
 8013242:	f000 f8d1 	bl	80133e8 <_isatty_r>
 8013246:	b128      	cbz	r0, 8013254 <__smakebuf_r+0x74>
 8013248:	89a3      	ldrh	r3, [r4, #12]
 801324a:	f023 0303 	bic.w	r3, r3, #3
 801324e:	f043 0301 	orr.w	r3, r3, #1
 8013252:	81a3      	strh	r3, [r4, #12]
 8013254:	89a0      	ldrh	r0, [r4, #12]
 8013256:	4305      	orrs	r5, r0
 8013258:	81a5      	strh	r5, [r4, #12]
 801325a:	e7cd      	b.n	80131f8 <__smakebuf_r+0x18>
 801325c:	08012fed 	.word	0x08012fed

08013260 <_malloc_usable_size_r>:
 8013260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013264:	1f18      	subs	r0, r3, #4
 8013266:	2b00      	cmp	r3, #0
 8013268:	bfbc      	itt	lt
 801326a:	580b      	ldrlt	r3, [r1, r0]
 801326c:	18c0      	addlt	r0, r0, r3
 801326e:	4770      	bx	lr

08013270 <_raise_r>:
 8013270:	291f      	cmp	r1, #31
 8013272:	b538      	push	{r3, r4, r5, lr}
 8013274:	4604      	mov	r4, r0
 8013276:	460d      	mov	r5, r1
 8013278:	d904      	bls.n	8013284 <_raise_r+0x14>
 801327a:	2316      	movs	r3, #22
 801327c:	6003      	str	r3, [r0, #0]
 801327e:	f04f 30ff 	mov.w	r0, #4294967295
 8013282:	bd38      	pop	{r3, r4, r5, pc}
 8013284:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013286:	b112      	cbz	r2, 801328e <_raise_r+0x1e>
 8013288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801328c:	b94b      	cbnz	r3, 80132a2 <_raise_r+0x32>
 801328e:	4620      	mov	r0, r4
 8013290:	f000 f830 	bl	80132f4 <_getpid_r>
 8013294:	462a      	mov	r2, r5
 8013296:	4601      	mov	r1, r0
 8013298:	4620      	mov	r0, r4
 801329a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801329e:	f000 b817 	b.w	80132d0 <_kill_r>
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d00a      	beq.n	80132bc <_raise_r+0x4c>
 80132a6:	1c59      	adds	r1, r3, #1
 80132a8:	d103      	bne.n	80132b2 <_raise_r+0x42>
 80132aa:	2316      	movs	r3, #22
 80132ac:	6003      	str	r3, [r0, #0]
 80132ae:	2001      	movs	r0, #1
 80132b0:	e7e7      	b.n	8013282 <_raise_r+0x12>
 80132b2:	2400      	movs	r4, #0
 80132b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80132b8:	4628      	mov	r0, r5
 80132ba:	4798      	blx	r3
 80132bc:	2000      	movs	r0, #0
 80132be:	e7e0      	b.n	8013282 <_raise_r+0x12>

080132c0 <raise>:
 80132c0:	4b02      	ldr	r3, [pc, #8]	; (80132cc <raise+0xc>)
 80132c2:	4601      	mov	r1, r0
 80132c4:	6818      	ldr	r0, [r3, #0]
 80132c6:	f7ff bfd3 	b.w	8013270 <_raise_r>
 80132ca:	bf00      	nop
 80132cc:	2000002c 	.word	0x2000002c

080132d0 <_kill_r>:
 80132d0:	b538      	push	{r3, r4, r5, lr}
 80132d2:	4d07      	ldr	r5, [pc, #28]	; (80132f0 <_kill_r+0x20>)
 80132d4:	2300      	movs	r3, #0
 80132d6:	4604      	mov	r4, r0
 80132d8:	4608      	mov	r0, r1
 80132da:	4611      	mov	r1, r2
 80132dc:	602b      	str	r3, [r5, #0]
 80132de:	f7f1 fb3d 	bl	800495c <_kill>
 80132e2:	1c43      	adds	r3, r0, #1
 80132e4:	d102      	bne.n	80132ec <_kill_r+0x1c>
 80132e6:	682b      	ldr	r3, [r5, #0]
 80132e8:	b103      	cbz	r3, 80132ec <_kill_r+0x1c>
 80132ea:	6023      	str	r3, [r4, #0]
 80132ec:	bd38      	pop	{r3, r4, r5, pc}
 80132ee:	bf00      	nop
 80132f0:	20003234 	.word	0x20003234

080132f4 <_getpid_r>:
 80132f4:	f7f1 bb2a 	b.w	800494c <_getpid>

080132f8 <__sread>:
 80132f8:	b510      	push	{r4, lr}
 80132fa:	460c      	mov	r4, r1
 80132fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013300:	f000 f894 	bl	801342c <_read_r>
 8013304:	2800      	cmp	r0, #0
 8013306:	bfab      	itete	ge
 8013308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801330a:	89a3      	ldrhlt	r3, [r4, #12]
 801330c:	181b      	addge	r3, r3, r0
 801330e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013312:	bfac      	ite	ge
 8013314:	6563      	strge	r3, [r4, #84]	; 0x54
 8013316:	81a3      	strhlt	r3, [r4, #12]
 8013318:	bd10      	pop	{r4, pc}

0801331a <__swrite>:
 801331a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801331e:	461f      	mov	r7, r3
 8013320:	898b      	ldrh	r3, [r1, #12]
 8013322:	05db      	lsls	r3, r3, #23
 8013324:	4605      	mov	r5, r0
 8013326:	460c      	mov	r4, r1
 8013328:	4616      	mov	r6, r2
 801332a:	d505      	bpl.n	8013338 <__swrite+0x1e>
 801332c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013330:	2302      	movs	r3, #2
 8013332:	2200      	movs	r2, #0
 8013334:	f000 f868 	bl	8013408 <_lseek_r>
 8013338:	89a3      	ldrh	r3, [r4, #12]
 801333a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801333e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013342:	81a3      	strh	r3, [r4, #12]
 8013344:	4632      	mov	r2, r6
 8013346:	463b      	mov	r3, r7
 8013348:	4628      	mov	r0, r5
 801334a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801334e:	f000 b817 	b.w	8013380 <_write_r>

08013352 <__sseek>:
 8013352:	b510      	push	{r4, lr}
 8013354:	460c      	mov	r4, r1
 8013356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801335a:	f000 f855 	bl	8013408 <_lseek_r>
 801335e:	1c43      	adds	r3, r0, #1
 8013360:	89a3      	ldrh	r3, [r4, #12]
 8013362:	bf15      	itete	ne
 8013364:	6560      	strne	r0, [r4, #84]	; 0x54
 8013366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801336a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801336e:	81a3      	strheq	r3, [r4, #12]
 8013370:	bf18      	it	ne
 8013372:	81a3      	strhne	r3, [r4, #12]
 8013374:	bd10      	pop	{r4, pc}

08013376 <__sclose>:
 8013376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801337a:	f000 b813 	b.w	80133a4 <_close_r>
	...

08013380 <_write_r>:
 8013380:	b538      	push	{r3, r4, r5, lr}
 8013382:	4d07      	ldr	r5, [pc, #28]	; (80133a0 <_write_r+0x20>)
 8013384:	4604      	mov	r4, r0
 8013386:	4608      	mov	r0, r1
 8013388:	4611      	mov	r1, r2
 801338a:	2200      	movs	r2, #0
 801338c:	602a      	str	r2, [r5, #0]
 801338e:	461a      	mov	r2, r3
 8013390:	f7f1 fb1b 	bl	80049ca <_write>
 8013394:	1c43      	adds	r3, r0, #1
 8013396:	d102      	bne.n	801339e <_write_r+0x1e>
 8013398:	682b      	ldr	r3, [r5, #0]
 801339a:	b103      	cbz	r3, 801339e <_write_r+0x1e>
 801339c:	6023      	str	r3, [r4, #0]
 801339e:	bd38      	pop	{r3, r4, r5, pc}
 80133a0:	20003234 	.word	0x20003234

080133a4 <_close_r>:
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	4d06      	ldr	r5, [pc, #24]	; (80133c0 <_close_r+0x1c>)
 80133a8:	2300      	movs	r3, #0
 80133aa:	4604      	mov	r4, r0
 80133ac:	4608      	mov	r0, r1
 80133ae:	602b      	str	r3, [r5, #0]
 80133b0:	f7f1 fb27 	bl	8004a02 <_close>
 80133b4:	1c43      	adds	r3, r0, #1
 80133b6:	d102      	bne.n	80133be <_close_r+0x1a>
 80133b8:	682b      	ldr	r3, [r5, #0]
 80133ba:	b103      	cbz	r3, 80133be <_close_r+0x1a>
 80133bc:	6023      	str	r3, [r4, #0]
 80133be:	bd38      	pop	{r3, r4, r5, pc}
 80133c0:	20003234 	.word	0x20003234

080133c4 <_fstat_r>:
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	4d07      	ldr	r5, [pc, #28]	; (80133e4 <_fstat_r+0x20>)
 80133c8:	2300      	movs	r3, #0
 80133ca:	4604      	mov	r4, r0
 80133cc:	4608      	mov	r0, r1
 80133ce:	4611      	mov	r1, r2
 80133d0:	602b      	str	r3, [r5, #0]
 80133d2:	f7f1 fb22 	bl	8004a1a <_fstat>
 80133d6:	1c43      	adds	r3, r0, #1
 80133d8:	d102      	bne.n	80133e0 <_fstat_r+0x1c>
 80133da:	682b      	ldr	r3, [r5, #0]
 80133dc:	b103      	cbz	r3, 80133e0 <_fstat_r+0x1c>
 80133de:	6023      	str	r3, [r4, #0]
 80133e0:	bd38      	pop	{r3, r4, r5, pc}
 80133e2:	bf00      	nop
 80133e4:	20003234 	.word	0x20003234

080133e8 <_isatty_r>:
 80133e8:	b538      	push	{r3, r4, r5, lr}
 80133ea:	4d06      	ldr	r5, [pc, #24]	; (8013404 <_isatty_r+0x1c>)
 80133ec:	2300      	movs	r3, #0
 80133ee:	4604      	mov	r4, r0
 80133f0:	4608      	mov	r0, r1
 80133f2:	602b      	str	r3, [r5, #0]
 80133f4:	f7f1 fb21 	bl	8004a3a <_isatty>
 80133f8:	1c43      	adds	r3, r0, #1
 80133fa:	d102      	bne.n	8013402 <_isatty_r+0x1a>
 80133fc:	682b      	ldr	r3, [r5, #0]
 80133fe:	b103      	cbz	r3, 8013402 <_isatty_r+0x1a>
 8013400:	6023      	str	r3, [r4, #0]
 8013402:	bd38      	pop	{r3, r4, r5, pc}
 8013404:	20003234 	.word	0x20003234

08013408 <_lseek_r>:
 8013408:	b538      	push	{r3, r4, r5, lr}
 801340a:	4d07      	ldr	r5, [pc, #28]	; (8013428 <_lseek_r+0x20>)
 801340c:	4604      	mov	r4, r0
 801340e:	4608      	mov	r0, r1
 8013410:	4611      	mov	r1, r2
 8013412:	2200      	movs	r2, #0
 8013414:	602a      	str	r2, [r5, #0]
 8013416:	461a      	mov	r2, r3
 8013418:	f7f1 fb1a 	bl	8004a50 <_lseek>
 801341c:	1c43      	adds	r3, r0, #1
 801341e:	d102      	bne.n	8013426 <_lseek_r+0x1e>
 8013420:	682b      	ldr	r3, [r5, #0]
 8013422:	b103      	cbz	r3, 8013426 <_lseek_r+0x1e>
 8013424:	6023      	str	r3, [r4, #0]
 8013426:	bd38      	pop	{r3, r4, r5, pc}
 8013428:	20003234 	.word	0x20003234

0801342c <_read_r>:
 801342c:	b538      	push	{r3, r4, r5, lr}
 801342e:	4d07      	ldr	r5, [pc, #28]	; (801344c <_read_r+0x20>)
 8013430:	4604      	mov	r4, r0
 8013432:	4608      	mov	r0, r1
 8013434:	4611      	mov	r1, r2
 8013436:	2200      	movs	r2, #0
 8013438:	602a      	str	r2, [r5, #0]
 801343a:	461a      	mov	r2, r3
 801343c:	f7f1 faa8 	bl	8004990 <_read>
 8013440:	1c43      	adds	r3, r0, #1
 8013442:	d102      	bne.n	801344a <_read_r+0x1e>
 8013444:	682b      	ldr	r3, [r5, #0]
 8013446:	b103      	cbz	r3, 801344a <_read_r+0x1e>
 8013448:	6023      	str	r3, [r4, #0]
 801344a:	bd38      	pop	{r3, r4, r5, pc}
 801344c:	20003234 	.word	0x20003234

08013450 <_init>:
 8013450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013452:	bf00      	nop
 8013454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013456:	bc08      	pop	{r3}
 8013458:	469e      	mov	lr, r3
 801345a:	4770      	bx	lr

0801345c <_fini>:
 801345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801345e:	bf00      	nop
 8013460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013462:	bc08      	pop	{r3}
 8013464:	469e      	mov	lr, r3
 8013466:	4770      	bx	lr
